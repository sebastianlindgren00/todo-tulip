import {
  twMerge
} from "./chunk-LMQFHTUN.js";
import "./chunk-YV2YLO3I.js";
import {
  append,
  comment,
  component,
  hmr,
  if_block,
  prop,
  rest_props,
  set_attribute,
  set_attributes,
  spread_props,
  svg_template,
  validate_dynamic_component,
  validate_prop_bindings
} from "./chunk-KWW3PK7Z.js";
import {
  child,
  first_child,
  get,
  getContext,
  mark_module_end,
  mark_module_start,
  pop,
  push,
  render_effect,
  set,
  set_text,
  sibling,
  source,
  user_effect
} from "./chunk-FSMH6D6K.js";
import "./chunk-FCK544W4.js";
import "./chunk-ZIHMLYFO.js";
import {
  validate_component
} from "./chunk-76O4YZNF.js";
import "./chunk-PLGELRID.js";
import "./chunk-DT6VC44C.js";
import "./chunk-JEIFYAHZ.js";
import "./chunk-HLATIPCS.js";

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/AddressBookOutline.svelte
mark_module_start();
var root_2 = svg_template(`<title> </title>`);
var root_3 = svg_template(`<desc> </desc>`);
var root_1 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M7 6H5m2 3H5m2 3H5m2 3H5m2 3H5m11-1a2 2 0 0 0-2-2h-2a2 2 0 0 0-2 2M7 3h11a1 1 0 0 1 1 1v16a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1Zm8 7a2 2 0 1 1-4 0 2 2 0 0 1 4 0Z"></path></svg>`);
var root_5 = svg_template(`<title> </title>`);
var root_6 = svg_template(`<desc> </desc>`);
var root_4 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M7 6H5m2 3H5m2 3H5m2 3H5m2 3H5m11-1a2 2 0 0 0-2-2h-2a2 2 0 0 0-2 2M7 3h11a1 1 0 0 1 1 1v16a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1Zm8 7a2 2 0 1 1-4 0 2 2 0 0 1 4 0Z"></path></svg>`);
function AddressBookOutline($$anchor, $$props) {
  if (new.target === AddressBookOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, AddressBookOutline);
  validate_prop_bindings($$props, [], [], AddressBookOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "address book outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(AddressBookOutline);
  AddressBookOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var AddressBookOutline_default = AddressBookOutline;
AddressBookOutline.filename = ".../flowbite-svelte-icons/dist/AddressBookOutline.svelte";
mark_module_end(AddressBookOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/AddressBookSolid.svelte
mark_module_start();
var root_22 = svg_template(`<title> </title>`);
var root_32 = svg_template(`<desc> </desc>`);
var root_12 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M7 2a2 2 0 0 0-2 2v1a1 1 0 0 0 0 2v1a1 1 0 0 0 0 2v1a1 1 0 1 0 0 2v1a1 1 0 1 0 0 2v1a1 1 0 1 0 0 2v1a2 2 0 0 0 2 2h11a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H7Zm3 8a3 3 0 1 1 6 0 3 3 0 0 1-6 0Zm-1 7a3 3 0 0 1 3-3h2a3 3 0 0 1 3 3 1 1 0 0 1-1 1h-6a1 1 0 0 1-1-1Z" clip-rule="evenodd"></path></svg>`);
var root_52 = svg_template(`<title> </title>`);
var root_62 = svg_template(`<desc> </desc>`);
var root_42 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M7 2a2 2 0 0 0-2 2v1a1 1 0 0 0 0 2v1a1 1 0 0 0 0 2v1a1 1 0 1 0 0 2v1a1 1 0 1 0 0 2v1a1 1 0 1 0 0 2v1a2 2 0 0 0 2 2h11a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H7Zm3 8a3 3 0 1 1 6 0 3 3 0 0 1-6 0Zm-1 7a3 3 0 0 1 3-3h2a3 3 0 0 1 3 3 1 1 0 0 1-1 1h-6a1 1 0 0 1-1-1Z" clip-rule="evenodd"></path></svg>`);
function AddressBookSolid($$anchor, $$props) {
  if (new.target === AddressBookSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, AddressBookSolid);
  validate_prop_bindings($$props, [], [], AddressBookSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "address book solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_12();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_22();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_32();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_42();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_52();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_62();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(AddressBookSolid);
  AddressBookSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var AddressBookSolid_default = AddressBookSolid;
AddressBookSolid.filename = ".../flowbite-svelte-icons/dist/AddressBookSolid.svelte";
mark_module_end(AddressBookSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/AdjustmentsHorizontalOutline.svelte
mark_module_start();
var root_23 = svg_template(`<title> </title>`);
var root_33 = svg_template(`<desc> </desc>`);
var root_13 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" d="M20 6H10m0 0a2 2 0 1 0-4 0m4 0a2 2 0 1 1-4 0m0 0H4m16 6h-2m0 0a2 2 0 1 0-4 0m4 0a2 2 0 1 1-4 0m0 0H4m16 6H10m0 0a2 2 0 1 0-4 0m4 0a2 2 0 1 1-4 0m0 0H4"></path></svg>`);
var root_53 = svg_template(`<title> </title>`);
var root_63 = svg_template(`<desc> </desc>`);
var root_43 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" d="M20 6H10m0 0a2 2 0 1 0-4 0m4 0a2 2 0 1 1-4 0m0 0H4m16 6h-2m0 0a2 2 0 1 0-4 0m4 0a2 2 0 1 1-4 0m0 0H4m16 6H10m0 0a2 2 0 1 0-4 0m4 0a2 2 0 1 1-4 0m0 0H4"></path></svg>`);
function AdjustmentsHorizontalOutline($$anchor, $$props) {
  if (new.target === AdjustmentsHorizontalOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, AdjustmentsHorizontalOutline);
  validate_prop_bindings($$props, [], [], AdjustmentsHorizontalOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "adjustments horizontal outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_13();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_23();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_33();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_43();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_53();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_63();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(AdjustmentsHorizontalOutline);
  AdjustmentsHorizontalOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var AdjustmentsHorizontalOutline_default = AdjustmentsHorizontalOutline;
AdjustmentsHorizontalOutline.filename = ".../flowbite-svelte-icons/dist/AdjustmentsHorizontalOutline.svelte";
mark_module_end(AdjustmentsHorizontalOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/AdjustmentsHorizontalSolid.svelte
mark_module_start();
var root_24 = svg_template(`<title> </title>`);
var root_34 = svg_template(`<desc> </desc>`);
var root_14 = svg_template(`<svg><!><!><path d="M10.83 5a3.001 3.001 0 0 0-5.66 0H4a1 1 0 1 0 0 2h1.17a3.001 3.001 0 0 0 5.66 0H20a1 1 0 1 0 0-2h-9.17ZM4 11h9.17a3.001 3.001 0 0 1 5.66 0H20a1 1 0 1 1 0 2h-1.17a3.001 3.001 0 0 1-5.66 0H4a1 1 0 1 1 0-2Zm1.17 6H4a1 1 0 1 0 0 2h1.17a3.001 3.001 0 0 0 5.66 0H20a1 1 0 1 0 0-2h-9.17a3.001 3.001 0 0 0-5.66 0Z"></path></svg>`);
var root_54 = svg_template(`<title> </title>`);
var root_64 = svg_template(`<desc> </desc>`);
var root_44 = svg_template(`<svg><!><!><path d="M10.83 5a3.001 3.001 0 0 0-5.66 0H4a1 1 0 1 0 0 2h1.17a3.001 3.001 0 0 0 5.66 0H20a1 1 0 1 0 0-2h-9.17ZM4 11h9.17a3.001 3.001 0 0 1 5.66 0H20a1 1 0 1 1 0 2h-1.17a3.001 3.001 0 0 1-5.66 0H4a1 1 0 1 1 0-2Zm1.17 6H4a1 1 0 1 0 0 2h1.17a3.001 3.001 0 0 0 5.66 0H20a1 1 0 1 0 0-2h-9.17a3.001 3.001 0 0 0-5.66 0Z"></path></svg>`);
function AdjustmentsHorizontalSolid($$anchor, $$props) {
  if (new.target === AdjustmentsHorizontalSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, AdjustmentsHorizontalSolid);
  validate_prop_bindings($$props, [], [], AdjustmentsHorizontalSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "adjustments horizontal solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_14();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_24();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_34();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_44();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_54();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_64();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(AdjustmentsHorizontalSolid);
  AdjustmentsHorizontalSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var AdjustmentsHorizontalSolid_default = AdjustmentsHorizontalSolid;
AdjustmentsHorizontalSolid.filename = ".../flowbite-svelte-icons/dist/AdjustmentsHorizontalSolid.svelte";
mark_module_end(AdjustmentsHorizontalSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/AdjustmentsVerticalOutline.svelte
mark_module_start();
var root_25 = svg_template(`<title> </title>`);
var root_35 = svg_template(`<desc> </desc>`);
var root_15 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" d="M6 4v10m0 0a2 2 0 1 0 0 4m0-4a2 2 0 1 1 0 4m0 0v2m6-16v2m0 0a2 2 0 1 0 0 4m0-4a2 2 0 1 1 0 4m0 0v10m6-16v10m0 0a2 2 0 1 0 0 4m0-4a2 2 0 1 1 0 4m0 0v2"></path></svg>`);
var root_55 = svg_template(`<title> </title>`);
var root_65 = svg_template(`<desc> </desc>`);
var root_45 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" d="M6 4v10m0 0a2 2 0 1 0 0 4m0-4a2 2 0 1 1 0 4m0 0v2m6-16v2m0 0a2 2 0 1 0 0 4m0-4a2 2 0 1 1 0 4m0 0v10m6-16v10m0 0a2 2 0 1 0 0 4m0-4a2 2 0 1 1 0 4m0 0v2"></path></svg>`);
function AdjustmentsVerticalOutline($$anchor, $$props) {
  if (new.target === AdjustmentsVerticalOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, AdjustmentsVerticalOutline);
  validate_prop_bindings($$props, [], [], AdjustmentsVerticalOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "adjustments vertical outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_15();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_25();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_35();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_45();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_55();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_65();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(AdjustmentsVerticalOutline);
  AdjustmentsVerticalOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var AdjustmentsVerticalOutline_default = AdjustmentsVerticalOutline;
AdjustmentsVerticalOutline.filename = ".../flowbite-svelte-icons/dist/AdjustmentsVerticalOutline.svelte";
mark_module_end(AdjustmentsVerticalOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/AdjustmentsVerticalSolid.svelte
mark_module_start();
var root_26 = svg_template(`<title> </title>`);
var root_36 = svg_template(`<desc> </desc>`);
var root_16 = svg_template(`<svg><!><!><path d="M5 13.17a3.001 3.001 0 0 0 0 5.66V20a1 1 0 1 0 2 0v-1.17a3.001 3.001 0 0 0 0-5.66V4a1 1 0 0 0-2 0v9.17ZM11 20v-9.17a3.001 3.001 0 0 1 0-5.66V4a1 1 0 1 1 2 0v1.17a3.001 3.001 0 0 1 0 5.66V20a1 1 0 1 1-2 0Zm6-1.17V20a1 1 0 1 0 2 0v-1.17a3.001 3.001 0 0 0 0-5.66V4a1 1 0 1 0-2 0v9.17a3.001 3.001 0 0 0 0 5.66Z"></path></svg>`);
var root_56 = svg_template(`<title> </title>`);
var root_66 = svg_template(`<desc> </desc>`);
var root_46 = svg_template(`<svg><!><!><path d="M5 13.17a3.001 3.001 0 0 0 0 5.66V20a1 1 0 1 0 2 0v-1.17a3.001 3.001 0 0 0 0-5.66V4a1 1 0 0 0-2 0v9.17ZM11 20v-9.17a3.001 3.001 0 0 1 0-5.66V4a1 1 0 1 1 2 0v1.17a3.001 3.001 0 0 1 0 5.66V20a1 1 0 1 1-2 0Zm6-1.17V20a1 1 0 1 0 2 0v-1.17a3.001 3.001 0 0 0 0-5.66V4a1 1 0 1 0-2 0v9.17a3.001 3.001 0 0 0 0 5.66Z"></path></svg>`);
function AdjustmentsVerticalSolid($$anchor, $$props) {
  if (new.target === AdjustmentsVerticalSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, AdjustmentsVerticalSolid);
  validate_prop_bindings($$props, [], [], AdjustmentsVerticalSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "adjustments vertical solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_16();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_26();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_36();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_46();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_56();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_66();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(AdjustmentsVerticalSolid);
  AdjustmentsVerticalSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var AdjustmentsVerticalSolid_default = AdjustmentsVerticalSolid;
AdjustmentsVerticalSolid.filename = ".../flowbite-svelte-icons/dist/AdjustmentsVerticalSolid.svelte";
mark_module_end(AdjustmentsVerticalSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/AlignCenterOutline.svelte
mark_module_start();
var root_27 = svg_template(`<title> </title>`);
var root_37 = svg_template(`<desc> </desc>`);
var root_17 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M8 6h8M6 10h12M8 14h8M6 18h12"></path></svg>`);
var root_57 = svg_template(`<title> </title>`);
var root_67 = svg_template(`<desc> </desc>`);
var root_47 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M8 6h8M6 10h12M8 14h8M6 18h12"></path></svg>`);
function AlignCenterOutline($$anchor, $$props) {
  if (new.target === AlignCenterOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, AlignCenterOutline);
  validate_prop_bindings($$props, [], [], AlignCenterOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "align center outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_17();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_27();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_37();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_47();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_57();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_67();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(AlignCenterOutline);
  AlignCenterOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var AlignCenterOutline_default = AlignCenterOutline;
AlignCenterOutline.filename = ".../flowbite-svelte-icons/dist/AlignCenterOutline.svelte";
mark_module_end(AlignCenterOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/AngleDownOutline.svelte
mark_module_start();
var root_28 = svg_template(`<title> </title>`);
var root_38 = svg_template(`<desc> </desc>`);
var root_18 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m19 9-7 7-7-7"></path></svg>`);
var root_58 = svg_template(`<title> </title>`);
var root_68 = svg_template(`<desc> </desc>`);
var root_48 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m19 9-7 7-7-7"></path></svg>`);
function AngleDownOutline($$anchor, $$props) {
  if (new.target === AngleDownOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, AngleDownOutline);
  validate_prop_bindings($$props, [], [], AngleDownOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "angle down outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_18();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_28();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_38();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_48();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_58();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_68();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(AngleDownOutline);
  AngleDownOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var AngleDownOutline_default = AngleDownOutline;
AngleDownOutline.filename = ".../flowbite-svelte-icons/dist/AngleDownOutline.svelte";
mark_module_end(AngleDownOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/AngleLeftOutline.svelte
mark_module_start();
var root_29 = svg_template(`<title> </title>`);
var root_39 = svg_template(`<desc> </desc>`);
var root_19 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m15 19-7-7 7-7"></path></svg>`);
var root_59 = svg_template(`<title> </title>`);
var root_69 = svg_template(`<desc> </desc>`);
var root_49 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m15 19-7-7 7-7"></path></svg>`);
function AngleLeftOutline($$anchor, $$props) {
  if (new.target === AngleLeftOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, AngleLeftOutline);
  validate_prop_bindings($$props, [], [], AngleLeftOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "angle left outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_19();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_29();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_39();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_49();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_59();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_69();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(AngleLeftOutline);
  AngleLeftOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var AngleLeftOutline_default = AngleLeftOutline;
AngleLeftOutline.filename = ".../flowbite-svelte-icons/dist/AngleLeftOutline.svelte";
mark_module_end(AngleLeftOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/AngleRightOutline.svelte
mark_module_start();
var root_210 = svg_template(`<title> </title>`);
var root_310 = svg_template(`<desc> </desc>`);
var root_110 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m9 5 7 7-7 7"></path></svg>`);
var root_510 = svg_template(`<title> </title>`);
var root_610 = svg_template(`<desc> </desc>`);
var root_410 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m9 5 7 7-7 7"></path></svg>`);
function AngleRightOutline($$anchor, $$props) {
  if (new.target === AngleRightOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, AngleRightOutline);
  validate_prop_bindings($$props, [], [], AngleRightOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "angle right outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_110();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_210();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_310();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_410();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_510();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_610();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(AngleRightOutline);
  AngleRightOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var AngleRightOutline_default = AngleRightOutline;
AngleRightOutline.filename = ".../flowbite-svelte-icons/dist/AngleRightOutline.svelte";
mark_module_end(AngleRightOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/AngleUpOutline.svelte
mark_module_start();
var root_211 = svg_template(`<title> </title>`);
var root_311 = svg_template(`<desc> </desc>`);
var root_111 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m5 15 7-7 7 7"></path></svg>`);
var root_511 = svg_template(`<title> </title>`);
var root_611 = svg_template(`<desc> </desc>`);
var root_411 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m5 15 7-7 7 7"></path></svg>`);
function AngleUpOutline($$anchor, $$props) {
  if (new.target === AngleUpOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, AngleUpOutline);
  validate_prop_bindings($$props, [], [], AngleUpOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "angle up outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_111();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_211();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_311();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_411();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_511();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_611();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(AngleUpOutline);
  AngleUpOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var AngleUpOutline_default = AngleUpOutline;
AngleUpOutline.filename = ".../flowbite-svelte-icons/dist/AngleUpOutline.svelte";
mark_module_end(AngleUpOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/AnnotationOutline.svelte
mark_module_start();
var root_212 = svg_template(`<title> </title>`);
var root_312 = svg_template(`<desc> </desc>`);
var root_112 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M7.556 8.5h8m-8 3.5H12m7.111-7H4.89a.896.896 0 0 0-.629.256.868.868 0 0 0-.26.619v9.25c0 .232.094.455.26.619A.896.896 0 0 0 4.89 16H9l3 4 3-4h4.111a.896.896 0 0 0 .629-.256.868.868 0 0 0 .26-.619v-9.25a.868.868 0 0 0-.26-.619.896.896 0 0 0-.63-.256Z"></path></svg>`);
var root_512 = svg_template(`<title> </title>`);
var root_612 = svg_template(`<desc> </desc>`);
var root_412 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M7.556 8.5h8m-8 3.5H12m7.111-7H4.89a.896.896 0 0 0-.629.256.868.868 0 0 0-.26.619v9.25c0 .232.094.455.26.619A.896.896 0 0 0 4.89 16H9l3 4 3-4h4.111a.896.896 0 0 0 .629-.256.868.868 0 0 0 .26-.619v-9.25a.868.868 0 0 0-.26-.619.896.896 0 0 0-.63-.256Z"></path></svg>`);
function AnnotationOutline($$anchor, $$props) {
  if (new.target === AnnotationOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, AnnotationOutline);
  validate_prop_bindings($$props, [], [], AnnotationOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "annotation outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_112();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_212();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_312();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_412();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_512();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_612();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(AnnotationOutline);
  AnnotationOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var AnnotationOutline_default = AnnotationOutline;
AnnotationOutline.filename = ".../flowbite-svelte-icons/dist/AnnotationOutline.svelte";
mark_module_end(AnnotationOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/AnnotationSolid.svelte
mark_module_start();
var root_213 = svg_template(`<title> </title>`);
var root_313 = svg_template(`<desc> </desc>`);
var root_113 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M3.559 4.544c.355-.35.834-.544 1.33-.544H19.11c.496 0 .975.194 1.33.544.356.35.559.829.559 1.331v9.25c0 .502-.203.981-.559 1.331-.355.35-.834.544-1.33.544H15.5l-2.7 3.6a1 1 0 0 1-1.6 0L8.5 17H4.889c-.496 0-.975-.194-1.33-.544A1.868 1.868 0 0 1 3 15.125v-9.25c0-.502.203-.981.559-1.331ZM7.556 7.5a1 1 0 1 0 0 2h8a1 1 0 0 0 0-2h-8Zm0 3.5a1 1 0 1 0 0 2H12a1 1 0 1 0 0-2H7.556Z" clip-rule="evenodd"></path></svg>`);
var root_513 = svg_template(`<title> </title>`);
var root_613 = svg_template(`<desc> </desc>`);
var root_413 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M3.559 4.544c.355-.35.834-.544 1.33-.544H19.11c.496 0 .975.194 1.33.544.356.35.559.829.559 1.331v9.25c0 .502-.203.981-.559 1.331-.355.35-.834.544-1.33.544H15.5l-2.7 3.6a1 1 0 0 1-1.6 0L8.5 17H4.889c-.496 0-.975-.194-1.33-.544A1.868 1.868 0 0 1 3 15.125v-9.25c0-.502.203-.981.559-1.331ZM7.556 7.5a1 1 0 1 0 0 2h8a1 1 0 0 0 0-2h-8Zm0 3.5a1 1 0 1 0 0 2H12a1 1 0 1 0 0-2H7.556Z" clip-rule="evenodd"></path></svg>`);
function AnnotationSolid($$anchor, $$props) {
  if (new.target === AnnotationSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, AnnotationSolid);
  validate_prop_bindings($$props, [], [], AnnotationSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "annotation solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_113();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_213();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_313();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_413();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_513();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_613();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(AnnotationSolid);
  AnnotationSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var AnnotationSolid_default = AnnotationSolid;
AnnotationSolid.filename = ".../flowbite-svelte-icons/dist/AnnotationSolid.svelte";
mark_module_end(AnnotationSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/AppleSolid.svelte
mark_module_start();
var root_214 = svg_template(`<title> </title>`);
var root_314 = svg_template(`<desc> </desc>`);
var root_114 = svg_template(`<svg><!><!><path d="M17.537 12.625a4.421 4.421 0 0 0 2.684 4.047 10.96 10.96 0 0 1-1.384 2.845c-.834 1.218-1.7 2.432-3.062 2.457-1.34.025-1.77-.794-3.3-.794-1.531 0-2.01.769-3.275.82-1.316.049-2.317-1.318-3.158-2.532-1.72-2.484-3.032-7.017-1.27-10.077A4.9 4.9 0 0 1 8.91 6.884c1.292-.025 2.51.869 3.3.869.789 0 2.27-1.075 3.828-.917a4.67 4.67 0 0 1 3.66 1.984 4.524 4.524 0 0 0-2.16 3.805m-2.52-7.432A4.4 4.4 0 0 0 16.06 2a4.482 4.482 0 0 0-2.945 1.516 4.185 4.185 0 0 0-1.061 3.093 3.708 3.708 0 0 0 2.967-1.416Z"></path></svg>`);
var root_514 = svg_template(`<title> </title>`);
var root_614 = svg_template(`<desc> </desc>`);
var root_414 = svg_template(`<svg><!><!><path d="M17.537 12.625a4.421 4.421 0 0 0 2.684 4.047 10.96 10.96 0 0 1-1.384 2.845c-.834 1.218-1.7 2.432-3.062 2.457-1.34.025-1.77-.794-3.3-.794-1.531 0-2.01.769-3.275.82-1.316.049-2.317-1.318-3.158-2.532-1.72-2.484-3.032-7.017-1.27-10.077A4.9 4.9 0 0 1 8.91 6.884c1.292-.025 2.51.869 3.3.869.789 0 2.27-1.075 3.828-.917a4.67 4.67 0 0 1 3.66 1.984 4.524 4.524 0 0 0-2.16 3.805m-2.52-7.432A4.4 4.4 0 0 0 16.06 2a4.482 4.482 0 0 0-2.945 1.516 4.185 4.185 0 0 0-1.061 3.093 3.708 3.708 0 0 0 2.967-1.416Z"></path></svg>`);
function AppleSolid($$anchor, $$props) {
  if (new.target === AppleSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, AppleSolid);
  validate_prop_bindings($$props, [], [], AppleSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "apple solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_114();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_214();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_314();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_414();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_514();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_614();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(AppleSolid);
  AppleSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var AppleSolid_default = AppleSolid;
AppleSolid.filename = ".../flowbite-svelte-icons/dist/AppleSolid.svelte";
mark_module_end(AppleSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ArchiveArrowDownOutline.svelte
mark_module_start();
var root_215 = svg_template(`<title> </title>`);
var root_315 = svg_template(`<desc> </desc>`);
var root_115 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12 11v5m0 0 2-2m-2 2-2-2M3 6v1a1 1 0 0 0 1 1h16a1 1 0 0 0 1-1V6a1 1 0 0 0-1-1H4a1 1 0 0 0-1 1Zm2 2v10a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V8H5Z"></path></svg>`);
var root_515 = svg_template(`<title> </title>`);
var root_615 = svg_template(`<desc> </desc>`);
var root_415 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12 11v5m0 0 2-2m-2 2-2-2M3 6v1a1 1 0 0 0 1 1h16a1 1 0 0 0 1-1V6a1 1 0 0 0-1-1H4a1 1 0 0 0-1 1Zm2 2v10a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V8H5Z"></path></svg>`);
function ArchiveArrowDownOutline($$anchor, $$props) {
  if (new.target === ArchiveArrowDownOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ArchiveArrowDownOutline);
  validate_prop_bindings($$props, [], [], ArchiveArrowDownOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "archive arrow down outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_115();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_215();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_315();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_415();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_515();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_615();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ArchiveArrowDownOutline);
  ArchiveArrowDownOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ArchiveArrowDownOutline_default = ArchiveArrowDownOutline;
ArchiveArrowDownOutline.filename = ".../flowbite-svelte-icons/dist/ArchiveArrowDownOutline.svelte";
mark_module_end(ArchiveArrowDownOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ArchiveArrowDownSolid.svelte
mark_module_start();
var root_216 = svg_template(`<title> </title>`);
var root_316 = svg_template(`<desc> </desc>`);
var root_116 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M4 4a2 2 0 1 0 0 4h16a2 2 0 1 0 0-4H4Zm0 6h16v8a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2v-8Zm10.707 5.707a1 1 0 0 0-1.414-1.414l-.293.293V12a1 1 0 1 0-2 0v2.586l-.293-.293a1 1 0 0 0-1.414 1.414l2 2a1 1 0 0 0 1.414 0l2-2Z" clip-rule="evenodd"></path></svg>`);
var root_516 = svg_template(`<title> </title>`);
var root_616 = svg_template(`<desc> </desc>`);
var root_416 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M4 4a2 2 0 1 0 0 4h16a2 2 0 1 0 0-4H4Zm0 6h16v8a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2v-8Zm10.707 5.707a1 1 0 0 0-1.414-1.414l-.293.293V12a1 1 0 1 0-2 0v2.586l-.293-.293a1 1 0 0 0-1.414 1.414l2 2a1 1 0 0 0 1.414 0l2-2Z" clip-rule="evenodd"></path></svg>`);
function ArchiveArrowDownSolid($$anchor, $$props) {
  if (new.target === ArchiveArrowDownSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ArchiveArrowDownSolid);
  validate_prop_bindings($$props, [], [], ArchiveArrowDownSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "archive arrow down solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_116();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_216();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_316();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_416();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_516();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_616();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ArchiveArrowDownSolid);
  ArchiveArrowDownSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ArchiveArrowDownSolid_default = ArchiveArrowDownSolid;
ArchiveArrowDownSolid.filename = ".../flowbite-svelte-icons/dist/ArchiveArrowDownSolid.svelte";
mark_module_end(ArchiveArrowDownSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ArchiveOutline.svelte
mark_module_start();
var root_217 = svg_template(`<title> </title>`);
var root_317 = svg_template(`<desc> </desc>`);
var root_117 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linejoin="round" d="M10 12v1h4v-1m4 7H6a1 1 0 0 1-1-1V9h14v9a1 1 0 0 1-1 1ZM4 5h16a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1Z"></path></svg>`);
var root_517 = svg_template(`<title> </title>`);
var root_617 = svg_template(`<desc> </desc>`);
var root_417 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linejoin="round" d="M10 12v1h4v-1m4 7H6a1 1 0 0 1-1-1V9h14v9a1 1 0 0 1-1 1ZM4 5h16a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1Z"></path></svg>`);
function ArchiveOutline($$anchor, $$props) {
  if (new.target === ArchiveOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ArchiveOutline);
  validate_prop_bindings($$props, [], [], ArchiveOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "archive outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_117();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_217();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_317();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_417();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_517();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_617();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ArchiveOutline);
  ArchiveOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ArchiveOutline_default = ArchiveOutline;
ArchiveOutline.filename = ".../flowbite-svelte-icons/dist/ArchiveOutline.svelte";
mark_module_end(ArchiveOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ArchiveSolid.svelte
mark_module_start();
var root_218 = svg_template(`<title> </title>`);
var root_318 = svg_template(`<desc> </desc>`);
var root_118 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M20 10H4v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8ZM9 13v-1h6v1a1 1 0 0 1-1 1h-4a1 1 0 0 1-1-1Z" clip-rule="evenodd"></path><path d="M2 6a2 2 0 0 1 2-2h16a2 2 0 1 1 0 4H4a2 2 0 0 1-2-2Z"></path></svg>`);
var root_518 = svg_template(`<title> </title>`);
var root_618 = svg_template(`<desc> </desc>`);
var root_418 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M20 10H4v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8ZM9 13v-1h6v1a1 1 0 0 1-1 1h-4a1 1 0 0 1-1-1Z" clip-rule="evenodd"></path><path d="M2 6a2 2 0 0 1 2-2h16a2 2 0 1 1 0 4H4a2 2 0 0 1-2-2Z"></path></svg>`);
function ArchiveSolid($$anchor, $$props) {
  if (new.target === ArchiveSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ArchiveSolid);
  validate_prop_bindings($$props, [], [], ArchiveSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "archive solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_118();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_218();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_318();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_418();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_518();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_618();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_2 = sibling(node_4);
      var path_3 = sibling(path_2);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ArchiveSolid);
  ArchiveSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ArchiveSolid_default = ArchiveSolid;
ArchiveSolid.filename = ".../flowbite-svelte-icons/dist/ArchiveSolid.svelte";
mark_module_end(ArchiveSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ArrowDownOutline.svelte
mark_module_start();
var root_219 = svg_template(`<title> </title>`);
var root_319 = svg_template(`<desc> </desc>`);
var root_119 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12 19V5m0 14-4-4m4 4 4-4"></path></svg>`);
var root_519 = svg_template(`<title> </title>`);
var root_619 = svg_template(`<desc> </desc>`);
var root_419 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12 19V5m0 14-4-4m4 4 4-4"></path></svg>`);
function ArrowDownOutline($$anchor, $$props) {
  if (new.target === ArrowDownOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ArrowDownOutline);
  validate_prop_bindings($$props, [], [], ArrowDownOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "arrow down outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_119();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_219();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_319();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_419();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_519();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_619();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ArrowDownOutline);
  ArrowDownOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ArrowDownOutline_default = ArrowDownOutline;
ArrowDownOutline.filename = ".../flowbite-svelte-icons/dist/ArrowDownOutline.svelte";
mark_module_end(ArrowDownOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ArrowDownToBracketOutline.svelte
mark_module_start();
var root_220 = svg_template(`<title> </title>`);
var root_320 = svg_template(`<desc> </desc>`);
var root_120 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M4 15v2a3 3 0 0 0 3 3h10a3 3 0 0 0 3-3v-2m-8 1V4m0 12-4-4m4 4 4-4"></path></svg>`);
var root_520 = svg_template(`<title> </title>`);
var root_620 = svg_template(`<desc> </desc>`);
var root_420 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M4 15v2a3 3 0 0 0 3 3h10a3 3 0 0 0 3-3v-2m-8 1V4m0 12-4-4m4 4 4-4"></path></svg>`);
function ArrowDownToBracketOutline($$anchor, $$props) {
  if (new.target === ArrowDownToBracketOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ArrowDownToBracketOutline);
  validate_prop_bindings($$props, [], [], ArrowDownToBracketOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "arrow down to bracket outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_120();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_220();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_320();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_420();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_520();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_620();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ArrowDownToBracketOutline);
  ArrowDownToBracketOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ArrowDownToBracketOutline_default = ArrowDownToBracketOutline;
ArrowDownToBracketOutline.filename = ".../flowbite-svelte-icons/dist/ArrowDownToBracketOutline.svelte";
mark_module_end(ArrowDownToBracketOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ArrowLeftOutline.svelte
mark_module_start();
var root_221 = svg_template(`<title> </title>`);
var root_321 = svg_template(`<desc> </desc>`);
var root_121 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M5 12h14M5 12l4-4m-4 4 4 4"></path></svg>`);
var root_521 = svg_template(`<title> </title>`);
var root_621 = svg_template(`<desc> </desc>`);
var root_421 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M5 12h14M5 12l4-4m-4 4 4 4"></path></svg>`);
function ArrowLeftOutline($$anchor, $$props) {
  if (new.target === ArrowLeftOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ArrowLeftOutline);
  validate_prop_bindings($$props, [], [], ArrowLeftOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "arrow left outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_121();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_221();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_321();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_421();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_521();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_621();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ArrowLeftOutline);
  ArrowLeftOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ArrowLeftOutline_default = ArrowLeftOutline;
ArrowLeftOutline.filename = ".../flowbite-svelte-icons/dist/ArrowLeftOutline.svelte";
mark_module_end(ArrowLeftOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ArrowLeftToBracketOutline.svelte
mark_module_start();
var root_222 = svg_template(`<title> </title>`);
var root_322 = svg_template(`<desc> </desc>`);
var root_122 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M16 12H4m12 0-4 4m4-4-4-4m3-4h2a3 3 0 0 1 3 3v10a3 3 0 0 1-3 3h-2"></path></svg>`);
var root_522 = svg_template(`<title> </title>`);
var root_622 = svg_template(`<desc> </desc>`);
var root_422 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M16 12H4m12 0-4 4m4-4-4-4m3-4h2a3 3 0 0 1 3 3v10a3 3 0 0 1-3 3h-2"></path></svg>`);
function ArrowLeftToBracketOutline($$anchor, $$props) {
  if (new.target === ArrowLeftToBracketOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ArrowLeftToBracketOutline);
  validate_prop_bindings($$props, [], [], ArrowLeftToBracketOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "arrow left to bracket outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_122();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_222();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_322();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_422();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_522();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_622();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ArrowLeftToBracketOutline);
  ArrowLeftToBracketOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ArrowLeftToBracketOutline_default = ArrowLeftToBracketOutline;
ArrowLeftToBracketOutline.filename = ".../flowbite-svelte-icons/dist/ArrowLeftToBracketOutline.svelte";
mark_module_end(ArrowLeftToBracketOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ArrowRightAltOutline.svelte
mark_module_start();
var root_223 = svg_template(`<title> </title>`);
var root_323 = svg_template(`<desc> </desc>`);
var root_123 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M16.153 19 21 12l-4.847-7H3l4.848 7L3 19h13.153Z"></path></svg>`);
var root_523 = svg_template(`<title> </title>`);
var root_623 = svg_template(`<desc> </desc>`);
var root_423 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M16.153 19 21 12l-4.847-7H3l4.848 7L3 19h13.153Z"></path></svg>`);
function ArrowRightAltOutline($$anchor, $$props) {
  if (new.target === ArrowRightAltOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ArrowRightAltOutline);
  validate_prop_bindings($$props, [], [], ArrowRightAltOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "arrow right alt outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_123();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_223();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_323();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_423();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_523();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_623();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ArrowRightAltOutline);
  ArrowRightAltOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ArrowRightAltOutline_default = ArrowRightAltOutline;
ArrowRightAltOutline.filename = ".../flowbite-svelte-icons/dist/ArrowRightAltOutline.svelte";
mark_module_end(ArrowRightAltOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ArrowRightAltSolid.svelte
mark_module_start();
var root_224 = svg_template(`<title> </title>`);
var root_324 = svg_template(`<desc> </desc>`);
var root_124 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M3 4a1 1 0 0 0-.822 1.57L6.632 12l-4.454 6.43A1 1 0 0 0 3 20h13.153a1 1 0 0 0 .822-.43l4.847-7a1 1 0 0 0 0-1.14l-4.847-7a1 1 0 0 0-.822-.43H3Z" clip-rule="evenodd"></path></svg>`);
var root_524 = svg_template(`<title> </title>`);
var root_624 = svg_template(`<desc> </desc>`);
var root_424 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M3 4a1 1 0 0 0-.822 1.57L6.632 12l-4.454 6.43A1 1 0 0 0 3 20h13.153a1 1 0 0 0 .822-.43l4.847-7a1 1 0 0 0 0-1.14l-4.847-7a1 1 0 0 0-.822-.43H3Z" clip-rule="evenodd"></path></svg>`);
function ArrowRightAltSolid($$anchor, $$props) {
  if (new.target === ArrowRightAltSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ArrowRightAltSolid);
  validate_prop_bindings($$props, [], [], ArrowRightAltSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "arrow right alt solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_124();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_224();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_324();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_424();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_524();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_624();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ArrowRightAltSolid);
  ArrowRightAltSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ArrowRightAltSolid_default = ArrowRightAltSolid;
ArrowRightAltSolid.filename = ".../flowbite-svelte-icons/dist/ArrowRightAltSolid.svelte";
mark_module_end(ArrowRightAltSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ArrowRightOutline.svelte
mark_module_start();
var root_225 = svg_template(`<title> </title>`);
var root_325 = svg_template(`<desc> </desc>`);
var root_125 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M19 12H5m14 0-4 4m4-4-4-4"></path></svg>`);
var root_525 = svg_template(`<title> </title>`);
var root_625 = svg_template(`<desc> </desc>`);
var root_425 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M19 12H5m14 0-4 4m4-4-4-4"></path></svg>`);
function ArrowRightOutline($$anchor, $$props) {
  if (new.target === ArrowRightOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ArrowRightOutline);
  validate_prop_bindings($$props, [], [], ArrowRightOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "arrow right outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_125();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_225();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_325();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_425();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_525();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_625();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ArrowRightOutline);
  ArrowRightOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ArrowRightOutline_default = ArrowRightOutline;
ArrowRightOutline.filename = ".../flowbite-svelte-icons/dist/ArrowRightOutline.svelte";
mark_module_end(ArrowRightOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ArrowRightToBracketOutline.svelte
mark_module_start();
var root_226 = svg_template(`<title> </title>`);
var root_326 = svg_template(`<desc> </desc>`);
var root_126 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M20 12H8m12 0-4 4m4-4-4-4M9 4H7a3 3 0 0 0-3 3v10a3 3 0 0 0 3 3h2"></path></svg>`);
var root_526 = svg_template(`<title> </title>`);
var root_626 = svg_template(`<desc> </desc>`);
var root_426 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M20 12H8m12 0-4 4m4-4-4-4M9 4H7a3 3 0 0 0-3 3v10a3 3 0 0 0 3 3h2"></path></svg>`);
function ArrowRightToBracketOutline($$anchor, $$props) {
  if (new.target === ArrowRightToBracketOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ArrowRightToBracketOutline);
  validate_prop_bindings($$props, [], [], ArrowRightToBracketOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "arrow right to bracket outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_126();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_226();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_326();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_426();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_526();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_626();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ArrowRightToBracketOutline);
  ArrowRightToBracketOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ArrowRightToBracketOutline_default = ArrowRightToBracketOutline;
ArrowRightToBracketOutline.filename = ".../flowbite-svelte-icons/dist/ArrowRightToBracketOutline.svelte";
mark_module_end(ArrowRightToBracketOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ArrowSortLettersOutline.svelte
mark_module_start();
var root_227 = svg_template(`<title> </title>`);
var root_327 = svg_template(`<desc> </desc>`);
var root_127 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M7 4v16M7 4l3 3M7 4 4 7m9-3h6l-6 6h6m-6.5 10 3.5-7 3.5 7M14 18h4"></path></svg>`);
var root_527 = svg_template(`<title> </title>`);
var root_627 = svg_template(`<desc> </desc>`);
var root_427 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M7 4v16M7 4l3 3M7 4 4 7m9-3h6l-6 6h6m-6.5 10 3.5-7 3.5 7M14 18h4"></path></svg>`);
function ArrowSortLettersOutline($$anchor, $$props) {
  if (new.target === ArrowSortLettersOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ArrowSortLettersOutline);
  validate_prop_bindings($$props, [], [], ArrowSortLettersOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "arrow sort letters outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_127();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_227();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_327();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_427();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_527();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_627();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ArrowSortLettersOutline);
  ArrowSortLettersOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ArrowSortLettersOutline_default = ArrowSortLettersOutline;
ArrowSortLettersOutline.filename = ".../flowbite-svelte-icons/dist/ArrowSortLettersOutline.svelte";
mark_module_end(ArrowSortLettersOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ArrowUpDownOutline.svelte
mark_module_start();
var root_228 = svg_template(`<title> </title>`);
var root_328 = svg_template(`<desc> </desc>`);
var root_128 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M8 20V7m0 13-4-4m4 4 4-4m4-12v13m0-13 4 4m-4-4-4 4"></path></svg>`);
var root_528 = svg_template(`<title> </title>`);
var root_628 = svg_template(`<desc> </desc>`);
var root_428 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M8 20V7m0 13-4-4m4 4 4-4m4-12v13m0-13 4 4m-4-4-4 4"></path></svg>`);
function ArrowUpDownOutline($$anchor, $$props) {
  if (new.target === ArrowUpDownOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ArrowUpDownOutline);
  validate_prop_bindings($$props, [], [], ArrowUpDownOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "arrow up down outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_128();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_228();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_328();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_428();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_528();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_628();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ArrowUpDownOutline);
  ArrowUpDownOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ArrowUpDownOutline_default = ArrowUpDownOutline;
ArrowUpDownOutline.filename = ".../flowbite-svelte-icons/dist/ArrowUpDownOutline.svelte";
mark_module_end(ArrowUpDownOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ArrowUpFromBracketOutline.svelte
mark_module_start();
var root_229 = svg_template(`<title> </title>`);
var root_329 = svg_template(`<desc> </desc>`);
var root_129 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M4 15v2a3 3 0 0 0 3 3h10a3 3 0 0 0 3-3v-2M12 4v12m0-12 4 4m-4-4L8 8"></path></svg>`);
var root_529 = svg_template(`<title> </title>`);
var root_629 = svg_template(`<desc> </desc>`);
var root_429 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M4 15v2a3 3 0 0 0 3 3h10a3 3 0 0 0 3-3v-2M12 4v12m0-12 4 4m-4-4L8 8"></path></svg>`);
function ArrowUpFromBracketOutline($$anchor, $$props) {
  if (new.target === ArrowUpFromBracketOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ArrowUpFromBracketOutline);
  validate_prop_bindings($$props, [], [], ArrowUpFromBracketOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "arrow up from bracket outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_129();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_229();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_329();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_429();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_529();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_629();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ArrowUpFromBracketOutline);
  ArrowUpFromBracketOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ArrowUpFromBracketOutline_default = ArrowUpFromBracketOutline;
ArrowUpFromBracketOutline.filename = ".../flowbite-svelte-icons/dist/ArrowUpFromBracketOutline.svelte";
mark_module_end(ArrowUpFromBracketOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ArrowUpOutline.svelte
mark_module_start();
var root_230 = svg_template(`<title> </title>`);
var root_330 = svg_template(`<desc> </desc>`);
var root_130 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12 6v13m0-13 4 4m-4-4-4 4"></path></svg>`);
var root_530 = svg_template(`<title> </title>`);
var root_630 = svg_template(`<desc> </desc>`);
var root_430 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12 6v13m0-13 4 4m-4-4-4 4"></path></svg>`);
function ArrowUpOutline($$anchor, $$props) {
  if (new.target === ArrowUpOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ArrowUpOutline);
  validate_prop_bindings($$props, [], [], ArrowUpOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "arrow up outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_130();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_230();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_330();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_430();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_530();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_630();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ArrowUpOutline);
  ArrowUpOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ArrowUpOutline_default = ArrowUpOutline;
ArrowUpOutline.filename = ".../flowbite-svelte-icons/dist/ArrowUpOutline.svelte";
mark_module_end(ArrowUpOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ArrowUpRightDownLeftOutline.svelte
mark_module_start();
var root_231 = svg_template(`<title> </title>`);
var root_331 = svg_template(`<desc> </desc>`);
var root_131 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M16 4h4m0 0v4m0-4-5 5M8 20H4m0 0v-4m0 4 5-5"></path></svg>`);
var root_531 = svg_template(`<title> </title>`);
var root_631 = svg_template(`<desc> </desc>`);
var root_431 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M16 4h4m0 0v4m0-4-5 5M8 20H4m0 0v-4m0 4 5-5"></path></svg>`);
function ArrowUpRightDownLeftOutline($$anchor, $$props) {
  if (new.target === ArrowUpRightDownLeftOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ArrowUpRightDownLeftOutline);
  validate_prop_bindings($$props, [], [], ArrowUpRightDownLeftOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "arrow up right down left outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_131();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_231();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_331();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_431();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_531();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_631();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ArrowUpRightDownLeftOutline);
  ArrowUpRightDownLeftOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ArrowUpRightDownLeftOutline_default = ArrowUpRightDownLeftOutline;
ArrowUpRightDownLeftOutline.filename = ".../flowbite-svelte-icons/dist/ArrowUpRightDownLeftOutline.svelte";
mark_module_end(ArrowUpRightDownLeftOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ArrowUpRightFromSquareOutline.svelte
mark_module_start();
var root_232 = svg_template(`<title> </title>`);
var root_332 = svg_template(`<desc> </desc>`);
var root_132 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M18 14v4.833A1.166 1.166 0 0 1 16.833 20H5.167A1.167 1.167 0 0 1 4 18.833V7.167A1.166 1.166 0 0 1 5.167 6h4.618m4.447-2H20v5.768m-7.889 2.121 7.778-7.778"></path></svg>`);
var root_532 = svg_template(`<title> </title>`);
var root_632 = svg_template(`<desc> </desc>`);
var root_432 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M18 14v4.833A1.166 1.166 0 0 1 16.833 20H5.167A1.167 1.167 0 0 1 4 18.833V7.167A1.166 1.166 0 0 1 5.167 6h4.618m4.447-2H20v5.768m-7.889 2.121 7.778-7.778"></path></svg>`);
function ArrowUpRightFromSquareOutline($$anchor, $$props) {
  if (new.target === ArrowUpRightFromSquareOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ArrowUpRightFromSquareOutline);
  validate_prop_bindings($$props, [], [], ArrowUpRightFromSquareOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "arrow up right from square outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_132();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_232();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_332();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_432();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_532();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_632();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ArrowUpRightFromSquareOutline);
  ArrowUpRightFromSquareOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ArrowUpRightFromSquareOutline_default = ArrowUpRightFromSquareOutline;
ArrowUpRightFromSquareOutline.filename = ".../flowbite-svelte-icons/dist/ArrowUpRightFromSquareOutline.svelte";
mark_module_end(ArrowUpRightFromSquareOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ArrowUpRightFromSquareSolid.svelte
mark_module_start();
var root_233 = svg_template(`<title> </title>`);
var root_333 = svg_template(`<desc> </desc>`);
var root_133 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M11.403 5H5a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-6.403a3.01 3.01 0 0 1-1.743-1.612l-3.025 3.025A3 3 0 1 1 9.99 9.768l3.025-3.025A3.01 3.01 0 0 1 11.403 5Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M13.232 4a1 1 0 0 1 1-1H20a1 1 0 0 1 1 1v5.768a1 1 0 1 1-2 0V6.414l-6.182 6.182a1 1 0 0 1-1.414-1.414L17.586 5h-3.354a1 1 0 0 1-1-1Z" clip-rule="evenodd"></path></svg>`);
var root_533 = svg_template(`<title> </title>`);
var root_633 = svg_template(`<desc> </desc>`);
var root_433 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M11.403 5H5a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-6.403a3.01 3.01 0 0 1-1.743-1.612l-3.025 3.025A3 3 0 1 1 9.99 9.768l3.025-3.025A3.01 3.01 0 0 1 11.403 5Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M13.232 4a1 1 0 0 1 1-1H20a1 1 0 0 1 1 1v5.768a1 1 0 1 1-2 0V6.414l-6.182 6.182a1 1 0 0 1-1.414-1.414L17.586 5h-3.354a1 1 0 0 1-1-1Z" clip-rule="evenodd"></path></svg>`);
function ArrowUpRightFromSquareSolid($$anchor, $$props) {
  if (new.target === ArrowUpRightFromSquareSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ArrowUpRightFromSquareSolid);
  validate_prop_bindings($$props, [], [], ArrowUpRightFromSquareSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "arrow up right from square solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_133();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_233();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_333();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_433();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_533();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_633();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_2 = sibling(node_4);
      var path_3 = sibling(path_2);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ArrowUpRightFromSquareSolid);
  ArrowUpRightFromSquareSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ArrowUpRightFromSquareSolid_default = ArrowUpRightFromSquareSolid;
ArrowUpRightFromSquareSolid.filename = ".../flowbite-svelte-icons/dist/ArrowUpRightFromSquareSolid.svelte";
mark_module_end(ArrowUpRightFromSquareSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ArrowsRepeatCountOutline.svelte
mark_module_start();
var root_234 = svg_template(`<title> </title>`);
var root_334 = svg_template(`<desc> </desc>`);
var root_134 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m16 4 3 3H5v3m3 10-3-3h14v-3m-9-2.5 2-1.5v4"></path></svg>`);
var root_534 = svg_template(`<title> </title>`);
var root_634 = svg_template(`<desc> </desc>`);
var root_434 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m16 4 3 3H5v3m3 10-3-3h14v-3m-9-2.5 2-1.5v4"></path></svg>`);
function ArrowsRepeatCountOutline($$anchor, $$props) {
  if (new.target === ArrowsRepeatCountOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ArrowsRepeatCountOutline);
  validate_prop_bindings($$props, [], [], ArrowsRepeatCountOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "arrows repeat count outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_134();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_234();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_334();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_434();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_534();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_634();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ArrowsRepeatCountOutline);
  ArrowsRepeatCountOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ArrowsRepeatCountOutline_default = ArrowsRepeatCountOutline;
ArrowsRepeatCountOutline.filename = ".../flowbite-svelte-icons/dist/ArrowsRepeatCountOutline.svelte";
mark_module_end(ArrowsRepeatCountOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ArrowsRepeatOutline.svelte
mark_module_start();
var root_235 = svg_template(`<title> </title>`);
var root_335 = svg_template(`<desc> </desc>`);
var root_135 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m16 10 3-3m0 0-3-3m3 3H5v3m3 4-3 3m0 0 3 3m-3-3h14v-3"></path></svg>`);
var root_535 = svg_template(`<title> </title>`);
var root_635 = svg_template(`<desc> </desc>`);
var root_435 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m16 10 3-3m0 0-3-3m3 3H5v3m3 4-3 3m0 0 3 3m-3-3h14v-3"></path></svg>`);
function ArrowsRepeatOutline($$anchor, $$props) {
  if (new.target === ArrowsRepeatOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ArrowsRepeatOutline);
  validate_prop_bindings($$props, [], [], ArrowsRepeatOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "arrows repeat outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_135();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_235();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_335();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_435();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_535();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_635();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ArrowsRepeatOutline);
  ArrowsRepeatOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ArrowsRepeatOutline_default = ArrowsRepeatOutline;
ArrowsRepeatOutline.filename = ".../flowbite-svelte-icons/dist/ArrowsRepeatOutline.svelte";
mark_module_end(ArrowsRepeatOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/AtomOutline.svelte
mark_module_start();
var root_236 = svg_template(`<title> </title>`);
var root_336 = svg_template(`<desc> </desc>`);
var root_136 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" d="M8.737 8.737a21.49 21.49 0 0 1 3.308-2.724m0 0c3.063-2.026 5.99-2.641 7.331-1.3 1.827 1.828.026 6.591-4.023 10.64-4.049 4.049-8.812 5.85-10.64 4.023-1.33-1.33-.736-4.218 1.249-7.253m6.083-6.11c-3.063-2.026-5.99-2.641-7.331-1.3-1.827 1.828-.026 6.591 4.023 10.64m3.308-9.34a21.497 21.497 0 0 1 3.308 2.724m2.775 3.386c1.985 3.035 2.579 5.923 1.248 7.253-1.336 1.337-4.245.732-7.295-1.275M14 12a2 2 0 1 1-4 0 2 2 0 0 1 4 0Z"></path></svg>`);
var root_536 = svg_template(`<title> </title>`);
var root_636 = svg_template(`<desc> </desc>`);
var root_436 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" d="M8.737 8.737a21.49 21.49 0 0 1 3.308-2.724m0 0c3.063-2.026 5.99-2.641 7.331-1.3 1.827 1.828.026 6.591-4.023 10.64-4.049 4.049-8.812 5.85-10.64 4.023-1.33-1.33-.736-4.218 1.249-7.253m6.083-6.11c-3.063-2.026-5.99-2.641-7.331-1.3-1.827 1.828-.026 6.591 4.023 10.64m3.308-9.34a21.497 21.497 0 0 1 3.308 2.724m2.775 3.386c1.985 3.035 2.579 5.923 1.248 7.253-1.336 1.337-4.245.732-7.295-1.275M14 12a2 2 0 1 1-4 0 2 2 0 0 1 4 0Z"></path></svg>`);
function AtomOutline($$anchor, $$props) {
  if (new.target === AtomOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, AtomOutline);
  validate_prop_bindings($$props, [], [], AtomOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "atom outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_136();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_236();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_336();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_436();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_536();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_636();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(AtomOutline);
  AtomOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var AtomOutline_default = AtomOutline;
AtomOutline.filename = ".../flowbite-svelte-icons/dist/AtomOutline.svelte";
mark_module_end(AtomOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/AwardOutline.svelte
mark_module_start();
var root_237 = svg_template(`<title> </title>`);
var root_337 = svg_template(`<desc> </desc>`);
var root_137 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m7.171 12.906-2.153 6.411 2.672-.89 1.568 2.34 1.825-5.183m5.73-2.678 2.154 6.411-2.673-.89-1.568 2.34-1.825-5.183M9.165 4.3c.58.068 1.153-.17 1.515-.628a1.681 1.681 0 0 1 2.64 0 1.68 1.68 0 0 0 1.515.628 1.681 1.681 0 0 1 1.866 1.866c-.068.58.17 1.154.628 1.516a1.681 1.681 0 0 1 0 2.639 1.682 1.682 0 0 0-.628 1.515 1.681 1.681 0 0 1-1.866 1.866 1.681 1.681 0 0 0-1.516.628 1.681 1.681 0 0 1-2.639 0 1.681 1.681 0 0 0-1.515-.628 1.681 1.681 0 0 1-1.867-1.866 1.681 1.681 0 0 0-.627-1.515 1.681 1.681 0 0 1 0-2.64c.458-.361.696-.935.627-1.515A1.681 1.681 0 0 1 9.165 4.3ZM14 9a2 2 0 1 1-4 0 2 2 0 0 1 4 0Z"></path></svg>`);
var root_537 = svg_template(`<title> </title>`);
var root_637 = svg_template(`<desc> </desc>`);
var root_437 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m7.171 12.906-2.153 6.411 2.672-.89 1.568 2.34 1.825-5.183m5.73-2.678 2.154 6.411-2.673-.89-1.568 2.34-1.825-5.183M9.165 4.3c.58.068 1.153-.17 1.515-.628a1.681 1.681 0 0 1 2.64 0 1.68 1.68 0 0 0 1.515.628 1.681 1.681 0 0 1 1.866 1.866c-.068.58.17 1.154.628 1.516a1.681 1.681 0 0 1 0 2.639 1.682 1.682 0 0 0-.628 1.515 1.681 1.681 0 0 1-1.866 1.866 1.681 1.681 0 0 0-1.516.628 1.681 1.681 0 0 1-2.639 0 1.681 1.681 0 0 0-1.515-.628 1.681 1.681 0 0 1-1.867-1.866 1.681 1.681 0 0 0-.627-1.515 1.681 1.681 0 0 1 0-2.64c.458-.361.696-.935.627-1.515A1.681 1.681 0 0 1 9.165 4.3ZM14 9a2 2 0 1 1-4 0 2 2 0 0 1 4 0Z"></path></svg>`);
function AwardOutline($$anchor, $$props) {
  if (new.target === AwardOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, AwardOutline);
  validate_prop_bindings($$props, [], [], AwardOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "award outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_137();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_237();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_337();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_437();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_537();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_637();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(AwardOutline);
  AwardOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var AwardOutline_default = AwardOutline;
AwardOutline.filename = ".../flowbite-svelte-icons/dist/AwardOutline.svelte";
mark_module_end(AwardOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/AwardSolid.svelte
mark_module_start();
var root_238 = svg_template(`<title> </title>`);
var root_338 = svg_template(`<desc> </desc>`);
var root_138 = svg_template(`<svg><!><!><path d="M11 9a1 1 0 1 1 2 0 1 1 0 0 1-2 0Z"></path><path fill-rule="evenodd" d="M9.896 3.051a2.681 2.681 0 0 1 4.208 0c.147.186.38.282.615.255a2.681 2.681 0 0 1 2.976 2.975.681.681 0 0 0 .254.615 2.681 2.681 0 0 1 0 4.208.682.682 0 0 0-.254.615 2.681 2.681 0 0 1-2.976 2.976.681.681 0 0 0-.615.254 2.682 2.682 0 0 1-4.208 0 .681.681 0 0 0-.614-.255 2.681 2.681 0 0 1-2.976-2.975.681.681 0 0 0-.255-.615 2.681 2.681 0 0 1 0-4.208.681.681 0 0 0 .255-.615 2.681 2.681 0 0 1 2.976-2.975.681.681 0 0 0 .614-.255ZM12 6a3 3 0 1 0 0 6 3 3 0 0 0 0-6Z" clip-rule="evenodd"></path><path d="M5.395 15.055 4.07 19a1 1 0 0 0 1.264 1.267l1.95-.65 1.144 1.707A1 1 0 0 0 10.2 21.1l1.12-3.18a4.641 4.641 0 0 1-2.515-1.208 4.667 4.667 0 0 1-3.411-1.656Zm7.269 2.867 1.12 3.177a1 1 0 0 0 1.773.224l1.144-1.707 1.95.65A1 1 0 0 0 19.915 19l-1.32-3.93a4.667 4.667 0 0 1-3.4 1.642 4.643 4.643 0 0 1-2.53 1.21Z"></path></svg>`);
var root_538 = svg_template(`<title> </title>`);
var root_638 = svg_template(`<desc> </desc>`);
var root_438 = svg_template(`<svg><!><!><path d="M11 9a1 1 0 1 1 2 0 1 1 0 0 1-2 0Z"></path><path fill-rule="evenodd" d="M9.896 3.051a2.681 2.681 0 0 1 4.208 0c.147.186.38.282.615.255a2.681 2.681 0 0 1 2.976 2.975.681.681 0 0 0 .254.615 2.681 2.681 0 0 1 0 4.208.682.682 0 0 0-.254.615 2.681 2.681 0 0 1-2.976 2.976.681.681 0 0 0-.615.254 2.682 2.682 0 0 1-4.208 0 .681.681 0 0 0-.614-.255 2.681 2.681 0 0 1-2.976-2.975.681.681 0 0 0-.255-.615 2.681 2.681 0 0 1 0-4.208.681.681 0 0 0 .255-.615 2.681 2.681 0 0 1 2.976-2.975.681.681 0 0 0 .614-.255ZM12 6a3 3 0 1 0 0 6 3 3 0 0 0 0-6Z" clip-rule="evenodd"></path><path d="M5.395 15.055 4.07 19a1 1 0 0 0 1.264 1.267l1.95-.65 1.144 1.707A1 1 0 0 0 10.2 21.1l1.12-3.18a4.641 4.641 0 0 1-2.515-1.208 4.667 4.667 0 0 1-3.411-1.656Zm7.269 2.867 1.12 3.177a1 1 0 0 0 1.773.224l1.144-1.707 1.95.65A1 1 0 0 0 19.915 19l-1.32-3.93a4.667 4.667 0 0 1-3.4 1.642 4.643 4.643 0 0 1-2.53 1.21Z"></path></svg>`);
function AwardSolid($$anchor, $$props) {
  if (new.target === AwardSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, AwardSolid);
  validate_prop_bindings($$props, [], [], AwardSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "award solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_138();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_238();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_338();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      var path_2 = sibling(path_1);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_438();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_538();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_638();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_3 = sibling(node_4);
      var path_4 = sibling(path_3);
      var path_5 = sibling(path_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(AwardSolid);
  AwardSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var AwardSolid_default = AwardSolid;
AwardSolid.filename = ".../flowbite-svelte-icons/dist/AwardSolid.svelte";
mark_module_end(AwardSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/BackwardStepOutline.svelte
mark_module_start();
var root_239 = svg_template(`<title> </title>`);
var root_339 = svg_template(`<desc> </desc>`);
var root_139 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M8 6v12m8-12v12l-8-6 8-6Z"></path></svg>`);
var root_539 = svg_template(`<title> </title>`);
var root_639 = svg_template(`<desc> </desc>`);
var root_439 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M8 6v12m8-12v12l-8-6 8-6Z"></path></svg>`);
function BackwardStepOutline($$anchor, $$props) {
  if (new.target === BackwardStepOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, BackwardStepOutline);
  validate_prop_bindings($$props, [], [], BackwardStepOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "backward step outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_139();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_239();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_339();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_439();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_539();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_639();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(BackwardStepOutline);
  BackwardStepOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var BackwardStepOutline_default = BackwardStepOutline;
BackwardStepOutline.filename = ".../flowbite-svelte-icons/dist/BackwardStepOutline.svelte";
mark_module_end(BackwardStepOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/BackwardStepSolid.svelte
mark_module_start();
var root_240 = svg_template(`<title> </title>`);
var root_340 = svg_template(`<desc> </desc>`);
var root_140 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M7 6a1 1 0 0 1 2 0v4l6.4-4.8A1 1 0 0 1 17 6v12a1 1 0 0 1-1.6.8L9 14v4a1 1 0 1 1-2 0V6Z" clip-rule="evenodd"></path></svg>`);
var root_540 = svg_template(`<title> </title>`);
var root_640 = svg_template(`<desc> </desc>`);
var root_440 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M7 6a1 1 0 0 1 2 0v4l6.4-4.8A1 1 0 0 1 17 6v12a1 1 0 0 1-1.6.8L9 14v4a1 1 0 1 1-2 0V6Z" clip-rule="evenodd"></path></svg>`);
function BackwardStepSolid($$anchor, $$props) {
  if (new.target === BackwardStepSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, BackwardStepSolid);
  validate_prop_bindings($$props, [], [], BackwardStepSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "backward step solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_140();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_240();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_340();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_440();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_540();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_640();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(BackwardStepSolid);
  BackwardStepSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var BackwardStepSolid_default = BackwardStepSolid;
BackwardStepSolid.filename = ".../flowbite-svelte-icons/dist/BackwardStepSolid.svelte";
mark_module_end(BackwardStepSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/BadgeCheckOutline.svelte
mark_module_start();
var root_241 = svg_template(`<title> </title>`);
var root_341 = svg_template(`<desc> </desc>`);
var root_141 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m8.032 12 1.984 1.984 4.96-4.96m4.55 5.272.893-.893a1.984 1.984 0 0 0 0-2.806l-.893-.893a1.984 1.984 0 0 1-.581-1.403V7.04a1.984 1.984 0 0 0-1.984-1.984h-1.262a1.983 1.983 0 0 1-1.403-.581l-.893-.893a1.984 1.984 0 0 0-2.806 0l-.893.893a1.984 1.984 0 0 1-1.403.581H7.04A1.984 1.984 0 0 0 5.055 7.04v1.262c0 .527-.209 1.031-.581 1.403l-.893.893a1.984 1.984 0 0 0 0 2.806l.893.893c.372.372.581.876.581 1.403v1.262a1.984 1.984 0 0 0 1.984 1.984h1.262c.527 0 1.031.209 1.403.581l.893.893a1.984 1.984 0 0 0 2.806 0l.893-.893a1.985 1.985 0 0 1 1.403-.581h1.262a1.984 1.984 0 0 0 1.984-1.984V15.7c0-.527.209-1.031.581-1.403Z"></path></svg>`);
var root_541 = svg_template(`<title> </title>`);
var root_641 = svg_template(`<desc> </desc>`);
var root_441 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m8.032 12 1.984 1.984 4.96-4.96m4.55 5.272.893-.893a1.984 1.984 0 0 0 0-2.806l-.893-.893a1.984 1.984 0 0 1-.581-1.403V7.04a1.984 1.984 0 0 0-1.984-1.984h-1.262a1.983 1.983 0 0 1-1.403-.581l-.893-.893a1.984 1.984 0 0 0-2.806 0l-.893.893a1.984 1.984 0 0 1-1.403.581H7.04A1.984 1.984 0 0 0 5.055 7.04v1.262c0 .527-.209 1.031-.581 1.403l-.893.893a1.984 1.984 0 0 0 0 2.806l.893.893c.372.372.581.876.581 1.403v1.262a1.984 1.984 0 0 0 1.984 1.984h1.262c.527 0 1.031.209 1.403.581l.893.893a1.984 1.984 0 0 0 2.806 0l.893-.893a1.985 1.985 0 0 1 1.403-.581h1.262a1.984 1.984 0 0 0 1.984-1.984V15.7c0-.527.209-1.031.581-1.403Z"></path></svg>`);
function BadgeCheckOutline($$anchor, $$props) {
  if (new.target === BadgeCheckOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, BadgeCheckOutline);
  validate_prop_bindings($$props, [], [], BadgeCheckOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "badge check outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_141();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_241();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_341();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_441();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_541();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_641();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(BadgeCheckOutline);
  BadgeCheckOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var BadgeCheckOutline_default = BadgeCheckOutline;
BadgeCheckOutline.filename = ".../flowbite-svelte-icons/dist/BadgeCheckOutline.svelte";
mark_module_end(BadgeCheckOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/BadgeCheckSolid.svelte
mark_module_start();
var root_242 = svg_template(`<title> </title>`);
var root_342 = svg_template(`<desc> </desc>`);
var root_142 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M12 2c-.791 0-1.55.314-2.11.874l-.893.893a.985.985 0 0 1-.696.288H7.04A2.984 2.984 0 0 0 4.055 7.04v1.262a.986.986 0 0 1-.288.696l-.893.893a2.984 2.984 0 0 0 0 4.22l.893.893a.985.985 0 0 1 .288.696v1.262a2.984 2.984 0 0 0 2.984 2.984h1.262c.261 0 .512.104.696.288l.893.893a2.984 2.984 0 0 0 4.22 0l.893-.893a.985.985 0 0 1 .696-.288h1.262a2.984 2.984 0 0 0 2.984-2.984V15.7c0-.261.104-.512.288-.696l.893-.893a2.984 2.984 0 0 0 0-4.22l-.893-.893a.985.985 0 0 1-.288-.696V7.04a2.984 2.984 0 0 0-2.984-2.984h-1.262a.985.985 0 0 1-.696-.288l-.893-.893A2.984 2.984 0 0 0 12 2Zm3.683 7.73a1 1 0 1 0-1.414-1.413l-4.253 4.253-1.277-1.277a1 1 0 0 0-1.415 1.414l1.985 1.984a1 1 0 0 0 1.414 0l4.96-4.96Z" clip-rule="evenodd"></path></svg>`);
var root_542 = svg_template(`<title> </title>`);
var root_642 = svg_template(`<desc> </desc>`);
var root_442 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M12 2c-.791 0-1.55.314-2.11.874l-.893.893a.985.985 0 0 1-.696.288H7.04A2.984 2.984 0 0 0 4.055 7.04v1.262a.986.986 0 0 1-.288.696l-.893.893a2.984 2.984 0 0 0 0 4.22l.893.893a.985.985 0 0 1 .288.696v1.262a2.984 2.984 0 0 0 2.984 2.984h1.262c.261 0 .512.104.696.288l.893.893a2.984 2.984 0 0 0 4.22 0l.893-.893a.985.985 0 0 1 .696-.288h1.262a2.984 2.984 0 0 0 2.984-2.984V15.7c0-.261.104-.512.288-.696l.893-.893a2.984 2.984 0 0 0 0-4.22l-.893-.893a.985.985 0 0 1-.288-.696V7.04a2.984 2.984 0 0 0-2.984-2.984h-1.262a.985.985 0 0 1-.696-.288l-.893-.893A2.984 2.984 0 0 0 12 2Zm3.683 7.73a1 1 0 1 0-1.414-1.413l-4.253 4.253-1.277-1.277a1 1 0 0 0-1.415 1.414l1.985 1.984a1 1 0 0 0 1.414 0l4.96-4.96Z" clip-rule="evenodd"></path></svg>`);
function BadgeCheckSolid($$anchor, $$props) {
  if (new.target === BadgeCheckSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, BadgeCheckSolid);
  validate_prop_bindings($$props, [], [], BadgeCheckSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "badge check solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_142();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_242();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_342();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_442();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_542();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_642();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(BadgeCheckSolid);
  BadgeCheckSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var BadgeCheckSolid_default = BadgeCheckSolid;
BadgeCheckSolid.filename = ".../flowbite-svelte-icons/dist/BadgeCheckSolid.svelte";
mark_module_end(BadgeCheckSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/BanOutline.svelte
mark_module_start();
var root_243 = svg_template(`<title> </title>`);
var root_343 = svg_template(`<desc> </desc>`);
var root_143 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" d="m6 6 12 12m3-6a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"></path></svg>`);
var root_543 = svg_template(`<title> </title>`);
var root_643 = svg_template(`<desc> </desc>`);
var root_443 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" d="m6 6 12 12m3-6a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"></path></svg>`);
function BanOutline($$anchor, $$props) {
  if (new.target === BanOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, BanOutline);
  validate_prop_bindings($$props, [], [], BanOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "ban outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_143();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_243();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_343();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_443();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_543();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_643();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(BanOutline);
  BanOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var BanOutline_default = BanOutline;
BanOutline.filename = ".../flowbite-svelte-icons/dist/BanOutline.svelte";
mark_module_end(BanOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/BarsFromLeftOutline.svelte
mark_module_start();
var root_244 = svg_template(`<title> </title>`);
var root_344 = svg_template(`<desc> </desc>`);
var root_144 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" d="M5 7h14M5 12h14M5 17h10"></path></svg>`);
var root_544 = svg_template(`<title> </title>`);
var root_644 = svg_template(`<desc> </desc>`);
var root_444 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" d="M5 7h14M5 12h14M5 17h10"></path></svg>`);
function BarsFromLeftOutline($$anchor, $$props) {
  if (new.target === BarsFromLeftOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, BarsFromLeftOutline);
  validate_prop_bindings($$props, [], [], BarsFromLeftOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "bars from left outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_144();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_244();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_344();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_444();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_544();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_644();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(BarsFromLeftOutline);
  BarsFromLeftOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var BarsFromLeftOutline_default = BarsFromLeftOutline;
BarsFromLeftOutline.filename = ".../flowbite-svelte-icons/dist/BarsFromLeftOutline.svelte";
mark_module_end(BarsFromLeftOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/BarsOutline.svelte
mark_module_start();
var root_245 = svg_template(`<title> </title>`);
var root_345 = svg_template(`<desc> </desc>`);
var root_145 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" d="M5 7h14M5 12h14M5 17h14"></path></svg>`);
var root_545 = svg_template(`<title> </title>`);
var root_645 = svg_template(`<desc> </desc>`);
var root_445 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" d="M5 7h14M5 12h14M5 17h14"></path></svg>`);
function BarsOutline($$anchor, $$props) {
  if (new.target === BarsOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, BarsOutline);
  validate_prop_bindings($$props, [], [], BarsOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "bars outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_145();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_245();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_345();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_445();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_545();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_645();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(BarsOutline);
  BarsOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var BarsOutline_default = BarsOutline;
BarsOutline.filename = ".../flowbite-svelte-icons/dist/BarsOutline.svelte";
mark_module_end(BarsOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/BellActiveAltOutline.svelte
mark_module_start();
var root_246 = svg_template(`<title> </title>`);
var root_346 = svg_template(`<desc> </desc>`);
var root_146 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12 5.365V3m0 2.365a5.338 5.338 0 0 1 5.133 5.368v1.8c0 2.386 1.867 2.982 1.867 4.175 0 .593 0 1.193-.538 1.193H5.538c-.538 0-.538-.6-.538-1.193 0-1.193 1.867-1.789 1.867-4.175v-1.8A5.338 5.338 0 0 1 12 5.365Zm-8.134 5.368a8.458 8.458 0 0 1 2.252-5.714m14.016 5.714a8.458 8.458 0 0 0-2.252-5.714M8.54 17.901a3.48 3.48 0 0 0 6.92 0H8.54Z"></path></svg>`);
var root_546 = svg_template(`<title> </title>`);
var root_646 = svg_template(`<desc> </desc>`);
var root_446 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12 5.365V3m0 2.365a5.338 5.338 0 0 1 5.133 5.368v1.8c0 2.386 1.867 2.982 1.867 4.175 0 .593 0 1.193-.538 1.193H5.538c-.538 0-.538-.6-.538-1.193 0-1.193 1.867-1.789 1.867-4.175v-1.8A5.338 5.338 0 0 1 12 5.365Zm-8.134 5.368a8.458 8.458 0 0 1 2.252-5.714m14.016 5.714a8.458 8.458 0 0 0-2.252-5.714M8.54 17.901a3.48 3.48 0 0 0 6.92 0H8.54Z"></path></svg>`);
function BellActiveAltOutline($$anchor, $$props) {
  if (new.target === BellActiveAltOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, BellActiveAltOutline);
  validate_prop_bindings($$props, [], [], BellActiveAltOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "bell active alt outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_146();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_246();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_346();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_446();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_546();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_646();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(BellActiveAltOutline);
  BellActiveAltOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var BellActiveAltOutline_default = BellActiveAltOutline;
BellActiveAltOutline.filename = ".../flowbite-svelte-icons/dist/BellActiveAltOutline.svelte";
mark_module_end(BellActiveAltOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/BellActiveAltSolid.svelte
mark_module_start();
var root_247 = svg_template(`<title> </title>`);
var root_347 = svg_template(`<desc> </desc>`);
var root_147 = svg_template(`<svg><!><!><path d="M17.133 12.632v-1.8a5.407 5.407 0 0 0-4.154-5.262.955.955 0 0 0 .021-.106V3.1a1 1 0 0 0-2 0v2.364a.933.933 0 0 0 .021.106 5.406 5.406 0 0 0-4.154 5.262v1.8C6.867 15.018 5 15.614 5 16.807 5 17.4 5 18 5.538 18h12.924C19 18 19 17.4 19 16.807c0-1.193-1.867-1.789-1.867-4.175Zm-13.267-.8a1 1 0 0 1-1-1 9.424 9.424 0 0 1 2.517-6.391A1.001 1.001 0 1 1 6.854 5.8a7.43 7.43 0 0 0-1.988 5.037 1 1 0 0 1-1 .995Zm16.268 0a1 1 0 0 1-1-1A7.431 7.431 0 0 0 17.146 5.8a1 1 0 0 1 1.471-1.354 9.424 9.424 0 0 1 2.517 6.391 1 1 0 0 1-1 .995ZM8.823 19a3.453 3.453 0 0 0 6.354 0H8.823Z"></path></svg>`);
var root_547 = svg_template(`<title> </title>`);
var root_647 = svg_template(`<desc> </desc>`);
var root_447 = svg_template(`<svg><!><!><path d="M17.133 12.632v-1.8a5.407 5.407 0 0 0-4.154-5.262.955.955 0 0 0 .021-.106V3.1a1 1 0 0 0-2 0v2.364a.933.933 0 0 0 .021.106 5.406 5.406 0 0 0-4.154 5.262v1.8C6.867 15.018 5 15.614 5 16.807 5 17.4 5 18 5.538 18h12.924C19 18 19 17.4 19 16.807c0-1.193-1.867-1.789-1.867-4.175Zm-13.267-.8a1 1 0 0 1-1-1 9.424 9.424 0 0 1 2.517-6.391A1.001 1.001 0 1 1 6.854 5.8a7.43 7.43 0 0 0-1.988 5.037 1 1 0 0 1-1 .995Zm16.268 0a1 1 0 0 1-1-1A7.431 7.431 0 0 0 17.146 5.8a1 1 0 0 1 1.471-1.354 9.424 9.424 0 0 1 2.517 6.391 1 1 0 0 1-1 .995ZM8.823 19a3.453 3.453 0 0 0 6.354 0H8.823Z"></path></svg>`);
function BellActiveAltSolid($$anchor, $$props) {
  if (new.target === BellActiveAltSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, BellActiveAltSolid);
  validate_prop_bindings($$props, [], [], BellActiveAltSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "bell active alt solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_147();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_247();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_347();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_447();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_547();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_647();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(BellActiveAltSolid);
  BellActiveAltSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var BellActiveAltSolid_default = BellActiveAltSolid;
BellActiveAltSolid.filename = ".../flowbite-svelte-icons/dist/BellActiveAltSolid.svelte";
mark_module_end(BellActiveAltSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/BellActiveOutline.svelte
mark_module_start();
var root_248 = svg_template(`<title> </title>`);
var root_348 = svg_template(`<desc> </desc>`);
var root_148 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m10.827 5.465-.435-2.324m.435 2.324a5.338 5.338 0 0 1 6.033 4.333l.331 1.769c.44 2.345 2.383 2.588 2.6 3.761.11.586.22 1.171-.31 1.271l-12.7 2.377c-.529.099-.639-.488-.749-1.074C5.813 16.73 7.538 15.8 7.1 13.455c-.219-1.169.218 1.162-.33-1.769a5.338 5.338 0 0 1 4.058-6.221Zm-7.046 4.41c.143-1.877.822-3.461 2.086-4.856m2.646 13.633a3.472 3.472 0 0 0 6.728-.777l.09-.5-6.818 1.277Z"></path></svg>`);
var root_548 = svg_template(`<title> </title>`);
var root_648 = svg_template(`<desc> </desc>`);
var root_448 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m10.827 5.465-.435-2.324m.435 2.324a5.338 5.338 0 0 1 6.033 4.333l.331 1.769c.44 2.345 2.383 2.588 2.6 3.761.11.586.22 1.171-.31 1.271l-12.7 2.377c-.529.099-.639-.488-.749-1.074C5.813 16.73 7.538 15.8 7.1 13.455c-.219-1.169.218 1.162-.33-1.769a5.338 5.338 0 0 1 4.058-6.221Zm-7.046 4.41c.143-1.877.822-3.461 2.086-4.856m2.646 13.633a3.472 3.472 0 0 0 6.728-.777l.09-.5-6.818 1.277Z"></path></svg>`);
function BellActiveOutline($$anchor, $$props) {
  if (new.target === BellActiveOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, BellActiveOutline);
  validate_prop_bindings($$props, [], [], BellActiveOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "bell active outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_148();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_248();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_348();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_448();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_548();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_648();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(BellActiveOutline);
  BellActiveOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var BellActiveOutline_default = BellActiveOutline;
BellActiveOutline.filename = ".../flowbite-svelte-icons/dist/BellActiveOutline.svelte";
mark_module_end(BellActiveOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/BellActiveSolid.svelte
mark_module_start();
var root_249 = svg_template(`<title> </title>`);
var root_349 = svg_template(`<desc> </desc>`);
var root_149 = svg_template(`<svg><!><!><path d="M11.209 3.816a1 1 0 0 0-1.966.368l.325 1.74a5.338 5.338 0 0 0-2.8 5.762l.276 1.473.055.296c.258 1.374-.228 2.262-.63 2.998-.285.52-.527.964-.437 1.449.11.586.22 1.173.75 1.074l12.7-2.377c.528-.1.418-.685.308-1.27-.103-.564-.636-1.123-1.195-1.711-.606-.636-1.243-1.306-1.404-2.051-.233-1.085-.275-1.387-.303-1.587-.009-.063-.016-.117-.028-.182a5.338 5.338 0 0 0-5.353-4.39l-.298-1.592Z"></path><path fill-rule="evenodd" d="M6.539 4.278a1 1 0 0 1 .07 1.412c-1.115 1.23-1.705 2.605-1.83 4.26a1 1 0 0 1-1.995-.15c.16-2.099.929-3.893 2.342-5.453a1 1 0 0 1 1.413-.069Z" clip-rule="evenodd"></path><path d="M8.95 19.7c.7.8 1.7 1.3 2.8 1.3 1.6 0 2.9-1.1 3.3-2.5l-6.1 1.2Z"></path></svg>`);
var root_549 = svg_template(`<title> </title>`);
var root_649 = svg_template(`<desc> </desc>`);
var root_449 = svg_template(`<svg><!><!><path d="M11.209 3.816a1 1 0 0 0-1.966.368l.325 1.74a5.338 5.338 0 0 0-2.8 5.762l.276 1.473.055.296c.258 1.374-.228 2.262-.63 2.998-.285.52-.527.964-.437 1.449.11.586.22 1.173.75 1.074l12.7-2.377c.528-.1.418-.685.308-1.27-.103-.564-.636-1.123-1.195-1.711-.606-.636-1.243-1.306-1.404-2.051-.233-1.085-.275-1.387-.303-1.587-.009-.063-.016-.117-.028-.182a5.338 5.338 0 0 0-5.353-4.39l-.298-1.592Z"></path><path fill-rule="evenodd" d="M6.539 4.278a1 1 0 0 1 .07 1.412c-1.115 1.23-1.705 2.605-1.83 4.26a1 1 0 0 1-1.995-.15c.16-2.099.929-3.893 2.342-5.453a1 1 0 0 1 1.413-.069Z" clip-rule="evenodd"></path><path d="M8.95 19.7c.7.8 1.7 1.3 2.8 1.3 1.6 0 2.9-1.1 3.3-2.5l-6.1 1.2Z"></path></svg>`);
function BellActiveSolid($$anchor, $$props) {
  if (new.target === BellActiveSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, BellActiveSolid);
  validate_prop_bindings($$props, [], [], BellActiveSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "bell active solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_149();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_249();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_349();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      var path_2 = sibling(path_1);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_449();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_549();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_649();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_3 = sibling(node_4);
      var path_4 = sibling(path_3);
      var path_5 = sibling(path_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(BellActiveSolid);
  BellActiveSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var BellActiveSolid_default = BellActiveSolid;
BellActiveSolid.filename = ".../flowbite-svelte-icons/dist/BellActiveSolid.svelte";
mark_module_end(BellActiveSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/BellOutline.svelte
mark_module_start();
var root_250 = svg_template(`<title> </title>`);
var root_350 = svg_template(`<desc> </desc>`);
var root_150 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12 5.365V3m0 2.365a5.338 5.338 0 0 1 5.133 5.368v1.8c0 2.386 1.867 2.982 1.867 4.175 0 .593 0 1.292-.538 1.292H5.538C5 18 5 17.301 5 16.708c0-1.193 1.867-1.789 1.867-4.175v-1.8A5.338 5.338 0 0 1 12 5.365ZM8.733 18c.094.852.306 1.54.944 2.112a3.48 3.48 0 0 0 4.646 0c.638-.572 1.236-1.26 1.33-2.112h-6.92Z"></path></svg>`);
var root_550 = svg_template(`<title> </title>`);
var root_650 = svg_template(`<desc> </desc>`);
var root_450 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12 5.365V3m0 2.365a5.338 5.338 0 0 1 5.133 5.368v1.8c0 2.386 1.867 2.982 1.867 4.175 0 .593 0 1.292-.538 1.292H5.538C5 18 5 17.301 5 16.708c0-1.193 1.867-1.789 1.867-4.175v-1.8A5.338 5.338 0 0 1 12 5.365ZM8.733 18c.094.852.306 1.54.944 2.112a3.48 3.48 0 0 0 4.646 0c.638-.572 1.236-1.26 1.33-2.112h-6.92Z"></path></svg>`);
function BellOutline($$anchor, $$props) {
  if (new.target === BellOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, BellOutline);
  validate_prop_bindings($$props, [], [], BellOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "bell outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_150();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_250();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_350();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_450();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_550();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_650();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(BellOutline);
  BellOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var BellOutline_default = BellOutline;
BellOutline.filename = ".../flowbite-svelte-icons/dist/BellOutline.svelte";
mark_module_end(BellOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/BellRingOutline.svelte
mark_module_start();
var root_251 = svg_template(`<title> </title>`);
var root_351 = svg_template(`<desc> </desc>`);
var root_151 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12 5.464V3.099m0 2.365a5.338 5.338 0 0 1 5.133 5.368v1.8c0 2.386 1.867 2.982 1.867 4.175C19 17.4 19 18 18.462 18H5.538C5 18 5 17.4 5 16.807c0-1.193 1.867-1.789 1.867-4.175v-1.8A5.338 5.338 0 0 1 12 5.464ZM6 5 5 4M4 9H3m15-4 1-1m1 5h1M8.54 18a3.48 3.48 0 0 0 6.92 0H8.54Z"></path></svg>`);
var root_551 = svg_template(`<title> </title>`);
var root_651 = svg_template(`<desc> </desc>`);
var root_451 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12 5.464V3.099m0 2.365a5.338 5.338 0 0 1 5.133 5.368v1.8c0 2.386 1.867 2.982 1.867 4.175C19 17.4 19 18 18.462 18H5.538C5 18 5 17.4 5 16.807c0-1.193 1.867-1.789 1.867-4.175v-1.8A5.338 5.338 0 0 1 12 5.464ZM6 5 5 4M4 9H3m15-4 1-1m1 5h1M8.54 18a3.48 3.48 0 0 0 6.92 0H8.54Z"></path></svg>`);
function BellRingOutline($$anchor, $$props) {
  if (new.target === BellRingOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, BellRingOutline);
  validate_prop_bindings($$props, [], [], BellRingOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "bell ring outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_151();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_251();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_351();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_451();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_551();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_651();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(BellRingOutline);
  BellRingOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var BellRingOutline_default = BellRingOutline;
BellRingOutline.filename = ".../flowbite-svelte-icons/dist/BellRingOutline.svelte";
mark_module_end(BellRingOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/BellRingSolid.svelte
mark_module_start();
var root_252 = svg_template(`<title> </title>`);
var root_352 = svg_template(`<desc> </desc>`);
var root_152 = svg_template(`<svg><!><!><path d="M17.133 12.632v-1.8a5.406 5.406 0 0 0-4.154-5.262.955.955 0 0 0 .021-.106V3.1a1 1 0 0 0-2 0v2.364a.955.955 0 0 0 .021.106 5.406 5.406 0 0 0-4.154 5.262v1.8C6.867 15.018 5 15.614 5 16.807 5 17.4 5 18 5.538 18h12.924C19 18 19 17.4 19 16.807c0-1.193-1.867-1.789-1.867-4.175ZM6 6a1 1 0 0 1-.707-.293l-1-1a1 1 0 0 1 1.414-1.414l1 1A1 1 0 0 1 6 6Zm-2 4H3a1 1 0 0 1 0-2h1a1 1 0 1 1 0 2Zm14-4a1 1 0 0 1-.707-1.707l1-1a1 1 0 1 1 1.414 1.414l-1 1A1 1 0 0 1 18 6Zm3 4h-1a1 1 0 1 1 0-2h1a1 1 0 1 1 0 2ZM8.823 19a3.453 3.453 0 0 0 6.354 0H8.823Z"></path></svg>`);
var root_552 = svg_template(`<title> </title>`);
var root_652 = svg_template(`<desc> </desc>`);
var root_452 = svg_template(`<svg><!><!><path d="M17.133 12.632v-1.8a5.406 5.406 0 0 0-4.154-5.262.955.955 0 0 0 .021-.106V3.1a1 1 0 0 0-2 0v2.364a.955.955 0 0 0 .021.106 5.406 5.406 0 0 0-4.154 5.262v1.8C6.867 15.018 5 15.614 5 16.807 5 17.4 5 18 5.538 18h12.924C19 18 19 17.4 19 16.807c0-1.193-1.867-1.789-1.867-4.175ZM6 6a1 1 0 0 1-.707-.293l-1-1a1 1 0 0 1 1.414-1.414l1 1A1 1 0 0 1 6 6Zm-2 4H3a1 1 0 0 1 0-2h1a1 1 0 1 1 0 2Zm14-4a1 1 0 0 1-.707-1.707l1-1a1 1 0 1 1 1.414 1.414l-1 1A1 1 0 0 1 18 6Zm3 4h-1a1 1 0 1 1 0-2h1a1 1 0 1 1 0 2ZM8.823 19a3.453 3.453 0 0 0 6.354 0H8.823Z"></path></svg>`);
function BellRingSolid($$anchor, $$props) {
  if (new.target === BellRingSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, BellRingSolid);
  validate_prop_bindings($$props, [], [], BellRingSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "bell ring solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_152();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_252();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_352();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_452();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_552();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_652();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(BellRingSolid);
  BellRingSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var BellRingSolid_default = BellRingSolid;
BellRingSolid.filename = ".../flowbite-svelte-icons/dist/BellRingSolid.svelte";
mark_module_end(BellRingSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/BellSolid.svelte
mark_module_start();
var root_253 = svg_template(`<title> </title>`);
var root_353 = svg_template(`<desc> </desc>`);
var root_153 = svg_template(`<svg><!><!><path d="M17.133 12.632v-1.8a5.406 5.406 0 0 0-4.154-5.262.955.955 0 0 0 .021-.106V3.1a1 1 0 0 0-2 0v2.364a.955.955 0 0 0 .021.106 5.406 5.406 0 0 0-4.154 5.262v1.8C6.867 15.018 5 15.614 5 16.807 5 17.4 5 18 5.538 18h12.924C19 18 19 17.4 19 16.807c0-1.193-1.867-1.789-1.867-4.175ZM8.823 19a3.453 3.453 0 0 0 6.354 0H8.823Z"></path></svg>`);
var root_553 = svg_template(`<title> </title>`);
var root_653 = svg_template(`<desc> </desc>`);
var root_453 = svg_template(`<svg><!><!><path d="M17.133 12.632v-1.8a5.406 5.406 0 0 0-4.154-5.262.955.955 0 0 0 .021-.106V3.1a1 1 0 0 0-2 0v2.364a.955.955 0 0 0 .021.106 5.406 5.406 0 0 0-4.154 5.262v1.8C6.867 15.018 5 15.614 5 16.807 5 17.4 5 18 5.538 18h12.924C19 18 19 17.4 19 16.807c0-1.193-1.867-1.789-1.867-4.175ZM8.823 19a3.453 3.453 0 0 0 6.354 0H8.823Z"></path></svg>`);
function BellSolid($$anchor, $$props) {
  if (new.target === BellSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, BellSolid);
  validate_prop_bindings($$props, [], [], BellSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "bell solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_153();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_253();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_353();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_453();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_553();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_653();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(BellSolid);
  BellSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var BellSolid_default = BellSolid;
BellSolid.filename = ".../flowbite-svelte-icons/dist/BellSolid.svelte";
mark_module_end(BellSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/BlenderPhoneOutline.svelte
mark_module_start();
var root_254 = svg_template(`<title> </title>`);
var root_354 = svg_template(`<desc> </desc>`);
var root_154 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M20.283 8h-4.285m3.85 3h-3.85m4.061-6H11v11h8.27l1.715-9.847A.983.983 0 0 0 20.059 5ZM6.581 13.23h-.838A13.752 13.752 0 0 1 5.622 11c-.02-.745.02-1.49.12-2.23h1.04c.252 0 .496-.088.683-.245a.927.927 0 0 0 .329-.61l.2-1.872a.888.888 0 0 0-.045-.39.936.936 0 0 0-.212-.34 1.017 1.017 0 0 0-.341-.231A1.08 1.08 0 0 0 6.983 5h-2.06a1.27 1.27 0 0 0-.699.204 1.135 1.135 0 0 0-.442.543A15.066 15.066 0 0 0 3.007 11a15.656 15.656 0 0 0 .795 5.229c.165.462 1.342.771 1.864.771h1.116c.142 0 .283-.028.413-.082.13-.053.246-.132.341-.23a.936.936 0 0 0 .212-.34.889.889 0 0 0 .046-.391l-.201-1.873a.927.927 0 0 0-.33-.609 1.059 1.059 0 0 0-.682-.245ZM10 18v1h10v-1a2 2 0 0 0-2-2h-6a2 2 0 0 0-2 2Z"></path></svg>`);
var root_554 = svg_template(`<title> </title>`);
var root_654 = svg_template(`<desc> </desc>`);
var root_454 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M20.283 8h-4.285m3.85 3h-3.85m4.061-6H11v11h8.27l1.715-9.847A.983.983 0 0 0 20.059 5ZM6.581 13.23h-.838A13.752 13.752 0 0 1 5.622 11c-.02-.745.02-1.49.12-2.23h1.04c.252 0 .496-.088.683-.245a.927.927 0 0 0 .329-.61l.2-1.872a.888.888 0 0 0-.045-.39.936.936 0 0 0-.212-.34 1.017 1.017 0 0 0-.341-.231A1.08 1.08 0 0 0 6.983 5h-2.06a1.27 1.27 0 0 0-.699.204 1.135 1.135 0 0 0-.442.543A15.066 15.066 0 0 0 3.007 11a15.656 15.656 0 0 0 .795 5.229c.165.462 1.342.771 1.864.771h1.116c.142 0 .283-.028.413-.082.13-.053.246-.132.341-.23a.936.936 0 0 0 .212-.34.889.889 0 0 0 .046-.391l-.201-1.873a.927.927 0 0 0-.33-.609 1.059 1.059 0 0 0-.682-.245ZM10 18v1h10v-1a2 2 0 0 0-2-2h-6a2 2 0 0 0-2 2Z"></path></svg>`);
function BlenderPhoneOutline($$anchor, $$props) {
  if (new.target === BlenderPhoneOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, BlenderPhoneOutline);
  validate_prop_bindings($$props, [], [], BlenderPhoneOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "blender phone outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_154();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_254();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_354();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_454();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_554();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_654();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(BlenderPhoneOutline);
  BlenderPhoneOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var BlenderPhoneOutline_default = BlenderPhoneOutline;
BlenderPhoneOutline.filename = ".../flowbite-svelte-icons/dist/BlenderPhoneOutline.svelte";
mark_module_end(BlenderPhoneOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/BlenderPhoneSolid.svelte
mark_module_start();
var root_255 = svg_template(`<title> </title>`);
var root_355 = svg_template(`<desc> </desc>`);
var root_155 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M11 4a1 1 0 0 0-1 1v10h10.459l.522-3H16a1 1 0 1 1 0-2h5.33l.174-1H16a1 1 0 1 1 0-2h5.852l.117-.67v-.003A1.983 1.983 0 0 0 20.06 4H11ZM9 18c0-.35.06-.687.17-1h11.66c.11.313.17.65.17 1v1a1 1 0 0 1-1 1H10a1 1 0 0 1-1-1v-1Zm-6.991-7a17.8 17.8 0 0 0 .953 6.1c.198.54 1.61.9 2.237.9h1.34c.17 0 .339-.032.495-.095a1.24 1.24 0 0 0 .41-.27c.114-.114.2-.25.254-.396a1.01 1.01 0 0 0 .055-.456l-.242-2.185a1.073 1.073 0 0 0-.395-.71 1.292 1.292 0 0 0-.819-.286H5.291c-.12-.863-.17-1.732-.145-2.602-.024-.87.024-1.74.145-2.602H6.54c.302 0 .594-.102.818-.286a1.07 1.07 0 0 0 .396-.71l.24-2.185a1.01 1.01 0 0 0-.054-.456 1.088 1.088 0 0 0-.254-.397 1.223 1.223 0 0 0-.41-.269A1.328 1.328 0 0 0 6.78 4H4.307c-.3-.001-.592.082-.838.238a1.335 1.335 0 0 0-.531.634A17.127 17.127 0 0 0 2.008 11Z" clip-rule="evenodd"></path></svg>`);
var root_555 = svg_template(`<title> </title>`);
var root_655 = svg_template(`<desc> </desc>`);
var root_455 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M11 4a1 1 0 0 0-1 1v10h10.459l.522-3H16a1 1 0 1 1 0-2h5.33l.174-1H16a1 1 0 1 1 0-2h5.852l.117-.67v-.003A1.983 1.983 0 0 0 20.06 4H11ZM9 18c0-.35.06-.687.17-1h11.66c.11.313.17.65.17 1v1a1 1 0 0 1-1 1H10a1 1 0 0 1-1-1v-1Zm-6.991-7a17.8 17.8 0 0 0 .953 6.1c.198.54 1.61.9 2.237.9h1.34c.17 0 .339-.032.495-.095a1.24 1.24 0 0 0 .41-.27c.114-.114.2-.25.254-.396a1.01 1.01 0 0 0 .055-.456l-.242-2.185a1.073 1.073 0 0 0-.395-.71 1.292 1.292 0 0 0-.819-.286H5.291c-.12-.863-.17-1.732-.145-2.602-.024-.87.024-1.74.145-2.602H6.54c.302 0 .594-.102.818-.286a1.07 1.07 0 0 0 .396-.71l.24-2.185a1.01 1.01 0 0 0-.054-.456 1.088 1.088 0 0 0-.254-.397 1.223 1.223 0 0 0-.41-.269A1.328 1.328 0 0 0 6.78 4H4.307c-.3-.001-.592.082-.838.238a1.335 1.335 0 0 0-.531.634A17.127 17.127 0 0 0 2.008 11Z" clip-rule="evenodd"></path></svg>`);
function BlenderPhoneSolid($$anchor, $$props) {
  if (new.target === BlenderPhoneSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, BlenderPhoneSolid);
  validate_prop_bindings($$props, [], [], BlenderPhoneSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "blender phone solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_155();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_255();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_355();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_455();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_555();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_655();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(BlenderPhoneSolid);
  BlenderPhoneSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var BlenderPhoneSolid_default = BlenderPhoneSolid;
BlenderPhoneSolid.filename = ".../flowbite-svelte-icons/dist/BlenderPhoneSolid.svelte";
mark_module_end(BlenderPhoneSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/BookOpenOutline.svelte
mark_module_start();
var root_256 = svg_template(`<title> </title>`);
var root_356 = svg_template(`<desc> </desc>`);
var root_156 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12 6.03v13m0-13c-2.819-.831-4.715-1.076-8.029-1.023A.99.99 0 0 0 3 6v11c0 .563.466 1.014 1.03 1.007 3.122-.043 5.018.212 7.97 1.023m0-13c2.819-.831 4.715-1.076 8.029-1.023A.99.99 0 0 1 21 6v11c0 .563-.466 1.014-1.03 1.007-3.122-.043-5.018.212-7.97 1.023"></path></svg>`);
var root_556 = svg_template(`<title> </title>`);
var root_656 = svg_template(`<desc> </desc>`);
var root_456 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12 6.03v13m0-13c-2.819-.831-4.715-1.076-8.029-1.023A.99.99 0 0 0 3 6v11c0 .563.466 1.014 1.03 1.007 3.122-.043 5.018.212 7.97 1.023m0-13c2.819-.831 4.715-1.076 8.029-1.023A.99.99 0 0 1 21 6v11c0 .563-.466 1.014-1.03 1.007-3.122-.043-5.018.212-7.97 1.023"></path></svg>`);
function BookOpenOutline($$anchor, $$props) {
  if (new.target === BookOpenOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, BookOpenOutline);
  validate_prop_bindings($$props, [], [], BookOpenOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "book open outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_156();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_256();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_356();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_456();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_556();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_656();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(BookOpenOutline);
  BookOpenOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var BookOpenOutline_default = BookOpenOutline;
BookOpenOutline.filename = ".../flowbite-svelte-icons/dist/BookOpenOutline.svelte";
mark_module_end(BookOpenOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/BookOpenSolid.svelte
mark_module_start();
var root_257 = svg_template(`<title> </title>`);
var root_357 = svg_template(`<desc> </desc>`);
var root_157 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M11 4.717c-2.286-.58-4.16-.756-7.045-.71A1.99 1.99 0 0 0 2 6v11c0 1.133.934 2.022 2.044 2.007 2.759-.038 4.5.16 6.956.791V4.717Zm2 15.081c2.456-.631 4.198-.829 6.956-.791A2.013 2.013 0 0 0 22 16.999V6a1.99 1.99 0 0 0-1.955-1.993c-2.885-.046-4.76.13-7.045.71v15.081Z" clip-rule="evenodd"></path></svg>`);
var root_557 = svg_template(`<title> </title>`);
var root_657 = svg_template(`<desc> </desc>`);
var root_457 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M11 4.717c-2.286-.58-4.16-.756-7.045-.71A1.99 1.99 0 0 0 2 6v11c0 1.133.934 2.022 2.044 2.007 2.759-.038 4.5.16 6.956.791V4.717Zm2 15.081c2.456-.631 4.198-.829 6.956-.791A2.013 2.013 0 0 0 22 16.999V6a1.99 1.99 0 0 0-1.955-1.993c-2.885-.046-4.76.13-7.045.71v15.081Z" clip-rule="evenodd"></path></svg>`);
function BookOpenSolid($$anchor, $$props) {
  if (new.target === BookOpenSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, BookOpenSolid);
  validate_prop_bindings($$props, [], [], BookOpenSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "book open solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_157();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_257();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_357();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_457();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_557();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_657();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(BookOpenSolid);
  BookOpenSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var BookOpenSolid_default = BookOpenSolid;
BookOpenSolid.filename = ".../flowbite-svelte-icons/dist/BookOpenSolid.svelte";
mark_module_end(BookOpenSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/BookOutline.svelte
mark_module_start();
var root_258 = svg_template(`<title> </title>`);
var root_358 = svg_template(`<desc> </desc>`);
var root_158 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M5 19V4a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1v13H7a2 2 0 0 0-2 2Zm0 0a2 2 0 0 0 2 2h12M9 3v14m7 0v4"></path></svg>`);
var root_558 = svg_template(`<title> </title>`);
var root_658 = svg_template(`<desc> </desc>`);
var root_458 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M5 19V4a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1v13H7a2 2 0 0 0-2 2Zm0 0a2 2 0 0 0 2 2h12M9 3v14m7 0v4"></path></svg>`);
function BookOutline($$anchor, $$props) {
  if (new.target === BookOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, BookOutline);
  validate_prop_bindings($$props, [], [], BookOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "book outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_158();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_258();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_358();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_458();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_558();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_658();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(BookOutline);
  BookOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var BookOutline_default = BookOutline;
BookOutline.filename = ".../flowbite-svelte-icons/dist/BookOutline.svelte";
mark_module_end(BookOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/BookSolid.svelte
mark_module_start();
var root_259 = svg_template(`<title> </title>`);
var root_359 = svg_template(`<desc> </desc>`);
var root_159 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M6 2a2 2 0 0 0-2 2v15a3 3 0 0 0 3 3h12a1 1 0 1 0 0-2h-2v-2h2a1 1 0 0 0 1-1V4a2 2 0 0 0-2-2h-8v16h5v2H7a1 1 0 1 1 0-2h1V2H6Z" clip-rule="evenodd"></path></svg>`);
var root_559 = svg_template(`<title> </title>`);
var root_659 = svg_template(`<desc> </desc>`);
var root_459 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M6 2a2 2 0 0 0-2 2v15a3 3 0 0 0 3 3h12a1 1 0 1 0 0-2h-2v-2h2a1 1 0 0 0 1-1V4a2 2 0 0 0-2-2h-8v16h5v2H7a1 1 0 1 1 0-2h1V2H6Z" clip-rule="evenodd"></path></svg>`);
function BookSolid($$anchor, $$props) {
  if (new.target === BookSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, BookSolid);
  validate_prop_bindings($$props, [], [], BookSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "book solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_159();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_259();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_359();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_459();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_559();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_659();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(BookSolid);
  BookSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var BookSolid_default = BookSolid;
BookSolid.filename = ".../flowbite-svelte-icons/dist/BookSolid.svelte";
mark_module_end(BookSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/BookmarkOutline.svelte
mark_module_start();
var root_260 = svg_template(`<title> </title>`);
var root_360 = svg_template(`<desc> </desc>`);
var root_160 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m17 21-5-4-5 4V3.889a.92.92 0 0 1 .244-.629.808.808 0 0 1 .59-.26h8.333a.81.81 0 0 1 .589.26.92.92 0 0 1 .244.63V21Z"></path></svg>`);
var root_560 = svg_template(`<title> </title>`);
var root_660 = svg_template(`<desc> </desc>`);
var root_460 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m17 21-5-4-5 4V3.889a.92.92 0 0 1 .244-.629.808.808 0 0 1 .59-.26h8.333a.81.81 0 0 1 .589.26.92.92 0 0 1 .244.63V21Z"></path></svg>`);
function BookmarkOutline($$anchor, $$props) {
  if (new.target === BookmarkOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, BookmarkOutline);
  validate_prop_bindings($$props, [], [], BookmarkOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "bookmark outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_160();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_260();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_360();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_460();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_560();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_660();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(BookmarkOutline);
  BookmarkOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var BookmarkOutline_default = BookmarkOutline;
BookmarkOutline.filename = ".../flowbite-svelte-icons/dist/BookmarkOutline.svelte";
mark_module_end(BookmarkOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/BookmarkSolid.svelte
mark_module_start();
var root_261 = svg_template(`<title> </title>`);
var root_361 = svg_template(`<desc> </desc>`);
var root_161 = svg_template(`<svg><!><!><path d="M7.833 2c-.507 0-.98.216-1.318.576A1.92 1.92 0 0 0 6 3.89V21a1 1 0 0 0 1.625.78L12 18.28l4.375 3.5A1 1 0 0 0 18 21V3.889c0-.481-.178-.954-.515-1.313A1.808 1.808 0 0 0 16.167 2H7.833Z"></path></svg>`);
var root_561 = svg_template(`<title> </title>`);
var root_661 = svg_template(`<desc> </desc>`);
var root_461 = svg_template(`<svg><!><!><path d="M7.833 2c-.507 0-.98.216-1.318.576A1.92 1.92 0 0 0 6 3.89V21a1 1 0 0 0 1.625.78L12 18.28l4.375 3.5A1 1 0 0 0 18 21V3.889c0-.481-.178-.954-.515-1.313A1.808 1.808 0 0 0 16.167 2H7.833Z"></path></svg>`);
function BookmarkSolid($$anchor, $$props) {
  if (new.target === BookmarkSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, BookmarkSolid);
  validate_prop_bindings($$props, [], [], BookmarkSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "bookmark solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_161();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_261();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_361();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_461();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_561();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_661();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(BookmarkSolid);
  BookmarkSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var BookmarkSolid_default = BookmarkSolid;
BookmarkSolid.filename = ".../flowbite-svelte-icons/dist/BookmarkSolid.svelte";
mark_module_end(BookmarkSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/BrainOutline.svelte
mark_module_start();
var root_262 = svg_template(`<title> </title>`);
var root_362 = svg_template(`<desc> </desc>`);
var root_162 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12 18.5A2.493 2.493 0 0 1 7.51 20H7.5a2.468 2.468 0 0 1-2.4-3.154 2.98 2.98 0 0 1-.85-5.274 2.468 2.468 0 0 1 .92-3.182 2.477 2.477 0 0 1 1.876-3.344 2.5 2.5 0 0 1 3.41-1.856A2.5 2.5 0 0 1 12 5.5m0 13v-13m0 13a2.493 2.493 0 0 0 4.49 1.5h.01a2.468 2.468 0 0 0 2.403-3.154 2.98 2.98 0 0 0 .847-5.274 2.468 2.468 0 0 0-.921-3.182 2.477 2.477 0 0 0-1.875-3.344A2.5 2.5 0 0 0 14.5 3 2.5 2.5 0 0 0 12 5.5m-8 5a2.5 2.5 0 0 1 3.48-2.3m-.28 8.551a3 3 0 0 1-2.953-5.185M20 10.5a2.5 2.5 0 0 0-3.481-2.3m.28 8.551a3 3 0 0 0 2.954-5.185"></path></svg>`);
var root_562 = svg_template(`<title> </title>`);
var root_662 = svg_template(`<desc> </desc>`);
var root_462 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12 18.5A2.493 2.493 0 0 1 7.51 20H7.5a2.468 2.468 0 0 1-2.4-3.154 2.98 2.98 0 0 1-.85-5.274 2.468 2.468 0 0 1 .92-3.182 2.477 2.477 0 0 1 1.876-3.344 2.5 2.5 0 0 1 3.41-1.856A2.5 2.5 0 0 1 12 5.5m0 13v-13m0 13a2.493 2.493 0 0 0 4.49 1.5h.01a2.468 2.468 0 0 0 2.403-3.154 2.98 2.98 0 0 0 .847-5.274 2.468 2.468 0 0 0-.921-3.182 2.477 2.477 0 0 0-1.875-3.344A2.5 2.5 0 0 0 14.5 3 2.5 2.5 0 0 0 12 5.5m-8 5a2.5 2.5 0 0 1 3.48-2.3m-.28 8.551a3 3 0 0 1-2.953-5.185M20 10.5a2.5 2.5 0 0 0-3.481-2.3m.28 8.551a3 3 0 0 0 2.954-5.185"></path></svg>`);
function BrainOutline($$anchor, $$props) {
  if (new.target === BrainOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, BrainOutline);
  validate_prop_bindings($$props, [], [], BrainOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "brain outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_162();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_262();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_362();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_462();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_562();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_662();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(BrainOutline);
  BrainOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var BrainOutline_default = BrainOutline;
BrainOutline.filename = ".../flowbite-svelte-icons/dist/BrainOutline.svelte";
mark_module_end(BrainOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/BrainSolid.svelte
mark_module_start();
var root_263 = svg_template(`<title> </title>`);
var root_363 = svg_template(`<desc> </desc>`);
var root_163 = svg_template(`<svg><!><!><path d="M11 21V2.352A3.451 3.451 0 0 0 9.5 2a3.5 3.5 0 0 0-3.261 2.238A3.5 3.5 0 0 0 4.04 8.015a3.518 3.518 0 0 0-.766 1.128c-.042.1-.064.209-.1.313a3.34 3.34 0 0 0-.106.344 3.463 3.463 0 0 0 .02 1.468A4.017 4.017 0 0 0 2.3 12.5l-.015.036a3.861 3.861 0 0 0-.216.779A3.968 3.968 0 0 0 2 14c.003.24.027.48.072.716a4 4 0 0 0 .235.832c.006.014.015.027.021.041a3.85 3.85 0 0 0 .417.727c.105.146.219.285.342.415.072.076.148.146.225.216.1.091.205.179.315.26.11.081.2.14.308.2.02.013.039.028.059.04v.053a3.506 3.506 0 0 0 3.03 3.469 3.426 3.426 0 0 0 4.154.577A.972.972 0 0 1 11 21Zm10.934-7.68a3.956 3.956 0 0 0-.215-.779l-.017-.038a4.016 4.016 0 0 0-.79-1.235 3.417 3.417 0 0 0 .017-1.468 3.387 3.387 0 0 0-.1-.333c-.034-.108-.057-.22-.1-.324a3.517 3.517 0 0 0-.766-1.128 3.5 3.5 0 0 0-2.202-3.777A3.5 3.5 0 0 0 14.5 2a3.451 3.451 0 0 0-1.5.352V21a.972.972 0 0 1-.184.546 3.426 3.426 0 0 0 4.154-.577A3.506 3.506 0 0 0 20 17.5v-.049c.02-.012.039-.027.059-.04.106-.064.208-.13.308-.2s.214-.169.315-.26c.077-.07.153-.14.225-.216a4.007 4.007 0 0 0 .459-.588c.115-.176.215-.361.3-.554.006-.014.015-.027.021-.041.087-.213.156-.434.205-.659.013-.057.024-.115.035-.173.046-.237.07-.478.073-.72a3.948 3.948 0 0 0-.066-.68Z"></path></svg>`);
var root_563 = svg_template(`<title> </title>`);
var root_663 = svg_template(`<desc> </desc>`);
var root_463 = svg_template(`<svg><!><!><path d="M11 21V2.352A3.451 3.451 0 0 0 9.5 2a3.5 3.5 0 0 0-3.261 2.238A3.5 3.5 0 0 0 4.04 8.015a3.518 3.518 0 0 0-.766 1.128c-.042.1-.064.209-.1.313a3.34 3.34 0 0 0-.106.344 3.463 3.463 0 0 0 .02 1.468A4.017 4.017 0 0 0 2.3 12.5l-.015.036a3.861 3.861 0 0 0-.216.779A3.968 3.968 0 0 0 2 14c.003.24.027.48.072.716a4 4 0 0 0 .235.832c.006.014.015.027.021.041a3.85 3.85 0 0 0 .417.727c.105.146.219.285.342.415.072.076.148.146.225.216.1.091.205.179.315.26.11.081.2.14.308.2.02.013.039.028.059.04v.053a3.506 3.506 0 0 0 3.03 3.469 3.426 3.426 0 0 0 4.154.577A.972.972 0 0 1 11 21Zm10.934-7.68a3.956 3.956 0 0 0-.215-.779l-.017-.038a4.016 4.016 0 0 0-.79-1.235 3.417 3.417 0 0 0 .017-1.468 3.387 3.387 0 0 0-.1-.333c-.034-.108-.057-.22-.1-.324a3.517 3.517 0 0 0-.766-1.128 3.5 3.5 0 0 0-2.202-3.777A3.5 3.5 0 0 0 14.5 2a3.451 3.451 0 0 0-1.5.352V21a.972.972 0 0 1-.184.546 3.426 3.426 0 0 0 4.154-.577A3.506 3.506 0 0 0 20 17.5v-.049c.02-.012.039-.027.059-.04.106-.064.208-.13.308-.2s.214-.169.315-.26c.077-.07.153-.14.225-.216a4.007 4.007 0 0 0 .459-.588c.115-.176.215-.361.3-.554.006-.014.015-.027.021-.041.087-.213.156-.434.205-.659.013-.057.024-.115.035-.173.046-.237.07-.478.073-.72a3.948 3.948 0 0 0-.066-.68Z"></path></svg>`);
function BrainSolid($$anchor, $$props) {
  if (new.target === BrainSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, BrainSolid);
  validate_prop_bindings($$props, [], [], BrainSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "brain solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_163();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_263();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_363();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_463();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_563();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_663();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(BrainSolid);
  BrainSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var BrainSolid_default = BrainSolid;
BrainSolid.filename = ".../flowbite-svelte-icons/dist/BrainSolid.svelte";
mark_module_end(BrainSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/BriefcaseOutline.svelte
mark_module_start();
var root_264 = svg_template(`<title> </title>`);
var root_364 = svg_template(`<desc> </desc>`);
var root_164 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M8 7H5a2 2 0 0 0-2 2v4m5-6h8M8 7V5a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2m0 0h3a2 2 0 0 1 2 2v4m0 0v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-6m18 0s-4 2-9 2-9-2-9-2m9-2h.01"></path></svg>`);
var root_564 = svg_template(`<title> </title>`);
var root_664 = svg_template(`<desc> </desc>`);
var root_464 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M8 7H5a2 2 0 0 0-2 2v4m5-6h8M8 7V5a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2m0 0h3a2 2 0 0 1 2 2v4m0 0v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-6m18 0s-4 2-9 2-9-2-9-2m9-2h.01"></path></svg>`);
function BriefcaseOutline($$anchor, $$props) {
  if (new.target === BriefcaseOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, BriefcaseOutline);
  validate_prop_bindings($$props, [], [], BriefcaseOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "briefcase outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_164();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_264();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_364();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_464();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_564();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_664();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(BriefcaseOutline);
  BriefcaseOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var BriefcaseOutline_default = BriefcaseOutline;
BriefcaseOutline.filename = ".../flowbite-svelte-icons/dist/BriefcaseOutline.svelte";
mark_module_end(BriefcaseOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/BriefcaseSolid.svelte
mark_module_start();
var root_265 = svg_template(`<title> </title>`);
var root_365 = svg_template(`<desc> </desc>`);
var root_165 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M10 2a3 3 0 0 0-3 3v1H5a3 3 0 0 0-3 3v2.382l1.447.723.005.003.027.013.12.056c.108.05.272.123.486.212.429.177 1.056.416 1.834.655C7.481 13.524 9.63 14 12 14c2.372 0 4.52-.475 6.08-.956.78-.24 1.406-.478 1.835-.655a14.028 14.028 0 0 0 .606-.268l.027-.013.005-.002L22 11.381V9a3 3 0 0 0-3-3h-2V5a3 3 0 0 0-3-3h-4Zm5 4V5a1 1 0 0 0-1-1h-4a1 1 0 0 0-1 1v1h6Zm6.447 7.894.553-.276V19a3 3 0 0 1-3 3H5a3 3 0 0 1-3-3v-5.382l.553.276.002.002.004.002.013.006.041.02.151.07c.13.06.318.144.557.242.478.198 1.163.46 2.01.72C7.019 15.476 9.37 16 12 16c2.628 0 4.98-.525 6.67-1.044a22.95 22.95 0 0 0 2.01-.72 15.994 15.994 0 0 0 .707-.312l.041-.02.013-.006.004-.002.001-.001-.431-.866.432.865ZM12 10a1 1 0 1 0 0 2h.01a1 1 0 1 0 0-2H12Z" clip-rule="evenodd"></path></svg>`);
var root_565 = svg_template(`<title> </title>`);
var root_665 = svg_template(`<desc> </desc>`);
var root_465 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M10 2a3 3 0 0 0-3 3v1H5a3 3 0 0 0-3 3v2.382l1.447.723.005.003.027.013.12.056c.108.05.272.123.486.212.429.177 1.056.416 1.834.655C7.481 13.524 9.63 14 12 14c2.372 0 4.52-.475 6.08-.956.78-.24 1.406-.478 1.835-.655a14.028 14.028 0 0 0 .606-.268l.027-.013.005-.002L22 11.381V9a3 3 0 0 0-3-3h-2V5a3 3 0 0 0-3-3h-4Zm5 4V5a1 1 0 0 0-1-1h-4a1 1 0 0 0-1 1v1h6Zm6.447 7.894.553-.276V19a3 3 0 0 1-3 3H5a3 3 0 0 1-3-3v-5.382l.553.276.002.002.004.002.013.006.041.02.151.07c.13.06.318.144.557.242.478.198 1.163.46 2.01.72C7.019 15.476 9.37 16 12 16c2.628 0 4.98-.525 6.67-1.044a22.95 22.95 0 0 0 2.01-.72 15.994 15.994 0 0 0 .707-.312l.041-.02.013-.006.004-.002.001-.001-.431-.866.432.865ZM12 10a1 1 0 1 0 0 2h.01a1 1 0 1 0 0-2H12Z" clip-rule="evenodd"></path></svg>`);
function BriefcaseSolid($$anchor, $$props) {
  if (new.target === BriefcaseSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, BriefcaseSolid);
  validate_prop_bindings($$props, [], [], BriefcaseSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "briefcase solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_165();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_265();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_365();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_465();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_565();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_665();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(BriefcaseSolid);
  BriefcaseSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var BriefcaseSolid_default = BriefcaseSolid;
BriefcaseSolid.filename = ".../flowbite-svelte-icons/dist/BriefcaseSolid.svelte";
mark_module_end(BriefcaseSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/BugOutline.svelte
mark_module_start();
var root_266 = svg_template(`<title> </title>`);
var root_366 = svg_template(`<desc> </desc>`);
var root_166 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M10 5 9 4V3m5 2 1-1V3m-3 6v11m0-11a5 5 0 0 1 5 5m-5-5a5 5 0 0 0-5 5m5-5a4.959 4.959 0 0 1 2.973 1H15V8a3 3 0 0 0-6 0v2h.027A4.959 4.959 0 0 1 12 9Zm-5 5H5m2 0v2a5 5 0 0 0 10 0v-2m2.025 0H17m-9.975 4H6a1 1 0 0 0-1 1v2m12-3h1.025a1 1 0 0 1 1 1v2M16 11h1a1 1 0 0 0 1-1V8m-9.975 3H7a1 1 0 0 1-1-1V8"></path></svg>`);
var root_566 = svg_template(`<title> </title>`);
var root_666 = svg_template(`<desc> </desc>`);
var root_466 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M10 5 9 4V3m5 2 1-1V3m-3 6v11m0-11a5 5 0 0 1 5 5m-5-5a5 5 0 0 0-5 5m5-5a4.959 4.959 0 0 1 2.973 1H15V8a3 3 0 0 0-6 0v2h.027A4.959 4.959 0 0 1 12 9Zm-5 5H5m2 0v2a5 5 0 0 0 10 0v-2m2.025 0H17m-9.975 4H6a1 1 0 0 0-1 1v2m12-3h1.025a1 1 0 0 1 1 1v2M16 11h1a1 1 0 0 0 1-1V8m-9.975 3H7a1 1 0 0 1-1-1V8"></path></svg>`);
function BugOutline($$anchor, $$props) {
  if (new.target === BugOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, BugOutline);
  validate_prop_bindings($$props, [], [], BugOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "bug outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_166();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_266();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_366();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_466();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_566();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_666();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(BugOutline);
  BugOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var BugOutline_default = BugOutline;
BugOutline.filename = ".../flowbite-svelte-icons/dist/BugOutline.svelte";
mark_module_end(BugOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/BugSolid.svelte
mark_module_start();
var root_267 = svg_template(`<title> </title>`);
var root_367 = svg_template(`<desc> </desc>`);
var root_167 = svg_template(`<svg><!><!><path d="M18 17h-.09c.058-.33.088-.665.09-1v-1h1a1 1 0 0 0 0-2h-1.09a5.97 5.97 0 0 0-.26-1H17a2 2 0 0 0 2-2V8a1 1 0 1 0-2 0v2h-.54a6.239 6.239 0 0 0-.46-.46V8a3.963 3.963 0 0 0-.986-2.6l.693-.693A1 1 0 0 0 16 4V3a1 1 0 1 0-2 0v.586l-.661.661a3.753 3.753 0 0 0-2.678 0L10 3.586V3a1 1 0 1 0-2 0v1a1 1 0 0 0 .293.707l.693.693A3.963 3.963 0 0 0 8 8v1.54a6.239 6.239 0 0 0-.46.46H7V8a1 1 0 0 0-2 0v2a2 2 0 0 0 2 2h-.65a5.97 5.97 0 0 0-.26 1H5a1 1 0 0 0 0 2h1v1a6 6 0 0 0 .09 1H6a2 2 0 0 0-2 2v2a1 1 0 1 0 2 0v-2h.812A6.012 6.012 0 0 0 11 21.907V12a1 1 0 0 1 2 0v9.907A6.011 6.011 0 0 0 17.188 19H18v2a1 1 0 0 0 2 0v-2a2 2 0 0 0-2-2Zm-4-8.65a5.922 5.922 0 0 0-.941-.251l-.111-.017a5.52 5.52 0 0 0-1.9 0l-.111.017A5.925 5.925 0 0 0 10 8.35V8a2 2 0 1 1 4 0v.35Z"></path></svg>`);
var root_567 = svg_template(`<title> </title>`);
var root_667 = svg_template(`<desc> </desc>`);
var root_467 = svg_template(`<svg><!><!><path d="M18 17h-.09c.058-.33.088-.665.09-1v-1h1a1 1 0 0 0 0-2h-1.09a5.97 5.97 0 0 0-.26-1H17a2 2 0 0 0 2-2V8a1 1 0 1 0-2 0v2h-.54a6.239 6.239 0 0 0-.46-.46V8a3.963 3.963 0 0 0-.986-2.6l.693-.693A1 1 0 0 0 16 4V3a1 1 0 1 0-2 0v.586l-.661.661a3.753 3.753 0 0 0-2.678 0L10 3.586V3a1 1 0 1 0-2 0v1a1 1 0 0 0 .293.707l.693.693A3.963 3.963 0 0 0 8 8v1.54a6.239 6.239 0 0 0-.46.46H7V8a1 1 0 0 0-2 0v2a2 2 0 0 0 2 2h-.65a5.97 5.97 0 0 0-.26 1H5a1 1 0 0 0 0 2h1v1a6 6 0 0 0 .09 1H6a2 2 0 0 0-2 2v2a1 1 0 1 0 2 0v-2h.812A6.012 6.012 0 0 0 11 21.907V12a1 1 0 0 1 2 0v9.907A6.011 6.011 0 0 0 17.188 19H18v2a1 1 0 0 0 2 0v-2a2 2 0 0 0-2-2Zm-4-8.65a5.922 5.922 0 0 0-.941-.251l-.111-.017a5.52 5.52 0 0 0-1.9 0l-.111.017A5.925 5.925 0 0 0 10 8.35V8a2 2 0 1 1 4 0v.35Z"></path></svg>`);
function BugSolid($$anchor, $$props) {
  if (new.target === BugSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, BugSolid);
  validate_prop_bindings($$props, [], [], BugSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "bug solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_167();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_267();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_367();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_467();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_567();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_667();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(BugSolid);
  BugSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var BugSolid_default = BugSolid;
BugSolid.filename = ".../flowbite-svelte-icons/dist/BugSolid.svelte";
mark_module_end(BugSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/BuildingOutline.svelte
mark_module_start();
var root_268 = svg_template(`<title> </title>`);
var root_368 = svg_template(`<desc> </desc>`);
var root_168 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M6 4h12M6 4v16M6 4H5m13 0v16m0-16h1m-1 16H6m12 0h1M6 20H5M9 7h1v1H9V7Zm5 0h1v1h-1V7Zm-5 4h1v1H9v-1Zm5 0h1v1h-1v-1Zm-3 4h2a1 1 0 0 1 1 1v4h-4v-4a1 1 0 0 1 1-1Z"></path></svg>`);
var root_568 = svg_template(`<title> </title>`);
var root_668 = svg_template(`<desc> </desc>`);
var root_468 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M6 4h12M6 4v16M6 4H5m13 0v16m0-16h1m-1 16H6m12 0h1M6 20H5M9 7h1v1H9V7Zm5 0h1v1h-1V7Zm-5 4h1v1H9v-1Zm5 0h1v1h-1v-1Zm-3 4h2a1 1 0 0 1 1 1v4h-4v-4a1 1 0 0 1 1-1Z"></path></svg>`);
function BuildingOutline($$anchor, $$props) {
  if (new.target === BuildingOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, BuildingOutline);
  validate_prop_bindings($$props, [], [], BuildingOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "building outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_168();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_268();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_368();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_468();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_568();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_668();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(BuildingOutline);
  BuildingOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var BuildingOutline_default = BuildingOutline;
BuildingOutline.filename = ".../flowbite-svelte-icons/dist/BuildingOutline.svelte";
mark_module_end(BuildingOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/BuildingSolid.svelte
mark_module_start();
var root_269 = svg_template(`<title> </title>`);
var root_369 = svg_template(`<desc> </desc>`);
var root_169 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M4 4a1 1 0 0 1 1-1h14a1 1 0 1 1 0 2v14a1 1 0 1 1 0 2H5a1 1 0 1 1 0-2V5a1 1 0 0 1-1-1Zm5 2a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1h1a1 1 0 0 0 1-1V7a1 1 0 0 0-1-1H9Zm5 0a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1h1a1 1 0 0 0 1-1V7a1 1 0 0 0-1-1h-1Zm-5 4a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1h1a1 1 0 0 0 1-1v-1a1 1 0 0 0-1-1H9Zm5 0a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1h1a1 1 0 0 0 1-1v-1a1 1 0 0 0-1-1h-1Zm-3 4a2 2 0 0 0-2 2v3h2v-3h2v3h2v-3a2 2 0 0 0-2-2h-2Z" clip-rule="evenodd"></path></svg>`);
var root_569 = svg_template(`<title> </title>`);
var root_669 = svg_template(`<desc> </desc>`);
var root_469 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M4 4a1 1 0 0 1 1-1h14a1 1 0 1 1 0 2v14a1 1 0 1 1 0 2H5a1 1 0 1 1 0-2V5a1 1 0 0 1-1-1Zm5 2a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1h1a1 1 0 0 0 1-1V7a1 1 0 0 0-1-1H9Zm5 0a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1h1a1 1 0 0 0 1-1V7a1 1 0 0 0-1-1h-1Zm-5 4a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1h1a1 1 0 0 0 1-1v-1a1 1 0 0 0-1-1H9Zm5 0a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1h1a1 1 0 0 0 1-1v-1a1 1 0 0 0-1-1h-1Zm-3 4a2 2 0 0 0-2 2v3h2v-3h2v3h2v-3a2 2 0 0 0-2-2h-2Z" clip-rule="evenodd"></path></svg>`);
function BuildingSolid($$anchor, $$props) {
  if (new.target === BuildingSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, BuildingSolid);
  validate_prop_bindings($$props, [], [], BuildingSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "building solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_169();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_269();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_369();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_469();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_569();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_669();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(BuildingSolid);
  BuildingSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var BuildingSolid_default = BuildingSolid;
BuildingSolid.filename = ".../flowbite-svelte-icons/dist/BuildingSolid.svelte";
mark_module_end(BuildingSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/BullhornOutline.svelte
mark_module_start();
var root_270 = svg_template(`<title> </title>`);
var root_370 = svg_template(`<desc> </desc>`);
var root_170 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M11 9H5a1 1 0 0 0-1 1v4a1 1 0 0 0 1 1h6m0-6v6m0-6 5.419-3.87A1 1 0 0 1 18 5.942v12.114a1 1 0 0 1-1.581.814L11 15m7 0a3 3 0 0 0 0-6M6 15h3v5H6v-5Z"></path></svg>`);
var root_570 = svg_template(`<title> </title>`);
var root_670 = svg_template(`<desc> </desc>`);
var root_470 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M11 9H5a1 1 0 0 0-1 1v4a1 1 0 0 0 1 1h6m0-6v6m0-6 5.419-3.87A1 1 0 0 1 18 5.942v12.114a1 1 0 0 1-1.581.814L11 15m7 0a3 3 0 0 0 0-6M6 15h3v5H6v-5Z"></path></svg>`);
function BullhornOutline($$anchor, $$props) {
  if (new.target === BullhornOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, BullhornOutline);
  validate_prop_bindings($$props, [], [], BullhornOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "bullhorn outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_170();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_270();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_370();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_470();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_570();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_670();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(BullhornOutline);
  BullhornOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var BullhornOutline_default = BullhornOutline;
BullhornOutline.filename = ".../flowbite-svelte-icons/dist/BullhornOutline.svelte";
mark_module_end(BullhornOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/BullhornSolid.svelte
mark_module_start();
var root_271 = svg_template(`<title> </title>`);
var root_371 = svg_template(`<desc> </desc>`);
var root_171 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M18.458 3.11A1 1 0 0 1 19 4v16a1 1 0 0 1-1.581.814L12 16.944V7.056l5.419-3.87a1 1 0 0 1 1.039-.076ZM22 12c0 1.48-.804 2.773-2 3.465v-6.93c1.196.692 2 1.984 2 3.465ZM10 8H4a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h6V8Zm0 9H5v3a1 1 0 0 0 1 1h3a1 1 0 0 0 1-1v-3Z" clip-rule="evenodd"></path></svg>`);
var root_571 = svg_template(`<title> </title>`);
var root_671 = svg_template(`<desc> </desc>`);
var root_471 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M18.458 3.11A1 1 0 0 1 19 4v16a1 1 0 0 1-1.581.814L12 16.944V7.056l5.419-3.87a1 1 0 0 1 1.039-.076ZM22 12c0 1.48-.804 2.773-2 3.465v-6.93c1.196.692 2 1.984 2 3.465ZM10 8H4a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h6V8Zm0 9H5v3a1 1 0 0 0 1 1h3a1 1 0 0 0 1-1v-3Z" clip-rule="evenodd"></path></svg>`);
function BullhornSolid($$anchor, $$props) {
  if (new.target === BullhornSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, BullhornSolid);
  validate_prop_bindings($$props, [], [], BullhornSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "bullhorn solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_171();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_271();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_371();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_471();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_571();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_671();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(BullhornSolid);
  BullhornSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var BullhornSolid_default = BullhornSolid;
BullhornSolid.filename = ".../flowbite-svelte-icons/dist/BullhornSolid.svelte";
mark_module_end(BullhornSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CalendarEditOutline.svelte
mark_module_start();
var root_272 = svg_template(`<title> </title>`);
var root_372 = svg_template(`<desc> </desc>`);
var root_172 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m11.5 11.5 2.071 1.994M4 10h5m11 0h-1.5M12 7V4M7 7V4m10 3V4m-7 13H8v-2l5.227-5.292a1.46 1.46 0 0 1 2.065 2.065L10 17Zm-5 3h14a1 1 0 0 0 1-1V7a1 1 0 0 0-1-1H5a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1Z"></path></svg>`);
var root_572 = svg_template(`<title> </title>`);
var root_672 = svg_template(`<desc> </desc>`);
var root_472 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m11.5 11.5 2.071 1.994M4 10h5m11 0h-1.5M12 7V4M7 7V4m10 3V4m-7 13H8v-2l5.227-5.292a1.46 1.46 0 0 1 2.065 2.065L10 17Zm-5 3h14a1 1 0 0 0 1-1V7a1 1 0 0 0-1-1H5a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1Z"></path></svg>`);
function CalendarEditOutline($$anchor, $$props) {
  if (new.target === CalendarEditOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CalendarEditOutline);
  validate_prop_bindings($$props, [], [], CalendarEditOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "calendar edit outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_172();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_272();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_372();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_472();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_572();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_672();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CalendarEditOutline);
  CalendarEditOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CalendarEditOutline_default = CalendarEditOutline;
CalendarEditOutline.filename = ".../flowbite-svelte-icons/dist/CalendarEditOutline.svelte";
mark_module_end(CalendarEditOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CalendarEditSolid.svelte
mark_module_start();
var root_273 = svg_template(`<title> </title>`);
var root_373 = svg_template(`<desc> </desc>`);
var root_173 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M12.512 8.72a2.46 2.46 0 0 1 3.479 0 2.461 2.461 0 0 1 0 3.479l-.004.005-1.094 1.08a.998.998 0 0 0-.194-.272l-3-3a1 1 0 0 0-.272-.193l1.085-1.1Zm-2.415 2.445L7.28 14.017a1 1 0 0 0-.289.702v2a1 1 0 0 0 1 1h2a1 1 0 0 0 .703-.288l2.851-2.816a.995.995 0 0 1-.26-.189l-3-3a.998.998 0 0 1-.19-.26Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M7 3a1 1 0 0 1 1 1v1h3V4a1 1 0 1 1 2 0v1h3V4a1 1 0 1 1 2 0v1h1a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2h1V4a1 1 0 0 1 1-1Zm10.67 8H19v8H5v-8h3.855l.53-.537a1 1 0 0 1 .87-.285c.097.015.233.13.277.087.045-.043-.073-.18-.09-.276a1 1 0 0 1 .274-.873l1.09-1.104a3.46 3.46 0 0 1 4.892 0l.001.002A3.461 3.461 0 0 1 17.67 11Z" clip-rule="evenodd"></path></svg>`);
var root_573 = svg_template(`<title> </title>`);
var root_673 = svg_template(`<desc> </desc>`);
var root_473 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M12.512 8.72a2.46 2.46 0 0 1 3.479 0 2.461 2.461 0 0 1 0 3.479l-.004.005-1.094 1.08a.998.998 0 0 0-.194-.272l-3-3a1 1 0 0 0-.272-.193l1.085-1.1Zm-2.415 2.445L7.28 14.017a1 1 0 0 0-.289.702v2a1 1 0 0 0 1 1h2a1 1 0 0 0 .703-.288l2.851-2.816a.995.995 0 0 1-.26-.189l-3-3a.998.998 0 0 1-.19-.26Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M7 3a1 1 0 0 1 1 1v1h3V4a1 1 0 1 1 2 0v1h3V4a1 1 0 1 1 2 0v1h1a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2h1V4a1 1 0 0 1 1-1Zm10.67 8H19v8H5v-8h3.855l.53-.537a1 1 0 0 1 .87-.285c.097.015.233.13.277.087.045-.043-.073-.18-.09-.276a1 1 0 0 1 .274-.873l1.09-1.104a3.46 3.46 0 0 1 4.892 0l.001.002A3.461 3.461 0 0 1 17.67 11Z" clip-rule="evenodd"></path></svg>`);
function CalendarEditSolid($$anchor, $$props) {
  if (new.target === CalendarEditSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CalendarEditSolid);
  validate_prop_bindings($$props, [], [], CalendarEditSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "calendar edit solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_173();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_273();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_373();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_473();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_573();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_673();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_2 = sibling(node_4);
      var path_3 = sibling(path_2);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CalendarEditSolid);
  CalendarEditSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CalendarEditSolid_default = CalendarEditSolid;
CalendarEditSolid.filename = ".../flowbite-svelte-icons/dist/CalendarEditSolid.svelte";
mark_module_end(CalendarEditSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CalendarMonthOutline.svelte
mark_module_start();
var root_274 = svg_template(`<title> </title>`);
var root_374 = svg_template(`<desc> </desc>`);
var root_174 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M4 10h16m-8-3V4M7 7V4m10 3V4M5 20h14a1 1 0 0 0 1-1V7a1 1 0 0 0-1-1H5a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1Zm3-7h.01v.01H8V13Zm4 0h.01v.01H12V13Zm4 0h.01v.01H16V13Zm-8 4h.01v.01H8V17Zm4 0h.01v.01H12V17Zm4 0h.01v.01H16V17Z"></path></svg>`);
var root_574 = svg_template(`<title> </title>`);
var root_674 = svg_template(`<desc> </desc>`);
var root_474 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M4 10h16m-8-3V4M7 7V4m10 3V4M5 20h14a1 1 0 0 0 1-1V7a1 1 0 0 0-1-1H5a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1Zm3-7h.01v.01H8V13Zm4 0h.01v.01H12V13Zm4 0h.01v.01H16V13Zm-8 4h.01v.01H8V17Zm4 0h.01v.01H12V17Zm4 0h.01v.01H16V17Z"></path></svg>`);
function CalendarMonthOutline($$anchor, $$props) {
  if (new.target === CalendarMonthOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CalendarMonthOutline);
  validate_prop_bindings($$props, [], [], CalendarMonthOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "calendar month outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_174();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_274();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_374();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_474();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_574();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_674();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CalendarMonthOutline);
  CalendarMonthOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CalendarMonthOutline_default = CalendarMonthOutline;
CalendarMonthOutline.filename = ".../flowbite-svelte-icons/dist/CalendarMonthOutline.svelte";
mark_module_end(CalendarMonthOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CalendarMonthSolid.svelte
mark_module_start();
var root_275 = svg_template(`<title> </title>`);
var root_375 = svg_template(`<desc> </desc>`);
var root_175 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M5 5a1 1 0 0 0 1-1 1 1 0 1 1 2 0 1 1 0 0 0 1 1h1a1 1 0 0 0 1-1 1 1 0 1 1 2 0 1 1 0 0 0 1 1h1a1 1 0 0 0 1-1 1 1 0 1 1 2 0 1 1 0 0 0 1 1 2 2 0 0 1 2 2v1a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V7a2 2 0 0 1 2-2ZM3 19v-7a1 1 0 0 1 1-1h16a1 1 0 0 1 1 1v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2Zm6.01-6a1 1 0 1 0-2 0 1 1 0 0 0 2 0Zm2 0a1 1 0 1 1 2 0 1 1 0 0 1-2 0Zm6 0a1 1 0 1 0-2 0 1 1 0 0 0 2 0Zm-10 4a1 1 0 1 1 2 0 1 1 0 0 1-2 0Zm6 0a1 1 0 1 0-2 0 1 1 0 0 0 2 0Zm2 0a1 1 0 1 1 2 0 1 1 0 0 1-2 0Z" clip-rule="evenodd"></path></svg>`);
var root_575 = svg_template(`<title> </title>`);
var root_675 = svg_template(`<desc> </desc>`);
var root_475 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M5 5a1 1 0 0 0 1-1 1 1 0 1 1 2 0 1 1 0 0 0 1 1h1a1 1 0 0 0 1-1 1 1 0 1 1 2 0 1 1 0 0 0 1 1h1a1 1 0 0 0 1-1 1 1 0 1 1 2 0 1 1 0 0 0 1 1 2 2 0 0 1 2 2v1a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V7a2 2 0 0 1 2-2ZM3 19v-7a1 1 0 0 1 1-1h16a1 1 0 0 1 1 1v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2Zm6.01-6a1 1 0 1 0-2 0 1 1 0 0 0 2 0Zm2 0a1 1 0 1 1 2 0 1 1 0 0 1-2 0Zm6 0a1 1 0 1 0-2 0 1 1 0 0 0 2 0Zm-10 4a1 1 0 1 1 2 0 1 1 0 0 1-2 0Zm6 0a1 1 0 1 0-2 0 1 1 0 0 0 2 0Zm2 0a1 1 0 1 1 2 0 1 1 0 0 1-2 0Z" clip-rule="evenodd"></path></svg>`);
function CalendarMonthSolid($$anchor, $$props) {
  if (new.target === CalendarMonthSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CalendarMonthSolid);
  validate_prop_bindings($$props, [], [], CalendarMonthSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "calendar month solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_175();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_275();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_375();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_475();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_575();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_675();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CalendarMonthSolid);
  CalendarMonthSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CalendarMonthSolid_default = CalendarMonthSolid;
CalendarMonthSolid.filename = ".../flowbite-svelte-icons/dist/CalendarMonthSolid.svelte";
mark_module_end(CalendarMonthSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CalendarPlusOutline.svelte
mark_module_start();
var root_276 = svg_template(`<title> </title>`);
var root_376 = svg_template(`<desc> </desc>`);
var root_176 = svg_template(`<svg><!><!><path fill="currentColor" d="M4 9.05H3v2h1v-2Zm16 2h1v-2h-1v2ZM10 14a1 1 0 1 0 0 2v-2Zm4 2a1 1 0 1 0 0-2v2Zm-3 1a1 1 0 1 0 2 0h-2Zm2-4a1 1 0 1 0-2 0h2Zm-2-5.95a1 1 0 1 0 2 0h-2Zm2-3a1 1 0 1 0-2 0h2Zm-7 3a1 1 0 0 0 2 0H6Zm2-3a1 1 0 1 0-2 0h2Zm8 3a1 1 0 1 0 2 0h-2Zm2-3a1 1 0 1 0-2 0h2Zm-13 3h14v-2H5v2Zm14 0v12h2v-12h-2Zm0 12H5v2h14v-2Zm-14 0v-12H3v12h2Zm0 0H3a2 2 0 0 0 2 2v-2Zm14 0v2a2 2 0 0 0 2-2h-2Zm0-12h2a2 2 0 0 0-2-2v2Zm-14-2a2 2 0 0 0-2 2h2v-2Zm-1 6h16v-2H4v2ZM10 16h4v-2h-4v2Zm3 1v-4h-2v4h2Zm0-9.95v-3h-2v3h2Zm-5 0v-3H6v3h2Zm10 0v-3h-2v3h2Z"></path></svg>`);
var root_576 = svg_template(`<title> </title>`);
var root_676 = svg_template(`<desc> </desc>`);
var root_476 = svg_template(`<svg><!><!><path fill="currentColor" d="M4 9.05H3v2h1v-2Zm16 2h1v-2h-1v2ZM10 14a1 1 0 1 0 0 2v-2Zm4 2a1 1 0 1 0 0-2v2Zm-3 1a1 1 0 1 0 2 0h-2Zm2-4a1 1 0 1 0-2 0h2Zm-2-5.95a1 1 0 1 0 2 0h-2Zm2-3a1 1 0 1 0-2 0h2Zm-7 3a1 1 0 0 0 2 0H6Zm2-3a1 1 0 1 0-2 0h2Zm8 3a1 1 0 1 0 2 0h-2Zm2-3a1 1 0 1 0-2 0h2Zm-13 3h14v-2H5v2Zm14 0v12h2v-12h-2Zm0 12H5v2h14v-2Zm-14 0v-12H3v12h2Zm0 0H3a2 2 0 0 0 2 2v-2Zm14 0v2a2 2 0 0 0 2-2h-2Zm0-12h2a2 2 0 0 0-2-2v2Zm-14-2a2 2 0 0 0-2 2h2v-2Zm-1 6h16v-2H4v2ZM10 16h4v-2h-4v2Zm3 1v-4h-2v4h2Zm0-9.95v-3h-2v3h2Zm-5 0v-3H6v3h2Zm10 0v-3h-2v3h2Z"></path></svg>`);
function CalendarPlusOutline($$anchor, $$props) {
  if (new.target === CalendarPlusOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CalendarPlusOutline);
  validate_prop_bindings($$props, [], [], CalendarPlusOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "calendar plus outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_176();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_276();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_376();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: "none",
          color: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_476();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_576();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_676();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: "none",
          color: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CalendarPlusOutline);
  CalendarPlusOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CalendarPlusOutline_default = CalendarPlusOutline;
CalendarPlusOutline.filename = ".../flowbite-svelte-icons/dist/CalendarPlusOutline.svelte";
mark_module_end(CalendarPlusOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CalendarPlusSolid.svelte
mark_module_start();
var root_277 = svg_template(`<title> </title>`);
var root_377 = svg_template(`<desc> </desc>`);
var root_177 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M18 5.05h1a2 2 0 0 1 2 2v2H3v-2a2 2 0 0 1 2-2h1v-1a1 1 0 1 1 2 0v1h3v-1a1 1 0 1 1 2 0v1h3v-1a1 1 0 1 1 2 0v1Zm-15 6v8a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-8H3ZM11 18a1 1 0 1 0 2 0v-1h1a1 1 0 1 0 0-2h-1v-1a1 1 0 1 0-2 0v1h-1a1 1 0 1 0 0 2h1v1Z" clip-rule="evenodd"></path></svg>`);
var root_577 = svg_template(`<title> </title>`);
var root_677 = svg_template(`<desc> </desc>`);
var root_477 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M18 5.05h1a2 2 0 0 1 2 2v2H3v-2a2 2 0 0 1 2-2h1v-1a1 1 0 1 1 2 0v1h3v-1a1 1 0 1 1 2 0v1h3v-1a1 1 0 1 1 2 0v1Zm-15 6v8a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-8H3ZM11 18a1 1 0 1 0 2 0v-1h1a1 1 0 1 0 0-2h-1v-1a1 1 0 1 0-2 0v1h-1a1 1 0 1 0 0 2h1v1Z" clip-rule="evenodd"></path></svg>`);
function CalendarPlusSolid($$anchor, $$props) {
  if (new.target === CalendarPlusSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CalendarPlusSolid);
  validate_prop_bindings($$props, [], [], CalendarPlusSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "calendar plus solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_177();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_277();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_377();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_477();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_577();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_677();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CalendarPlusSolid);
  CalendarPlusSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CalendarPlusSolid_default = CalendarPlusSolid;
CalendarPlusSolid.filename = ".../flowbite-svelte-icons/dist/CalendarPlusSolid.svelte";
mark_module_end(CalendarPlusSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CalendarWeekOutline.svelte
mark_module_start();
var root_278 = svg_template(`<title> </title>`);
var root_378 = svg_template(`<desc> </desc>`);
var root_178 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M4 10h16M8 14h8m-4-7V4M7 7V4m10 3V4M5 20h14a1 1 0 0 0 1-1V7a1 1 0 0 0-1-1H5a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1Z"></path></svg>`);
var root_578 = svg_template(`<title> </title>`);
var root_678 = svg_template(`<desc> </desc>`);
var root_478 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M4 10h16M8 14h8m-4-7V4M7 7V4m10 3V4M5 20h14a1 1 0 0 0 1-1V7a1 1 0 0 0-1-1H5a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1Z"></path></svg>`);
function CalendarWeekOutline($$anchor, $$props) {
  if (new.target === CalendarWeekOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CalendarWeekOutline);
  validate_prop_bindings($$props, [], [], CalendarWeekOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "calendar week outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_178();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_278();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_378();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_478();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_578();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_678();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CalendarWeekOutline);
  CalendarWeekOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CalendarWeekOutline_default = CalendarWeekOutline;
CalendarWeekOutline.filename = ".../flowbite-svelte-icons/dist/CalendarWeekOutline.svelte";
mark_module_end(CalendarWeekOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CalendarWeekSolid.svelte
mark_module_start();
var root_279 = svg_template(`<title> </title>`);
var root_379 = svg_template(`<desc> </desc>`);
var root_179 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M6 5V4a1 1 0 1 1 2 0v1h3V4a1 1 0 1 1 2 0v1h3V4a1 1 0 1 1 2 0v1h1a2 2 0 0 1 2 2v2H3V7a2 2 0 0 1 2-2h1ZM3 19v-8h18v8a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2Zm5-6a1 1 0 1 0 0 2h8a1 1 0 1 0 0-2H8Z" clip-rule="evenodd"></path></svg>`);
var root_579 = svg_template(`<title> </title>`);
var root_679 = svg_template(`<desc> </desc>`);
var root_479 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M6 5V4a1 1 0 1 1 2 0v1h3V4a1 1 0 1 1 2 0v1h3V4a1 1 0 1 1 2 0v1h1a2 2 0 0 1 2 2v2H3V7a2 2 0 0 1 2-2h1ZM3 19v-8h18v8a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2Zm5-6a1 1 0 1 0 0 2h8a1 1 0 1 0 0-2H8Z" clip-rule="evenodd"></path></svg>`);
function CalendarWeekSolid($$anchor, $$props) {
  if (new.target === CalendarWeekSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CalendarWeekSolid);
  validate_prop_bindings($$props, [], [], CalendarWeekSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "calendar week solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_179();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_279();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_379();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_479();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_579();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_679();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CalendarWeekSolid);
  CalendarWeekSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CalendarWeekSolid_default = CalendarWeekSolid;
CalendarWeekSolid.filename = ".../flowbite-svelte-icons/dist/CalendarWeekSolid.svelte";
mark_module_end(CalendarWeekSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CameraPhotoOutline.svelte
mark_module_start();
var root_280 = svg_template(`<title> </title>`);
var root_380 = svg_template(`<desc> </desc>`);
var root_180 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linejoin="round" d="M4 18V8a1 1 0 0 1 1-1h1.5l1.707-1.707A1 1 0 0 1 8.914 5h6.172a1 1 0 0 1 .707.293L17.5 7H19a1 1 0 0 1 1 1v10a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1Z"></path><path stroke="currentColor" stroke-linejoin="round" d="M15 12a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"></path></svg>`);
var root_580 = svg_template(`<title> </title>`);
var root_680 = svg_template(`<desc> </desc>`);
var root_480 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linejoin="round" d="M4 18V8a1 1 0 0 1 1-1h1.5l1.707-1.707A1 1 0 0 1 8.914 5h6.172a1 1 0 0 1 .707.293L17.5 7H19a1 1 0 0 1 1 1v10a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1Z"></path><path stroke="currentColor" stroke-linejoin="round" d="M15 12a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"></path></svg>`);
function CameraPhotoOutline($$anchor, $$props) {
  if (new.target === CameraPhotoOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CameraPhotoOutline);
  validate_prop_bindings($$props, [], [], CameraPhotoOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "camera photo outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_180();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_280();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_380();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_480();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_580();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_680();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_2 = sibling(node_4);
      var path_3 = sibling(path_2);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_2, "stroke-width", strokeWidth());
        set_attribute(path_3, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CameraPhotoOutline);
  CameraPhotoOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CameraPhotoOutline_default = CameraPhotoOutline;
CameraPhotoOutline.filename = ".../flowbite-svelte-icons/dist/CameraPhotoOutline.svelte";
mark_module_end(CameraPhotoOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CameraPhotoSolid.svelte
mark_module_start();
var root_281 = svg_template(`<title> </title>`);
var root_381 = svg_template(`<desc> </desc>`);
var root_181 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M7.5 4.586A2 2 0 0 1 8.914 4h6.172a2 2 0 0 1 1.414.586L17.914 6H19a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h1.086L7.5 4.586ZM10 12a2 2 0 1 1 4 0 2 2 0 0 1-4 0Zm2-4a4 4 0 1 0 0 8 4 4 0 0 0 0-8Z" clip-rule="evenodd"></path></svg>`);
var root_581 = svg_template(`<title> </title>`);
var root_681 = svg_template(`<desc> </desc>`);
var root_481 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M7.5 4.586A2 2 0 0 1 8.914 4h6.172a2 2 0 0 1 1.414.586L17.914 6H19a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h1.086L7.5 4.586ZM10 12a2 2 0 1 1 4 0 2 2 0 0 1-4 0Zm2-4a4 4 0 1 0 0 8 4 4 0 0 0 0-8Z" clip-rule="evenodd"></path></svg>`);
function CameraPhotoSolid($$anchor, $$props) {
  if (new.target === CameraPhotoSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CameraPhotoSolid);
  validate_prop_bindings($$props, [], [], CameraPhotoSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "camera photo solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_181();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_281();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_381();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_481();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_581();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_681();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CameraPhotoSolid);
  CameraPhotoSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CameraPhotoSolid_default = CameraPhotoSolid;
CameraPhotoSolid.filename = ".../flowbite-svelte-icons/dist/CameraPhotoSolid.svelte";
mark_module_end(CameraPhotoSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CaptionOutline.svelte
mark_module_start();
var root_282 = svg_template(`<title> </title>`);
var root_382 = svg_template(`<desc> </desc>`);
var root_182 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M10.855 14.322a2.475 2.475 0 1 1 .133-4.241m6.053 4.241a2.475 2.475 0 1 1 .133-4.241M4 5h16a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1Z"></path></svg>`);
var root_582 = svg_template(`<title> </title>`);
var root_682 = svg_template(`<desc> </desc>`);
var root_482 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M10.855 14.322a2.475 2.475 0 1 1 .133-4.241m6.053 4.241a2.475 2.475 0 1 1 .133-4.241M4 5h16a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1Z"></path></svg>`);
function CaptionOutline($$anchor, $$props) {
  if (new.target === CaptionOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CaptionOutline);
  validate_prop_bindings($$props, [], [], CaptionOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "caption outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_182();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_282();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_382();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_482();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_582();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_682();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CaptionOutline);
  CaptionOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CaptionOutline_default = CaptionOutline;
CaptionOutline.filename = ".../flowbite-svelte-icons/dist/CaptionOutline.svelte";
mark_module_end(CaptionOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CaptionSolid.svelte
mark_module_start();
var root_283 = svg_template(`<title> </title>`);
var root_383 = svg_template(`<desc> </desc>`);
var root_183 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M2 6a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V6Zm6.962 4.856a1.475 1.475 0 0 1 1.484.066A1 1 0 1 0 11.53 9.24a3.475 3.475 0 1 0-.187 5.955 1 1 0 1 0-.976-1.746 1.474 1.474 0 1 1-1.405-2.593Zm6.186 0a1.475 1.475 0 0 1 1.484.066 1 1 0 1 0 1.084-1.682 3.475 3.475 0 1 0-.187 5.955 1 1 0 1 0-.976-1.746 1.474 1.474 0 1 1-1.405-2.593Z" clip-rule="evenodd"></path></svg>`);
var root_583 = svg_template(`<title> </title>`);
var root_683 = svg_template(`<desc> </desc>`);
var root_483 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M2 6a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V6Zm6.962 4.856a1.475 1.475 0 0 1 1.484.066A1 1 0 1 0 11.53 9.24a3.475 3.475 0 1 0-.187 5.955 1 1 0 1 0-.976-1.746 1.474 1.474 0 1 1-1.405-2.593Zm6.186 0a1.475 1.475 0 0 1 1.484.066 1 1 0 1 0 1.084-1.682 3.475 3.475 0 1 0-.187 5.955 1 1 0 1 0-.976-1.746 1.474 1.474 0 1 1-1.405-2.593Z" clip-rule="evenodd"></path></svg>`);
function CaptionSolid($$anchor, $$props) {
  if (new.target === CaptionSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CaptionSolid);
  validate_prop_bindings($$props, [], [], CaptionSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "caption solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_183();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_283();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_383();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_483();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_583();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_683();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CaptionSolid);
  CaptionSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CaptionSolid_default = CaptionSolid;
CaptionSolid.filename = ".../flowbite-svelte-icons/dist/CaptionSolid.svelte";
mark_module_end(CaptionSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CaretDownOutline.svelte
mark_module_start();
var root_284 = svg_template(`<title> </title>`);
var root_384 = svg_template(`<desc> </desc>`);
var root_184 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M7.119 8h9.762a1 1 0 0 1 .772 1.636l-4.881 5.927a1 1 0 0 1-1.544 0l-4.88-5.927A1 1 0 0 1 7.118 8Z"></path></svg>`);
var root_584 = svg_template(`<title> </title>`);
var root_684 = svg_template(`<desc> </desc>`);
var root_484 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M7.119 8h9.762a1 1 0 0 1 .772 1.636l-4.881 5.927a1 1 0 0 1-1.544 0l-4.88-5.927A1 1 0 0 1 7.118 8Z"></path></svg>`);
function CaretDownOutline($$anchor, $$props) {
  if (new.target === CaretDownOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CaretDownOutline);
  validate_prop_bindings($$props, [], [], CaretDownOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "caret down outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_184();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_284();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_384();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_484();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_584();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_684();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CaretDownOutline);
  CaretDownOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CaretDownOutline_default = CaretDownOutline;
CaretDownOutline.filename = ".../flowbite-svelte-icons/dist/CaretDownOutline.svelte";
mark_module_end(CaretDownOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CaretDownSolid.svelte
mark_module_start();
var root_285 = svg_template(`<title> </title>`);
var root_385 = svg_template(`<desc> </desc>`);
var root_185 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M18.425 10.271C19.499 8.967 18.57 7 16.88 7H7.12c-1.69 0-2.618 1.967-1.544 3.271l4.881 5.927a2 2 0 0 0 3.088 0l4.88-5.927Z" clip-rule="evenodd"></path></svg>`);
var root_585 = svg_template(`<title> </title>`);
var root_685 = svg_template(`<desc> </desc>`);
var root_485 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M18.425 10.271C19.499 8.967 18.57 7 16.88 7H7.12c-1.69 0-2.618 1.967-1.544 3.271l4.881 5.927a2 2 0 0 0 3.088 0l4.88-5.927Z" clip-rule="evenodd"></path></svg>`);
function CaretDownSolid($$anchor, $$props) {
  if (new.target === CaretDownSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CaretDownSolid);
  validate_prop_bindings($$props, [], [], CaretDownSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "caret down solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_185();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_285();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_385();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_485();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_585();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_685();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CaretDownSolid);
  CaretDownSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CaretDownSolid_default = CaretDownSolid;
CaretDownSolid.filename = ".../flowbite-svelte-icons/dist/CaretDownSolid.svelte";
mark_module_end(CaretDownSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CaretLeftOutline.svelte
mark_module_start();
var root_286 = svg_template(`<title> </title>`);
var root_386 = svg_template(`<desc> </desc>`);
var root_186 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M16 16.881V7.119a1 1 0 0 0-1.636-.772l-5.927 4.881a1 1 0 0 0 0 1.544l5.927 4.88a1 1 0 0 0 1.636-.77Z"></path></svg>`);
var root_586 = svg_template(`<title> </title>`);
var root_686 = svg_template(`<desc> </desc>`);
var root_486 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M16 16.881V7.119a1 1 0 0 0-1.636-.772l-5.927 4.881a1 1 0 0 0 0 1.544l5.927 4.88a1 1 0 0 0 1.636-.77Z"></path></svg>`);
function CaretLeftOutline($$anchor, $$props) {
  if (new.target === CaretLeftOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CaretLeftOutline);
  validate_prop_bindings($$props, [], [], CaretLeftOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "caret left outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_186();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_286();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_386();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_486();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_586();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_686();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CaretLeftOutline);
  CaretLeftOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CaretLeftOutline_default = CaretLeftOutline;
CaretLeftOutline.filename = ".../flowbite-svelte-icons/dist/CaretLeftOutline.svelte";
mark_module_end(CaretLeftOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CaretLeftSolid.svelte
mark_module_start();
var root_287 = svg_template(`<title> </title>`);
var root_387 = svg_template(`<desc> </desc>`);
var root_187 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M13.729 5.575c1.304-1.074 3.27-.146 3.27 1.544v9.762c0 1.69-1.966 2.618-3.27 1.544l-5.927-4.881a2 2 0 0 1 0-3.088l5.927-4.88Z" clip-rule="evenodd"></path></svg>`);
var root_587 = svg_template(`<title> </title>`);
var root_687 = svg_template(`<desc> </desc>`);
var root_487 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M13.729 5.575c1.304-1.074 3.27-.146 3.27 1.544v9.762c0 1.69-1.966 2.618-3.27 1.544l-5.927-4.881a2 2 0 0 1 0-3.088l5.927-4.88Z" clip-rule="evenodd"></path></svg>`);
function CaretLeftSolid($$anchor, $$props) {
  if (new.target === CaretLeftSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CaretLeftSolid);
  validate_prop_bindings($$props, [], [], CaretLeftSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "caret left solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_187();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_287();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_387();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_487();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_587();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_687();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CaretLeftSolid);
  CaretLeftSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CaretLeftSolid_default = CaretLeftSolid;
CaretLeftSolid.filename = ".../flowbite-svelte-icons/dist/CaretLeftSolid.svelte";
mark_module_end(CaretLeftSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CaretRightOutline.svelte
mark_module_start();
var root_288 = svg_template(`<title> </title>`);
var root_388 = svg_template(`<desc> </desc>`);
var root_188 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M8 16.881V7.119a1 1 0 0 1 1.636-.772l5.927 4.881a1 1 0 0 1 0 1.544l-5.927 4.88A1 1 0 0 1 8 16.882Z"></path></svg>`);
var root_588 = svg_template(`<title> </title>`);
var root_688 = svg_template(`<desc> </desc>`);
var root_488 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M8 16.881V7.119a1 1 0 0 1 1.636-.772l5.927 4.881a1 1 0 0 1 0 1.544l-5.927 4.88A1 1 0 0 1 8 16.882Z"></path></svg>`);
function CaretRightOutline($$anchor, $$props) {
  if (new.target === CaretRightOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CaretRightOutline);
  validate_prop_bindings($$props, [], [], CaretRightOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "caret right outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_188();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_288();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_388();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_488();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_588();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_688();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CaretRightOutline);
  CaretRightOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CaretRightOutline_default = CaretRightOutline;
CaretRightOutline.filename = ".../flowbite-svelte-icons/dist/CaretRightOutline.svelte";
mark_module_end(CaretRightOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CaretRightSolid.svelte
mark_module_start();
var root_289 = svg_template(`<title> </title>`);
var root_389 = svg_template(`<desc> </desc>`);
var root_189 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M10.271 5.575C8.967 4.501 7 5.43 7 7.12v9.762c0 1.69 1.967 2.618 3.271 1.544l5.927-4.881a2 2 0 0 0 0-3.088l-5.927-4.88Z" clip-rule="evenodd"></path></svg>`);
var root_589 = svg_template(`<title> </title>`);
var root_689 = svg_template(`<desc> </desc>`);
var root_489 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M10.271 5.575C8.967 4.501 7 5.43 7 7.12v9.762c0 1.69 1.967 2.618 3.271 1.544l5.927-4.881a2 2 0 0 0 0-3.088l-5.927-4.88Z" clip-rule="evenodd"></path></svg>`);
function CaretRightSolid($$anchor, $$props) {
  if (new.target === CaretRightSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CaretRightSolid);
  validate_prop_bindings($$props, [], [], CaretRightSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "caret right solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_189();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_289();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_389();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_489();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_589();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_689();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CaretRightSolid);
  CaretRightSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CaretRightSolid_default = CaretRightSolid;
CaretRightSolid.filename = ".../flowbite-svelte-icons/dist/CaretRightSolid.svelte";
mark_module_end(CaretRightSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CaretSortOutline.svelte
mark_module_start();
var root_290 = svg_template(`<title> </title>`);
var root_390 = svg_template(`<desc> </desc>`);
var root_190 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m8 10 4-6 4 6H8Zm8 4-4 6-4-6h8Z"></path></svg>`);
var root_590 = svg_template(`<title> </title>`);
var root_690 = svg_template(`<desc> </desc>`);
var root_490 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m8 10 4-6 4 6H8Zm8 4-4 6-4-6h8Z"></path></svg>`);
function CaretSortOutline($$anchor, $$props) {
  if (new.target === CaretSortOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CaretSortOutline);
  validate_prop_bindings($$props, [], [], CaretSortOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "caret sort outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_190();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_290();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_390();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_490();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_590();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_690();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CaretSortOutline);
  CaretSortOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CaretSortOutline_default = CaretSortOutline;
CaretSortOutline.filename = ".../flowbite-svelte-icons/dist/CaretSortOutline.svelte";
mark_module_end(CaretSortOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CaretSortSolid.svelte
mark_module_start();
var root_291 = svg_template(`<title> </title>`);
var root_391 = svg_template(`<desc> </desc>`);
var root_191 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M12.832 3.445a1 1 0 0 0-1.664 0l-4 6A1 1 0 0 0 8 11h8a1 1 0 0 0 .832-1.555l-4-6Zm-1.664 17.11a1 1 0 0 0 1.664 0l4-6A1 1 0 0 0 16 13H8a1 1 0 0 0-.832 1.555l4 6Z" clip-rule="evenodd"></path></svg>`);
var root_591 = svg_template(`<title> </title>`);
var root_691 = svg_template(`<desc> </desc>`);
var root_491 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M12.832 3.445a1 1 0 0 0-1.664 0l-4 6A1 1 0 0 0 8 11h8a1 1 0 0 0 .832-1.555l-4-6Zm-1.664 17.11a1 1 0 0 0 1.664 0l4-6A1 1 0 0 0 16 13H8a1 1 0 0 0-.832 1.555l4 6Z" clip-rule="evenodd"></path></svg>`);
function CaretSortSolid($$anchor, $$props) {
  if (new.target === CaretSortSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CaretSortSolid);
  validate_prop_bindings($$props, [], [], CaretSortSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "caret sort solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_191();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_291();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_391();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_491();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_591();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_691();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CaretSortSolid);
  CaretSortSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CaretSortSolid_default = CaretSortSolid;
CaretSortSolid.filename = ".../flowbite-svelte-icons/dist/CaretSortSolid.svelte";
mark_module_end(CaretSortSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CaretUpOutline.svelte
mark_module_start();
var root_292 = svg_template(`<title> </title>`);
var root_392 = svg_template(`<desc> </desc>`);
var root_192 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M16.881 16H7.119a1 1 0 0 1-.772-1.636l4.881-5.927a1 1 0 0 1 1.544 0l4.88 5.927a1 1 0 0 1-.77 1.636Z"></path></svg>`);
var root_592 = svg_template(`<title> </title>`);
var root_692 = svg_template(`<desc> </desc>`);
var root_492 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M16.881 16H7.119a1 1 0 0 1-.772-1.636l4.881-5.927a1 1 0 0 1 1.544 0l4.88 5.927a1 1 0 0 1-.77 1.636Z"></path></svg>`);
function CaretUpOutline($$anchor, $$props) {
  if (new.target === CaretUpOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CaretUpOutline);
  validate_prop_bindings($$props, [], [], CaretUpOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "caret up outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_192();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_292();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_392();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_492();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_592();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_692();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CaretUpOutline);
  CaretUpOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CaretUpOutline_default = CaretUpOutline;
CaretUpOutline.filename = ".../flowbite-svelte-icons/dist/CaretUpOutline.svelte";
mark_module_end(CaretUpOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CaretUpSolid.svelte
mark_module_start();
var root_293 = svg_template(`<title> </title>`);
var root_393 = svg_template(`<desc> </desc>`);
var root_193 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M5.575 13.729C4.501 15.033 5.43 17 7.12 17h9.762c1.69 0 2.618-1.967 1.544-3.271l-4.881-5.927a2 2 0 0 0-3.088 0l-4.88 5.927Z" clip-rule="evenodd"></path></svg>`);
var root_593 = svg_template(`<title> </title>`);
var root_693 = svg_template(`<desc> </desc>`);
var root_493 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M5.575 13.729C4.501 15.033 5.43 17 7.12 17h9.762c1.69 0 2.618-1.967 1.544-3.271l-4.881-5.927a2 2 0 0 0-3.088 0l-4.88 5.927Z" clip-rule="evenodd"></path></svg>`);
function CaretUpSolid($$anchor, $$props) {
  if (new.target === CaretUpSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CaretUpSolid);
  validate_prop_bindings($$props, [], [], CaretUpSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "caret up solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_193();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_293();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_393();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_493();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_593();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_693();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CaretUpSolid);
  CaretUpSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CaretUpSolid_default = CaretUpSolid;
CaretUpSolid.filename = ".../flowbite-svelte-icons/dist/CaretUpSolid.svelte";
mark_module_end(CaretUpSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CartOutline.svelte
mark_module_start();
var root_294 = svg_template(`<title> </title>`);
var root_394 = svg_template(`<desc> </desc>`);
var root_194 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M5 4h1.5L9 16m0 0h8m-8 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm8 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm-8.5-3h9.25L19 7H7.312"></path></svg>`);
var root_594 = svg_template(`<title> </title>`);
var root_694 = svg_template(`<desc> </desc>`);
var root_494 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M5 4h1.5L9 16m0 0h8m-8 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm8 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm-8.5-3h9.25L19 7H7.312"></path></svg>`);
function CartOutline($$anchor, $$props) {
  if (new.target === CartOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CartOutline);
  validate_prop_bindings($$props, [], [], CartOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "cart outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_194();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_294();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_394();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_494();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_594();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_694();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CartOutline);
  CartOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CartOutline_default = CartOutline;
CartOutline.filename = ".../flowbite-svelte-icons/dist/CartOutline.svelte";
mark_module_end(CartOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CartPlusAltOutline.svelte
mark_module_start();
var root_295 = svg_template(`<title> </title>`);
var root_395 = svg_template(`<desc> </desc>`);
var root_195 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M4 4h1.5L8 16m0 0h8m-8 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm8 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm.75-3H7.5M11 7H6.312M17 4v6m-3-3h6"></path></svg>`);
var root_595 = svg_template(`<title> </title>`);
var root_695 = svg_template(`<desc> </desc>`);
var root_495 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M4 4h1.5L8 16m0 0h8m-8 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm8 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm.75-3H7.5M11 7H6.312M17 4v6m-3-3h6"></path></svg>`);
function CartPlusAltOutline($$anchor, $$props) {
  if (new.target === CartPlusAltOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CartPlusAltOutline);
  validate_prop_bindings($$props, [], [], CartPlusAltOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "cart plus alt outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_195();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_295();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_395();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_495();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_595();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_695();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CartPlusAltOutline);
  CartPlusAltOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CartPlusAltOutline_default = CartPlusAltOutline;
CartPlusAltOutline.filename = ".../flowbite-svelte-icons/dist/CartPlusAltOutline.svelte";
mark_module_end(CartPlusAltOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CartPlusAltSolid.svelte
mark_module_start();
var root_296 = svg_template(`<title> </title>`);
var root_396 = svg_template(`<desc> </desc>`);
var root_196 = svg_template(`<svg><!><!><path d="M12.268 6A2 2 0 0 0 14 9h1v1a2 2 0 0 0 3.04 1.708l-.311 1.496a1 1 0 0 1-.979.796H8.605l.208 1H16a3 3 0 1 1-2.83 2h-2.34a3 3 0 1 1-4.009-1.76L4.686 5H4a1 1 0 0 1 0-2h1.5a1 1 0 0 1 .979.796L6.939 6h5.329Z"></path><path d="M18 4a1 1 0 1 0-2 0v2h-2a1 1 0 1 0 0 2h2v2a1 1 0 1 0 2 0V8h2a1 1 0 1 0 0-2h-2V4Z"></path></svg>`);
var root_596 = svg_template(`<title> </title>`);
var root_696 = svg_template(`<desc> </desc>`);
var root_496 = svg_template(`<svg><!><!><path d="M12.268 6A2 2 0 0 0 14 9h1v1a2 2 0 0 0 3.04 1.708l-.311 1.496a1 1 0 0 1-.979.796H8.605l.208 1H16a3 3 0 1 1-2.83 2h-2.34a3 3 0 1 1-4.009-1.76L4.686 5H4a1 1 0 0 1 0-2h1.5a1 1 0 0 1 .979.796L6.939 6h5.329Z"></path><path d="M18 4a1 1 0 1 0-2 0v2h-2a1 1 0 1 0 0 2h2v2a1 1 0 1 0 2 0V8h2a1 1 0 1 0 0-2h-2V4Z"></path></svg>`);
function CartPlusAltSolid($$anchor, $$props) {
  if (new.target === CartPlusAltSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CartPlusAltSolid);
  validate_prop_bindings($$props, [], [], CartPlusAltSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "cart plus alt solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_196();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_296();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_396();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_496();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_596();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_696();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_2 = sibling(node_4);
      var path_3 = sibling(path_2);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CartPlusAltSolid);
  CartPlusAltSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CartPlusAltSolid_default = CartPlusAltSolid;
CartPlusAltSolid.filename = ".../flowbite-svelte-icons/dist/CartPlusAltSolid.svelte";
mark_module_end(CartPlusAltSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CartPlusOutline.svelte
mark_module_start();
var root_297 = svg_template(`<title> </title>`);
var root_397 = svg_template(`<desc> </desc>`);
var root_197 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M5 4h1.5L9 16m0 0h8m-8 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm8 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm-8.5-3h9.25L19 7h-1M8 7h-.688M13 5v4m-2-2h4"></path></svg>`);
var root_597 = svg_template(`<title> </title>`);
var root_697 = svg_template(`<desc> </desc>`);
var root_497 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M5 4h1.5L9 16m0 0h8m-8 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm8 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm-8.5-3h9.25L19 7h-1M8 7h-.688M13 5v4m-2-2h4"></path></svg>`);
function CartPlusOutline($$anchor, $$props) {
  if (new.target === CartPlusOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CartPlusOutline);
  validate_prop_bindings($$props, [], [], CartPlusOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "cart plus outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_197();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_297();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_397();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_497();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_597();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_697();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CartPlusOutline);
  CartPlusOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CartPlusOutline_default = CartPlusOutline;
CartPlusOutline.filename = ".../flowbite-svelte-icons/dist/CartPlusOutline.svelte";
mark_module_end(CartPlusOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CartPlusSolid.svelte
mark_module_start();
var root_298 = svg_template(`<title> </title>`);
var root_398 = svg_template(`<desc> </desc>`);
var root_198 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M5 3a1 1 0 0 0 0 2h.687L7.82 15.24A3 3 0 1 0 11.83 17h2.34A3 3 0 1 0 17 15H9.813l-.208-1h8.145a1 1 0 0 0 .979-.796l1.25-6A1 1 0 0 0 19 6h-2.268A2 2 0 0 1 15 9a2 2 0 1 1-4 0 2 2 0 0 1-1.732-3h-1.33L7.48 3.796A1 1 0 0 0 6.5 3H5Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M14 5a1 1 0 1 0-2 0v1h-1a1 1 0 1 0 0 2h1v1a1 1 0 1 0 2 0V8h1a1 1 0 1 0 0-2h-1V5Z" clip-rule="evenodd"></path></svg>`);
var root_598 = svg_template(`<title> </title>`);
var root_698 = svg_template(`<desc> </desc>`);
var root_498 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M5 3a1 1 0 0 0 0 2h.687L7.82 15.24A3 3 0 1 0 11.83 17h2.34A3 3 0 1 0 17 15H9.813l-.208-1h8.145a1 1 0 0 0 .979-.796l1.25-6A1 1 0 0 0 19 6h-2.268A2 2 0 0 1 15 9a2 2 0 1 1-4 0 2 2 0 0 1-1.732-3h-1.33L7.48 3.796A1 1 0 0 0 6.5 3H5Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M14 5a1 1 0 1 0-2 0v1h-1a1 1 0 1 0 0 2h1v1a1 1 0 1 0 2 0V8h1a1 1 0 1 0 0-2h-1V5Z" clip-rule="evenodd"></path></svg>`);
function CartPlusSolid($$anchor, $$props) {
  if (new.target === CartPlusSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CartPlusSolid);
  validate_prop_bindings($$props, [], [], CartPlusSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "cart plus solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_198();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_298();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_398();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_498();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_598();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_698();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_2 = sibling(node_4);
      var path_3 = sibling(path_2);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CartPlusSolid);
  CartPlusSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CartPlusSolid_default = CartPlusSolid;
CartPlusSolid.filename = ".../flowbite-svelte-icons/dist/CartPlusSolid.svelte";
mark_module_end(CartPlusSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CartSolid.svelte
mark_module_start();
var root_299 = svg_template(`<title> </title>`);
var root_399 = svg_template(`<desc> </desc>`);
var root_199 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M4 4a1 1 0 0 1 1-1h1.5a1 1 0 0 1 .979.796L7.939 6H19a1 1 0 0 1 .979 1.204l-1.25 6a1 1 0 0 1-.979.796H9.605l.208 1H17a3 3 0 1 1-2.83 2h-2.34a3 3 0 1 1-4.009-1.76L5.686 5H5a1 1 0 0 1-1-1Z" clip-rule="evenodd"></path></svg>`);
var root_599 = svg_template(`<title> </title>`);
var root_699 = svg_template(`<desc> </desc>`);
var root_499 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M4 4a1 1 0 0 1 1-1h1.5a1 1 0 0 1 .979.796L7.939 6H19a1 1 0 0 1 .979 1.204l-1.25 6a1 1 0 0 1-.979.796H9.605l.208 1H17a3 3 0 1 1-2.83 2h-2.34a3 3 0 1 1-4.009-1.76L5.686 5H5a1 1 0 0 1-1-1Z" clip-rule="evenodd"></path></svg>`);
function CartSolid($$anchor, $$props) {
  if (new.target === CartSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CartSolid);
  validate_prop_bindings($$props, [], [], CartSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "cart solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_199();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_299();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_399();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_499();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_599();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_699();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CartSolid);
  CartSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CartSolid_default = CartSolid;
CartSolid.filename = ".../flowbite-svelte-icons/dist/CartSolid.svelte";
mark_module_end(CartSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CashOutline.svelte
mark_module_start();
var root_2100 = svg_template(`<title> </title>`);
var root_3100 = svg_template(`<desc> </desc>`);
var root_1100 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" d="M8 7V6a1 1 0 0 1 1-1h11a1 1 0 0 1 1 1v7a1 1 0 0 1-1 1h-1M3 18v-7a1 1 0 0 1 1-1h11a1 1 0 0 1 1 1v7a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1Zm8-3.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0Z"></path></svg>`);
var root_5100 = svg_template(`<title> </title>`);
var root_6100 = svg_template(`<desc> </desc>`);
var root_4100 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" d="M8 7V6a1 1 0 0 1 1-1h11a1 1 0 0 1 1 1v7a1 1 0 0 1-1 1h-1M3 18v-7a1 1 0 0 1 1-1h11a1 1 0 0 1 1 1v7a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1Zm8-3.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0Z"></path></svg>`);
function CashOutline($$anchor, $$props) {
  if (new.target === CashOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CashOutline);
  validate_prop_bindings($$props, [], [], CashOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "cash outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1100();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2100();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3100();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4100();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5100();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6100();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CashOutline);
  CashOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CashOutline_default = CashOutline;
CashOutline.filename = ".../flowbite-svelte-icons/dist/CashOutline.svelte";
mark_module_end(CashOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CashSolid.svelte
mark_module_start();
var root_2101 = svg_template(`<title> </title>`);
var root_3101 = svg_template(`<desc> </desc>`);
var root_1101 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M7 6a2 2 0 0 1 2-2h11a2 2 0 0 1 2 2v7a2 2 0 0 1-2 2h-2v-4a3 3 0 0 0-3-3H7V6Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M2 11a2 2 0 0 1 2-2h11a2 2 0 0 1 2 2v7a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2v-7Zm7.5 1a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5Z" clip-rule="evenodd"></path><path d="M10.5 14.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"></path></svg>`);
var root_5101 = svg_template(`<title> </title>`);
var root_6101 = svg_template(`<desc> </desc>`);
var root_4101 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M7 6a2 2 0 0 1 2-2h11a2 2 0 0 1 2 2v7a2 2 0 0 1-2 2h-2v-4a3 3 0 0 0-3-3H7V6Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M2 11a2 2 0 0 1 2-2h11a2 2 0 0 1 2 2v7a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2v-7Zm7.5 1a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5Z" clip-rule="evenodd"></path><path d="M10.5 14.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"></path></svg>`);
function CashSolid($$anchor, $$props) {
  if (new.target === CashSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CashSolid);
  validate_prop_bindings($$props, [], [], CashSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "cash solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1101();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2101();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3101();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      var path_2 = sibling(path_1);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4101();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5101();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6101();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_3 = sibling(node_4);
      var path_4 = sibling(path_3);
      var path_5 = sibling(path_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CashSolid);
  CashSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CashSolid_default = CashSolid;
CashSolid.filename = ".../flowbite-svelte-icons/dist/CashSolid.svelte";
mark_module_end(CashSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ChartLineDownOutline.svelte
mark_module_start();
var root_2102 = svg_template(`<title> </title>`);
var root_3102 = svg_template(`<desc> </desc>`);
var root_1102 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M4 4.5V19a1 1 0 0 0 1 1h15M7 10l4 4 4-4 5 5m0 0h-3.207M20 15v-3.207"></path></svg>`);
var root_5102 = svg_template(`<title> </title>`);
var root_6102 = svg_template(`<desc> </desc>`);
var root_4102 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M4 4.5V19a1 1 0 0 0 1 1h15M7 10l4 4 4-4 5 5m0 0h-3.207M20 15v-3.207"></path></svg>`);
function ChartLineDownOutline($$anchor, $$props) {
  if (new.target === ChartLineDownOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ChartLineDownOutline);
  validate_prop_bindings($$props, [], [], ChartLineDownOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "chart line down outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1102();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2102();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3102();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4102();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5102();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6102();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ChartLineDownOutline);
  ChartLineDownOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ChartLineDownOutline_default = ChartLineDownOutline;
ChartLineDownOutline.filename = ".../flowbite-svelte-icons/dist/ChartLineDownOutline.svelte";
mark_module_end(ChartLineDownOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ChartLineUpOutline.svelte
mark_module_start();
var root_2103 = svg_template(`<title> </title>`);
var root_3103 = svg_template(`<desc> </desc>`);
var root_1103 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M4 4.5V19a1 1 0 0 0 1 1h15M7 14l4-4 4 4 5-5m0 0h-3.207M20 9v3.207"></path></svg>`);
var root_5103 = svg_template(`<title> </title>`);
var root_6103 = svg_template(`<desc> </desc>`);
var root_4103 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M4 4.5V19a1 1 0 0 0 1 1h15M7 14l4-4 4 4 5-5m0 0h-3.207M20 9v3.207"></path></svg>`);
function ChartLineUpOutline($$anchor, $$props) {
  if (new.target === ChartLineUpOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ChartLineUpOutline);
  validate_prop_bindings($$props, [], [], ChartLineUpOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "chart line up outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1103();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2103();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3103();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4103();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5103();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6103();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ChartLineUpOutline);
  ChartLineUpOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ChartLineUpOutline_default = ChartLineUpOutline;
ChartLineUpOutline.filename = ".../flowbite-svelte-icons/dist/ChartLineUpOutline.svelte";
mark_module_end(ChartLineUpOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ChartMixedDollarOutline.svelte
mark_module_start();
var root_2104 = svg_template(`<title> </title>`);
var root_3104 = svg_template(`<desc> </desc>`);
var root_1104 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M13.6 16.733c.234.269.548.456.895.534a1.4 1.4 0 0 0 1.75-.762c.172-.615-.446-1.287-1.242-1.481-.796-.194-1.41-.861-1.241-1.481a1.4 1.4 0 0 1 1.75-.762c.343.077.654.26.888.524m-1.358 4.017v.617m0-5.939v.725M4 15v4m3-6v6M6 8.5 10.5 5 14 7.5 18 4m0 0h-3.5M18 4v3m2 8a5 5 0 1 1-10 0 5 5 0 0 1 10 0Z"></path></svg>`);
var root_5104 = svg_template(`<title> </title>`);
var root_6104 = svg_template(`<desc> </desc>`);
var root_4104 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M13.6 16.733c.234.269.548.456.895.534a1.4 1.4 0 0 0 1.75-.762c.172-.615-.446-1.287-1.242-1.481-.796-.194-1.41-.861-1.241-1.481a1.4 1.4 0 0 1 1.75-.762c.343.077.654.26.888.524m-1.358 4.017v.617m0-5.939v.725M4 15v4m3-6v6M6 8.5 10.5 5 14 7.5 18 4m0 0h-3.5M18 4v3m2 8a5 5 0 1 1-10 0 5 5 0 0 1 10 0Z"></path></svg>`);
function ChartMixedDollarOutline($$anchor, $$props) {
  if (new.target === ChartMixedDollarOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ChartMixedDollarOutline);
  validate_prop_bindings($$props, [], [], ChartMixedDollarOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "chart mixed dollar outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1104();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2104();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3104();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4104();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5104();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6104();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ChartMixedDollarOutline);
  ChartMixedDollarOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ChartMixedDollarOutline_default = ChartMixedDollarOutline;
ChartMixedDollarOutline.filename = ".../flowbite-svelte-icons/dist/ChartMixedDollarOutline.svelte";
mark_module_end(ChartMixedDollarOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ChartMixedDollarSolid.svelte
mark_module_start();
var root_2105 = svg_template(`<title> </title>`);
var root_3105 = svg_template(`<desc> </desc>`);
var root_1105 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M9 15a6 6 0 1 1 12 0 6 6 0 0 1-12 0Zm3.845-1.855a2.4 2.4 0 0 1 1.2-1.226 1 1 0 0 1 1.992-.026c.426.15.809.408 1.111.749a1 1 0 1 1-1.496 1.327.682.682 0 0 0-.36-.213.997.997 0 0 1-.113-.032.4.4 0 0 0-.394.074.93.93 0 0 0 .455.254 2.914 2.914 0 0 1 1.504.9c.373.433.669 1.092.464 1.823a.996.996 0 0 1-.046.129c-.226.519-.627.94-1.132 1.192a1 1 0 0 1-1.956.093 2.68 2.68 0 0 1-1.227-.798 1 1 0 1 1 1.506-1.315.682.682 0 0 0 .363.216c.038.009.075.02.111.032a.4.4 0 0 0 .395-.074.93.93 0 0 0-.455-.254 2.91 2.91 0 0 1-1.503-.9c-.375-.433-.666-1.089-.466-1.817a.994.994 0 0 1 .047-.134Zm1.884.573.003.008c-.003-.005-.003-.008-.003-.008Zm.55 2.613s-.002-.002-.003-.007a.032.032 0 0 1 .003.007ZM4 14a1 1 0 0 1 1 1v4a1 1 0 1 1-2 0v-4a1 1 0 0 1 1-1Zm3-2a1 1 0 0 1 1 1v6a1 1 0 1 1-2 0v-6a1 1 0 0 1 1-1Zm6.5-8a1 1 0 0 1 1-1H18a1 1 0 0 1 1 1v3a1 1 0 1 1-2 0v-.796l-2.341 2.049a1 1 0 0 1-1.24.06l-2.894-2.066L6.614 9.29a1 1 0 1 1-1.228-1.578l4.5-3.5a1 1 0 0 1 1.195-.025l2.856 2.04L15.34 5h-.84a1 1 0 0 1-1-1Z" clip-rule="evenodd"></path></svg>`);
var root_5105 = svg_template(`<title> </title>`);
var root_6105 = svg_template(`<desc> </desc>`);
var root_4105 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M9 15a6 6 0 1 1 12 0 6 6 0 0 1-12 0Zm3.845-1.855a2.4 2.4 0 0 1 1.2-1.226 1 1 0 0 1 1.992-.026c.426.15.809.408 1.111.749a1 1 0 1 1-1.496 1.327.682.682 0 0 0-.36-.213.997.997 0 0 1-.113-.032.4.4 0 0 0-.394.074.93.93 0 0 0 .455.254 2.914 2.914 0 0 1 1.504.9c.373.433.669 1.092.464 1.823a.996.996 0 0 1-.046.129c-.226.519-.627.94-1.132 1.192a1 1 0 0 1-1.956.093 2.68 2.68 0 0 1-1.227-.798 1 1 0 1 1 1.506-1.315.682.682 0 0 0 .363.216c.038.009.075.02.111.032a.4.4 0 0 0 .395-.074.93.93 0 0 0-.455-.254 2.91 2.91 0 0 1-1.503-.9c-.375-.433-.666-1.089-.466-1.817a.994.994 0 0 1 .047-.134Zm1.884.573.003.008c-.003-.005-.003-.008-.003-.008Zm.55 2.613s-.002-.002-.003-.007a.032.032 0 0 1 .003.007ZM4 14a1 1 0 0 1 1 1v4a1 1 0 1 1-2 0v-4a1 1 0 0 1 1-1Zm3-2a1 1 0 0 1 1 1v6a1 1 0 1 1-2 0v-6a1 1 0 0 1 1-1Zm6.5-8a1 1 0 0 1 1-1H18a1 1 0 0 1 1 1v3a1 1 0 1 1-2 0v-.796l-2.341 2.049a1 1 0 0 1-1.24.06l-2.894-2.066L6.614 9.29a1 1 0 1 1-1.228-1.578l4.5-3.5a1 1 0 0 1 1.195-.025l2.856 2.04L15.34 5h-.84a1 1 0 0 1-1-1Z" clip-rule="evenodd"></path></svg>`);
function ChartMixedDollarSolid($$anchor, $$props) {
  if (new.target === ChartMixedDollarSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ChartMixedDollarSolid);
  validate_prop_bindings($$props, [], [], ChartMixedDollarSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "chart mixed dollar solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1105();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2105();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3105();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4105();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5105();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6105();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ChartMixedDollarSolid);
  ChartMixedDollarSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ChartMixedDollarSolid_default = ChartMixedDollarSolid;
ChartMixedDollarSolid.filename = ".../flowbite-svelte-icons/dist/ChartMixedDollarSolid.svelte";
mark_module_end(ChartMixedDollarSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ChartMixedOutline.svelte
mark_module_start();
var root_2106 = svg_template(`<title> </title>`);
var root_3106 = svg_template(`<desc> </desc>`);
var root_1106 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M3 15v4m6-6v6m6-4v4m6-6v6M3 11l6-5 6 5 5.5-5.5"></path></svg>`);
var root_5106 = svg_template(`<title> </title>`);
var root_6106 = svg_template(`<desc> </desc>`);
var root_4106 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M3 15v4m6-6v6m6-4v4m6-6v6M3 11l6-5 6 5 5.5-5.5"></path></svg>`);
function ChartMixedOutline($$anchor, $$props) {
  if (new.target === ChartMixedOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ChartMixedOutline);
  validate_prop_bindings($$props, [], [], ChartMixedOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "chart mixed outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1106();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2106();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3106();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4106();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5106();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6106();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ChartMixedOutline);
  ChartMixedOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ChartMixedOutline_default = ChartMixedOutline;
ChartMixedOutline.filename = ".../flowbite-svelte-icons/dist/ChartMixedOutline.svelte";
mark_module_end(ChartMixedOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ChartOutline.svelte
mark_module_start();
var root_2107 = svg_template(`<title> </title>`);
var root_3107 = svg_template(`<desc> </desc>`);
var root_1107 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M4 4v15a1 1 0 0 0 1 1h15M8 16l2.5-5.5 3 3L17.273 7 20 9.667"></path></svg>`);
var root_5107 = svg_template(`<title> </title>`);
var root_6107 = svg_template(`<desc> </desc>`);
var root_4107 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M4 4v15a1 1 0 0 0 1 1h15M8 16l2.5-5.5 3 3L17.273 7 20 9.667"></path></svg>`);
function ChartOutline($$anchor, $$props) {
  if (new.target === ChartOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ChartOutline);
  validate_prop_bindings($$props, [], [], ChartOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "chart outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1107();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2107();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3107();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4107();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5107();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6107();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ChartOutline);
  ChartOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ChartOutline_default = ChartOutline;
ChartOutline.filename = ".../flowbite-svelte-icons/dist/ChartOutline.svelte";
mark_module_end(ChartOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ChartPieOutline.svelte
mark_module_start();
var root_2108 = svg_template(`<title> </title>`);
var root_3108 = svg_template(`<desc> </desc>`);
var root_1108 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M10 6.025A7.5 7.5 0 1 0 17.975 14H10V6.025Z"></path><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M13.5 3c-.169 0-.334.014-.5.025V11h7.975c.011-.166.025-.331.025-.5A7.5 7.5 0 0 0 13.5 3Z"></path></svg>`);
var root_5108 = svg_template(`<title> </title>`);
var root_6108 = svg_template(`<desc> </desc>`);
var root_4108 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M10 6.025A7.5 7.5 0 1 0 17.975 14H10V6.025Z"></path><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M13.5 3c-.169 0-.334.014-.5.025V11h7.975c.011-.166.025-.331.025-.5A7.5 7.5 0 0 0 13.5 3Z"></path></svg>`);
function ChartPieOutline($$anchor, $$props) {
  if (new.target === ChartPieOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ChartPieOutline);
  validate_prop_bindings($$props, [], [], ChartPieOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "chart pie outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1108();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2108();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3108();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4108();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5108();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6108();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_2 = sibling(node_4);
      var path_3 = sibling(path_2);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_2, "stroke-width", strokeWidth());
        set_attribute(path_3, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ChartPieOutline);
  ChartPieOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ChartPieOutline_default = ChartPieOutline;
ChartPieOutline.filename = ".../flowbite-svelte-icons/dist/ChartPieOutline.svelte";
mark_module_end(ChartPieOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ChartPieSolid.svelte
mark_module_start();
var root_2109 = svg_template(`<title> </title>`);
var root_3109 = svg_template(`<desc> </desc>`);
var root_1109 = svg_template(`<svg><!><!><path d="M13.5 2c-.178 0-.356.013-.492.022l-.074.005a1 1 0 0 0-.934.998V11a1 1 0 0 0 1 1h7.975a1 1 0 0 0 .998-.934l.005-.074A7.04 7.04 0 0 0 22 10.5 8.5 8.5 0 0 0 13.5 2Z"></path><path d="M11 6.025a1 1 0 0 0-1.065-.998 8.5 8.5 0 1 0 9.038 9.039A1 1 0 0 0 17.975 13H11V6.025Z"></path></svg>`);
var root_5109 = svg_template(`<title> </title>`);
var root_6109 = svg_template(`<desc> </desc>`);
var root_4109 = svg_template(`<svg><!><!><path d="M13.5 2c-.178 0-.356.013-.492.022l-.074.005a1 1 0 0 0-.934.998V11a1 1 0 0 0 1 1h7.975a1 1 0 0 0 .998-.934l.005-.074A7.04 7.04 0 0 0 22 10.5 8.5 8.5 0 0 0 13.5 2Z"></path><path d="M11 6.025a1 1 0 0 0-1.065-.998 8.5 8.5 0 1 0 9.038 9.039A1 1 0 0 0 17.975 13H11V6.025Z"></path></svg>`);
function ChartPieSolid($$anchor, $$props) {
  if (new.target === ChartPieSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ChartPieSolid);
  validate_prop_bindings($$props, [], [], ChartPieSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "chart pie solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1109();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2109();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3109();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4109();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5109();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6109();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_2 = sibling(node_4);
      var path_3 = sibling(path_2);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ChartPieSolid);
  ChartPieSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ChartPieSolid_default = ChartPieSolid;
ChartPieSolid.filename = ".../flowbite-svelte-icons/dist/ChartPieSolid.svelte";
mark_module_end(ChartPieSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CheckCircleOutline.svelte
mark_module_start();
var root_2110 = svg_template(`<title> </title>`);
var root_3110 = svg_template(`<desc> </desc>`);
var root_1110 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M8.5 11.5 11 14l4-4m6 2a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"></path></svg>`);
var root_5110 = svg_template(`<title> </title>`);
var root_6110 = svg_template(`<desc> </desc>`);
var root_4110 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M8.5 11.5 11 14l4-4m6 2a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"></path></svg>`);
function CheckCircleOutline($$anchor, $$props) {
  if (new.target === CheckCircleOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CheckCircleOutline);
  validate_prop_bindings($$props, [], [], CheckCircleOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "check circle outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1110();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2110();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3110();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4110();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5110();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6110();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CheckCircleOutline);
  CheckCircleOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CheckCircleOutline_default = CheckCircleOutline;
CheckCircleOutline.filename = ".../flowbite-svelte-icons/dist/CheckCircleOutline.svelte";
mark_module_end(CheckCircleOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CheckCircleSolid.svelte
mark_module_start();
var root_2111 = svg_template(`<title> </title>`);
var root_3111 = svg_template(`<desc> </desc>`);
var root_1111 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M2 12C2 6.477 6.477 2 12 2s10 4.477 10 10-4.477 10-10 10S2 17.523 2 12Zm13.707-1.293a1 1 0 0 0-1.414-1.414L11 12.586l-1.793-1.793a1 1 0 0 0-1.414 1.414l2.5 2.5a1 1 0 0 0 1.414 0l4-4Z" clip-rule="evenodd"></path></svg>`);
var root_5111 = svg_template(`<title> </title>`);
var root_6111 = svg_template(`<desc> </desc>`);
var root_4111 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M2 12C2 6.477 6.477 2 12 2s10 4.477 10 10-4.477 10-10 10S2 17.523 2 12Zm13.707-1.293a1 1 0 0 0-1.414-1.414L11 12.586l-1.793-1.793a1 1 0 0 0-1.414 1.414l2.5 2.5a1 1 0 0 0 1.414 0l4-4Z" clip-rule="evenodd"></path></svg>`);
function CheckCircleSolid($$anchor, $$props) {
  if (new.target === CheckCircleSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CheckCircleSolid);
  validate_prop_bindings($$props, [], [], CheckCircleSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "check circle solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1111();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2111();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3111();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4111();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5111();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6111();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CheckCircleSolid);
  CheckCircleSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CheckCircleSolid_default = CheckCircleSolid;
CheckCircleSolid.filename = ".../flowbite-svelte-icons/dist/CheckCircleSolid.svelte";
mark_module_end(CheckCircleSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CheckOutline.svelte
mark_module_start();
var root_2112 = svg_template(`<title> </title>`);
var root_3112 = svg_template(`<desc> </desc>`);
var root_1112 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M5 11.917 9.724 16.5 19 7.5"></path></svg>`);
var root_5112 = svg_template(`<title> </title>`);
var root_6112 = svg_template(`<desc> </desc>`);
var root_4112 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M5 11.917 9.724 16.5 19 7.5"></path></svg>`);
function CheckOutline($$anchor, $$props) {
  if (new.target === CheckOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CheckOutline);
  validate_prop_bindings($$props, [], [], CheckOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "check outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1112();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2112();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3112();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4112();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5112();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6112();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CheckOutline);
  CheckOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CheckOutline_default = CheckOutline;
CheckOutline.filename = ".../flowbite-svelte-icons/dist/CheckOutline.svelte";
mark_module_end(CheckOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CheckPlusCircleOutline.svelte
mark_module_start();
var root_2113 = svg_template(`<title> </title>`);
var root_3113 = svg_template(`<desc> </desc>`);
var root_1113 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12 21a9 9 0 1 1 0-18c1.052 0 2.062.18 3 .512M7 9.577l3.923 3.923 8.5-8.5M17 14v6m-3-3h6"></path></svg>`);
var root_5113 = svg_template(`<title> </title>`);
var root_6113 = svg_template(`<desc> </desc>`);
var root_4113 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12 21a9 9 0 1 1 0-18c1.052 0 2.062.18 3 .512M7 9.577l3.923 3.923 8.5-8.5M17 14v6m-3-3h6"></path></svg>`);
function CheckPlusCircleOutline($$anchor, $$props) {
  if (new.target === CheckPlusCircleOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CheckPlusCircleOutline);
  validate_prop_bindings($$props, [], [], CheckPlusCircleOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "check plus circle outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1113();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2113();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3113();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4113();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5113();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6113();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CheckPlusCircleOutline);
  CheckPlusCircleOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CheckPlusCircleOutline_default = CheckPlusCircleOutline;
CheckPlusCircleOutline.filename = ".../flowbite-svelte-icons/dist/CheckPlusCircleOutline.svelte";
mark_module_end(CheckPlusCircleOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CheckPlusCircleSolid.svelte
mark_module_start();
var root_2114 = svg_template(`<title> </title>`);
var root_3114 = svg_template(`<desc> </desc>`);
var root_1114 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M18 14a1 1 0 1 0-2 0v2h-2a1 1 0 1 0 0 2h2v2a1 1 0 1 0 2 0v-2h2a1 1 0 1 0 0-2h-2v-2Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M15.026 21.534A9.994 9.994 0 0 1 12 22C6.477 22 2 17.523 2 12S6.477 2 12 2c2.51 0 4.802.924 6.558 2.45l-7.635 7.636L7.707 8.87a1 1 0 0 0-1.414 1.414l3.923 3.923a1 1 0 0 0 1.414 0l8.3-8.3A9.956 9.956 0 0 1 22 12a9.994 9.994 0 0 1-.466 3.026A2.49 2.49 0 0 0 20 14.5h-.5V14a2.5 2.5 0 0 0-5 0v.5H14a2.5 2.5 0 0 0 0 5h.5v.5c0 .578.196 1.11.526 1.534Z" clip-rule="evenodd"></path></svg>`);
var root_5114 = svg_template(`<title> </title>`);
var root_6114 = svg_template(`<desc> </desc>`);
var root_4114 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M18 14a1 1 0 1 0-2 0v2h-2a1 1 0 1 0 0 2h2v2a1 1 0 1 0 2 0v-2h2a1 1 0 1 0 0-2h-2v-2Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M15.026 21.534A9.994 9.994 0 0 1 12 22C6.477 22 2 17.523 2 12S6.477 2 12 2c2.51 0 4.802.924 6.558 2.45l-7.635 7.636L7.707 8.87a1 1 0 0 0-1.414 1.414l3.923 3.923a1 1 0 0 0 1.414 0l8.3-8.3A9.956 9.956 0 0 1 22 12a9.994 9.994 0 0 1-.466 3.026A2.49 2.49 0 0 0 20 14.5h-.5V14a2.5 2.5 0 0 0-5 0v.5H14a2.5 2.5 0 0 0 0 5h.5v.5c0 .578.196 1.11.526 1.534Z" clip-rule="evenodd"></path></svg>`);
function CheckPlusCircleSolid($$anchor, $$props) {
  if (new.target === CheckPlusCircleSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CheckPlusCircleSolid);
  validate_prop_bindings($$props, [], [], CheckPlusCircleSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "check plus circle solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1114();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2114();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3114();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4114();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5114();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6114();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_2 = sibling(node_4);
      var path_3 = sibling(path_2);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CheckPlusCircleSolid);
  CheckPlusCircleSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CheckPlusCircleSolid_default = CheckPlusCircleSolid;
CheckPlusCircleSolid.filename = ".../flowbite-svelte-icons/dist/CheckPlusCircleSolid.svelte";
mark_module_end(CheckPlusCircleSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ChevronDoubleDownOutline.svelte
mark_module_start();
var root_2115 = svg_template(`<title> </title>`);
var root_3115 = svg_template(`<desc> </desc>`);
var root_1115 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m8 7 4 4 4-4m-8 6 4 4 4-4"></path></svg>`);
var root_5115 = svg_template(`<title> </title>`);
var root_6115 = svg_template(`<desc> </desc>`);
var root_4115 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m8 7 4 4 4-4m-8 6 4 4 4-4"></path></svg>`);
function ChevronDoubleDownOutline($$anchor, $$props) {
  if (new.target === ChevronDoubleDownOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ChevronDoubleDownOutline);
  validate_prop_bindings($$props, [], [], ChevronDoubleDownOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "chevron double down outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1115();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2115();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3115();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4115();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5115();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6115();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ChevronDoubleDownOutline);
  ChevronDoubleDownOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ChevronDoubleDownOutline_default = ChevronDoubleDownOutline;
ChevronDoubleDownOutline.filename = ".../flowbite-svelte-icons/dist/ChevronDoubleDownOutline.svelte";
mark_module_end(ChevronDoubleDownOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ChevronDoubleLeftOutline.svelte
mark_module_start();
var root_2116 = svg_template(`<title> </title>`);
var root_3116 = svg_template(`<desc> </desc>`);
var root_1116 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m17 16-4-4 4-4m-6 8-4-4 4-4"></path></svg>`);
var root_5116 = svg_template(`<title> </title>`);
var root_6116 = svg_template(`<desc> </desc>`);
var root_4116 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m17 16-4-4 4-4m-6 8-4-4 4-4"></path></svg>`);
function ChevronDoubleLeftOutline($$anchor, $$props) {
  if (new.target === ChevronDoubleLeftOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ChevronDoubleLeftOutline);
  validate_prop_bindings($$props, [], [], ChevronDoubleLeftOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "chevron double left outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1116();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2116();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3116();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4116();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5116();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6116();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ChevronDoubleLeftOutline);
  ChevronDoubleLeftOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ChevronDoubleLeftOutline_default = ChevronDoubleLeftOutline;
ChevronDoubleLeftOutline.filename = ".../flowbite-svelte-icons/dist/ChevronDoubleLeftOutline.svelte";
mark_module_end(ChevronDoubleLeftOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ChevronDoubleRightOutline.svelte
mark_module_start();
var root_2117 = svg_template(`<title> </title>`);
var root_3117 = svg_template(`<desc> </desc>`);
var root_1117 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m7 16 4-4-4-4m6 8 4-4-4-4"></path></svg>`);
var root_5117 = svg_template(`<title> </title>`);
var root_6117 = svg_template(`<desc> </desc>`);
var root_4117 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m7 16 4-4-4-4m6 8 4-4-4-4"></path></svg>`);
function ChevronDoubleRightOutline($$anchor, $$props) {
  if (new.target === ChevronDoubleRightOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ChevronDoubleRightOutline);
  validate_prop_bindings($$props, [], [], ChevronDoubleRightOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "chevron double right outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1117();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2117();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3117();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4117();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5117();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6117();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ChevronDoubleRightOutline);
  ChevronDoubleRightOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ChevronDoubleRightOutline_default = ChevronDoubleRightOutline;
ChevronDoubleRightOutline.filename = ".../flowbite-svelte-icons/dist/ChevronDoubleRightOutline.svelte";
mark_module_end(ChevronDoubleRightOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ChevronDoubleUpOutline.svelte
mark_module_start();
var root_2118 = svg_template(`<title> </title>`);
var root_3118 = svg_template(`<desc> </desc>`);
var root_1118 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m16 17-4-4-4 4m8-6-4-4-4 4"></path></svg>`);
var root_5118 = svg_template(`<title> </title>`);
var root_6118 = svg_template(`<desc> </desc>`);
var root_4118 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m16 17-4-4-4 4m8-6-4-4-4 4"></path></svg>`);
function ChevronDoubleUpOutline($$anchor, $$props) {
  if (new.target === ChevronDoubleUpOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ChevronDoubleUpOutline);
  validate_prop_bindings($$props, [], [], ChevronDoubleUpOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "chevron double up outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1118();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2118();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3118();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4118();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5118();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6118();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ChevronDoubleUpOutline);
  ChevronDoubleUpOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ChevronDoubleUpOutline_default = ChevronDoubleUpOutline;
ChevronDoubleUpOutline.filename = ".../flowbite-svelte-icons/dist/ChevronDoubleUpOutline.svelte";
mark_module_end(ChevronDoubleUpOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ChevronDownOutline.svelte
mark_module_start();
var root_2119 = svg_template(`<title> </title>`);
var root_3119 = svg_template(`<desc> </desc>`);
var root_1119 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m8 10 4 4 4-4"></path></svg>`);
var root_5119 = svg_template(`<title> </title>`);
var root_6119 = svg_template(`<desc> </desc>`);
var root_4119 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m8 10 4 4 4-4"></path></svg>`);
function ChevronDownOutline($$anchor, $$props) {
  if (new.target === ChevronDownOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ChevronDownOutline);
  validate_prop_bindings($$props, [], [], ChevronDownOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "chevron down outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1119();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2119();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3119();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4119();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5119();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6119();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ChevronDownOutline);
  ChevronDownOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ChevronDownOutline_default = ChevronDownOutline;
ChevronDownOutline.filename = ".../flowbite-svelte-icons/dist/ChevronDownOutline.svelte";
mark_module_end(ChevronDownOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ChevronLeftOutline.svelte
mark_module_start();
var root_2120 = svg_template(`<title> </title>`);
var root_3120 = svg_template(`<desc> </desc>`);
var root_1120 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m14 8-4 4 4 4"></path></svg>`);
var root_5120 = svg_template(`<title> </title>`);
var root_6120 = svg_template(`<desc> </desc>`);
var root_4120 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m14 8-4 4 4 4"></path></svg>`);
function ChevronLeftOutline($$anchor, $$props) {
  if (new.target === ChevronLeftOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ChevronLeftOutline);
  validate_prop_bindings($$props, [], [], ChevronLeftOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "chevron left outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1120();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2120();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3120();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4120();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5120();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6120();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ChevronLeftOutline);
  ChevronLeftOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ChevronLeftOutline_default = ChevronLeftOutline;
ChevronLeftOutline.filename = ".../flowbite-svelte-icons/dist/ChevronLeftOutline.svelte";
mark_module_end(ChevronLeftOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ChevronRightOutline.svelte
mark_module_start();
var root_2121 = svg_template(`<title> </title>`);
var root_3121 = svg_template(`<desc> </desc>`);
var root_1121 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m10 16 4-4-4-4"></path></svg>`);
var root_5121 = svg_template(`<title> </title>`);
var root_6121 = svg_template(`<desc> </desc>`);
var root_4121 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m10 16 4-4-4-4"></path></svg>`);
function ChevronRightOutline($$anchor, $$props) {
  if (new.target === ChevronRightOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ChevronRightOutline);
  validate_prop_bindings($$props, [], [], ChevronRightOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "chevron right outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1121();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2121();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3121();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4121();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5121();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6121();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ChevronRightOutline);
  ChevronRightOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ChevronRightOutline_default = ChevronRightOutline;
ChevronRightOutline.filename = ".../flowbite-svelte-icons/dist/ChevronRightOutline.svelte";
mark_module_end(ChevronRightOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ChevronSortOutline.svelte
mark_module_start();
var root_2122 = svg_template(`<title> </title>`);
var root_3122 = svg_template(`<desc> </desc>`);
var root_1122 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m8 15 4 4 4-4m0-6-4-4-4 4"></path></svg>`);
var root_5122 = svg_template(`<title> </title>`);
var root_6122 = svg_template(`<desc> </desc>`);
var root_4122 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m8 15 4 4 4-4m0-6-4-4-4 4"></path></svg>`);
function ChevronSortOutline($$anchor, $$props) {
  if (new.target === ChevronSortOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ChevronSortOutline);
  validate_prop_bindings($$props, [], [], ChevronSortOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "chevron sort outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1122();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2122();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3122();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4122();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5122();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6122();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ChevronSortOutline);
  ChevronSortOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ChevronSortOutline_default = ChevronSortOutline;
ChevronSortOutline.filename = ".../flowbite-svelte-icons/dist/ChevronSortOutline.svelte";
mark_module_end(ChevronSortOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ChevronUpOutline.svelte
mark_module_start();
var root_2123 = svg_template(`<title> </title>`);
var root_3123 = svg_template(`<desc> </desc>`);
var root_1123 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m16 14-4-4-4 4"></path></svg>`);
var root_5123 = svg_template(`<title> </title>`);
var root_6123 = svg_template(`<desc> </desc>`);
var root_4123 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m16 14-4-4-4 4"></path></svg>`);
function ChevronUpOutline($$anchor, $$props) {
  if (new.target === ChevronUpOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ChevronUpOutline);
  validate_prop_bindings($$props, [], [], ChevronUpOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "chevron up outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1123();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2123();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3123();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4123();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5123();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6123();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ChevronUpOutline);
  ChevronUpOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ChevronUpOutline_default = ChevronUpOutline;
ChevronUpOutline.filename = ".../flowbite-svelte-icons/dist/ChevronUpOutline.svelte";
mark_module_end(ChevronUpOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CircleMinusOutline.svelte
mark_module_start();
var root_2124 = svg_template(`<title> </title>`);
var root_3124 = svg_template(`<desc> </desc>`);
var root_1124 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M7.757 12h8.486M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"></path></svg>`);
var root_5124 = svg_template(`<title> </title>`);
var root_6124 = svg_template(`<desc> </desc>`);
var root_4124 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M7.757 12h8.486M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"></path></svg>`);
function CircleMinusOutline($$anchor, $$props) {
  if (new.target === CircleMinusOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CircleMinusOutline);
  validate_prop_bindings($$props, [], [], CircleMinusOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "circle minus outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1124();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2124();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3124();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4124();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5124();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6124();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CircleMinusOutline);
  CircleMinusOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CircleMinusOutline_default = CircleMinusOutline;
CircleMinusOutline.filename = ".../flowbite-svelte-icons/dist/CircleMinusOutline.svelte";
mark_module_end(CircleMinusOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CircleMinusSolid.svelte
mark_module_start();
var root_2125 = svg_template(`<title> </title>`);
var root_3125 = svg_template(`<desc> </desc>`);
var root_1125 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M2 12C2 6.477 6.477 2 12 2s10 4.477 10 10-4.477 10-10 10S2 17.523 2 12Zm5.757-1a1 1 0 1 0 0 2h8.486a1 1 0 1 0 0-2H7.757Z" clip-rule="evenodd"></path></svg>`);
var root_5125 = svg_template(`<title> </title>`);
var root_6125 = svg_template(`<desc> </desc>`);
var root_4125 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M2 12C2 6.477 6.477 2 12 2s10 4.477 10 10-4.477 10-10 10S2 17.523 2 12Zm5.757-1a1 1 0 1 0 0 2h8.486a1 1 0 1 0 0-2H7.757Z" clip-rule="evenodd"></path></svg>`);
function CircleMinusSolid($$anchor, $$props) {
  if (new.target === CircleMinusSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CircleMinusSolid);
  validate_prop_bindings($$props, [], [], CircleMinusSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "circle minus solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1125();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2125();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3125();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4125();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5125();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6125();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CircleMinusSolid);
  CircleMinusSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CircleMinusSolid_default = CircleMinusSolid;
CircleMinusSolid.filename = ".../flowbite-svelte-icons/dist/CircleMinusSolid.svelte";
mark_module_end(CircleMinusSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CirclePauseOutline.svelte
mark_module_start();
var root_2126 = svg_template(`<title> </title>`);
var root_3126 = svg_template(`<desc> </desc>`);
var root_1126 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M10 9v6m4-6v6m7-3a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"></path></svg>`);
var root_5126 = svg_template(`<title> </title>`);
var root_6126 = svg_template(`<desc> </desc>`);
var root_4126 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M10 9v6m4-6v6m7-3a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"></path></svg>`);
function CirclePauseOutline($$anchor, $$props) {
  if (new.target === CirclePauseOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CirclePauseOutline);
  validate_prop_bindings($$props, [], [], CirclePauseOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "circle pause outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1126();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2126();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3126();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4126();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5126();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6126();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CirclePauseOutline);
  CirclePauseOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CirclePauseOutline_default = CirclePauseOutline;
CirclePauseOutline.filename = ".../flowbite-svelte-icons/dist/CirclePauseOutline.svelte";
mark_module_end(CirclePauseOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CirclePauseSolid.svelte
mark_module_start();
var root_2127 = svg_template(`<title> </title>`);
var root_3127 = svg_template(`<desc> </desc>`);
var root_1127 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M2 12C2 6.477 6.477 2 12 2s10 4.477 10 10-4.477 10-10 10S2 17.523 2 12Zm9-3a1 1 0 1 0-2 0v6a1 1 0 1 0 2 0V9Zm4 0a1 1 0 1 0-2 0v6a1 1 0 1 0 2 0V9Z" clip-rule="evenodd"></path></svg>`);
var root_5127 = svg_template(`<title> </title>`);
var root_6127 = svg_template(`<desc> </desc>`);
var root_4127 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M2 12C2 6.477 6.477 2 12 2s10 4.477 10 10-4.477 10-10 10S2 17.523 2 12Zm9-3a1 1 0 1 0-2 0v6a1 1 0 1 0 2 0V9Zm4 0a1 1 0 1 0-2 0v6a1 1 0 1 0 2 0V9Z" clip-rule="evenodd"></path></svg>`);
function CirclePauseSolid($$anchor, $$props) {
  if (new.target === CirclePauseSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CirclePauseSolid);
  validate_prop_bindings($$props, [], [], CirclePauseSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "circle pause solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1127();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2127();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3127();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4127();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5127();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6127();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CirclePauseSolid);
  CirclePauseSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CirclePauseSolid_default = CirclePauseSolid;
CirclePauseSolid.filename = ".../flowbite-svelte-icons/dist/CirclePauseSolid.svelte";
mark_module_end(CirclePauseSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CirclePlusOutline.svelte
mark_module_start();
var root_2128 = svg_template(`<title> </title>`);
var root_3128 = svg_template(`<desc> </desc>`);
var root_1128 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12 7.757v8.486M7.757 12h8.486M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"></path></svg>`);
var root_5128 = svg_template(`<title> </title>`);
var root_6128 = svg_template(`<desc> </desc>`);
var root_4128 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12 7.757v8.486M7.757 12h8.486M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"></path></svg>`);
function CirclePlusOutline($$anchor, $$props) {
  if (new.target === CirclePlusOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CirclePlusOutline);
  validate_prop_bindings($$props, [], [], CirclePlusOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "circle plus outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1128();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2128();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3128();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4128();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5128();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6128();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CirclePlusOutline);
  CirclePlusOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CirclePlusOutline_default = CirclePlusOutline;
CirclePlusOutline.filename = ".../flowbite-svelte-icons/dist/CirclePlusOutline.svelte";
mark_module_end(CirclePlusOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CirclePlusSolid.svelte
mark_module_start();
var root_2129 = svg_template(`<title> </title>`);
var root_3129 = svg_template(`<desc> </desc>`);
var root_1129 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M2 12C2 6.477 6.477 2 12 2s10 4.477 10 10-4.477 10-10 10S2 17.523 2 12Zm11-4.243a1 1 0 1 0-2 0V11H7.757a1 1 0 1 0 0 2H11v3.243a1 1 0 1 0 2 0V13h3.243a1 1 0 1 0 0-2H13V7.757Z" clip-rule="evenodd"></path></svg>`);
var root_5129 = svg_template(`<title> </title>`);
var root_6129 = svg_template(`<desc> </desc>`);
var root_4129 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M2 12C2 6.477 6.477 2 12 2s10 4.477 10 10-4.477 10-10 10S2 17.523 2 12Zm11-4.243a1 1 0 1 0-2 0V11H7.757a1 1 0 1 0 0 2H11v3.243a1 1 0 1 0 2 0V13h3.243a1 1 0 1 0 0-2H13V7.757Z" clip-rule="evenodd"></path></svg>`);
function CirclePlusSolid($$anchor, $$props) {
  if (new.target === CirclePlusSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CirclePlusSolid);
  validate_prop_bindings($$props, [], [], CirclePlusSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "circle plus solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1129();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2129();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3129();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4129();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5129();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6129();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CirclePlusSolid);
  CirclePlusSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CirclePlusSolid_default = CirclePlusSolid;
CirclePlusSolid.filename = ".../flowbite-svelte-icons/dist/CirclePlusSolid.svelte";
mark_module_end(CirclePlusSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ClapperboardPlayOutline.svelte
mark_module_start();
var root_2130 = svg_template(`<title> </title>`);
var root_3130 = svg_template(`<desc> </desc>`);
var root_1130 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M19 4H5a1 1 0 0 0-1 1v14a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1Zm0 0-4 4m5 0H4m1 0 4-4m1 4 4-4m-4 7v6l4-3-4-3Z"></path></svg>`);
var root_5130 = svg_template(`<title> </title>`);
var root_6130 = svg_template(`<desc> </desc>`);
var root_4130 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M19 4H5a1 1 0 0 0-1 1v14a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1Zm0 0-4 4m5 0H4m1 0 4-4m1 4 4-4m-4 7v6l4-3-4-3Z"></path></svg>`);
function ClapperboardPlayOutline($$anchor, $$props) {
  if (new.target === ClapperboardPlayOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ClapperboardPlayOutline);
  validate_prop_bindings($$props, [], [], ClapperboardPlayOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "clapperboard play outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1130();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2130();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3130();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4130();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5130();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6130();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ClapperboardPlayOutline);
  ClapperboardPlayOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ClapperboardPlayOutline_default = ClapperboardPlayOutline;
ClapperboardPlayOutline.filename = ".../flowbite-svelte-icons/dist/ClapperboardPlayOutline.svelte";
mark_module_end(ClapperboardPlayOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ClapperboardPlaySolid.svelte
mark_module_start();
var root_2131 = svg_template(`<title> </title>`);
var root_3131 = svg_template(`<desc> </desc>`);
var root_1131 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M19.003 3A2 2 0 0 1 21 5v2h-2V5.414L17.414 7h-2.828l2-2h-2.172l-2 2H9.586l2-2H9.414l-2 2H3V5a2 2 0 0 1 2-2h14.003ZM3 9v10a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V9H3Zm2-2.414L6.586 5H5v1.586Zm4.553 4.52a1 1 0 0 1 1.047.094l4 3a1 1 0 0 1 0 1.6l-4 3A1 1 0 0 1 9 18v-6a1 1 0 0 1 .553-.894Z" clip-rule="evenodd"></path></svg>`);
var root_5131 = svg_template(`<title> </title>`);
var root_6131 = svg_template(`<desc> </desc>`);
var root_4131 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M19.003 3A2 2 0 0 1 21 5v2h-2V5.414L17.414 7h-2.828l2-2h-2.172l-2 2H9.586l2-2H9.414l-2 2H3V5a2 2 0 0 1 2-2h14.003ZM3 9v10a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V9H3Zm2-2.414L6.586 5H5v1.586Zm4.553 4.52a1 1 0 0 1 1.047.094l4 3a1 1 0 0 1 0 1.6l-4 3A1 1 0 0 1 9 18v-6a1 1 0 0 1 .553-.894Z" clip-rule="evenodd"></path></svg>`);
function ClapperboardPlaySolid($$anchor, $$props) {
  if (new.target === ClapperboardPlaySolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ClapperboardPlaySolid);
  validate_prop_bindings($$props, [], [], ClapperboardPlaySolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "clapperboard play solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1131();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2131();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3131();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4131();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5131();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6131();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ClapperboardPlaySolid);
  ClapperboardPlaySolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ClapperboardPlaySolid_default = ClapperboardPlaySolid;
ClapperboardPlaySolid.filename = ".../flowbite-svelte-icons/dist/ClapperboardPlaySolid.svelte";
mark_module_end(ClapperboardPlaySolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ClipboardCheckOutline.svelte
mark_module_start();
var root_2132 = svg_template(`<title> </title>`);
var root_3132 = svg_template(`<desc> </desc>`);
var root_1132 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M15 4h3a1 1 0 0 1 1 1v15a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V5a1 1 0 0 1 1-1h3m0 3h6m-6 7 2 2 4-4m-5-9v4h4V3h-4Z"></path></svg>`);
var root_5132 = svg_template(`<title> </title>`);
var root_6132 = svg_template(`<desc> </desc>`);
var root_4132 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M15 4h3a1 1 0 0 1 1 1v15a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V5a1 1 0 0 1 1-1h3m0 3h6m-6 7 2 2 4-4m-5-9v4h4V3h-4Z"></path></svg>`);
function ClipboardCheckOutline($$anchor, $$props) {
  if (new.target === ClipboardCheckOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ClipboardCheckOutline);
  validate_prop_bindings($$props, [], [], ClipboardCheckOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "clipboard check outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1132();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2132();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3132();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4132();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5132();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6132();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ClipboardCheckOutline);
  ClipboardCheckOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ClipboardCheckOutline_default = ClipboardCheckOutline;
ClipboardCheckOutline.filename = ".../flowbite-svelte-icons/dist/ClipboardCheckOutline.svelte";
mark_module_end(ClipboardCheckOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ClipboardCheckSolid.svelte
mark_module_start();
var root_2133 = svg_template(`<title> </title>`);
var root_3133 = svg_template(`<desc> </desc>`);
var root_1133 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M9 2a1 1 0 0 0-1 1H6a2 2 0 0 0-2 2v15a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2h-2a1 1 0 0 0-1-1H9Zm1 2h4v2h1a1 1 0 1 1 0 2H9a1 1 0 0 1 0-2h1V4Zm5.707 8.707a1 1 0 0 0-1.414-1.414L11 14.586l-1.293-1.293a1 1 0 0 0-1.414 1.414l2 2a1 1 0 0 0 1.414 0l4-4Z" clip-rule="evenodd"></path></svg>`);
var root_5133 = svg_template(`<title> </title>`);
var root_6133 = svg_template(`<desc> </desc>`);
var root_4133 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M9 2a1 1 0 0 0-1 1H6a2 2 0 0 0-2 2v15a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2h-2a1 1 0 0 0-1-1H9Zm1 2h4v2h1a1 1 0 1 1 0 2H9a1 1 0 0 1 0-2h1V4Zm5.707 8.707a1 1 0 0 0-1.414-1.414L11 14.586l-1.293-1.293a1 1 0 0 0-1.414 1.414l2 2a1 1 0 0 0 1.414 0l4-4Z" clip-rule="evenodd"></path></svg>`);
function ClipboardCheckSolid($$anchor, $$props) {
  if (new.target === ClipboardCheckSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ClipboardCheckSolid);
  validate_prop_bindings($$props, [], [], ClipboardCheckSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "clipboard check solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1133();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2133();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3133();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4133();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5133();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6133();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ClipboardCheckSolid);
  ClipboardCheckSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ClipboardCheckSolid_default = ClipboardCheckSolid;
ClipboardCheckSolid.filename = ".../flowbite-svelte-icons/dist/ClipboardCheckSolid.svelte";
mark_module_end(ClipboardCheckSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ClipboardCleanOutline.svelte
mark_module_start();
var root_2134 = svg_template(`<title> </title>`);
var root_3134 = svg_template(`<desc> </desc>`);
var root_1134 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M15 4h3a1 1 0 0 1 1 1v15a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V5a1 1 0 0 1 1-1h3m0 3h6m-5-4v4h4V3h-4Z"></path></svg>`);
var root_5134 = svg_template(`<title> </title>`);
var root_6134 = svg_template(`<desc> </desc>`);
var root_4134 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M15 4h3a1 1 0 0 1 1 1v15a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V5a1 1 0 0 1 1-1h3m0 3h6m-5-4v4h4V3h-4Z"></path></svg>`);
function ClipboardCleanOutline($$anchor, $$props) {
  if (new.target === ClipboardCleanOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ClipboardCleanOutline);
  validate_prop_bindings($$props, [], [], ClipboardCleanOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "clipboard clean outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1134();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2134();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3134();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4134();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5134();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6134();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ClipboardCleanOutline);
  ClipboardCleanOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ClipboardCleanOutline_default = ClipboardCleanOutline;
ClipboardCleanOutline.filename = ".../flowbite-svelte-icons/dist/ClipboardCleanOutline.svelte";
mark_module_end(ClipboardCleanOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ClipboardCleanSolid.svelte
mark_module_start();
var root_2135 = svg_template(`<title> </title>`);
var root_3135 = svg_template(`<desc> </desc>`);
var root_1135 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M8 3a1 1 0 0 1 1-1h6a1 1 0 0 1 1 1h2a2 2 0 0 1 2 2v15a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h2Zm6 1h-4v2H9a1 1 0 0 0 0 2h6a1 1 0 1 0 0-2h-1V4Z" clip-rule="evenodd"></path></svg>`);
var root_5135 = svg_template(`<title> </title>`);
var root_6135 = svg_template(`<desc> </desc>`);
var root_4135 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M8 3a1 1 0 0 1 1-1h6a1 1 0 0 1 1 1h2a2 2 0 0 1 2 2v15a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h2Zm6 1h-4v2H9a1 1 0 0 0 0 2h6a1 1 0 1 0 0-2h-1V4Z" clip-rule="evenodd"></path></svg>`);
function ClipboardCleanSolid($$anchor, $$props) {
  if (new.target === ClipboardCleanSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ClipboardCleanSolid);
  validate_prop_bindings($$props, [], [], ClipboardCleanSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "clipboard clean solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1135();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2135();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3135();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4135();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5135();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6135();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ClipboardCleanSolid);
  ClipboardCleanSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ClipboardCleanSolid_default = ClipboardCleanSolid;
ClipboardCleanSolid.filename = ".../flowbite-svelte-icons/dist/ClipboardCleanSolid.svelte";
mark_module_end(ClipboardCleanSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ClipboardListOutline.svelte
mark_module_start();
var root_2136 = svg_template(`<title> </title>`);
var root_3136 = svg_template(`<desc> </desc>`);
var root_1136 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M15 4h3a1 1 0 0 1 1 1v15a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V5a1 1 0 0 1 1-1h3m0 3h6m-3 5h3m-6 0h.01M12 16h3m-6 0h.01M10 3v4h4V3h-4Z"></path></svg>`);
var root_5136 = svg_template(`<title> </title>`);
var root_6136 = svg_template(`<desc> </desc>`);
var root_4136 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M15 4h3a1 1 0 0 1 1 1v15a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V5a1 1 0 0 1 1-1h3m0 3h6m-3 5h3m-6 0h.01M12 16h3m-6 0h.01M10 3v4h4V3h-4Z"></path></svg>`);
function ClipboardListOutline($$anchor, $$props) {
  if (new.target === ClipboardListOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ClipboardListOutline);
  validate_prop_bindings($$props, [], [], ClipboardListOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "clipboard list outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1136();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2136();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3136();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4136();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5136();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6136();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ClipboardListOutline);
  ClipboardListOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ClipboardListOutline_default = ClipboardListOutline;
ClipboardListOutline.filename = ".../flowbite-svelte-icons/dist/ClipboardListOutline.svelte";
mark_module_end(ClipboardListOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ClipboardListSolid.svelte
mark_module_start();
var root_2137 = svg_template(`<title> </title>`);
var root_3137 = svg_template(`<desc> </desc>`);
var root_1137 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M8 3a1 1 0 0 1 1-1h6a1 1 0 0 1 1 1h2a2 2 0 0 1 2 2v15a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h2Zm6 1h-4v2H9a1 1 0 0 0 0 2h6a1 1 0 1 0 0-2h-1V4Zm-3 8a1 1 0 0 1 1-1h3a1 1 0 1 1 0 2h-3a1 1 0 0 1-1-1Zm-2-1a1 1 0 1 0 0 2h.01a1 1 0 1 0 0-2H9Zm2 5a1 1 0 0 1 1-1h3a1 1 0 1 1 0 2h-3a1 1 0 0 1-1-1Zm-2-1a1 1 0 1 0 0 2h.01a1 1 0 1 0 0-2H9Z" clip-rule="evenodd"></path></svg>`);
var root_5137 = svg_template(`<title> </title>`);
var root_6137 = svg_template(`<desc> </desc>`);
var root_4137 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M8 3a1 1 0 0 1 1-1h6a1 1 0 0 1 1 1h2a2 2 0 0 1 2 2v15a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h2Zm6 1h-4v2H9a1 1 0 0 0 0 2h6a1 1 0 1 0 0-2h-1V4Zm-3 8a1 1 0 0 1 1-1h3a1 1 0 1 1 0 2h-3a1 1 0 0 1-1-1Zm-2-1a1 1 0 1 0 0 2h.01a1 1 0 1 0 0-2H9Zm2 5a1 1 0 0 1 1-1h3a1 1 0 1 1 0 2h-3a1 1 0 0 1-1-1Zm-2-1a1 1 0 1 0 0 2h.01a1 1 0 1 0 0-2H9Z" clip-rule="evenodd"></path></svg>`);
function ClipboardListSolid($$anchor, $$props) {
  if (new.target === ClipboardListSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ClipboardListSolid);
  validate_prop_bindings($$props, [], [], ClipboardListSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "clipboard list solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1137();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2137();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3137();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4137();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5137();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6137();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ClipboardListSolid);
  ClipboardListSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ClipboardListSolid_default = ClipboardListSolid;
ClipboardListSolid.filename = ".../flowbite-svelte-icons/dist/ClipboardListSolid.svelte";
mark_module_end(ClipboardListSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ClipboardOutline.svelte
mark_module_start();
var root_2138 = svg_template(`<title> </title>`);
var root_3138 = svg_template(`<desc> </desc>`);
var root_1138 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M15 4h3a1 1 0 0 1 1 1v15a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V5a1 1 0 0 1 1-1h3m0 3h6m-6 5h6m-6 4h6M10 3v4h4V3h-4Z"></path></svg>`);
var root_5138 = svg_template(`<title> </title>`);
var root_6138 = svg_template(`<desc> </desc>`);
var root_4138 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M15 4h3a1 1 0 0 1 1 1v15a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V5a1 1 0 0 1 1-1h3m0 3h6m-6 5h6m-6 4h6M10 3v4h4V3h-4Z"></path></svg>`);
function ClipboardOutline($$anchor, $$props) {
  if (new.target === ClipboardOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ClipboardOutline);
  validate_prop_bindings($$props, [], [], ClipboardOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "clipboard outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1138();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2138();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3138();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4138();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5138();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6138();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ClipboardOutline);
  ClipboardOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ClipboardOutline_default = ClipboardOutline;
ClipboardOutline.filename = ".../flowbite-svelte-icons/dist/ClipboardOutline.svelte";
mark_module_end(ClipboardOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ClipboardSolid.svelte
mark_module_start();
var root_2139 = svg_template(`<title> </title>`);
var root_3139 = svg_template(`<desc> </desc>`);
var root_1139 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M8 3a1 1 0 0 1 1-1h6a1 1 0 0 1 1 1h2a2 2 0 0 1 2 2v15a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h2Zm6 1h-4v2H9a1 1 0 0 0 0 2h6a1 1 0 1 0 0-2h-1V4Zm-6 8a1 1 0 0 1 1-1h6a1 1 0 1 1 0 2H9a1 1 0 0 1-1-1Zm1 3a1 1 0 1 0 0 2h6a1 1 0 1 0 0-2H9Z" clip-rule="evenodd"></path></svg>`);
var root_5139 = svg_template(`<title> </title>`);
var root_6139 = svg_template(`<desc> </desc>`);
var root_4139 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M8 3a1 1 0 0 1 1-1h6a1 1 0 0 1 1 1h2a2 2 0 0 1 2 2v15a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h2Zm6 1h-4v2H9a1 1 0 0 0 0 2h6a1 1 0 1 0 0-2h-1V4Zm-6 8a1 1 0 0 1 1-1h6a1 1 0 1 1 0 2H9a1 1 0 0 1-1-1Zm1 3a1 1 0 1 0 0 2h6a1 1 0 1 0 0-2H9Z" clip-rule="evenodd"></path></svg>`);
function ClipboardSolid($$anchor, $$props) {
  if (new.target === ClipboardSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ClipboardSolid);
  validate_prop_bindings($$props, [], [], ClipboardSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "clipboard solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1139();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2139();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3139();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4139();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5139();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6139();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ClipboardSolid);
  ClipboardSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ClipboardSolid_default = ClipboardSolid;
ClipboardSolid.filename = ".../flowbite-svelte-icons/dist/ClipboardSolid.svelte";
mark_module_end(ClipboardSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ClockOutline.svelte
mark_module_start();
var root_2140 = svg_template(`<title> </title>`);
var root_3140 = svg_template(`<desc> </desc>`);
var root_1140 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12 8v4l3 3m6-3a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"></path></svg>`);
var root_5140 = svg_template(`<title> </title>`);
var root_6140 = svg_template(`<desc> </desc>`);
var root_4140 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12 8v4l3 3m6-3a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"></path></svg>`);
function ClockOutline($$anchor, $$props) {
  if (new.target === ClockOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ClockOutline);
  validate_prop_bindings($$props, [], [], ClockOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "clock outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1140();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2140();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3140();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4140();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5140();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6140();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ClockOutline);
  ClockOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ClockOutline_default = ClockOutline;
ClockOutline.filename = ".../flowbite-svelte-icons/dist/ClockOutline.svelte";
mark_module_end(ClockOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ClockSolid.svelte
mark_module_start();
var root_2141 = svg_template(`<title> </title>`);
var root_3141 = svg_template(`<desc> </desc>`);
var root_1141 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M2 12C2 6.477 6.477 2 12 2s10 4.477 10 10-4.477 10-10 10S2 17.523 2 12Zm11-4a1 1 0 1 0-2 0v4a1 1 0 0 0 .293.707l3 3a1 1 0 0 0 1.414-1.414L13 11.586V8Z" clip-rule="evenodd"></path></svg>`);
var root_5141 = svg_template(`<title> </title>`);
var root_6141 = svg_template(`<desc> </desc>`);
var root_4141 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M2 12C2 6.477 6.477 2 12 2s10 4.477 10 10-4.477 10-10 10S2 17.523 2 12Zm11-4a1 1 0 1 0-2 0v4a1 1 0 0 0 .293.707l3 3a1 1 0 0 0 1.414-1.414L13 11.586V8Z" clip-rule="evenodd"></path></svg>`);
function ClockSolid($$anchor, $$props) {
  if (new.target === ClockSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ClockSolid);
  validate_prop_bindings($$props, [], [], ClockSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "clock solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1141();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2141();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3141();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4141();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5141();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6141();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ClockSolid);
  ClockSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ClockSolid_default = ClockSolid;
ClockSolid.filename = ".../flowbite-svelte-icons/dist/ClockSolid.svelte";
mark_module_end(ClockSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CloseCircleOutline.svelte
mark_module_start();
var root_2142 = svg_template(`<title> </title>`);
var root_3142 = svg_template(`<desc> </desc>`);
var root_1142 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m15 9-6 6m0-6 6 6m6-3a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"></path></svg>`);
var root_5142 = svg_template(`<title> </title>`);
var root_6142 = svg_template(`<desc> </desc>`);
var root_4142 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m15 9-6 6m0-6 6 6m6-3a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"></path></svg>`);
function CloseCircleOutline($$anchor, $$props) {
  if (new.target === CloseCircleOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CloseCircleOutline);
  validate_prop_bindings($$props, [], [], CloseCircleOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "close circle outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1142();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2142();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3142();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4142();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5142();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6142();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CloseCircleOutline);
  CloseCircleOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CloseCircleOutline_default = CloseCircleOutline;
CloseCircleOutline.filename = ".../flowbite-svelte-icons/dist/CloseCircleOutline.svelte";
mark_module_end(CloseCircleOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CloseCircleSolid.svelte
mark_module_start();
var root_2143 = svg_template(`<title> </title>`);
var root_3143 = svg_template(`<desc> </desc>`);
var root_1143 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M2 12C2 6.477 6.477 2 12 2s10 4.477 10 10-4.477 10-10 10S2 17.523 2 12Zm7.707-3.707a1 1 0 0 0-1.414 1.414L10.586 12l-2.293 2.293a1 1 0 1 0 1.414 1.414L12 13.414l2.293 2.293a1 1 0 0 0 1.414-1.414L13.414 12l2.293-2.293a1 1 0 0 0-1.414-1.414L12 10.586 9.707 8.293Z" clip-rule="evenodd"></path></svg>`);
var root_5143 = svg_template(`<title> </title>`);
var root_6143 = svg_template(`<desc> </desc>`);
var root_4143 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M2 12C2 6.477 6.477 2 12 2s10 4.477 10 10-4.477 10-10 10S2 17.523 2 12Zm7.707-3.707a1 1 0 0 0-1.414 1.414L10.586 12l-2.293 2.293a1 1 0 1 0 1.414 1.414L12 13.414l2.293 2.293a1 1 0 0 0 1.414-1.414L13.414 12l2.293-2.293a1 1 0 0 0-1.414-1.414L12 10.586 9.707 8.293Z" clip-rule="evenodd"></path></svg>`);
function CloseCircleSolid($$anchor, $$props) {
  if (new.target === CloseCircleSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CloseCircleSolid);
  validate_prop_bindings($$props, [], [], CloseCircleSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "close circle solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1143();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2143();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3143();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4143();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5143();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6143();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CloseCircleSolid);
  CloseCircleSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CloseCircleSolid_default = CloseCircleSolid;
CloseCircleSolid.filename = ".../flowbite-svelte-icons/dist/CloseCircleSolid.svelte";
mark_module_end(CloseCircleSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CloseOutline.svelte
mark_module_start();
var root_2144 = svg_template(`<title> </title>`);
var root_3144 = svg_template(`<desc> </desc>`);
var root_1144 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M6 18 17.94 6M18 18 6.06 6"></path></svg>`);
var root_5144 = svg_template(`<title> </title>`);
var root_6144 = svg_template(`<desc> </desc>`);
var root_4144 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M6 18 17.94 6M18 18 6.06 6"></path></svg>`);
function CloseOutline($$anchor, $$props) {
  if (new.target === CloseOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CloseOutline);
  validate_prop_bindings($$props, [], [], CloseOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "close outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1144();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2144();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3144();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4144();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5144();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6144();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CloseOutline);
  CloseOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CloseOutline_default = CloseOutline;
CloseOutline.filename = ".../flowbite-svelte-icons/dist/CloseOutline.svelte";
mark_module_end(CloseOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CloudArrowUpOutline.svelte
mark_module_start();
var root_2145 = svg_template(`<title> </title>`);
var root_3145 = svg_template(`<desc> </desc>`);
var root_1145 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M15 17h3a3 3 0 0 0 0-6h-.025a5.56 5.56 0 0 0 .025-.5A5.5 5.5 0 0 0 7.207 9.021C7.137 9.017 7.071 9 7 9a4 4 0 1 0 0 8h2.167M12 19v-9m0 0-2 2m2-2 2 2"></path></svg>`);
var root_5145 = svg_template(`<title> </title>`);
var root_6145 = svg_template(`<desc> </desc>`);
var root_4145 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M15 17h3a3 3 0 0 0 0-6h-.025a5.56 5.56 0 0 0 .025-.5A5.5 5.5 0 0 0 7.207 9.021C7.137 9.017 7.071 9 7 9a4 4 0 1 0 0 8h2.167M12 19v-9m0 0-2 2m2-2 2 2"></path></svg>`);
function CloudArrowUpOutline($$anchor, $$props) {
  if (new.target === CloudArrowUpOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CloudArrowUpOutline);
  validate_prop_bindings($$props, [], [], CloudArrowUpOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "cloud arrow up outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1145();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2145();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3145();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4145();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5145();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6145();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CloudArrowUpOutline);
  CloudArrowUpOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CloudArrowUpOutline_default = CloudArrowUpOutline;
CloudArrowUpOutline.filename = ".../flowbite-svelte-icons/dist/CloudArrowUpOutline.svelte";
mark_module_end(CloudArrowUpOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CloudArrowUpSolid.svelte
mark_module_start();
var root_2146 = svg_template(`<title> </title>`);
var root_3146 = svg_template(`<desc> </desc>`);
var root_1146 = svg_template(`<svg><!><!><path d="M13.383 4.076a6.5 6.5 0 0 0-6.887 3.95A5 5 0 0 0 7 18h3v-4a2 2 0 0 1-1.414-3.414l2-2a2 2 0 0 1 2.828 0l2 2A2 2 0 0 1 14 14v4h4a4 4 0 0 0 .988-7.876 6.5 6.5 0 0 0-5.605-6.048Z"></path><path d="M12.707 9.293a1 1 0 0 0-1.414 0l-2 2a1 1 0 1 0 1.414 1.414l.293-.293V19a1 1 0 1 0 2 0v-6.586l.293.293a1 1 0 0 0 1.414-1.414l-2-2Z"></path></svg>`);
var root_5146 = svg_template(`<title> </title>`);
var root_6146 = svg_template(`<desc> </desc>`);
var root_4146 = svg_template(`<svg><!><!><path d="M13.383 4.076a6.5 6.5 0 0 0-6.887 3.95A5 5 0 0 0 7 18h3v-4a2 2 0 0 1-1.414-3.414l2-2a2 2 0 0 1 2.828 0l2 2A2 2 0 0 1 14 14v4h4a4 4 0 0 0 .988-7.876 6.5 6.5 0 0 0-5.605-6.048Z"></path><path d="M12.707 9.293a1 1 0 0 0-1.414 0l-2 2a1 1 0 1 0 1.414 1.414l.293-.293V19a1 1 0 1 0 2 0v-6.586l.293.293a1 1 0 0 0 1.414-1.414l-2-2Z"></path></svg>`);
function CloudArrowUpSolid($$anchor, $$props) {
  if (new.target === CloudArrowUpSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CloudArrowUpSolid);
  validate_prop_bindings($$props, [], [], CloudArrowUpSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "cloud arrow up solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1146();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2146();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3146();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4146();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5146();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6146();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_2 = sibling(node_4);
      var path_3 = sibling(path_2);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CloudArrowUpSolid);
  CloudArrowUpSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CloudArrowUpSolid_default = CloudArrowUpSolid;
CloudArrowUpSolid.filename = ".../flowbite-svelte-icons/dist/CloudArrowUpSolid.svelte";
mark_module_end(CloudArrowUpSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CodeBranchOutline.svelte
mark_module_start();
var root_2147 = svg_template(`<title> </title>`);
var root_3147 = svg_template(`<desc> </desc>`);
var root_1147 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M8 8v8m0-8a2 2 0 1 0 0-4 2 2 0 0 0 0 4Zm0 8a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm8-8a2 2 0 1 0 0-4 2 2 0 0 0 0 4Zm0 0a4 4 0 0 1-4 4h-1a3 3 0 0 0-3 3"></path></svg>`);
var root_5147 = svg_template(`<title> </title>`);
var root_6147 = svg_template(`<desc> </desc>`);
var root_4147 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M8 8v8m0-8a2 2 0 1 0 0-4 2 2 0 0 0 0 4Zm0 8a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm8-8a2 2 0 1 0 0-4 2 2 0 0 0 0 4Zm0 0a4 4 0 0 1-4 4h-1a3 3 0 0 0-3 3"></path></svg>`);
function CodeBranchOutline($$anchor, $$props) {
  if (new.target === CodeBranchOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CodeBranchOutline);
  validate_prop_bindings($$props, [], [], CodeBranchOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "code branch outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1147();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2147();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3147();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4147();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5147();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6147();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CodeBranchOutline);
  CodeBranchOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CodeBranchOutline_default = CodeBranchOutline;
CodeBranchOutline.filename = ".../flowbite-svelte-icons/dist/CodeBranchOutline.svelte";
mark_module_end(CodeBranchOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CodeBranchSolid.svelte
mark_module_start();
var root_2148 = svg_template(`<title> </title>`);
var root_3148 = svg_template(`<desc> </desc>`);
var root_1148 = svg_template(`<svg><!><!><path d="M8 3a3 3 0 0 0-1 5.83v6.34a3.001 3.001 0 1 0 2 0V15a2 2 0 0 1 2-2h1a5.002 5.002 0 0 0 4.927-4.146A3.001 3.001 0 0 0 16 3a3 3 0 0 0-1.105 5.79A3.001 3.001 0 0 1 12 11h-1c-.729 0-1.412.195-2 .535V8.83A3.001 3.001 0 0 0 8 3Z"></path></svg>`);
var root_5148 = svg_template(`<title> </title>`);
var root_6148 = svg_template(`<desc> </desc>`);
var root_4148 = svg_template(`<svg><!><!><path d="M8 3a3 3 0 0 0-1 5.83v6.34a3.001 3.001 0 1 0 2 0V15a2 2 0 0 1 2-2h1a5.002 5.002 0 0 0 4.927-4.146A3.001 3.001 0 0 0 16 3a3 3 0 0 0-1.105 5.79A3.001 3.001 0 0 1 12 11h-1c-.729 0-1.412.195-2 .535V8.83A3.001 3.001 0 0 0 8 3Z"></path></svg>`);
function CodeBranchSolid($$anchor, $$props) {
  if (new.target === CodeBranchSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CodeBranchSolid);
  validate_prop_bindings($$props, [], [], CodeBranchSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "code branch solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1148();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2148();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3148();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4148();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5148();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6148();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CodeBranchSolid);
  CodeBranchSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CodeBranchSolid_default = CodeBranchSolid;
CodeBranchSolid.filename = ".../flowbite-svelte-icons/dist/CodeBranchSolid.svelte";
mark_module_end(CodeBranchSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CodeForkOutline.svelte
mark_module_start();
var root_2149 = svg_template(`<title> </title>`);
var root_3149 = svg_template(`<desc> </desc>`);
var root_1149 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12 12v4m0 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4ZM8 8a2 2 0 1 0 0-4 2 2 0 0 0 0 4Zm0 0v2a2 2 0 0 0 2 2h4a2 2 0 0 0 2-2V8m0 0a2 2 0 1 0 0-4 2 2 0 0 0 0 4Z"></path></svg>`);
var root_5149 = svg_template(`<title> </title>`);
var root_6149 = svg_template(`<desc> </desc>`);
var root_4149 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12 12v4m0 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4ZM8 8a2 2 0 1 0 0-4 2 2 0 0 0 0 4Zm0 0v2a2 2 0 0 0 2 2h4a2 2 0 0 0 2-2V8m0 0a2 2 0 1 0 0-4 2 2 0 0 0 0 4Z"></path></svg>`);
function CodeForkOutline($$anchor, $$props) {
  if (new.target === CodeForkOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CodeForkOutline);
  validate_prop_bindings($$props, [], [], CodeForkOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "code fork outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1149();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2149();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3149();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4149();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5149();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6149();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CodeForkOutline);
  CodeForkOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CodeForkOutline_default = CodeForkOutline;
CodeForkOutline.filename = ".../flowbite-svelte-icons/dist/CodeForkOutline.svelte";
mark_module_end(CodeForkOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CodeForkSolid.svelte
mark_module_start();
var root_2150 = svg_template(`<title> </title>`);
var root_3150 = svg_template(`<desc> </desc>`);
var root_1150 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M5 6a3 3 0 1 1 4 2.83V10a1 1 0 0 0 1 1h4a1 1 0 0 0 1-1V8.83a3.001 3.001 0 1 1 2 0V10a3 3 0 0 1-3 3h-1v2.17a3.001 3.001 0 1 1-2 0V13h-1a3 3 0 0 1-3-3V8.83A3.001 3.001 0 0 1 5 6Z" clip-rule="evenodd"></path></svg>`);
var root_5150 = svg_template(`<title> </title>`);
var root_6150 = svg_template(`<desc> </desc>`);
var root_4150 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M5 6a3 3 0 1 1 4 2.83V10a1 1 0 0 0 1 1h4a1 1 0 0 0 1-1V8.83a3.001 3.001 0 1 1 2 0V10a3 3 0 0 1-3 3h-1v2.17a3.001 3.001 0 1 1-2 0V13h-1a3 3 0 0 1-3-3V8.83A3.001 3.001 0 0 1 5 6Z" clip-rule="evenodd"></path></svg>`);
function CodeForkSolid($$anchor, $$props) {
  if (new.target === CodeForkSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CodeForkSolid);
  validate_prop_bindings($$props, [], [], CodeForkSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "code fork solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1150();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2150();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3150();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4150();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5150();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6150();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CodeForkSolid);
  CodeForkSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CodeForkSolid_default = CodeForkSolid;
CodeForkSolid.filename = ".../flowbite-svelte-icons/dist/CodeForkSolid.svelte";
mark_module_end(CodeForkSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CodeMergeOutline.svelte
mark_module_start();
var root_2151 = svg_template(`<title> </title>`);
var root_3151 = svg_template(`<desc> </desc>`);
var root_1151 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M8 8v8m0-8a2 2 0 1 0 0-4 2 2 0 0 0 0 4Zm0 8a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm6-2a2 2 0 1 1 4 0 2 2 0 0 1-4 0Zm0 0h-1a5 5 0 0 1-5-5v-.5"></path></svg>`);
var root_5151 = svg_template(`<title> </title>`);
var root_6151 = svg_template(`<desc> </desc>`);
var root_4151 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M8 8v8m0-8a2 2 0 1 0 0-4 2 2 0 0 0 0 4Zm0 8a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm6-2a2 2 0 1 1 4 0 2 2 0 0 1-4 0Zm0 0h-1a5 5 0 0 1-5-5v-.5"></path></svg>`);
function CodeMergeOutline($$anchor, $$props) {
  if (new.target === CodeMergeOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CodeMergeOutline);
  validate_prop_bindings($$props, [], [], CodeMergeOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "code merge outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1151();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2151();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3151();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4151();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5151();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6151();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CodeMergeOutline);
  CodeMergeOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CodeMergeOutline_default = CodeMergeOutline;
CodeMergeOutline.filename = ".../flowbite-svelte-icons/dist/CodeMergeOutline.svelte";
mark_module_end(CodeMergeOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CodeMergeSolid.svelte
mark_module_start();
var root_2152 = svg_template(`<title> </title>`);
var root_3152 = svg_template(`<desc> </desc>`);
var root_1152 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M5 6a3 3 0 1 1 4 2.83V9a4 4 0 0 0 4 4h.17a3.001 3.001 0 1 1 0 2H13a5.978 5.978 0 0 1-4-1.528v1.699a3.001 3.001 0 1 1-2 0V8.829A3.001 3.001 0 0 1 5 6Z" clip-rule="evenodd"></path></svg>`);
var root_5152 = svg_template(`<title> </title>`);
var root_6152 = svg_template(`<desc> </desc>`);
var root_4152 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M5 6a3 3 0 1 1 4 2.83V9a4 4 0 0 0 4 4h.17a3.001 3.001 0 1 1 0 2H13a5.978 5.978 0 0 1-4-1.528v1.699a3.001 3.001 0 1 1-2 0V8.829A3.001 3.001 0 0 1 5 6Z" clip-rule="evenodd"></path></svg>`);
function CodeMergeSolid($$anchor, $$props) {
  if (new.target === CodeMergeSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CodeMergeSolid);
  validate_prop_bindings($$props, [], [], CodeMergeSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "code merge solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1152();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2152();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3152();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4152();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5152();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6152();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CodeMergeSolid);
  CodeMergeSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CodeMergeSolid_default = CodeMergeSolid;
CodeMergeSolid.filename = ".../flowbite-svelte-icons/dist/CodeMergeSolid.svelte";
mark_module_end(CodeMergeSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CodeOutline.svelte
mark_module_start();
var root_2153 = svg_template(`<title> </title>`);
var root_3153 = svg_template(`<desc> </desc>`);
var root_1153 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m8 8-4 4 4 4m8 0 4-4-4-4m-2-3-4 14"></path></svg>`);
var root_5153 = svg_template(`<title> </title>`);
var root_6153 = svg_template(`<desc> </desc>`);
var root_4153 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m8 8-4 4 4 4m8 0 4-4-4-4m-2-3-4 14"></path></svg>`);
function CodeOutline($$anchor, $$props) {
  if (new.target === CodeOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CodeOutline);
  validate_prop_bindings($$props, [], [], CodeOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "code outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1153();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2153();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3153();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4153();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5153();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6153();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CodeOutline);
  CodeOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CodeOutline_default = CodeOutline;
CodeOutline.filename = ".../flowbite-svelte-icons/dist/CodeOutline.svelte";
mark_module_end(CodeOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CodePullRequestOutline.svelte
mark_module_start();
var root_2154 = svg_template(`<title> </title>`);
var root_3154 = svg_template(`<desc> </desc>`);
var root_1154 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M6 8v8m0-8a2 2 0 1 0 0-4 2 2 0 0 0 0 4Zm0 8a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm12 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm0 0V9a3 3 0 0 0-3-3h-3m1.5-2-2 2 2 2"></path></svg>`);
var root_5154 = svg_template(`<title> </title>`);
var root_6154 = svg_template(`<desc> </desc>`);
var root_4154 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M6 8v8m0-8a2 2 0 1 0 0-4 2 2 0 0 0 0 4Zm0 8a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm12 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm0 0V9a3 3 0 0 0-3-3h-3m1.5-2-2 2 2 2"></path></svg>`);
function CodePullRequestOutline($$anchor, $$props) {
  if (new.target === CodePullRequestOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CodePullRequestOutline);
  validate_prop_bindings($$props, [], [], CodePullRequestOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "code pull request outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1154();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2154();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3154();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4154();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5154();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6154();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CodePullRequestOutline);
  CodePullRequestOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CodePullRequestOutline_default = CodePullRequestOutline;
CodePullRequestOutline.filename = ".../flowbite-svelte-icons/dist/CodePullRequestOutline.svelte";
mark_module_end(CodePullRequestOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CodePullRequestSolid.svelte
mark_module_start();
var root_2155 = svg_template(`<title> </title>`);
var root_3155 = svg_template(`<desc> </desc>`);
var root_1155 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M3 6a3 3 0 1 1 4 2.83v6.34a3.001 3.001 0 1 1-2 0V8.83A3.001 3.001 0 0 1 3 6Zm11.207-2.707a1 1 0 0 1 0 1.414L13.914 5H15a4 4 0 0 1 4 4v6.17a3.001 3.001 0 1 1-2 0V9a2 2 0 0 0-2-2h-1.086l.293.293a1 1 0 0 1-1.414 1.414l-2-2a1 1 0 0 1 0-1.414l2-2a1 1 0 0 1 1.414 0Z" clip-rule="evenodd"></path></svg>`);
var root_5155 = svg_template(`<title> </title>`);
var root_6155 = svg_template(`<desc> </desc>`);
var root_4155 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M3 6a3 3 0 1 1 4 2.83v6.34a3.001 3.001 0 1 1-2 0V8.83A3.001 3.001 0 0 1 3 6Zm11.207-2.707a1 1 0 0 1 0 1.414L13.914 5H15a4 4 0 0 1 4 4v6.17a3.001 3.001 0 1 1-2 0V9a2 2 0 0 0-2-2h-1.086l.293.293a1 1 0 0 1-1.414 1.414l-2-2a1 1 0 0 1 0-1.414l2-2a1 1 0 0 1 1.414 0Z" clip-rule="evenodd"></path></svg>`);
function CodePullRequestSolid($$anchor, $$props) {
  if (new.target === CodePullRequestSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CodePullRequestSolid);
  validate_prop_bindings($$props, [], [], CodePullRequestSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "code pull request solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1155();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2155();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3155();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4155();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5155();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6155();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CodePullRequestSolid);
  CodePullRequestSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CodePullRequestSolid_default = CodePullRequestSolid;
CodePullRequestSolid.filename = ".../flowbite-svelte-icons/dist/CodePullRequestSolid.svelte";
mark_module_end(CodePullRequestSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CogOutline.svelte
mark_module_start();
var root_2156 = svg_template(`<title> </title>`);
var root_3156 = svg_template(`<desc> </desc>`);
var root_1156 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M21 13v-2a1 1 0 0 0-1-1h-.757l-.707-1.707.535-.536a1 1 0 0 0 0-1.414l-1.414-1.414a1 1 0 0 0-1.414 0l-.536.535L14 4.757V4a1 1 0 0 0-1-1h-2a1 1 0 0 0-1 1v.757l-1.707.707-.536-.535a1 1 0 0 0-1.414 0L4.929 6.343a1 1 0 0 0 0 1.414l.536.536L4.757 10H4a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h.757l.707 1.707-.535.536a1 1 0 0 0 0 1.414l1.414 1.414a1 1 0 0 0 1.414 0l.536-.535 1.707.707V20a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1v-.757l1.707-.708.536.536a1 1 0 0 0 1.414 0l1.414-1.414a1 1 0 0 0 0-1.414l-.535-.536.707-1.707H20a1 1 0 0 0 1-1Z"></path><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12 15a3 3 0 1 0 0-6 3 3 0 0 0 0 6Z"></path></svg>`);
var root_5156 = svg_template(`<title> </title>`);
var root_6156 = svg_template(`<desc> </desc>`);
var root_4156 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M21 13v-2a1 1 0 0 0-1-1h-.757l-.707-1.707.535-.536a1 1 0 0 0 0-1.414l-1.414-1.414a1 1 0 0 0-1.414 0l-.536.535L14 4.757V4a1 1 0 0 0-1-1h-2a1 1 0 0 0-1 1v.757l-1.707.707-.536-.535a1 1 0 0 0-1.414 0L4.929 6.343a1 1 0 0 0 0 1.414l.536.536L4.757 10H4a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h.757l.707 1.707-.535.536a1 1 0 0 0 0 1.414l1.414 1.414a1 1 0 0 0 1.414 0l.536-.535 1.707.707V20a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1v-.757l1.707-.708.536.536a1 1 0 0 0 1.414 0l1.414-1.414a1 1 0 0 0 0-1.414l-.535-.536.707-1.707H20a1 1 0 0 0 1-1Z"></path><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12 15a3 3 0 1 0 0-6 3 3 0 0 0 0 6Z"></path></svg>`);
function CogOutline($$anchor, $$props) {
  if (new.target === CogOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CogOutline);
  validate_prop_bindings($$props, [], [], CogOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "cog outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1156();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2156();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3156();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4156();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5156();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6156();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_2 = sibling(node_4);
      var path_3 = sibling(path_2);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_2, "stroke-width", strokeWidth());
        set_attribute(path_3, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CogOutline);
  CogOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CogOutline_default = CogOutline;
CogOutline.filename = ".../flowbite-svelte-icons/dist/CogOutline.svelte";
mark_module_end(CogOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CogSolid.svelte
mark_module_start();
var root_2157 = svg_template(`<title> </title>`);
var root_3157 = svg_template(`<desc> </desc>`);
var root_1157 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M9.586 2.586A2 2 0 0 1 11 2h2a2 2 0 0 1 2 2v.089l.473.196.063-.063a2.002 2.002 0 0 1 2.828 0l1.414 1.414a2 2 0 0 1 0 2.827l-.063.064.196.473H20a2 2 0 0 1 2 2v2a2 2 0 0 1-2 2h-.089l-.196.473.063.063a2.002 2.002 0 0 1 0 2.828l-1.414 1.414a2 2 0 0 1-2.828 0l-.063-.063-.473.196V20a2 2 0 0 1-2 2h-2a2 2 0 0 1-2-2v-.089l-.473-.196-.063.063a2.002 2.002 0 0 1-2.828 0l-1.414-1.414a2 2 0 0 1 0-2.827l.063-.064L4.089 15H4a2 2 0 0 1-2-2v-2a2 2 0 0 1 2-2h.09l.195-.473-.063-.063a2 2 0 0 1 0-2.828l1.414-1.414a2 2 0 0 1 2.827 0l.064.063L9 4.089V4a2 2 0 0 1 .586-1.414ZM8 12a4 4 0 1 1 8 0 4 4 0 0 1-8 0Z" clip-rule="evenodd"></path></svg>`);
var root_5157 = svg_template(`<title> </title>`);
var root_6157 = svg_template(`<desc> </desc>`);
var root_4157 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M9.586 2.586A2 2 0 0 1 11 2h2a2 2 0 0 1 2 2v.089l.473.196.063-.063a2.002 2.002 0 0 1 2.828 0l1.414 1.414a2 2 0 0 1 0 2.827l-.063.064.196.473H20a2 2 0 0 1 2 2v2a2 2 0 0 1-2 2h-.089l-.196.473.063.063a2.002 2.002 0 0 1 0 2.828l-1.414 1.414a2 2 0 0 1-2.828 0l-.063-.063-.473.196V20a2 2 0 0 1-2 2h-2a2 2 0 0 1-2-2v-.089l-.473-.196-.063.063a2.002 2.002 0 0 1-2.828 0l-1.414-1.414a2 2 0 0 1 0-2.827l.063-.064L4.089 15H4a2 2 0 0 1-2-2v-2a2 2 0 0 1 2-2h.09l.195-.473-.063-.063a2 2 0 0 1 0-2.828l1.414-1.414a2 2 0 0 1 2.827 0l.064.063L9 4.089V4a2 2 0 0 1 .586-1.414ZM8 12a4 4 0 1 1 8 0 4 4 0 0 1-8 0Z" clip-rule="evenodd"></path></svg>`);
function CogSolid($$anchor, $$props) {
  if (new.target === CogSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CogSolid);
  validate_prop_bindings($$props, [], [], CogSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "cog solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1157();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2157();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3157();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4157();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5157();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6157();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CogSolid);
  CogSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CogSolid_default = CogSolid;
CogSolid.filename = ".../flowbite-svelte-icons/dist/CogSolid.svelte";
mark_module_end(CogSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ColumnOutline.svelte
mark_module_start();
var root_2158 = svg_template(`<title> </title>`);
var root_3158 = svg_template(`<desc> </desc>`);
var root_1158 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M15 5v14M9 5v14M4 5h16a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1Z"></path></svg>`);
var root_5158 = svg_template(`<title> </title>`);
var root_6158 = svg_template(`<desc> </desc>`);
var root_4158 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M15 5v14M9 5v14M4 5h16a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1Z"></path></svg>`);
function ColumnOutline($$anchor, $$props) {
  if (new.target === ColumnOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ColumnOutline);
  validate_prop_bindings($$props, [], [], ColumnOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "column outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1158();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2158();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3158();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4158();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5158();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6158();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ColumnOutline);
  ColumnOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ColumnOutline_default = ColumnOutline;
ColumnOutline.filename = ".../flowbite-svelte-icons/dist/ColumnOutline.svelte";
mark_module_end(ColumnOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ColumnSolid.svelte
mark_module_start();
var root_2159 = svg_template(`<title> </title>`);
var root_3159 = svg_template(`<desc> </desc>`);
var root_1159 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M15 4H9v16h6V4Zm2 16h3a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2h-3v16ZM4 4h3v16H4a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2Z" clip-rule="evenodd"></path></svg>`);
var root_5159 = svg_template(`<title> </title>`);
var root_6159 = svg_template(`<desc> </desc>`);
var root_4159 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M15 4H9v16h6V4Zm2 16h3a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2h-3v16ZM4 4h3v16H4a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2Z" clip-rule="evenodd"></path></svg>`);
function ColumnSolid($$anchor, $$props) {
  if (new.target === ColumnSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ColumnSolid);
  validate_prop_bindings($$props, [], [], ColumnSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "column solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1159();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2159();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3159();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4159();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5159();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6159();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ColumnSolid);
  ColumnSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ColumnSolid_default = ColumnSolid;
ColumnSolid.filename = ".../flowbite-svelte-icons/dist/ColumnSolid.svelte";
mark_module_end(ColumnSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CommandOutline.svelte
mark_module_start();
var root_2160 = svg_template(`<title> </title>`);
var root_3160 = svg_template(`<desc> </desc>`);
var root_1160 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M8 8v8m0-8h8M8 8H6a2 2 0 1 1 2-2v2Zm0 8h8m-8 0H6a2 2 0 1 0 2 2v-2Zm8 0V8m0 8h2a2 2 0 1 1-2 2v-2Zm0-8h2a2 2 0 1 0-2-2v2Z"></path></svg>`);
var root_5160 = svg_template(`<title> </title>`);
var root_6160 = svg_template(`<desc> </desc>`);
var root_4160 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M8 8v8m0-8h8M8 8H6a2 2 0 1 1 2-2v2Zm0 8h8m-8 0H6a2 2 0 1 0 2 2v-2Zm8 0V8m0 8h2a2 2 0 1 1-2 2v-2Zm0-8h2a2 2 0 1 0-2-2v2Z"></path></svg>`);
function CommandOutline($$anchor, $$props) {
  if (new.target === CommandOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CommandOutline);
  validate_prop_bindings($$props, [], [], CommandOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "command outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1160();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2160();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3160();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4160();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5160();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6160();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CommandOutline);
  CommandOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CommandOutline_default = CommandOutline;
CommandOutline.filename = ".../flowbite-svelte-icons/dist/CommandOutline.svelte";
mark_module_end(CommandOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CompressOutline.svelte
mark_module_start();
var root_2161 = svg_template(`<title> </title>`);
var root_3161 = svg_template(`<desc> </desc>`);
var root_1161 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M4 8h4V4m12 4h-4V4M4 16h4v4m12-4h-4v4"></path></svg>`);
var root_5161 = svg_template(`<title> </title>`);
var root_6161 = svg_template(`<desc> </desc>`);
var root_4161 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M4 8h4V4m12 4h-4V4M4 16h4v4m12-4h-4v4"></path></svg>`);
function CompressOutline($$anchor, $$props) {
  if (new.target === CompressOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CompressOutline);
  validate_prop_bindings($$props, [], [], CompressOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "compress outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1161();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2161();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3161();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4161();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5161();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6161();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CompressOutline);
  CompressOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CompressOutline_default = CompressOutline;
CompressOutline.filename = ".../flowbite-svelte-icons/dist/CompressOutline.svelte";
mark_module_end(CompressOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ComputerSpeakerOutline.svelte
mark_module_start();
var root_2162 = svg_template(`<title> </title>`);
var root_3162 = svg_template(`<desc> </desc>`);
var root_1162 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M9 16H5a1 1 0 0 1-1-1V5a1 1 0 0 1 1-1h14a1 1 0 0 1 1 1v1M9 12H4m8 8V9h8v11h-8Zm0 0H9m8-4a1 1 0 1 0-2 0 1 1 0 0 0 2 0Z"></path></svg>`);
var root_5162 = svg_template(`<title> </title>`);
var root_6162 = svg_template(`<desc> </desc>`);
var root_4162 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M9 16H5a1 1 0 0 1-1-1V5a1 1 0 0 1 1-1h14a1 1 0 0 1 1 1v1M9 12H4m8 8V9h8v11h-8Zm0 0H9m8-4a1 1 0 1 0-2 0 1 1 0 0 0 2 0Z"></path></svg>`);
function ComputerSpeakerOutline($$anchor, $$props) {
  if (new.target === ComputerSpeakerOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ComputerSpeakerOutline);
  validate_prop_bindings($$props, [], [], ComputerSpeakerOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "computer speaker outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1162();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2162();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3162();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4162();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5162();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6162();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ComputerSpeakerOutline);
  ComputerSpeakerOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ComputerSpeakerOutline_default = ComputerSpeakerOutline;
ComputerSpeakerOutline.filename = ".../flowbite-svelte-icons/dist/ComputerSpeakerOutline.svelte";
mark_module_end(ComputerSpeakerOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ComputerSpeakerSolid.svelte
mark_module_start();
var root_2163 = svg_template(`<title> </title>`);
var root_3163 = svg_template(`<desc> </desc>`);
var root_1163 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M12 8a1 1 0 0 0-1 1v10H9a1 1 0 1 0 0 2h11a1 1 0 0 0 1-1V9a1 1 0 0 0-1-1h-8Zm4 10a2 2 0 1 1 0-4 2 2 0 0 1 0 4Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M5 3a2 2 0 0 0-2 2v6h6V9a3 3 0 0 1 3-3h8c.35 0 .687.06 1 .17V5a2 2 0 0 0-2-2H5Zm4 10H3v2a2 2 0 0 0 2 2h4v-4Z" clip-rule="evenodd"></path></svg>`);
var root_5163 = svg_template(`<title> </title>`);
var root_6163 = svg_template(`<desc> </desc>`);
var root_4163 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M12 8a1 1 0 0 0-1 1v10H9a1 1 0 1 0 0 2h11a1 1 0 0 0 1-1V9a1 1 0 0 0-1-1h-8Zm4 10a2 2 0 1 1 0-4 2 2 0 0 1 0 4Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M5 3a2 2 0 0 0-2 2v6h6V9a3 3 0 0 1 3-3h8c.35 0 .687.06 1 .17V5a2 2 0 0 0-2-2H5Zm4 10H3v2a2 2 0 0 0 2 2h4v-4Z" clip-rule="evenodd"></path></svg>`);
function ComputerSpeakerSolid($$anchor, $$props) {
  if (new.target === ComputerSpeakerSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ComputerSpeakerSolid);
  validate_prop_bindings($$props, [], [], ComputerSpeakerSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "computer speaker solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1163();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2163();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3163();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4163();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5163();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6163();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_2 = sibling(node_4);
      var path_3 = sibling(path_2);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ComputerSpeakerSolid);
  ComputerSpeakerSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ComputerSpeakerSolid_default = ComputerSpeakerSolid;
ComputerSpeakerSolid.filename = ".../flowbite-svelte-icons/dist/ComputerSpeakerSolid.svelte";
mark_module_end(ComputerSpeakerSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CreditCardOutline.svelte
mark_module_start();
var root_2164 = svg_template(`<title> </title>`);
var root_3164 = svg_template(`<desc> </desc>`);
var root_1164 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M3 10h18M6 14h2m3 0h5M3 7v10a1 1 0 0 0 1 1h16a1 1 0 0 0 1-1V7a1 1 0 0 0-1-1H4a1 1 0 0 0-1 1Z"></path></svg>`);
var root_5164 = svg_template(`<title> </title>`);
var root_6164 = svg_template(`<desc> </desc>`);
var root_4164 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M3 10h18M6 14h2m3 0h5M3 7v10a1 1 0 0 0 1 1h16a1 1 0 0 0 1-1V7a1 1 0 0 0-1-1H4a1 1 0 0 0-1 1Z"></path></svg>`);
function CreditCardOutline($$anchor, $$props) {
  if (new.target === CreditCardOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CreditCardOutline);
  validate_prop_bindings($$props, [], [], CreditCardOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "credit card outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1164();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2164();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3164();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4164();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5164();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6164();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CreditCardOutline);
  CreditCardOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CreditCardOutline_default = CreditCardOutline;
CreditCardOutline.filename = ".../flowbite-svelte-icons/dist/CreditCardOutline.svelte";
mark_module_end(CreditCardOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CreditCardPlusOutline.svelte
mark_module_start();
var root_2165 = svg_template(`<title> </title>`);
var root_3165 = svg_template(`<desc> </desc>`);
var root_1165 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="square" stroke-linejoin="round" d="M16.5 15v1.5m0 0V18m0-1.5H15m1.5 0H18M3 9V6a1 1 0 0 1 1-1h14a1 1 0 0 1 1 1v3M3 9v6a1 1 0 0 0 1 1h5M3 9h16m0 0v1M6 12h3m12 4.5a4.5 4.5 0 1 1-9 0 4.5 4.5 0 0 1 9 0Z"></path></svg>`);
var root_5165 = svg_template(`<title> </title>`);
var root_6165 = svg_template(`<desc> </desc>`);
var root_4165 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="square" stroke-linejoin="round" d="M16.5 15v1.5m0 0V18m0-1.5H15m1.5 0H18M3 9V6a1 1 0 0 1 1-1h14a1 1 0 0 1 1 1v3M3 9v6a1 1 0 0 0 1 1h5M3 9h16m0 0v1M6 12h3m12 4.5a4.5 4.5 0 1 1-9 0 4.5 4.5 0 0 1 9 0Z"></path></svg>`);
function CreditCardPlusOutline($$anchor, $$props) {
  if (new.target === CreditCardPlusOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CreditCardPlusOutline);
  validate_prop_bindings($$props, [], [], CreditCardPlusOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "credit card plus outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1165();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2165();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3165();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4165();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5165();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6165();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CreditCardPlusOutline);
  CreditCardPlusOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CreditCardPlusOutline_default = CreditCardPlusOutline;
CreditCardPlusOutline.filename = ".../flowbite-svelte-icons/dist/CreditCardPlusOutline.svelte";
mark_module_end(CreditCardPlusOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CreditCardPlusSolid.svelte
mark_module_start();
var root_2166 = svg_template(`<title> </title>`);
var root_3166 = svg_template(`<desc> </desc>`);
var root_1166 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M11 16.5a5.5 5.5 0 1 1 11 0 5.5 5.5 0 0 1-11 0Zm4.5 2.5v-1.5H14v-2h1.5V14h2v1.5H19v2h-1.5V19h-2Z" clip-rule="evenodd"></path><path d="M3.987 4A2 2 0 0 0 2 6v9a2 2 0 0 0 2 2h5v-2H4v-5h16V6a2 2 0 0 0-2-2H3.987Z"></path><path fill-rule="evenodd" d="M5 12a1 1 0 0 1 1-1h3a1 1 0 1 1 0 2H6a1 1 0 0 1-1-1Z" clip-rule="evenodd"></path></svg>`);
var root_5166 = svg_template(`<title> </title>`);
var root_6166 = svg_template(`<desc> </desc>`);
var root_4166 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M11 16.5a5.5 5.5 0 1 1 11 0 5.5 5.5 0 0 1-11 0Zm4.5 2.5v-1.5H14v-2h1.5V14h2v1.5H19v2h-1.5V19h-2Z" clip-rule="evenodd"></path><path d="M3.987 4A2 2 0 0 0 2 6v9a2 2 0 0 0 2 2h5v-2H4v-5h16V6a2 2 0 0 0-2-2H3.987Z"></path><path fill-rule="evenodd" d="M5 12a1 1 0 0 1 1-1h3a1 1 0 1 1 0 2H6a1 1 0 0 1-1-1Z" clip-rule="evenodd"></path></svg>`);
function CreditCardPlusSolid($$anchor, $$props) {
  if (new.target === CreditCardPlusSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CreditCardPlusSolid);
  validate_prop_bindings($$props, [], [], CreditCardPlusSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "credit card plus solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1166();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2166();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3166();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      var path_2 = sibling(path_1);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4166();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5166();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6166();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_3 = sibling(node_4);
      var path_4 = sibling(path_3);
      var path_5 = sibling(path_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CreditCardPlusSolid);
  CreditCardPlusSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CreditCardPlusSolid_default = CreditCardPlusSolid;
CreditCardPlusSolid.filename = ".../flowbite-svelte-icons/dist/CreditCardPlusSolid.svelte";
mark_module_end(CreditCardPlusSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CreditCardSolid.svelte
mark_module_start();
var root_2167 = svg_template(`<title> </title>`);
var root_3167 = svg_template(`<desc> </desc>`);
var root_1167 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M4 5a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2H4Zm0 6h16v6H4v-6Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M5 14a1 1 0 0 1 1-1h2a1 1 0 1 1 0 2H6a1 1 0 0 1-1-1Zm5 0a1 1 0 0 1 1-1h5a1 1 0 1 1 0 2h-5a1 1 0 0 1-1-1Z" clip-rule="evenodd"></path></svg>`);
var root_5167 = svg_template(`<title> </title>`);
var root_6167 = svg_template(`<desc> </desc>`);
var root_4167 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M4 5a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2H4Zm0 6h16v6H4v-6Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M5 14a1 1 0 0 1 1-1h2a1 1 0 1 1 0 2H6a1 1 0 0 1-1-1Zm5 0a1 1 0 0 1 1-1h5a1 1 0 1 1 0 2h-5a1 1 0 0 1-1-1Z" clip-rule="evenodd"></path></svg>`);
function CreditCardSolid($$anchor, $$props) {
  if (new.target === CreditCardSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CreditCardSolid);
  validate_prop_bindings($$props, [], [], CreditCardSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "credit card solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1167();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2167();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3167();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4167();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5167();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6167();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_2 = sibling(node_4);
      var path_3 = sibling(path_2);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CreditCardSolid);
  CreditCardSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CreditCardSolid_default = CreditCardSolid;
CreditCardSolid.filename = ".../flowbite-svelte-icons/dist/CreditCardSolid.svelte";
mark_module_end(CreditCardSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/CssSolid.svelte
mark_module_start();
var root_2168 = svg_template(`<title> </title>`);
var root_3168 = svg_template(`<desc> </desc>`);
var root_1168 = svg_template(`<svg><!><!><path d="m3 2 1.578 17.834L12 22l7.468-2.165L21 2H3Zm13.3 14.722-4.293 1.204H12l-4.297-1.204-.297-3.167h2.108l.15 1.526 2.335.639 2.34-.64.245-3.05h-7.27l-.187-2.006h7.64l.174-2.006H6.924l-.176-2.006h10.506l-.954 10.71Z"></path></svg>`);
var root_5168 = svg_template(`<title> </title>`);
var root_6168 = svg_template(`<desc> </desc>`);
var root_4168 = svg_template(`<svg><!><!><path d="m3 2 1.578 17.834L12 22l7.468-2.165L21 2H3Zm13.3 14.722-4.293 1.204H12l-4.297-1.204-.297-3.167h2.108l.15 1.526 2.335.639 2.34-.64.245-3.05h-7.27l-.187-2.006h7.64l.174-2.006H6.924l-.176-2.006h10.506l-.954 10.71Z"></path></svg>`);
function CssSolid($$anchor, $$props) {
  if (new.target === CssSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, CssSolid);
  validate_prop_bindings($$props, [], [], CssSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "css solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1168();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2168();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3168();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4168();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5168();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6168();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CssSolid);
  CssSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CssSolid_default = CssSolid;
CssSolid.filename = ".../flowbite-svelte-icons/dist/CssSolid.svelte";
mark_module_end(CssSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/DatabaseOutline.svelte
mark_module_start();
var root_2169 = svg_template(`<title> </title>`);
var root_3169 = svg_template(`<desc> </desc>`);
var root_1169 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M19 6c0 1.657-3.134 3-7 3S5 7.657 5 6m14 0c0-1.657-3.134-3-7-3S5 4.343 5 6m14 0v6M5 6v6m0 0c0 1.657 3.134 3 7 3s7-1.343 7-3M5 12v6c0 1.657 3.134 3 7 3s7-1.343 7-3v-6"></path></svg>`);
var root_5169 = svg_template(`<title> </title>`);
var root_6169 = svg_template(`<desc> </desc>`);
var root_4169 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M19 6c0 1.657-3.134 3-7 3S5 7.657 5 6m14 0c0-1.657-3.134-3-7-3S5 4.343 5 6m14 0v6M5 6v6m0 0c0 1.657 3.134 3 7 3s7-1.343 7-3M5 12v6c0 1.657 3.134 3 7 3s7-1.343 7-3v-6"></path></svg>`);
function DatabaseOutline($$anchor, $$props) {
  if (new.target === DatabaseOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, DatabaseOutline);
  validate_prop_bindings($$props, [], [], DatabaseOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "database outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1169();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2169();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3169();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4169();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5169();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6169();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(DatabaseOutline);
  DatabaseOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var DatabaseOutline_default = DatabaseOutline;
DatabaseOutline.filename = ".../flowbite-svelte-icons/dist/DatabaseOutline.svelte";
mark_module_end(DatabaseOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/DatabaseSolid.svelte
mark_module_start();
var root_2170 = svg_template(`<title> </title>`);
var root_3170 = svg_template(`<desc> </desc>`);
var root_1170 = svg_template(`<svg><!><!><path d="M12 7.205c4.418 0 8-1.165 8-2.602C20 3.165 16.418 2 12 2S4 3.165 4 4.603c0 1.437 3.582 2.602 8 2.602ZM12 22c4.963 0 8-1.686 8-2.603v-4.404c-.052.032-.112.06-.165.09a7.75 7.75 0 0 1-.745.387c-.193.088-.394.173-.6.253-.063.024-.124.05-.189.073a18.934 18.934 0 0 1-6.3.998c-2.135.027-4.26-.31-6.3-.998-.065-.024-.126-.05-.189-.073a10.143 10.143 0 0 1-.852-.373 7.75 7.75 0 0 1-.493-.267c-.053-.03-.113-.058-.165-.09v4.404C4 20.315 7.037 22 12 22Zm7.09-13.928a9.91 9.91 0 0 1-.6.253c-.063.025-.124.05-.189.074a18.935 18.935 0 0 1-6.3.998c-2.135.027-4.26-.31-6.3-.998-.065-.024-.126-.05-.189-.074a10.163 10.163 0 0 1-.852-.372 7.816 7.816 0 0 1-.493-.268c-.055-.03-.115-.058-.167-.09V12c0 .917 3.037 2.603 8 2.603s8-1.686 8-2.603V7.596c-.052.031-.112.059-.165.09a7.816 7.816 0 0 1-.745.386Z"></path></svg>`);
var root_5170 = svg_template(`<title> </title>`);
var root_6170 = svg_template(`<desc> </desc>`);
var root_4170 = svg_template(`<svg><!><!><path d="M12 7.205c4.418 0 8-1.165 8-2.602C20 3.165 16.418 2 12 2S4 3.165 4 4.603c0 1.437 3.582 2.602 8 2.602ZM12 22c4.963 0 8-1.686 8-2.603v-4.404c-.052.032-.112.06-.165.09a7.75 7.75 0 0 1-.745.387c-.193.088-.394.173-.6.253-.063.024-.124.05-.189.073a18.934 18.934 0 0 1-6.3.998c-2.135.027-4.26-.31-6.3-.998-.065-.024-.126-.05-.189-.073a10.143 10.143 0 0 1-.852-.373 7.75 7.75 0 0 1-.493-.267c-.053-.03-.113-.058-.165-.09v4.404C4 20.315 7.037 22 12 22Zm7.09-13.928a9.91 9.91 0 0 1-.6.253c-.063.025-.124.05-.189.074a18.935 18.935 0 0 1-6.3.998c-2.135.027-4.26-.31-6.3-.998-.065-.024-.126-.05-.189-.074a10.163 10.163 0 0 1-.852-.372 7.816 7.816 0 0 1-.493-.268c-.055-.03-.115-.058-.167-.09V12c0 .917 3.037 2.603 8 2.603s8-1.686 8-2.603V7.596c-.052.031-.112.059-.165.09a7.816 7.816 0 0 1-.745.386Z"></path></svg>`);
function DatabaseSolid($$anchor, $$props) {
  if (new.target === DatabaseSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, DatabaseSolid);
  validate_prop_bindings($$props, [], [], DatabaseSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "database solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1170();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2170();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3170();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4170();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5170();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6170();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(DatabaseSolid);
  DatabaseSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var DatabaseSolid_default = DatabaseSolid;
DatabaseSolid.filename = ".../flowbite-svelte-icons/dist/DatabaseSolid.svelte";
mark_module_end(DatabaseSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/DesktopPcOutline.svelte
mark_module_start();
var root_2171 = svg_template(`<title> </title>`);
var root_3171 = svg_template(`<desc> </desc>`);
var root_1171 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12 15v5m-3 0h6M4 11h16M5 15h14a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1H5a1 1 0 0 0-1 1v9a1 1 0 0 0 1 1Z"></path></svg>`);
var root_5171 = svg_template(`<title> </title>`);
var root_6171 = svg_template(`<desc> </desc>`);
var root_4171 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12 15v5m-3 0h6M4 11h16M5 15h14a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1H5a1 1 0 0 0-1 1v9a1 1 0 0 0 1 1Z"></path></svg>`);
function DesktopPcOutline($$anchor, $$props) {
  if (new.target === DesktopPcOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, DesktopPcOutline);
  validate_prop_bindings($$props, [], [], DesktopPcOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "desktop pc outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1171();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2171();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3171();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4171();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5171();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6171();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(DesktopPcOutline);
  DesktopPcOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var DesktopPcOutline_default = DesktopPcOutline;
DesktopPcOutline.filename = ".../flowbite-svelte-icons/dist/DesktopPcOutline.svelte";
mark_module_end(DesktopPcOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/DesktopPcSolid.svelte
mark_module_start();
var root_2172 = svg_template(`<title> </title>`);
var root_3172 = svg_template(`<desc> </desc>`);
var root_1172 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M5 3a2 2 0 0 0-2 2v5h18V5a2 2 0 0 0-2-2H5ZM3 14v-2h18v2a2 2 0 0 1-2 2h-6v3h2a1 1 0 1 1 0 2H9a1 1 0 1 1 0-2h2v-3H5a2 2 0 0 1-2-2Z" clip-rule="evenodd"></path></svg>`);
var root_5172 = svg_template(`<title> </title>`);
var root_6172 = svg_template(`<desc> </desc>`);
var root_4172 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M5 3a2 2 0 0 0-2 2v5h18V5a2 2 0 0 0-2-2H5ZM3 14v-2h18v2a2 2 0 0 1-2 2h-6v3h2a1 1 0 1 1 0 2H9a1 1 0 1 1 0-2h2v-3H5a2 2 0 0 1-2-2Z" clip-rule="evenodd"></path></svg>`);
function DesktopPcSolid($$anchor, $$props) {
  if (new.target === DesktopPcSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, DesktopPcSolid);
  validate_prop_bindings($$props, [], [], DesktopPcSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "desktop pc solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1172();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2172();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3172();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4172();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5172();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6172();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(DesktopPcSolid);
  DesktopPcSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var DesktopPcSolid_default = DesktopPcSolid;
DesktopPcSolid.filename = ".../flowbite-svelte-icons/dist/DesktopPcSolid.svelte";
mark_module_end(DesktopPcSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/DiscordSolid.svelte
mark_module_start();
var root_2173 = svg_template(`<title> </title>`);
var root_3173 = svg_template(`<desc> </desc>`);
var root_1173 = svg_template(`<svg><!><!><path d="M18.942 5.556a16.3 16.3 0 0 0-4.126-1.3 12.04 12.04 0 0 0-.529 1.1 15.175 15.175 0 0 0-4.573 0 11.586 11.586 0 0 0-.535-1.1 16.274 16.274 0 0 0-4.129 1.3 17.392 17.392 0 0 0-2.868 11.662 15.785 15.785 0 0 0 4.963 2.521c.41-.564.773-1.16 1.084-1.785a10.638 10.638 0 0 1-1.706-.83c.143-.106.283-.217.418-.331a11.664 11.664 0 0 0 10.118 0c.137.114.277.225.418.331-.544.328-1.116.606-1.71.832a12.58 12.58 0 0 0 1.084 1.785 16.46 16.46 0 0 0 5.064-2.595 17.286 17.286 0 0 0-2.973-11.59ZM8.678 14.813a1.94 1.94 0 0 1-1.8-2.045 1.93 1.93 0 0 1 1.8-2.047 1.918 1.918 0 0 1 1.8 2.047 1.929 1.929 0 0 1-1.8 2.045Zm6.644 0a1.94 1.94 0 0 1-1.8-2.045 1.93 1.93 0 0 1 1.8-2.047 1.919 1.919 0 0 1 1.8 2.047 1.93 1.93 0 0 1-1.8 2.045Z"></path></svg>`);
var root_5173 = svg_template(`<title> </title>`);
var root_6173 = svg_template(`<desc> </desc>`);
var root_4173 = svg_template(`<svg><!><!><path d="M18.942 5.556a16.3 16.3 0 0 0-4.126-1.3 12.04 12.04 0 0 0-.529 1.1 15.175 15.175 0 0 0-4.573 0 11.586 11.586 0 0 0-.535-1.1 16.274 16.274 0 0 0-4.129 1.3 17.392 17.392 0 0 0-2.868 11.662 15.785 15.785 0 0 0 4.963 2.521c.41-.564.773-1.16 1.084-1.785a10.638 10.638 0 0 1-1.706-.83c.143-.106.283-.217.418-.331a11.664 11.664 0 0 0 10.118 0c.137.114.277.225.418.331-.544.328-1.116.606-1.71.832a12.58 12.58 0 0 0 1.084 1.785 16.46 16.46 0 0 0 5.064-2.595 17.286 17.286 0 0 0-2.973-11.59ZM8.678 14.813a1.94 1.94 0 0 1-1.8-2.045 1.93 1.93 0 0 1 1.8-2.047 1.918 1.918 0 0 1 1.8 2.047 1.929 1.929 0 0 1-1.8 2.045Zm6.644 0a1.94 1.94 0 0 1-1.8-2.045 1.93 1.93 0 0 1 1.8-2.047 1.919 1.919 0 0 1 1.8 2.047 1.93 1.93 0 0 1-1.8 2.045Z"></path></svg>`);
function DiscordSolid($$anchor, $$props) {
  if (new.target === DiscordSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, DiscordSolid);
  validate_prop_bindings($$props, [], [], DiscordSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "discord solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1173();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2173();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3173();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4173();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5173();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6173();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(DiscordSolid);
  DiscordSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var DiscordSolid_default = DiscordSolid;
DiscordSolid.filename = ".../flowbite-svelte-icons/dist/DiscordSolid.svelte";
mark_module_end(DiscordSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/DnaOutline.svelte
mark_module_start();
var root_2174 = svg_template(`<title> </title>`);
var root_3174 = svg_template(`<desc> </desc>`);
var root_1174 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M15.041 13.862A4.999 4.999 0 0 1 17 17.831V21M7 3v3.169a5 5 0 0 0 1.891 3.916M17 3v3.169a5 5 0 0 1-2.428 4.288l-5.144 3.086A5 5 0 0 0 7 17.831V21M7 5h10M7.399 8h9.252M8 16h8.652M7 19h10"></path></svg>`);
var root_5174 = svg_template(`<title> </title>`);
var root_6174 = svg_template(`<desc> </desc>`);
var root_4174 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M15.041 13.862A4.999 4.999 0 0 1 17 17.831V21M7 3v3.169a5 5 0 0 0 1.891 3.916M17 3v3.169a5 5 0 0 1-2.428 4.288l-5.144 3.086A5 5 0 0 0 7 17.831V21M7 5h10M7.399 8h9.252M8 16h8.652M7 19h10"></path></svg>`);
function DnaOutline($$anchor, $$props) {
  if (new.target === DnaOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, DnaOutline);
  validate_prop_bindings($$props, [], [], DnaOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "dna outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1174();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2174();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3174();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4174();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5174();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6174();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(DnaOutline);
  DnaOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var DnaOutline_default = DnaOutline;
DnaOutline.filename = ".../flowbite-svelte-icons/dist/DnaOutline.svelte";
mark_module_end(DnaOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/DollarOutline.svelte
mark_module_start();
var root_2175 = svg_template(`<title> </title>`);
var root_3175 = svg_template(`<desc> </desc>`);
var root_1175 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M8 17.345a4.76 4.76 0 0 0 2.558 1.618c2.274.589 4.512-.446 4.999-2.31.487-1.866-1.273-3.9-3.546-4.49-2.273-.59-4.034-2.623-3.547-4.488.486-1.865 2.724-2.899 4.998-2.31.982.236 1.87.793 2.538 1.592m-3.879 12.171V21m0-18v2.2"></path></svg>`);
var root_5175 = svg_template(`<title> </title>`);
var root_6175 = svg_template(`<desc> </desc>`);
var root_4175 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M8 17.345a4.76 4.76 0 0 0 2.558 1.618c2.274.589 4.512-.446 4.999-2.31.487-1.866-1.273-3.9-3.546-4.49-2.273-.59-4.034-2.623-3.547-4.488.486-1.865 2.724-2.899 4.998-2.31.982.236 1.87.793 2.538 1.592m-3.879 12.171V21m0-18v2.2"></path></svg>`);
function DollarOutline($$anchor, $$props) {
  if (new.target === DollarOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, DollarOutline);
  validate_prop_bindings($$props, [], [], DollarOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "dollar outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1175();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2175();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3175();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4175();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5175();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6175();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(DollarOutline);
  DollarOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var DollarOutline_default = DollarOutline;
DollarOutline.filename = ".../flowbite-svelte-icons/dist/DollarOutline.svelte";
mark_module_end(DollarOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/DotsHorizontalOutline.svelte
mark_module_start();
var root_2176 = svg_template(`<title> </title>`);
var root_3176 = svg_template(`<desc> </desc>`);
var root_1176 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-width="3" d="M6 12h.01m6 0h.01m5.99 0h.01"></path></svg>`);
var root_5176 = svg_template(`<title> </title>`);
var root_6176 = svg_template(`<desc> </desc>`);
var root_4176 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-width="3" d="M6 12h.01m6 0h.01m5.99 0h.01"></path></svg>`);
function DotsHorizontalOutline($$anchor, $$props) {
  if (new.target === DotsHorizontalOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, DotsHorizontalOutline);
  validate_prop_bindings($$props, [], [], DotsHorizontalOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "dots horizontal outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1176();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2176();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3176();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: "none",
          color: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4176();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5176();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6176();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: "none",
          color: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(DotsHorizontalOutline);
  DotsHorizontalOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var DotsHorizontalOutline_default = DotsHorizontalOutline;
DotsHorizontalOutline.filename = ".../flowbite-svelte-icons/dist/DotsHorizontalOutline.svelte";
mark_module_end(DotsHorizontalOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/DotsVerticalOutline.svelte
mark_module_start();
var root_2177 = svg_template(`<title> </title>`);
var root_3177 = svg_template(`<desc> </desc>`);
var root_1177 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-width="3" d="M12 6h.01M12 12h.01M12 18h.01"></path></svg>`);
var root_5177 = svg_template(`<title> </title>`);
var root_6177 = svg_template(`<desc> </desc>`);
var root_4177 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-width="3" d="M12 6h.01M12 12h.01M12 18h.01"></path></svg>`);
function DotsVerticalOutline($$anchor, $$props) {
  if (new.target === DotsVerticalOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, DotsVerticalOutline);
  validate_prop_bindings($$props, [], [], DotsVerticalOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "dots vertical outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1177();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2177();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3177();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: "none",
          color: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4177();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5177();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6177();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: "none",
          color: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(DotsVerticalOutline);
  DotsVerticalOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var DotsVerticalOutline_default = DotsVerticalOutline;
DotsVerticalOutline.filename = ".../flowbite-svelte-icons/dist/DotsVerticalOutline.svelte";
mark_module_end(DotsVerticalOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/DownloadOutline.svelte
mark_module_start();
var root_2178 = svg_template(`<title> </title>`);
var root_3178 = svg_template(`<desc> </desc>`);
var root_1178 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12 13V4M7 14H5a1 1 0 0 0-1 1v4a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1v-4a1 1 0 0 0-1-1h-2m-1-5-4 5-4-5m9 8h.01"></path></svg>`);
var root_5178 = svg_template(`<title> </title>`);
var root_6178 = svg_template(`<desc> </desc>`);
var root_4178 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12 13V4M7 14H5a1 1 0 0 0-1 1v4a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1v-4a1 1 0 0 0-1-1h-2m-1-5-4 5-4-5m9 8h.01"></path></svg>`);
function DownloadOutline($$anchor, $$props) {
  if (new.target === DownloadOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, DownloadOutline);
  validate_prop_bindings($$props, [], [], DownloadOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "download outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1178();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2178();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3178();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4178();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5178();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6178();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(DownloadOutline);
  DownloadOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var DownloadOutline_default = DownloadOutline;
DownloadOutline.filename = ".../flowbite-svelte-icons/dist/DownloadOutline.svelte";
mark_module_end(DownloadOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/DownloadSolid.svelte
mark_module_start();
var root_2179 = svg_template(`<title> </title>`);
var root_3179 = svg_template(`<desc> </desc>`);
var root_1179 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M13 11.15V4a1 1 0 1 0-2 0v7.15L8.78 8.374a1 1 0 1 0-1.56 1.25l4 5a1 1 0 0 0 1.56 0l4-5a1 1 0 1 0-1.56-1.25L13 11.15Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M9.657 15.874 7.358 13H5a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-4a2 2 0 0 0-2-2h-2.358l-2.3 2.874a3 3 0 0 1-4.685 0ZM17 16a1 1 0 1 0 0 2h.01a1 1 0 1 0 0-2H17Z" clip-rule="evenodd"></path></svg>`);
var root_5179 = svg_template(`<title> </title>`);
var root_6179 = svg_template(`<desc> </desc>`);
var root_4179 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M13 11.15V4a1 1 0 1 0-2 0v7.15L8.78 8.374a1 1 0 1 0-1.56 1.25l4 5a1 1 0 0 0 1.56 0l4-5a1 1 0 1 0-1.56-1.25L13 11.15Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M9.657 15.874 7.358 13H5a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-4a2 2 0 0 0-2-2h-2.358l-2.3 2.874a3 3 0 0 1-4.685 0ZM17 16a1 1 0 1 0 0 2h.01a1 1 0 1 0 0-2H17Z" clip-rule="evenodd"></path></svg>`);
function DownloadSolid($$anchor, $$props) {
  if (new.target === DownloadSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, DownloadSolid);
  validate_prop_bindings($$props, [], [], DownloadSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "download solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1179();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2179();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3179();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4179();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5179();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6179();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_2 = sibling(node_4);
      var path_3 = sibling(path_2);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(DownloadSolid);
  DownloadSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var DownloadSolid_default = DownloadSolid;
DownloadSolid.filename = ".../flowbite-svelte-icons/dist/DownloadSolid.svelte";
mark_module_end(DownloadSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/DrawSquareOutline.svelte
mark_module_start();
var root_2180 = svg_template(`<title> </title>`);
var root_3180 = svg_template(`<desc> </desc>`);
var root_1180 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M11 6.5h2M11 18h2m-7-5v-2m12 2v-2M5 8h2a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1H5a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1Zm0 12h2a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1H5a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1Zm12 0h2a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1h-2a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1Zm0-12h2a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1h-2a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1Z"></path></svg>`);
var root_5180 = svg_template(`<title> </title>`);
var root_6180 = svg_template(`<desc> </desc>`);
var root_4180 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M11 6.5h2M11 18h2m-7-5v-2m12 2v-2M5 8h2a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1H5a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1Zm0 12h2a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1H5a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1Zm12 0h2a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1h-2a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1Zm0-12h2a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1h-2a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1Z"></path></svg>`);
function DrawSquareOutline($$anchor, $$props) {
  if (new.target === DrawSquareOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, DrawSquareOutline);
  validate_prop_bindings($$props, [], [], DrawSquareOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "draw square outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1180();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2180();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3180();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4180();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5180();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6180();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(DrawSquareOutline);
  DrawSquareOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var DrawSquareOutline_default = DrawSquareOutline;
DrawSquareOutline.filename = ".../flowbite-svelte-icons/dist/DrawSquareOutline.svelte";
mark_module_end(DrawSquareOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/DrawSquareSolid.svelte
mark_module_start();
var root_2181 = svg_template(`<title> </title>`);
var root_3181 = svg_template(`<desc> </desc>`);
var root_1181 = svg_template(`<svg><!><!><path d="M5 3a2 2 0 0 0-2 2v2a2 2 0 0 0 2 2h2a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2H5Zm0 12a2 2 0 0 0-2 2v2a2 2 0 0 0 2 2h2a2 2 0 0 0 2-2v-2a2 2 0 0 0-2-2H5Zm12 0a2 2 0 0 0-2 2v2a2 2 0 0 0 2 2h2a2 2 0 0 0 2-2v-2a2 2 0 0 0-2-2h-2Zm0-12a2 2 0 0 0-2 2v2a2 2 0 0 0 2 2h2a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2h-2Z"></path><path fill-rule="evenodd" d="M10 6.5a1 1 0 0 1 1-1h2a1 1 0 1 1 0 2h-2a1 1 0 0 1-1-1ZM10 18a1 1 0 0 1 1-1h2a1 1 0 1 1 0 2h-2a1 1 0 0 1-1-1Zm-4-4a1 1 0 0 1-1-1v-2a1 1 0 1 1 2 0v2a1 1 0 0 1-1 1Zm12 0a1 1 0 0 1-1-1v-2a1 1 0 1 1 2 0v2a1 1 0 0 1-1 1Z" clip-rule="evenodd"></path></svg>`);
var root_5181 = svg_template(`<title> </title>`);
var root_6181 = svg_template(`<desc> </desc>`);
var root_4181 = svg_template(`<svg><!><!><path d="M5 3a2 2 0 0 0-2 2v2a2 2 0 0 0 2 2h2a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2H5Zm0 12a2 2 0 0 0-2 2v2a2 2 0 0 0 2 2h2a2 2 0 0 0 2-2v-2a2 2 0 0 0-2-2H5Zm12 0a2 2 0 0 0-2 2v2a2 2 0 0 0 2 2h2a2 2 0 0 0 2-2v-2a2 2 0 0 0-2-2h-2Zm0-12a2 2 0 0 0-2 2v2a2 2 0 0 0 2 2h2a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2h-2Z"></path><path fill-rule="evenodd" d="M10 6.5a1 1 0 0 1 1-1h2a1 1 0 1 1 0 2h-2a1 1 0 0 1-1-1ZM10 18a1 1 0 0 1 1-1h2a1 1 0 1 1 0 2h-2a1 1 0 0 1-1-1Zm-4-4a1 1 0 0 1-1-1v-2a1 1 0 1 1 2 0v2a1 1 0 0 1-1 1Zm12 0a1 1 0 0 1-1-1v-2a1 1 0 1 1 2 0v2a1 1 0 0 1-1 1Z" clip-rule="evenodd"></path></svg>`);
function DrawSquareSolid($$anchor, $$props) {
  if (new.target === DrawSquareSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, DrawSquareSolid);
  validate_prop_bindings($$props, [], [], DrawSquareSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "draw square solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1181();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2181();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3181();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4181();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5181();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6181();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_2 = sibling(node_4);
      var path_3 = sibling(path_2);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(DrawSquareSolid);
  DrawSquareSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var DrawSquareSolid_default = DrawSquareSolid;
DrawSquareSolid.filename = ".../flowbite-svelte-icons/dist/DrawSquareSolid.svelte";
mark_module_end(DrawSquareSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/DribbbleSolid.svelte
mark_module_start();
var root_2182 = svg_template(`<title> </title>`);
var root_3182 = svg_template(`<desc> </desc>`);
var root_1182 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M12 2a10 10 0 1 0 10 10A10.009 10.009 0 0 0 12 2Zm6.613 4.614a8.523 8.523 0 0 1 1.93 5.32 20.093 20.093 0 0 0-5.949-.274c-.059-.149-.122-.292-.184-.441a23.879 23.879 0 0 0-.566-1.239 11.41 11.41 0 0 0 4.769-3.366ZM10 3.707a8.82 8.82 0 0 1 2-.238 8.5 8.5 0 0 1 5.664 2.152 9.608 9.608 0 0 1-4.476 3.087A45.755 45.755 0 0 0 10 3.707Zm-6.358 6.555a8.57 8.57 0 0 1 4.73-5.981 53.99 53.99 0 0 1 3.168 4.941 32.078 32.078 0 0 1-7.9 1.04h.002Zm2.01 7.46a8.51 8.51 0 0 1-2.2-5.707v-.262a31.641 31.641 0 0 0 8.777-1.219c.243.477.477.964.692 1.449-.114.032-.227.067-.336.1a13.569 13.569 0 0 0-6.942 5.636l.009.003ZM12 20.556a8.508 8.508 0 0 1-5.243-1.8 11.717 11.717 0 0 1 6.7-5.332.509.509 0 0 1 .055-.02 35.65 35.65 0 0 1 1.819 6.476 8.476 8.476 0 0 1-3.331.676Zm4.772-1.462A37.232 37.232 0 0 0 15.113 13a12.513 12.513 0 0 1 5.321.364 8.56 8.56 0 0 1-3.66 5.73h-.002Z" clip-rule="evenodd"></path></svg>`);
var root_5182 = svg_template(`<title> </title>`);
var root_6182 = svg_template(`<desc> </desc>`);
var root_4182 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M12 2a10 10 0 1 0 10 10A10.009 10.009 0 0 0 12 2Zm6.613 4.614a8.523 8.523 0 0 1 1.93 5.32 20.093 20.093 0 0 0-5.949-.274c-.059-.149-.122-.292-.184-.441a23.879 23.879 0 0 0-.566-1.239 11.41 11.41 0 0 0 4.769-3.366ZM10 3.707a8.82 8.82 0 0 1 2-.238 8.5 8.5 0 0 1 5.664 2.152 9.608 9.608 0 0 1-4.476 3.087A45.755 45.755 0 0 0 10 3.707Zm-6.358 6.555a8.57 8.57 0 0 1 4.73-5.981 53.99 53.99 0 0 1 3.168 4.941 32.078 32.078 0 0 1-7.9 1.04h.002Zm2.01 7.46a8.51 8.51 0 0 1-2.2-5.707v-.262a31.641 31.641 0 0 0 8.777-1.219c.243.477.477.964.692 1.449-.114.032-.227.067-.336.1a13.569 13.569 0 0 0-6.942 5.636l.009.003ZM12 20.556a8.508 8.508 0 0 1-5.243-1.8 11.717 11.717 0 0 1 6.7-5.332.509.509 0 0 1 .055-.02 35.65 35.65 0 0 1 1.819 6.476 8.476 8.476 0 0 1-3.331.676Zm4.772-1.462A37.232 37.232 0 0 0 15.113 13a12.513 12.513 0 0 1 5.321.364 8.56 8.56 0 0 1-3.66 5.73h-.002Z" clip-rule="evenodd"></path></svg>`);
function DribbbleSolid($$anchor, $$props) {
  if (new.target === DribbbleSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, DribbbleSolid);
  validate_prop_bindings($$props, [], [], DribbbleSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "dribbble solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1182();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2182();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3182();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4182();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5182();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6182();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(DribbbleSolid);
  DribbbleSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var DribbbleSolid_default = DribbbleSolid;
DribbbleSolid.filename = ".../flowbite-svelte-icons/dist/DribbbleSolid.svelte";
mark_module_end(DribbbleSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/DropboxSolid.svelte
mark_module_start();
var root_2183 = svg_template(`<title> </title>`);
var root_3183 = svg_template(`<desc> </desc>`);
var root_1183 = svg_template(`<svg><!><!><path d="M12.013 6.175 7.006 9.369l5.007 3.194-5.007 3.193L2 12.545l5.006-3.193L2 6.175l5.006-3.194 5.007 3.194ZM6.981 17.806l5.006-3.193 5.006 3.193L11.987 21l-5.006-3.194Z"></path><path d="m12.013 12.545 5.006-3.194-5.006-3.176 4.98-3.194L22 6.175l-5.007 3.194L22 12.562l-5.007 3.194-4.98-3.211Z"></path></svg>`);
var root_5183 = svg_template(`<title> </title>`);
var root_6183 = svg_template(`<desc> </desc>`);
var root_4183 = svg_template(`<svg><!><!><path d="M12.013 6.175 7.006 9.369l5.007 3.194-5.007 3.193L2 12.545l5.006-3.193L2 6.175l5.006-3.194 5.007 3.194ZM6.981 17.806l5.006-3.193 5.006 3.193L11.987 21l-5.006-3.194Z"></path><path d="m12.013 12.545 5.006-3.194-5.006-3.176 4.98-3.194L22 6.175l-5.007 3.194L22 12.562l-5.007 3.194-4.98-3.211Z"></path></svg>`);
function DropboxSolid($$anchor, $$props) {
  if (new.target === DropboxSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, DropboxSolid);
  validate_prop_bindings($$props, [], [], DropboxSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "dropbox solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1183();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2183();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3183();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4183();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5183();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6183();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_2 = sibling(node_4);
      var path_3 = sibling(path_2);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(DropboxSolid);
  DropboxSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var DropboxSolid_default = DropboxSolid;
DropboxSolid.filename = ".../flowbite-svelte-icons/dist/DropboxSolid.svelte";
mark_module_end(DropboxSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/EditOutline.svelte
mark_module_start();
var root_2184 = svg_template(`<title> </title>`);
var root_3184 = svg_template(`<desc> </desc>`);
var root_1184 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m14.304 4.844 2.852 2.852M7 7H4a1 1 0 0 0-1 1v10a1 1 0 0 0 1 1h11a1 1 0 0 0 1-1v-4.5m2.409-9.91a2.017 2.017 0 0 1 0 2.853l-6.844 6.844L8 14l.713-3.565 6.844-6.844a2.015 2.015 0 0 1 2.852 0Z"></path></svg>`);
var root_5184 = svg_template(`<title> </title>`);
var root_6184 = svg_template(`<desc> </desc>`);
var root_4184 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m14.304 4.844 2.852 2.852M7 7H4a1 1 0 0 0-1 1v10a1 1 0 0 0 1 1h11a1 1 0 0 0 1-1v-4.5m2.409-9.91a2.017 2.017 0 0 1 0 2.853l-6.844 6.844L8 14l.713-3.565 6.844-6.844a2.015 2.015 0 0 1 2.852 0Z"></path></svg>`);
function EditOutline($$anchor, $$props) {
  if (new.target === EditOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, EditOutline);
  validate_prop_bindings($$props, [], [], EditOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "edit outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1184();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2184();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3184();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4184();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5184();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6184();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(EditOutline);
  EditOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var EditOutline_default = EditOutline;
EditOutline.filename = ".../flowbite-svelte-icons/dist/EditOutline.svelte";
mark_module_end(EditOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/EditSolid.svelte
mark_module_start();
var root_2185 = svg_template(`<title> </title>`);
var root_3185 = svg_template(`<desc> </desc>`);
var root_1185 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M11.32 6.176H5c-1.105 0-2 .949-2 2.118v10.588C3 20.052 3.895 21 5 21h11c1.105 0 2-.948 2-2.118v-7.75l-3.914 4.144A2.46 2.46 0 0 1 12.81 16l-2.681.568c-1.75.37-3.292-1.263-2.942-3.115l.536-2.839c.097-.512.335-.983.684-1.352l2.914-3.086Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M19.846 4.318a2.148 2.148 0 0 0-.437-.692 2.014 2.014 0 0 0-.654-.463 1.92 1.92 0 0 0-1.544 0 2.014 2.014 0 0 0-.654.463l-.546.578 2.852 3.02.546-.579a2.14 2.14 0 0 0 .437-.692 2.244 2.244 0 0 0 0-1.635ZM17.45 8.721 14.597 5.7 9.82 10.76a.54.54 0 0 0-.137.27l-.536 2.84c-.07.37.239.696.588.622l2.682-.567a.492.492 0 0 0 .255-.145l4.778-5.06Z" clip-rule="evenodd"></path></svg>`);
var root_5185 = svg_template(`<title> </title>`);
var root_6185 = svg_template(`<desc> </desc>`);
var root_4185 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M11.32 6.176H5c-1.105 0-2 .949-2 2.118v10.588C3 20.052 3.895 21 5 21h11c1.105 0 2-.948 2-2.118v-7.75l-3.914 4.144A2.46 2.46 0 0 1 12.81 16l-2.681.568c-1.75.37-3.292-1.263-2.942-3.115l.536-2.839c.097-.512.335-.983.684-1.352l2.914-3.086Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M19.846 4.318a2.148 2.148 0 0 0-.437-.692 2.014 2.014 0 0 0-.654-.463 1.92 1.92 0 0 0-1.544 0 2.014 2.014 0 0 0-.654.463l-.546.578 2.852 3.02.546-.579a2.14 2.14 0 0 0 .437-.692 2.244 2.244 0 0 0 0-1.635ZM17.45 8.721 14.597 5.7 9.82 10.76a.54.54 0 0 0-.137.27l-.536 2.84c-.07.37.239.696.588.622l2.682-.567a.492.492 0 0 0 .255-.145l4.778-5.06Z" clip-rule="evenodd"></path></svg>`);
function EditSolid($$anchor, $$props) {
  if (new.target === EditSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, EditSolid);
  validate_prop_bindings($$props, [], [], EditSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "edit solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1185();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2185();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3185();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4185();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5185();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6185();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_2 = sibling(node_4);
      var path_3 = sibling(path_2);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(EditSolid);
  EditSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var EditSolid_default = EditSolid;
EditSolid.filename = ".../flowbite-svelte-icons/dist/EditSolid.svelte";
mark_module_end(EditSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/EnvelopeOpenOutline.svelte
mark_module_start();
var root_2186 = svg_template(`<title> </title>`);
var root_3186 = svg_template(`<desc> </desc>`);
var root_1186 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M21 8v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8m18 0-8.029-4.46a2 2 0 0 0-1.942 0L3 8m18 0-9 6.5L3 8"></path></svg>`);
var root_5186 = svg_template(`<title> </title>`);
var root_6186 = svg_template(`<desc> </desc>`);
var root_4186 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M21 8v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8m18 0-8.029-4.46a2 2 0 0 0-1.942 0L3 8m18 0-9 6.5L3 8"></path></svg>`);
function EnvelopeOpenOutline($$anchor, $$props) {
  if (new.target === EnvelopeOpenOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, EnvelopeOpenOutline);
  validate_prop_bindings($$props, [], [], EnvelopeOpenOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "envelope open outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1186();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2186();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3186();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4186();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5186();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6186();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(EnvelopeOpenOutline);
  EnvelopeOpenOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var EnvelopeOpenOutline_default = EnvelopeOpenOutline;
EnvelopeOpenOutline.filename = ".../flowbite-svelte-icons/dist/EnvelopeOpenOutline.svelte";
mark_module_end(EnvelopeOpenOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/EnvelopeOpenSolid.svelte
mark_module_start();
var root_2187 = svg_template(`<title> </title>`);
var root_3187 = svg_template(`<desc> </desc>`);
var root_1187 = svg_template(`<svg><!><!><path d="m3.62 6.389 8.396 6.724 8.638-6.572-7.69-4.29a1.975 1.975 0 0 0-1.928 0L3.62 6.39Z"></path><path d="m22 8.053-8.784 6.683a1.978 1.978 0 0 1-2.44-.031L2.02 7.693a1.091 1.091 0 0 0-.019.199v11.065C2 20.637 3.343 22 5 22h14c1.657 0 3-1.362 3-3.043V8.053Z"></path></svg>`);
var root_5187 = svg_template(`<title> </title>`);
var root_6187 = svg_template(`<desc> </desc>`);
var root_4187 = svg_template(`<svg><!><!><path d="m3.62 6.389 8.396 6.724 8.638-6.572-7.69-4.29a1.975 1.975 0 0 0-1.928 0L3.62 6.39Z"></path><path d="m22 8.053-8.784 6.683a1.978 1.978 0 0 1-2.44-.031L2.02 7.693a1.091 1.091 0 0 0-.019.199v11.065C2 20.637 3.343 22 5 22h14c1.657 0 3-1.362 3-3.043V8.053Z"></path></svg>`);
function EnvelopeOpenSolid($$anchor, $$props) {
  if (new.target === EnvelopeOpenSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, EnvelopeOpenSolid);
  validate_prop_bindings($$props, [], [], EnvelopeOpenSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "envelope open solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1187();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2187();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3187();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4187();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5187();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6187();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_2 = sibling(node_4);
      var path_3 = sibling(path_2);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(EnvelopeOpenSolid);
  EnvelopeOpenSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var EnvelopeOpenSolid_default = EnvelopeOpenSolid;
EnvelopeOpenSolid.filename = ".../flowbite-svelte-icons/dist/EnvelopeOpenSolid.svelte";
mark_module_end(EnvelopeOpenSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/EnvelopeOutline.svelte
mark_module_start();
var root_2188 = svg_template(`<title> </title>`);
var root_3188 = svg_template(`<desc> </desc>`);
var root_1188 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" d="m3.5 5.5 7.893 6.036a1 1 0 0 0 1.214 0L20.5 5.5M4 19h16a1 1 0 0 0 1-1V6a1 1 0 0 0-1-1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1Z"></path></svg>`);
var root_5188 = svg_template(`<title> </title>`);
var root_6188 = svg_template(`<desc> </desc>`);
var root_4188 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" d="m3.5 5.5 7.893 6.036a1 1 0 0 0 1.214 0L20.5 5.5M4 19h16a1 1 0 0 0 1-1V6a1 1 0 0 0-1-1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1Z"></path></svg>`);
function EnvelopeOutline($$anchor, $$props) {
  if (new.target === EnvelopeOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, EnvelopeOutline);
  validate_prop_bindings($$props, [], [], EnvelopeOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "envelope outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1188();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2188();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3188();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4188();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5188();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6188();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(EnvelopeOutline);
  EnvelopeOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var EnvelopeOutline_default = EnvelopeOutline;
EnvelopeOutline.filename = ".../flowbite-svelte-icons/dist/EnvelopeOutline.svelte";
mark_module_end(EnvelopeOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/EnvelopeSolid.svelte
mark_module_start();
var root_2189 = svg_template(`<title> </title>`);
var root_3189 = svg_template(`<desc> </desc>`);
var root_1189 = svg_template(`<svg><!><!><path d="M2.038 5.61A2.01 2.01 0 0 0 2 6v12a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V6c0-.12-.01-.238-.03-.352l-.866.65-7.89 6.032a2 2 0 0 1-2.429 0L2.884 6.288l-.846-.677Z"></path><path d="M20.677 4.117A1.996 1.996 0 0 0 20 4H4c-.225 0-.44.037-.642.105l.758.607L12 10.742 19.9 4.7l.777-.583Z"></path></svg>`);
var root_5189 = svg_template(`<title> </title>`);
var root_6189 = svg_template(`<desc> </desc>`);
var root_4189 = svg_template(`<svg><!><!><path d="M2.038 5.61A2.01 2.01 0 0 0 2 6v12a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V6c0-.12-.01-.238-.03-.352l-.866.65-7.89 6.032a2 2 0 0 1-2.429 0L2.884 6.288l-.846-.677Z"></path><path d="M20.677 4.117A1.996 1.996 0 0 0 20 4H4c-.225 0-.44.037-.642.105l.758.607L12 10.742 19.9 4.7l.777-.583Z"></path></svg>`);
function EnvelopeSolid($$anchor, $$props) {
  if (new.target === EnvelopeSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, EnvelopeSolid);
  validate_prop_bindings($$props, [], [], EnvelopeSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "envelope solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1189();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2189();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3189();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4189();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5189();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6189();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_2 = sibling(node_4);
      var path_3 = sibling(path_2);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(EnvelopeSolid);
  EnvelopeSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var EnvelopeSolid_default = EnvelopeSolid;
EnvelopeSolid.filename = ".../flowbite-svelte-icons/dist/EnvelopeSolid.svelte";
mark_module_end(EnvelopeSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/EuroOutline.svelte
mark_module_start();
var root_2190 = svg_template(`<title> </title>`);
var root_3190 = svg_template(`<desc> </desc>`);
var root_1190 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M6 10h9.231M6 14h9.231M18 5.086A5.95 5.95 0 0 0 14.615 4c-3.738 0-6.769 3.582-6.769 8s3.031 8 6.769 8A5.94 5.94 0 0 0 18 18.916"></path></svg>`);
var root_5190 = svg_template(`<title> </title>`);
var root_6190 = svg_template(`<desc> </desc>`);
var root_4190 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M6 10h9.231M6 14h9.231M18 5.086A5.95 5.95 0 0 0 14.615 4c-3.738 0-6.769 3.582-6.769 8s3.031 8 6.769 8A5.94 5.94 0 0 0 18 18.916"></path></svg>`);
function EuroOutline($$anchor, $$props) {
  if (new.target === EuroOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, EuroOutline);
  validate_prop_bindings($$props, [], [], EuroOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "euro outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1190();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2190();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3190();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4190();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5190();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6190();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(EuroOutline);
  EuroOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var EuroOutline_default = EuroOutline;
EuroOutline.filename = ".../flowbite-svelte-icons/dist/EuroOutline.svelte";
mark_module_end(EuroOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ExclamationCircleOutline.svelte
mark_module_start();
var root_2191 = svg_template(`<title> </title>`);
var root_3191 = svg_template(`<desc> </desc>`);
var root_1191 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12 13V8m0 8h.01M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"></path></svg>`);
var root_5191 = svg_template(`<title> </title>`);
var root_6191 = svg_template(`<desc> </desc>`);
var root_4191 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12 13V8m0 8h.01M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"></path></svg>`);
function ExclamationCircleOutline($$anchor, $$props) {
  if (new.target === ExclamationCircleOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ExclamationCircleOutline);
  validate_prop_bindings($$props, [], [], ExclamationCircleOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "exclamation circle outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1191();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2191();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3191();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4191();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5191();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6191();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ExclamationCircleOutline);
  ExclamationCircleOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ExclamationCircleOutline_default = ExclamationCircleOutline;
ExclamationCircleOutline.filename = ".../flowbite-svelte-icons/dist/ExclamationCircleOutline.svelte";
mark_module_end(ExclamationCircleOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ExclamationCircleSolid.svelte
mark_module_start();
var root_2192 = svg_template(`<title> </title>`);
var root_3192 = svg_template(`<desc> </desc>`);
var root_1192 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M2 12C2 6.477 6.477 2 12 2s10 4.477 10 10-4.477 10-10 10S2 17.523 2 12Zm11-4a1 1 0 1 0-2 0v5a1 1 0 1 0 2 0V8Zm-1 7a1 1 0 1 0 0 2h.01a1 1 0 1 0 0-2H12Z" clip-rule="evenodd"></path></svg>`);
var root_5192 = svg_template(`<title> </title>`);
var root_6192 = svg_template(`<desc> </desc>`);
var root_4192 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M2 12C2 6.477 6.477 2 12 2s10 4.477 10 10-4.477 10-10 10S2 17.523 2 12Zm11-4a1 1 0 1 0-2 0v5a1 1 0 1 0 2 0V8Zm-1 7a1 1 0 1 0 0 2h.01a1 1 0 1 0 0-2H12Z" clip-rule="evenodd"></path></svg>`);
function ExclamationCircleSolid($$anchor, $$props) {
  if (new.target === ExclamationCircleSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ExclamationCircleSolid);
  validate_prop_bindings($$props, [], [], ExclamationCircleSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "exclamation circle solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1192();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2192();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3192();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4192();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5192();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6192();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ExclamationCircleSolid);
  ExclamationCircleSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ExclamationCircleSolid_default = ExclamationCircleSolid;
ExclamationCircleSolid.filename = ".../flowbite-svelte-icons/dist/ExclamationCircleSolid.svelte";
mark_module_end(ExclamationCircleSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ExpandOutline.svelte
mark_module_start();
var root_2193 = svg_template(`<title> </title>`);
var root_3193 = svg_template(`<desc> </desc>`);
var root_1193 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M8 4H4m0 0v4m0-4 5 5m7-5h4m0 0v4m0-4-5 5M8 20H4m0 0v-4m0 4 5-5m7 5h4m0 0v-4m0 4-5-5"></path></svg>`);
var root_5193 = svg_template(`<title> </title>`);
var root_6193 = svg_template(`<desc> </desc>`);
var root_4193 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M8 4H4m0 0v4m0-4 5 5m7-5h4m0 0v4m0-4-5 5M8 20H4m0 0v-4m0 4 5-5m7 5h4m0 0v-4m0 4-5-5"></path></svg>`);
function ExpandOutline($$anchor, $$props) {
  if (new.target === ExpandOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ExpandOutline);
  validate_prop_bindings($$props, [], [], ExpandOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "expand outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1193();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2193();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3193();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4193();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5193();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6193();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ExpandOutline);
  ExpandOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ExpandOutline_default = ExpandOutline;
ExpandOutline.filename = ".../flowbite-svelte-icons/dist/ExpandOutline.svelte";
mark_module_end(ExpandOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/EyeOutline.svelte
mark_module_start();
var root_2194 = svg_template(`<title> </title>`);
var root_3194 = svg_template(`<desc> </desc>`);
var root_1194 = svg_template(`<svg><!><!><path stroke="currentColor" d="M21 12c0 1.2-4.03 6-9 6s-9-4.8-9-6c0-1.2 4.03-6 9-6s9 4.8 9 6Z"></path><path stroke="currentColor" d="M15 12a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"></path></svg>`);
var root_5194 = svg_template(`<title> </title>`);
var root_6194 = svg_template(`<desc> </desc>`);
var root_4194 = svg_template(`<svg><!><!><path stroke="currentColor" d="M21 12c0 1.2-4.03 6-9 6s-9-4.8-9-6c0-1.2 4.03-6 9-6s9 4.8 9 6Z"></path><path stroke="currentColor" d="M15 12a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"></path></svg>`);
function EyeOutline($$anchor, $$props) {
  if (new.target === EyeOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, EyeOutline);
  validate_prop_bindings($$props, [], [], EyeOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "eye outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1194();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2194();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3194();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4194();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5194();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6194();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_2 = sibling(node_4);
      var path_3 = sibling(path_2);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_2, "stroke-width", strokeWidth());
        set_attribute(path_3, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(EyeOutline);
  EyeOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var EyeOutline_default = EyeOutline;
EyeOutline.filename = ".../flowbite-svelte-icons/dist/EyeOutline.svelte";
mark_module_end(EyeOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/EyeSlashOutline.svelte
mark_module_start();
var root_2195 = svg_template(`<title> </title>`);
var root_3195 = svg_template(`<desc> </desc>`);
var root_1195 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M3.933 13.909A4.357 4.357 0 0 1 3 12c0-1 4-6 9-6m7.6 3.8A5.068 5.068 0 0 1 21 12c0 1-3 6-9 6-.314 0-.62-.014-.918-.04M5 19 19 5m-4 7a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"></path></svg>`);
var root_5195 = svg_template(`<title> </title>`);
var root_6195 = svg_template(`<desc> </desc>`);
var root_4195 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M3.933 13.909A4.357 4.357 0 0 1 3 12c0-1 4-6 9-6m7.6 3.8A5.068 5.068 0 0 1 21 12c0 1-3 6-9 6-.314 0-.62-.014-.918-.04M5 19 19 5m-4 7a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"></path></svg>`);
function EyeSlashOutline($$anchor, $$props) {
  if (new.target === EyeSlashOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, EyeSlashOutline);
  validate_prop_bindings($$props, [], [], EyeSlashOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "eye slash outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1195();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2195();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3195();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4195();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5195();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6195();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(EyeSlashOutline);
  EyeSlashOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var EyeSlashOutline_default = EyeSlashOutline;
EyeSlashOutline.filename = ".../flowbite-svelte-icons/dist/EyeSlashOutline.svelte";
mark_module_end(EyeSlashOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/EyeSlashSolid.svelte
mark_module_start();
var root_2196 = svg_template(`<title> </title>`);
var root_3196 = svg_template(`<desc> </desc>`);
var root_1196 = svg_template(`<svg><!><!><path d="m4 15.6 3.055-3.056A4.913 4.913 0 0 1 7 12.012a5.006 5.006 0 0 1 5-5c.178.009.356.027.532.054l1.744-1.744A8.973 8.973 0 0 0 12 5.012c-5.388 0-10 5.336-10 7A6.49 6.49 0 0 0 4 15.6Z"></path><path d="m14.7 10.726 4.995-5.007A.998.998 0 0 0 18.99 4a1 1 0 0 0-.71.305l-4.995 5.007a2.98 2.98 0 0 0-.588-.21l-.035-.01a2.981 2.981 0 0 0-3.584 3.583c0 .012.008.022.01.033.05.204.12.402.211.59l-4.995 4.983a1 1 0 1 0 1.414 1.414l4.995-4.983c.189.091.386.162.59.211.011 0 .021.007.033.01a2.982 2.982 0 0 0 3.584-3.584c0-.012-.008-.023-.011-.035a3.05 3.05 0 0 0-.21-.588Z"></path><path d="m19.821 8.605-2.857 2.857a4.952 4.952 0 0 1-5.514 5.514l-1.785 1.785c.767.166 1.55.25 2.335.251 6.453 0 10-5.258 10-7 0-1.166-1.637-2.874-2.179-3.407Z"></path></svg>`);
var root_5196 = svg_template(`<title> </title>`);
var root_6196 = svg_template(`<desc> </desc>`);
var root_4196 = svg_template(`<svg><!><!><path d="m4 15.6 3.055-3.056A4.913 4.913 0 0 1 7 12.012a5.006 5.006 0 0 1 5-5c.178.009.356.027.532.054l1.744-1.744A8.973 8.973 0 0 0 12 5.012c-5.388 0-10 5.336-10 7A6.49 6.49 0 0 0 4 15.6Z"></path><path d="m14.7 10.726 4.995-5.007A.998.998 0 0 0 18.99 4a1 1 0 0 0-.71.305l-4.995 5.007a2.98 2.98 0 0 0-.588-.21l-.035-.01a2.981 2.981 0 0 0-3.584 3.583c0 .012.008.022.01.033.05.204.12.402.211.59l-4.995 4.983a1 1 0 1 0 1.414 1.414l4.995-4.983c.189.091.386.162.59.211.011 0 .021.007.033.01a2.982 2.982 0 0 0 3.584-3.584c0-.012-.008-.023-.011-.035a3.05 3.05 0 0 0-.21-.588Z"></path><path d="m19.821 8.605-2.857 2.857a4.952 4.952 0 0 1-5.514 5.514l-1.785 1.785c.767.166 1.55.25 2.335.251 6.453 0 10-5.258 10-7 0-1.166-1.637-2.874-2.179-3.407Z"></path></svg>`);
function EyeSlashSolid($$anchor, $$props) {
  if (new.target === EyeSlashSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, EyeSlashSolid);
  validate_prop_bindings($$props, [], [], EyeSlashSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "eye slash solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1196();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2196();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3196();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      var path_2 = sibling(path_1);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4196();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5196();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6196();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_3 = sibling(node_4);
      var path_4 = sibling(path_3);
      var path_5 = sibling(path_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(EyeSlashSolid);
  EyeSlashSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var EyeSlashSolid_default = EyeSlashSolid;
EyeSlashSolid.filename = ".../flowbite-svelte-icons/dist/EyeSlashSolid.svelte";
mark_module_end(EyeSlashSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/EyeSolid.svelte
mark_module_start();
var root_2197 = svg_template(`<title> </title>`);
var root_3197 = svg_template(`<desc> </desc>`);
var root_1197 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M4.998 7.78C6.729 6.345 9.198 5 12 5c2.802 0 5.27 1.345 7.002 2.78a12.713 12.713 0 0 1 2.096 2.183c.253.344.465.682.618.997.14.286.284.658.284 1.04s-.145.754-.284 1.04a6.6 6.6 0 0 1-.618.997 12.712 12.712 0 0 1-2.096 2.183C17.271 17.655 14.802 19 12 19c-2.802 0-5.27-1.345-7.002-2.78a12.712 12.712 0 0 1-2.096-2.183 6.6 6.6 0 0 1-.618-.997C2.144 12.754 2 12.382 2 12s.145-.754.284-1.04c.153-.315.365-.653.618-.997A12.714 12.714 0 0 1 4.998 7.78ZM12 15a3 3 0 1 0 0-6 3 3 0 0 0 0 6Z" clip-rule="evenodd"></path></svg>`);
var root_5197 = svg_template(`<title> </title>`);
var root_6197 = svg_template(`<desc> </desc>`);
var root_4197 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M4.998 7.78C6.729 6.345 9.198 5 12 5c2.802 0 5.27 1.345 7.002 2.78a12.713 12.713 0 0 1 2.096 2.183c.253.344.465.682.618.997.14.286.284.658.284 1.04s-.145.754-.284 1.04a6.6 6.6 0 0 1-.618.997 12.712 12.712 0 0 1-2.096 2.183C17.271 17.655 14.802 19 12 19c-2.802 0-5.27-1.345-7.002-2.78a12.712 12.712 0 0 1-2.096-2.183 6.6 6.6 0 0 1-.618-.997C2.144 12.754 2 12.382 2 12s.145-.754.284-1.04c.153-.315.365-.653.618-.997A12.714 12.714 0 0 1 4.998 7.78ZM12 15a3 3 0 1 0 0-6 3 3 0 0 0 0 6Z" clip-rule="evenodd"></path></svg>`);
function EyeSolid($$anchor, $$props) {
  if (new.target === EyeSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, EyeSolid);
  validate_prop_bindings($$props, [], [], EyeSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "eye solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1197();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2197();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3197();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4197();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5197();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6197();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(EyeSolid);
  EyeSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var EyeSolid_default = EyeSolid;
EyeSolid.filename = ".../flowbite-svelte-icons/dist/EyeSolid.svelte";
mark_module_end(EyeSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FaceExplodeOutline.svelte
mark_module_start();
var root_2198 = svg_template(`<title> </title>`);
var root_3198 = svg_template(`<desc> </desc>`);
var root_1198 = svg_template(`<svg><!><!><path fill="currentColor" d="M12 17a2 2 0 0 1 2 2h-4a2 2 0 0 1 2-2Z"></path><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M13.815 9H16.5a2 2 0 1 0-1.03-3.707A1.87 1.87 0 0 0 15.5 5 1.992 1.992 0 0 0 12 3.69 1.992 1.992 0 0 0 8.5 5c.002.098.012.196.03.293A2 2 0 1 0 7.5 9h3.388m2.927-.985v3.604M10.228 9v2.574M15 16h.01M9 16h.01m11.962-4.426a1.805 1.805 0 0 1-1.74 1.326 1.893 1.893 0 0 1-1.811-1.326 1.9 1.9 0 0 1-3.621 0 1.8 1.8 0 0 1-1.749 1.326 1.98 1.98 0 0 1-1.87-1.326A1.763 1.763 0 0 1 8.46 12.9a2.035 2.035 0 0 1-1.905-1.326A1.9 1.9 0 0 1 4.74 12.9 1.805 1.805 0 0 1 3 11.574V12a9 9 0 0 0 18 0l-.028-.426Z"></path></svg>`);
var root_5198 = svg_template(`<title> </title>`);
var root_6198 = svg_template(`<desc> </desc>`);
var root_4198 = svg_template(`<svg><!><!><path fill="currentColor" d="M12 17a2 2 0 0 1 2 2h-4a2 2 0 0 1 2-2Z"></path><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M13.815 9H16.5a2 2 0 1 0-1.03-3.707A1.87 1.87 0 0 0 15.5 5 1.992 1.992 0 0 0 12 3.69 1.992 1.992 0 0 0 8.5 5c.002.098.012.196.03.293A2 2 0 1 0 7.5 9h3.388m2.927-.985v3.604M10.228 9v2.574M15 16h.01M9 16h.01m11.962-4.426a1.805 1.805 0 0 1-1.74 1.326 1.893 1.893 0 0 1-1.811-1.326 1.9 1.9 0 0 1-3.621 0 1.8 1.8 0 0 1-1.749 1.326 1.98 1.98 0 0 1-1.87-1.326A1.763 1.763 0 0 1 8.46 12.9a2.035 2.035 0 0 1-1.905-1.326A1.9 1.9 0 0 1 4.74 12.9 1.805 1.805 0 0 1 3 11.574V12a9 9 0 0 0 18 0l-.028-.426Z"></path></svg>`);
function FaceExplodeOutline($$anchor, $$props) {
  if (new.target === FaceExplodeOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FaceExplodeOutline);
  validate_prop_bindings($$props, [], [], FaceExplodeOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "face explode outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1198();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2198();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3198();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4198();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5198();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6198();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_2 = sibling(node_4);
      var path_3 = sibling(path_2);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_3, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FaceExplodeOutline);
  FaceExplodeOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FaceExplodeOutline_default = FaceExplodeOutline;
FaceExplodeOutline.filename = ".../flowbite-svelte-icons/dist/FaceExplodeOutline.svelte";
mark_module_end(FaceExplodeOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FaceExplodeSolid.svelte
mark_module_start();
var root_2199 = svg_template(`<title> </title>`);
var root_3199 = svg_template(`<desc> </desc>`);
var root_1199 = svg_template(`<svg><!><!><path d="M21.972 11.517a.527.527 0 0 0-1.034-.105 1.377 1.377 0 0 1-1.324 1.01 1.467 1.467 0 0 1-1.4-1.009.526.526 0 0 0-1.015 0 1.467 1.467 0 0 1-2.737.143l-.049-.204.021-.146V9.369h2.304a2.632 2.632 0 0 0 2.631-2.632 2.678 2.678 0 0 0-2.654-2.632l-.526.022-.13-.369A2.632 2.632 0 0 0 13.579 2c-.461 0-.915.124-1.313.358L12 2.513l-.266-.155A2.603 2.603 0 0 0 10.422 2a2.632 2.632 0 0 0-2.483 1.759l-.13.37-.518-.024a2.681 2.681 0 0 0-2.66 2.632A2.632 2.632 0 0 0 7.264 9.37H9.61v1.887l-.007.09-.028.08a1.328 1.328 0 0 1-1.301.996 1.632 1.632 0 0 1-1.502-1.024.526.526 0 0 0-1.01.013 1.474 1.474 0 0 1-1.404 1.01 1.381 1.381 0 0 1-1.325-1.01.547.547 0 0 0-.569-.382h-.008a.526.526 0 0 0-.456.526v.446a10.012 10.012 0 0 0 10 10 9.904 9.904 0 0 0 7.067-2.94A10.019 10.019 0 0 0 22 11.966l-.028-.449ZM8.316 15.685a1.053 1.053 0 1 1 2.105 0 1.053 1.053 0 0 1-2.105 0Zm1.58 3.684a2.105 2.105 0 0 1 4.21 0h-4.21Zm4.736-2.631a1.052 1.052 0 1 1 0-2.105 1.052 1.052 0 0 1 0 2.105Z"></path></svg>`);
var root_5199 = svg_template(`<title> </title>`);
var root_6199 = svg_template(`<desc> </desc>`);
var root_4199 = svg_template(`<svg><!><!><path d="M21.972 11.517a.527.527 0 0 0-1.034-.105 1.377 1.377 0 0 1-1.324 1.01 1.467 1.467 0 0 1-1.4-1.009.526.526 0 0 0-1.015 0 1.467 1.467 0 0 1-2.737.143l-.049-.204.021-.146V9.369h2.304a2.632 2.632 0 0 0 2.631-2.632 2.678 2.678 0 0 0-2.654-2.632l-.526.022-.13-.369A2.632 2.632 0 0 0 13.579 2c-.461 0-.915.124-1.313.358L12 2.513l-.266-.155A2.603 2.603 0 0 0 10.422 2a2.632 2.632 0 0 0-2.483 1.759l-.13.37-.518-.024a2.681 2.681 0 0 0-2.66 2.632A2.632 2.632 0 0 0 7.264 9.37H9.61v1.887l-.007.09-.028.08a1.328 1.328 0 0 1-1.301.996 1.632 1.632 0 0 1-1.502-1.024.526.526 0 0 0-1.01.013 1.474 1.474 0 0 1-1.404 1.01 1.381 1.381 0 0 1-1.325-1.01.547.547 0 0 0-.569-.382h-.008a.526.526 0 0 0-.456.526v.446a10.012 10.012 0 0 0 10 10 9.904 9.904 0 0 0 7.067-2.94A10.019 10.019 0 0 0 22 11.966l-.028-.449ZM8.316 15.685a1.053 1.053 0 1 1 2.105 0 1.053 1.053 0 0 1-2.105 0Zm1.58 3.684a2.105 2.105 0 0 1 4.21 0h-4.21Zm4.736-2.631a1.052 1.052 0 1 1 0-2.105 1.052 1.052 0 0 1 0 2.105Z"></path></svg>`);
function FaceExplodeSolid($$anchor, $$props) {
  if (new.target === FaceExplodeSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FaceExplodeSolid);
  validate_prop_bindings($$props, [], [], FaceExplodeSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "face explode solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1199();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2199();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3199();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4199();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5199();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6199();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FaceExplodeSolid);
  FaceExplodeSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FaceExplodeSolid_default = FaceExplodeSolid;
FaceExplodeSolid.filename = ".../flowbite-svelte-icons/dist/FaceExplodeSolid.svelte";
mark_module_end(FaceExplodeSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FaceGrinOutline.svelte
mark_module_start();
var root_2200 = svg_template(`<title> </title>`);
var root_3200 = svg_template(`<desc> </desc>`);
var root_1200 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M14.99 9H15M8.99 9H9m12 3a9 9 0 1 1-18 0 9 9 0 0 1 18 0ZM7 13c0 1 .507 2.397 1.494 3.216a5.5 5.5 0 0 0 7.022 0C16.503 15.397 17 14 17 13c0 0-1.99 1-4.995 1S7 13 7 13Z"></path></svg>`);
var root_5200 = svg_template(`<title> </title>`);
var root_6200 = svg_template(`<desc> </desc>`);
var root_4200 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M14.99 9H15M8.99 9H9m12 3a9 9 0 1 1-18 0 9 9 0 0 1 18 0ZM7 13c0 1 .507 2.397 1.494 3.216a5.5 5.5 0 0 0 7.022 0C16.503 15.397 17 14 17 13c0 0-1.99 1-4.995 1S7 13 7 13Z"></path></svg>`);
function FaceGrinOutline($$anchor, $$props) {
  if (new.target === FaceGrinOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FaceGrinOutline);
  validate_prop_bindings($$props, [], [], FaceGrinOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "face grin outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1200();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2200();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3200();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4200();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5200();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6200();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FaceGrinOutline);
  FaceGrinOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FaceGrinOutline_default = FaceGrinOutline;
FaceGrinOutline.filename = ".../flowbite-svelte-icons/dist/FaceGrinOutline.svelte";
mark_module_end(FaceGrinOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FaceGrinSolid.svelte
mark_module_start();
var root_2201 = svg_template(`<title> </title>`);
var root_3201 = svg_template(`<desc> </desc>`);
var root_1201 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M2 12C2 6.477 6.477 2 12 2s10 4.477 10 10-4.477 10-10 10S2 17.523 2 12Zm5.495.93A.5.5 0 0 0 6.5 13c0 1.19.644 2.438 1.618 3.375C9.099 17.319 10.469 18 12 18c1.531 0 2.9-.681 3.882-1.625.974-.937 1.618-2.184 1.618-3.375a.5.5 0 0 0-.995-.07.764.764 0 0 1-.156.096c-.214.106-.554.208-1.006.295-.896.173-2.111.262-3.343.262-1.232 0-2.447-.09-3.343-.262-.452-.087-.792-.19-1.005-.295a.762.762 0 0 1-.157-.096ZM8.99 8a1 1 0 0 0 0 2H9a1 1 0 1 0 0-2h-.01Zm6 0a1 1 0 1 0 0 2H15a1 1 0 1 0 0-2h-.01Z" clip-rule="evenodd"></path></svg>`);
var root_5201 = svg_template(`<title> </title>`);
var root_6201 = svg_template(`<desc> </desc>`);
var root_4201 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M2 12C2 6.477 6.477 2 12 2s10 4.477 10 10-4.477 10-10 10S2 17.523 2 12Zm5.495.93A.5.5 0 0 0 6.5 13c0 1.19.644 2.438 1.618 3.375C9.099 17.319 10.469 18 12 18c1.531 0 2.9-.681 3.882-1.625.974-.937 1.618-2.184 1.618-3.375a.5.5 0 0 0-.995-.07.764.764 0 0 1-.156.096c-.214.106-.554.208-1.006.295-.896.173-2.111.262-3.343.262-1.232 0-2.447-.09-3.343-.262-.452-.087-.792-.19-1.005-.295a.762.762 0 0 1-.157-.096ZM8.99 8a1 1 0 0 0 0 2H9a1 1 0 1 0 0-2h-.01Zm6 0a1 1 0 1 0 0 2H15a1 1 0 1 0 0-2h-.01Z" clip-rule="evenodd"></path></svg>`);
function FaceGrinSolid($$anchor, $$props) {
  if (new.target === FaceGrinSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FaceGrinSolid);
  validate_prop_bindings($$props, [], [], FaceGrinSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "face grin solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1201();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2201();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3201();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4201();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5201();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6201();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FaceGrinSolid);
  FaceGrinSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FaceGrinSolid_default = FaceGrinSolid;
FaceGrinSolid.filename = ".../flowbite-svelte-icons/dist/FaceGrinSolid.svelte";
mark_module_end(FaceGrinSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FaceGrinStarsOutline.svelte
mark_module_start();
var root_2202 = svg_template(`<title> </title>`);
var root_3202 = svg_template(`<desc> </desc>`);
var root_1202 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12 21a9 9 0 1 0 0-18 9 9 0 0 0 0 18Z"></path><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M17 13c0 2.038-2.239 4.5-5 4.5S7 15.038 7 13c0 1.444 10 1.444 10 0Z"></path><path fill="currentColor" d="m9 6.811.618 1.253 1.382.2-1 .975.236 1.377L9 9.966l-1.236.65L8 9.239l-1-.975 1.382-.2L9 6.811Zm6 0 .618 1.253 1.382.2-1 .975.236 1.377L15 9.966l-1.236.65L14 9.239l-1-.975 1.382-.2L15 6.811Z"></path><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m9 6.811.618 1.253 1.382.2-1 .975.236 1.377L9 9.966l-1.236.65L8 9.239l-1-.975 1.382-.2L9 6.811Zm6 0 .618 1.253 1.382.2-1 .975.236 1.377L15 9.966l-1.236.65L14 9.239l-1-.975 1.382-.2L15 6.811Z"></path></svg>`);
var root_5202 = svg_template(`<title> </title>`);
var root_6202 = svg_template(`<desc> </desc>`);
var root_4202 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12 21a9 9 0 1 0 0-18 9 9 0 0 0 0 18Z"></path><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M17 13c0 2.038-2.239 4.5-5 4.5S7 15.038 7 13c0 1.444 10 1.444 10 0Z"></path><path fill="currentColor" d="m9 6.811.618 1.253 1.382.2-1 .975.236 1.377L9 9.966l-1.236.65L8 9.239l-1-.975 1.382-.2L9 6.811Zm6 0 .618 1.253 1.382.2-1 .975.236 1.377L15 9.966l-1.236.65L14 9.239l-1-.975 1.382-.2L15 6.811Z"></path><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m9 6.811.618 1.253 1.382.2-1 .975.236 1.377L9 9.966l-1.236.65L8 9.239l-1-.975 1.382-.2L9 6.811Zm6 0 .618 1.253 1.382.2-1 .975.236 1.377L15 9.966l-1.236.65L14 9.239l-1-.975 1.382-.2L15 6.811Z"></path></svg>`);
function FaceGrinStarsOutline($$anchor, $$props) {
  if (new.target === FaceGrinStarsOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FaceGrinStarsOutline);
  validate_prop_bindings($$props, [], [], FaceGrinStarsOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "face grin stars outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1202();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2202();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3202();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      var path_2 = sibling(path_1);
      var path_3 = sibling(path_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4202();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5202();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6202();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_4 = sibling(node_4);
      var path_5 = sibling(path_4);
      var path_6 = sibling(path_5);
      var path_7 = sibling(path_6);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_4, "stroke-width", strokeWidth());
        set_attribute(path_5, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FaceGrinStarsOutline);
  FaceGrinStarsOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FaceGrinStarsOutline_default = FaceGrinStarsOutline;
FaceGrinStarsOutline.filename = ".../flowbite-svelte-icons/dist/FaceGrinStarsOutline.svelte";
mark_module_end(FaceGrinStarsOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FaceGrinStarsSolid.svelte
mark_module_start();
var root_2203 = svg_template(`<title> </title>`);
var root_3203 = svg_template(`<desc> </desc>`);
var root_1203 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M12 2C6.477 2 2 6.477 2 12s4.477 10 10 10 10-4.477 10-10S17.523 2 12 2ZM7 12.5a.5.5 0 0 1 .495.43.762.762 0 0 0 .157.096c.213.106.553.208 1.005.295.896.173 2.111.262 3.343.262 1.232 0 2.447-.09 3.343-.262.452-.087.792-.19 1.006-.295a.764.764 0 0 0 .156-.096.5.5 0 0 1 .995.07c0 1.19-.644 2.438-1.618 3.375C14.9 17.319 13.531 18 12 18c-1.531 0-2.9-.681-3.882-1.625C7.144 15.438 6.5 14.19 6.5 13a.5.5 0 0 1 .5-.5Zm9.519.417.003-.004-.003.004Zm-9.038 0a.017.017 0 0 1-.003-.004l.003.004Zm.901-4.853L9 6.81l.619 1.253 1.381.2-1 .976.236 1.376-1.237-.65-1.235.65L8 9.239l-1-.975 1.382-.2Zm6 0L15 6.81l.619 1.253 1.381.2-1 .976.236 1.376-1.237-.65-1.235.65L14 9.239l-1-.975 1.382-.2Z" clip-rule="evenodd"></path></svg>`);
var root_5203 = svg_template(`<title> </title>`);
var root_6203 = svg_template(`<desc> </desc>`);
var root_4203 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M12 2C6.477 2 2 6.477 2 12s4.477 10 10 10 10-4.477 10-10S17.523 2 12 2ZM7 12.5a.5.5 0 0 1 .495.43.762.762 0 0 0 .157.096c.213.106.553.208 1.005.295.896.173 2.111.262 3.343.262 1.232 0 2.447-.09 3.343-.262.452-.087.792-.19 1.006-.295a.764.764 0 0 0 .156-.096.5.5 0 0 1 .995.07c0 1.19-.644 2.438-1.618 3.375C14.9 17.319 13.531 18 12 18c-1.531 0-2.9-.681-3.882-1.625C7.144 15.438 6.5 14.19 6.5 13a.5.5 0 0 1 .5-.5Zm9.519.417.003-.004-.003.004Zm-9.038 0a.017.017 0 0 1-.003-.004l.003.004Zm.901-4.853L9 6.81l.619 1.253 1.381.2-1 .976.236 1.376-1.237-.65-1.235.65L8 9.239l-1-.975 1.382-.2Zm6 0L15 6.81l.619 1.253 1.381.2-1 .976.236 1.376-1.237-.65-1.235.65L14 9.239l-1-.975 1.382-.2Z" clip-rule="evenodd"></path></svg>`);
function FaceGrinStarsSolid($$anchor, $$props) {
  if (new.target === FaceGrinStarsSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FaceGrinStarsSolid);
  validate_prop_bindings($$props, [], [], FaceGrinStarsSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "face grin stars solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1203();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2203();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3203();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4203();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5203();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6203();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FaceGrinStarsSolid);
  FaceGrinStarsSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FaceGrinStarsSolid_default = FaceGrinStarsSolid;
FaceGrinStarsSolid.filename = ".../flowbite-svelte-icons/dist/FaceGrinStarsSolid.svelte";
mark_module_end(FaceGrinStarsSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FaceLaughOutline.svelte
mark_module_start();
var root_2204 = svg_template(`<title> </title>`);
var root_3204 = svg_template(`<desc> </desc>`);
var root_1204 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M15 9h.01M8.99 9H9m12 3a9 9 0 1 1-18 0 9 9 0 0 1 18 0ZM6.6 13a5.5 5.5 0 0 0 10.81 0H6.6Z"></path></svg>`);
var root_5204 = svg_template(`<title> </title>`);
var root_6204 = svg_template(`<desc> </desc>`);
var root_4204 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M15 9h.01M8.99 9H9m12 3a9 9 0 1 1-18 0 9 9 0 0 1 18 0ZM6.6 13a5.5 5.5 0 0 0 10.81 0H6.6Z"></path></svg>`);
function FaceLaughOutline($$anchor, $$props) {
  if (new.target === FaceLaughOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FaceLaughOutline);
  validate_prop_bindings($$props, [], [], FaceLaughOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "face laugh outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1204();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2204();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3204();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4204();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5204();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6204();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FaceLaughOutline);
  FaceLaughOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FaceLaughOutline_default = FaceLaughOutline;
FaceLaughOutline.filename = ".../flowbite-svelte-icons/dist/FaceLaughOutline.svelte";
mark_module_end(FaceLaughOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FaceLaughSolid.svelte
mark_module_start();
var root_2205 = svg_template(`<title> </title>`);
var root_3205 = svg_template(`<desc> </desc>`);
var root_1205 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M12 2C6.477 2 2 6.477 2 12s4.477 10 10 10 10-4.477 10-10S17.523 2 12 2ZM7.99 9a1 1 0 0 1 1-1H9a1 1 0 0 1 0 2h-.01a1 1 0 0 1-1-1ZM14 9a1 1 0 0 1 1-1h.01a1 1 0 1 1 0 2H15a1 1 0 0 1-1-1Zm-5.506 7.216A5.5 5.5 0 0 1 6.6 13h10.81a5.5 5.5 0 0 1-8.916 3.216Z" clip-rule="evenodd"></path></svg>`);
var root_5205 = svg_template(`<title> </title>`);
var root_6205 = svg_template(`<desc> </desc>`);
var root_4205 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M12 2C6.477 2 2 6.477 2 12s4.477 10 10 10 10-4.477 10-10S17.523 2 12 2ZM7.99 9a1 1 0 0 1 1-1H9a1 1 0 0 1 0 2h-.01a1 1 0 0 1-1-1ZM14 9a1 1 0 0 1 1-1h.01a1 1 0 1 1 0 2H15a1 1 0 0 1-1-1Zm-5.506 7.216A5.5 5.5 0 0 1 6.6 13h10.81a5.5 5.5 0 0 1-8.916 3.216Z" clip-rule="evenodd"></path></svg>`);
function FaceLaughSolid($$anchor, $$props) {
  if (new.target === FaceLaughSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FaceLaughSolid);
  validate_prop_bindings($$props, [], [], FaceLaughSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "face laugh solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1205();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2205();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3205();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4205();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5205();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6205();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FaceLaughSolid);
  FaceLaughSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FaceLaughSolid_default = FaceLaughSolid;
FaceLaughSolid.filename = ".../flowbite-svelte-icons/dist/FaceLaughSolid.svelte";
mark_module_end(FaceLaughSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FacebookSolid.svelte
mark_module_start();
var root_2206 = svg_template(`<title> </title>`);
var root_3206 = svg_template(`<desc> </desc>`);
var root_1206 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M13.135 6H15V3h-1.865a4.147 4.147 0 0 0-4.142 4.142V9H7v3h2v9.938h3V12h2.021l.592-3H12V6.591A.6.6 0 0 1 12.592 6h.543Z" clip-rule="evenodd"></path></svg>`);
var root_5206 = svg_template(`<title> </title>`);
var root_6206 = svg_template(`<desc> </desc>`);
var root_4206 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M13.135 6H15V3h-1.865a4.147 4.147 0 0 0-4.142 4.142V9H7v3h2v9.938h3V12h2.021l.592-3H12V6.591A.6.6 0 0 1 12.592 6h.543Z" clip-rule="evenodd"></path></svg>`);
function FacebookSolid($$anchor, $$props) {
  if (new.target === FacebookSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FacebookSolid);
  validate_prop_bindings($$props, [], [], FacebookSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "facebook solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1206();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2206();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3206();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4206();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5206();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6206();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FacebookSolid);
  FacebookSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FacebookSolid_default = FacebookSolid;
FacebookSolid.filename = ".../flowbite-svelte-icons/dist/FacebookSolid.svelte";
mark_module_end(FacebookSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FileChartBarOutline.svelte
mark_module_start();
var root_2207 = svg_template(`<title> </title>`);
var root_3207 = svg_template(`<desc> </desc>`);
var root_1207 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M10 3v4a1 1 0 0 1-1 1H5m4 10v-2m3 2v-6m3 6v-3m4-11v16a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V7.914a1 1 0 0 1 .293-.707l3.914-3.914A1 1 0 0 1 9.914 3H18a1 1 0 0 1 1 1Z"></path></svg>`);
var root_5207 = svg_template(`<title> </title>`);
var root_6207 = svg_template(`<desc> </desc>`);
var root_4207 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M10 3v4a1 1 0 0 1-1 1H5m4 10v-2m3 2v-6m3 6v-3m4-11v16a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V7.914a1 1 0 0 1 .293-.707l3.914-3.914A1 1 0 0 1 9.914 3H18a1 1 0 0 1 1 1Z"></path></svg>`);
function FileChartBarOutline($$anchor, $$props) {
  if (new.target === FileChartBarOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FileChartBarOutline);
  validate_prop_bindings($$props, [], [], FileChartBarOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "file chart bar outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1207();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2207();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3207();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4207();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5207();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6207();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FileChartBarOutline);
  FileChartBarOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FileChartBarOutline_default = FileChartBarOutline;
FileChartBarOutline.filename = ".../flowbite-svelte-icons/dist/FileChartBarOutline.svelte";
mark_module_end(FileChartBarOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FileChartBarSolid.svelte
mark_module_start();
var root_2208 = svg_template(`<title> </title>`);
var root_3208 = svg_template(`<desc> </desc>`);
var root_1208 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M9 7V2.221a2 2 0 0 0-.5.365L4.586 6.5a2 2 0 0 0-.365.5H9Zm2 0V2h7a2 2 0 0 1 2 2v16a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V9h5a2 2 0 0 0 2-2Zm-1 9a1 1 0 1 0-2 0v2a1 1 0 1 0 2 0v-2Zm2-5a1 1 0 0 1 1 1v6a1 1 0 1 1-2 0v-6a1 1 0 0 1 1-1Zm4 4a1 1 0 1 0-2 0v3a1 1 0 1 0 2 0v-3Z" clip-rule="evenodd"></path></svg>`);
var root_5208 = svg_template(`<title> </title>`);
var root_6208 = svg_template(`<desc> </desc>`);
var root_4208 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M9 7V2.221a2 2 0 0 0-.5.365L4.586 6.5a2 2 0 0 0-.365.5H9Zm2 0V2h7a2 2 0 0 1 2 2v16a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V9h5a2 2 0 0 0 2-2Zm-1 9a1 1 0 1 0-2 0v2a1 1 0 1 0 2 0v-2Zm2-5a1 1 0 0 1 1 1v6a1 1 0 1 1-2 0v-6a1 1 0 0 1 1-1Zm4 4a1 1 0 1 0-2 0v3a1 1 0 1 0 2 0v-3Z" clip-rule="evenodd"></path></svg>`);
function FileChartBarSolid($$anchor, $$props) {
  if (new.target === FileChartBarSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FileChartBarSolid);
  validate_prop_bindings($$props, [], [], FileChartBarSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "file chart bar solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1208();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2208();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3208();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4208();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5208();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6208();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FileChartBarSolid);
  FileChartBarSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FileChartBarSolid_default = FileChartBarSolid;
FileChartBarSolid.filename = ".../flowbite-svelte-icons/dist/FileChartBarSolid.svelte";
mark_module_end(FileChartBarSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FileCheckOutline.svelte
mark_module_start();
var root_2209 = svg_template(`<title> </title>`);
var root_3209 = svg_template(`<desc> </desc>`);
var root_1209 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M10 3v4a1 1 0 0 1-1 1H5m4 6 2 2 4-4m4-8v16a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V7.914a1 1 0 0 1 .293-.707l3.914-3.914A1 1 0 0 1 9.914 3H18a1 1 0 0 1 1 1Z"></path></svg>`);
var root_5209 = svg_template(`<title> </title>`);
var root_6209 = svg_template(`<desc> </desc>`);
var root_4209 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M10 3v4a1 1 0 0 1-1 1H5m4 6 2 2 4-4m4-8v16a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V7.914a1 1 0 0 1 .293-.707l3.914-3.914A1 1 0 0 1 9.914 3H18a1 1 0 0 1 1 1Z"></path></svg>`);
function FileCheckOutline($$anchor, $$props) {
  if (new.target === FileCheckOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FileCheckOutline);
  validate_prop_bindings($$props, [], [], FileCheckOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "file check outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1209();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2209();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3209();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4209();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5209();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6209();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FileCheckOutline);
  FileCheckOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FileCheckOutline_default = FileCheckOutline;
FileCheckOutline.filename = ".../flowbite-svelte-icons/dist/FileCheckOutline.svelte";
mark_module_end(FileCheckOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FileCheckSolid.svelte
mark_module_start();
var root_2210 = svg_template(`<title> </title>`);
var root_3210 = svg_template(`<desc> </desc>`);
var root_1210 = svg_template(`<svg><!><!><path d="M9 7V2.221a2 2 0 0 0-.5.365L4.586 6.5a2 2 0 0 0-.365.5H9Z"></path><path fill-rule="evenodd" d="M11 7V2h7a2 2 0 0 1 2 2v16a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V9h5a2 2 0 0 0 2-2Zm4.707 5.707a1 1 0 0 0-1.414-1.414L11 14.586l-1.293-1.293a1 1 0 0 0-1.414 1.414l2 2a1 1 0 0 0 1.414 0l4-4Z" clip-rule="evenodd"></path></svg>`);
var root_5210 = svg_template(`<title> </title>`);
var root_6210 = svg_template(`<desc> </desc>`);
var root_4210 = svg_template(`<svg><!><!><path d="M9 7V2.221a2 2 0 0 0-.5.365L4.586 6.5a2 2 0 0 0-.365.5H9Z"></path><path fill-rule="evenodd" d="M11 7V2h7a2 2 0 0 1 2 2v16a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V9h5a2 2 0 0 0 2-2Zm4.707 5.707a1 1 0 0 0-1.414-1.414L11 14.586l-1.293-1.293a1 1 0 0 0-1.414 1.414l2 2a1 1 0 0 0 1.414 0l4-4Z" clip-rule="evenodd"></path></svg>`);
function FileCheckSolid($$anchor, $$props) {
  if (new.target === FileCheckSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FileCheckSolid);
  validate_prop_bindings($$props, [], [], FileCheckSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "file check solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1210();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2210();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3210();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4210();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5210();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6210();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_2 = sibling(node_4);
      var path_3 = sibling(path_2);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FileCheckSolid);
  FileCheckSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FileCheckSolid_default = FileCheckSolid;
FileCheckSolid.filename = ".../flowbite-svelte-icons/dist/FileCheckSolid.svelte";
mark_module_end(FileCheckSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FileCirclePlusOutline.svelte
mark_module_start();
var root_2211 = svg_template(`<title> </title>`);
var root_3211 = svg_template(`<desc> </desc>`);
var root_1211 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M18 9V4a1 1 0 0 0-1-1H8.914a1 1 0 0 0-.707.293L4.293 7.207A1 1 0 0 0 4 7.914V20a1 1 0 0 0 1 1h4M9 3v4a1 1 0 0 1-1 1H4m11 6v4m-2-2h4m3 0a5 5 0 1 1-10 0 5 5 0 0 1 10 0Z"></path></svg>`);
var root_5211 = svg_template(`<title> </title>`);
var root_6211 = svg_template(`<desc> </desc>`);
var root_4211 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M18 9V4a1 1 0 0 0-1-1H8.914a1 1 0 0 0-.707.293L4.293 7.207A1 1 0 0 0 4 7.914V20a1 1 0 0 0 1 1h4M9 3v4a1 1 0 0 1-1 1H4m11 6v4m-2-2h4m3 0a5 5 0 1 1-10 0 5 5 0 0 1 10 0Z"></path></svg>`);
function FileCirclePlusOutline($$anchor, $$props) {
  if (new.target === FileCirclePlusOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FileCirclePlusOutline);
  validate_prop_bindings($$props, [], [], FileCirclePlusOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "file circle plus outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1211();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2211();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3211();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4211();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5211();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6211();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FileCirclePlusOutline);
  FileCirclePlusOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FileCirclePlusOutline_default = FileCirclePlusOutline;
FileCirclePlusOutline.filename = ".../flowbite-svelte-icons/dist/FileCirclePlusOutline.svelte";
mark_module_end(FileCirclePlusOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FileCirclePlusSolid.svelte
mark_module_start();
var root_2212 = svg_template(`<title> </title>`);
var root_3212 = svg_template(`<desc> </desc>`);
var root_1212 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M9 7V2.221a2 2 0 0 0-.5.365L4.586 6.5a2 2 0 0 0-.365.5H9Zm2 0V2h7a2 2 0 0 1 2 2v6.41A7.5 7.5 0 1 0 10.5 22H6a2 2 0 0 1-2-2V9h5a2 2 0 0 0 2-2Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M9 16a6 6 0 1 1 12 0 6 6 0 0 1-12 0Zm6-3a1 1 0 0 1 1 1v1h1a1 1 0 1 1 0 2h-1v1a1 1 0 1 1-2 0v-1h-1a1 1 0 1 1 0-2h1v-1a1 1 0 0 1 1-1Z" clip-rule="evenodd"></path></svg>`);
var root_5212 = svg_template(`<title> </title>`);
var root_6212 = svg_template(`<desc> </desc>`);
var root_4212 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M9 7V2.221a2 2 0 0 0-.5.365L4.586 6.5a2 2 0 0 0-.365.5H9Zm2 0V2h7a2 2 0 0 1 2 2v6.41A7.5 7.5 0 1 0 10.5 22H6a2 2 0 0 1-2-2V9h5a2 2 0 0 0 2-2Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M9 16a6 6 0 1 1 12 0 6 6 0 0 1-12 0Zm6-3a1 1 0 0 1 1 1v1h1a1 1 0 1 1 0 2h-1v1a1 1 0 1 1-2 0v-1h-1a1 1 0 1 1 0-2h1v-1a1 1 0 0 1 1-1Z" clip-rule="evenodd"></path></svg>`);
function FileCirclePlusSolid($$anchor, $$props) {
  if (new.target === FileCirclePlusSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FileCirclePlusSolid);
  validate_prop_bindings($$props, [], [], FileCirclePlusSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "file circle plus solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1212();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2212();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3212();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4212();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5212();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6212();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_2 = sibling(node_4);
      var path_3 = sibling(path_2);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FileCirclePlusSolid);
  FileCirclePlusSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FileCirclePlusSolid_default = FileCirclePlusSolid;
FileCirclePlusSolid.filename = ".../flowbite-svelte-icons/dist/FileCirclePlusSolid.svelte";
mark_module_end(FileCirclePlusSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FileCloneOutline.svelte
mark_module_start();
var root_2213 = svg_template(`<title> </title>`);
var root_3213 = svg_template(`<desc> </desc>`);
var root_1213 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linejoin="round" d="M15 4v3a1 1 0 0 1-1 1h-3m2 10v1a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1v-7.13a1 1 0 0 1 .24-.65L6.7 8.35A1 1 0 0 1 7.46 8H9m-1 4H4m16-7v10a1 1 0 0 1-1 1h-7a1 1 0 0 1-1-1V7.87a1 1 0 0 1 .24-.65l2.46-2.87a1 1 0 0 1 .76-.35H19a1 1 0 0 1 1 1Z"></path></svg>`);
var root_5213 = svg_template(`<title> </title>`);
var root_6213 = svg_template(`<desc> </desc>`);
var root_4213 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linejoin="round" d="M15 4v3a1 1 0 0 1-1 1h-3m2 10v1a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1v-7.13a1 1 0 0 1 .24-.65L6.7 8.35A1 1 0 0 1 7.46 8H9m-1 4H4m16-7v10a1 1 0 0 1-1 1h-7a1 1 0 0 1-1-1V7.87a1 1 0 0 1 .24-.65l2.46-2.87a1 1 0 0 1 .76-.35H19a1 1 0 0 1 1 1Z"></path></svg>`);
function FileCloneOutline($$anchor, $$props) {
  if (new.target === FileCloneOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FileCloneOutline);
  validate_prop_bindings($$props, [], [], FileCloneOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "file clone outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1213();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2213();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3213();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4213();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5213();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6213();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FileCloneOutline);
  FileCloneOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FileCloneOutline_default = FileCloneOutline;
FileCloneOutline.filename = ".../flowbite-svelte-icons/dist/FileCloneOutline.svelte";
mark_module_end(FileCloneOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FileCloneSolid.svelte
mark_module_start();
var root_2214 = svg_template(`<title> </title>`);
var root_3214 = svg_template(`<desc> </desc>`);
var root_1214 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M8 12.732A1.99 1.99 0 0 1 7 13H3v6a2 2 0 0 0 2 2h7a2 2 0 0 0 2-2h-2a4 4 0 0 1-4-4v-2.268ZM7 11V7.054a2 2 0 0 0-1.059.644l-2.46 2.87A2 2 0 0 0 3.2 11H7Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M14 3.054V7h-3.8c.074-.154.168-.3.282-.432l2.46-2.87A2 2 0 0 1 14 3.054ZM16 3v4a2 2 0 0 1-2 2h-4v6a2 2 0 0 0 2 2h7a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2h-3Z" clip-rule="evenodd"></path></svg>`);
var root_5214 = svg_template(`<title> </title>`);
var root_6214 = svg_template(`<desc> </desc>`);
var root_4214 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M8 12.732A1.99 1.99 0 0 1 7 13H3v6a2 2 0 0 0 2 2h7a2 2 0 0 0 2-2h-2a4 4 0 0 1-4-4v-2.268ZM7 11V7.054a2 2 0 0 0-1.059.644l-2.46 2.87A2 2 0 0 0 3.2 11H7Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M14 3.054V7h-3.8c.074-.154.168-.3.282-.432l2.46-2.87A2 2 0 0 1 14 3.054ZM16 3v4a2 2 0 0 1-2 2h-4v6a2 2 0 0 0 2 2h7a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2h-3Z" clip-rule="evenodd"></path></svg>`);
function FileCloneSolid($$anchor, $$props) {
  if (new.target === FileCloneSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FileCloneSolid);
  validate_prop_bindings($$props, [], [], FileCloneSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "file clone solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1214();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2214();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3214();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4214();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5214();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6214();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_2 = sibling(node_4);
      var path_3 = sibling(path_2);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FileCloneSolid);
  FileCloneSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FileCloneSolid_default = FileCloneSolid;
FileCloneSolid.filename = ".../flowbite-svelte-icons/dist/FileCloneSolid.svelte";
mark_module_end(FileCloneSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FileCodeOutline.svelte
mark_module_start();
var root_2215 = svg_template(`<title> </title>`);
var root_3215 = svg_template(`<desc> </desc>`);
var root_1215 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M10 3v4a1 1 0 0 1-1 1H5m5 4-2 2 2 2m4-4 2 2-2 2m5-12v16a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V7.914a1 1 0 0 1 .293-.707l3.914-3.914A1 1 0 0 1 9.914 3H18a1 1 0 0 1 1 1Z"></path></svg>`);
var root_5215 = svg_template(`<title> </title>`);
var root_6215 = svg_template(`<desc> </desc>`);
var root_4215 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M10 3v4a1 1 0 0 1-1 1H5m5 4-2 2 2 2m4-4 2 2-2 2m5-12v16a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V7.914a1 1 0 0 1 .293-.707l3.914-3.914A1 1 0 0 1 9.914 3H18a1 1 0 0 1 1 1Z"></path></svg>`);
function FileCodeOutline($$anchor, $$props) {
  if (new.target === FileCodeOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FileCodeOutline);
  validate_prop_bindings($$props, [], [], FileCodeOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "file code outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1215();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2215();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3215();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4215();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5215();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6215();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FileCodeOutline);
  FileCodeOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FileCodeOutline_default = FileCodeOutline;
FileCodeOutline.filename = ".../flowbite-svelte-icons/dist/FileCodeOutline.svelte";
mark_module_end(FileCodeOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FileCodeSolid.svelte
mark_module_start();
var root_2216 = svg_template(`<title> </title>`);
var root_3216 = svg_template(`<desc> </desc>`);
var root_1216 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M9 2.221V7H4.221a2 2 0 0 1 .365-.5L8.5 2.586A2 2 0 0 1 9 2.22ZM11 2v5a2 2 0 0 1-2 2H4v11a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2h-7Zm-.293 9.293a1 1 0 0 1 0 1.414L9.414 14l1.293 1.293a1 1 0 0 1-1.414 1.414l-2-2a1 1 0 0 1 0-1.414l2-2a1 1 0 0 1 1.414 0Zm2.586 1.414a1 1 0 0 1 1.414-1.414l2 2a1 1 0 0 1 0 1.414l-2 2a1 1 0 0 1-1.414-1.414L14.586 14l-1.293-1.293Z" clip-rule="evenodd"></path></svg>`);
var root_5216 = svg_template(`<title> </title>`);
var root_6216 = svg_template(`<desc> </desc>`);
var root_4216 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M9 2.221V7H4.221a2 2 0 0 1 .365-.5L8.5 2.586A2 2 0 0 1 9 2.22ZM11 2v5a2 2 0 0 1-2 2H4v11a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2h-7Zm-.293 9.293a1 1 0 0 1 0 1.414L9.414 14l1.293 1.293a1 1 0 0 1-1.414 1.414l-2-2a1 1 0 0 1 0-1.414l2-2a1 1 0 0 1 1.414 0Zm2.586 1.414a1 1 0 0 1 1.414-1.414l2 2a1 1 0 0 1 0 1.414l-2 2a1 1 0 0 1-1.414-1.414L14.586 14l-1.293-1.293Z" clip-rule="evenodd"></path></svg>`);
function FileCodeSolid($$anchor, $$props) {
  if (new.target === FileCodeSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FileCodeSolid);
  validate_prop_bindings($$props, [], [], FileCodeSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "file code solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1216();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2216();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3216();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4216();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5216();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6216();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FileCodeSolid);
  FileCodeSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FileCodeSolid_default = FileCodeSolid;
FileCodeSolid.filename = ".../flowbite-svelte-icons/dist/FileCodeSolid.svelte";
mark_module_end(FileCodeSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FileCopyAltOutline.svelte
mark_module_start();
var root_2217 = svg_template(`<title> </title>`);
var root_3217 = svg_template(`<desc> </desc>`);
var root_1217 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linejoin="round" d="M14 4v3a1 1 0 0 1-1 1h-3m4 10v1a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1h2m11-3v10a1 1 0 0 1-1 1h-7a1 1 0 0 1-1-1V7.87a1 1 0 0 1 .24-.65l2.46-2.87a1 1 0 0 1 .76-.35H18a1 1 0 0 1 1 1Z"></path></svg>`);
var root_5217 = svg_template(`<title> </title>`);
var root_6217 = svg_template(`<desc> </desc>`);
var root_4217 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linejoin="round" d="M14 4v3a1 1 0 0 1-1 1h-3m4 10v1a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1h2m11-3v10a1 1 0 0 1-1 1h-7a1 1 0 0 1-1-1V7.87a1 1 0 0 1 .24-.65l2.46-2.87a1 1 0 0 1 .76-.35H18a1 1 0 0 1 1 1Z"></path></svg>`);
function FileCopyAltOutline($$anchor, $$props) {
  if (new.target === FileCopyAltOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FileCopyAltOutline);
  validate_prop_bindings($$props, [], [], FileCopyAltOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "file copy alt outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1217();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2217();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3217();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4217();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5217();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6217();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FileCopyAltOutline);
  FileCopyAltOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FileCopyAltOutline_default = FileCopyAltOutline;
FileCopyAltOutline.filename = ".../flowbite-svelte-icons/dist/FileCopyAltOutline.svelte";
mark_module_end(FileCopyAltOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FileCopyAltSolid.svelte
mark_module_start();
var root_2218 = svg_template(`<title> </title>`);
var root_3218 = svg_template(`<desc> </desc>`);
var root_1218 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M7 9v6a4 4 0 0 0 4 4h4a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V9a2 2 0 0 1 2-2h1v2Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M13 3.054V7H9.2a2 2 0 0 1 .281-.432l2.46-2.87A2 2 0 0 1 13 3.054ZM15 3v4a2 2 0 0 1-2 2H9v6a2 2 0 0 0 2 2h7a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2h-3Z" clip-rule="evenodd"></path></svg>`);
var root_5218 = svg_template(`<title> </title>`);
var root_6218 = svg_template(`<desc> </desc>`);
var root_4218 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M7 9v6a4 4 0 0 0 4 4h4a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V9a2 2 0 0 1 2-2h1v2Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M13 3.054V7H9.2a2 2 0 0 1 .281-.432l2.46-2.87A2 2 0 0 1 13 3.054ZM15 3v4a2 2 0 0 1-2 2H9v6a2 2 0 0 0 2 2h7a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2h-3Z" clip-rule="evenodd"></path></svg>`);
function FileCopyAltSolid($$anchor, $$props) {
  if (new.target === FileCopyAltSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FileCopyAltSolid);
  validate_prop_bindings($$props, [], [], FileCopyAltSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "file copy alt solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1218();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2218();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3218();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4218();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5218();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6218();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_2 = sibling(node_4);
      var path_3 = sibling(path_2);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FileCopyAltSolid);
  FileCopyAltSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FileCopyAltSolid_default = FileCopyAltSolid;
FileCopyAltSolid.filename = ".../flowbite-svelte-icons/dist/FileCopyAltSolid.svelte";
mark_module_end(FileCopyAltSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FileCopyOutline.svelte
mark_module_start();
var root_2219 = svg_template(`<title> </title>`);
var root_3219 = svg_template(`<desc> </desc>`);
var root_1219 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linejoin="round" d="M9 8v3a1 1 0 0 1-1 1H5m11 4h2a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1h-7a1 1 0 0 0-1 1v1m4 3v10a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1v-7.13a1 1 0 0 1 .24-.65L7.7 8.35A1 1 0 0 1 8.46 8H13a1 1 0 0 1 1 1Z"></path></svg>`);
var root_5219 = svg_template(`<title> </title>`);
var root_6219 = svg_template(`<desc> </desc>`);
var root_4219 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linejoin="round" d="M9 8v3a1 1 0 0 1-1 1H5m11 4h2a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1h-7a1 1 0 0 0-1 1v1m4 3v10a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1v-7.13a1 1 0 0 1 .24-.65L7.7 8.35A1 1 0 0 1 8.46 8H13a1 1 0 0 1 1 1Z"></path></svg>`);
function FileCopyOutline($$anchor, $$props) {
  if (new.target === FileCopyOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FileCopyOutline);
  validate_prop_bindings($$props, [], [], FileCopyOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "file copy outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1219();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2219();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3219();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4219();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5219();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6219();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FileCopyOutline);
  FileCopyOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FileCopyOutline_default = FileCopyOutline;
FileCopyOutline.filename = ".../flowbite-svelte-icons/dist/FileCopyOutline.svelte";
mark_module_end(FileCopyOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FileCopySolid.svelte
mark_module_start();
var root_2220 = svg_template(`<title> </title>`);
var root_3220 = svg_template(`<desc> </desc>`);
var root_1220 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M18 3a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-1V9a4 4 0 0 0-4-4h-3a1.99 1.99 0 0 0-1 .267V5a2 2 0 0 1 2-2h7Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M8 7.054V11H4.2a2 2 0 0 1 .281-.432l2.46-2.87A2 2 0 0 1 8 7.054ZM10 7v4a2 2 0 0 1-2 2H4v6a2 2 0 0 0 2 2h7a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2h-3Z" clip-rule="evenodd"></path></svg>`);
var root_5220 = svg_template(`<title> </title>`);
var root_6220 = svg_template(`<desc> </desc>`);
var root_4220 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M18 3a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-1V9a4 4 0 0 0-4-4h-3a1.99 1.99 0 0 0-1 .267V5a2 2 0 0 1 2-2h7Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M8 7.054V11H4.2a2 2 0 0 1 .281-.432l2.46-2.87A2 2 0 0 1 8 7.054ZM10 7v4a2 2 0 0 1-2 2H4v6a2 2 0 0 0 2 2h7a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2h-3Z" clip-rule="evenodd"></path></svg>`);
function FileCopySolid($$anchor, $$props) {
  if (new.target === FileCopySolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FileCopySolid);
  validate_prop_bindings($$props, [], [], FileCopySolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "file copy solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1220();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2220();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3220();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4220();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5220();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6220();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_2 = sibling(node_4);
      var path_3 = sibling(path_2);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FileCopySolid);
  FileCopySolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FileCopySolid_default = FileCopySolid;
FileCopySolid.filename = ".../flowbite-svelte-icons/dist/FileCopySolid.svelte";
mark_module_end(FileCopySolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FileCsvOutline.svelte
mark_module_start();
var root_2221 = svg_template(`<title> </title>`);
var root_3221 = svg_template(`<desc> </desc>`);
var root_1221 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M5 10V7.914a1 1 0 0 1 .293-.707l3.914-3.914A1 1 0 0 1 9.914 3H18a1 1 0 0 1 1 1v6M5 19v1a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-1M10 3v4a1 1 0 0 1-1 1H5m2.665 9H6.647A1.647 1.647 0 0 1 5 15.353v-1.706A1.647 1.647 0 0 1 6.647 12h1.018M16 12l1.443 4.773L19 12m-6.057-.152-.943-.02a1.34 1.34 0 0 0-1.359 1.22 1.32 1.32 0 0 0 1.172 1.421l.536.059a1.273 1.273 0 0 1 1.226 1.718c-.2.571-.636.754-1.337.754h-1.13"></path></svg>`);
var root_5221 = svg_template(`<title> </title>`);
var root_6221 = svg_template(`<desc> </desc>`);
var root_4221 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M5 10V7.914a1 1 0 0 1 .293-.707l3.914-3.914A1 1 0 0 1 9.914 3H18a1 1 0 0 1 1 1v6M5 19v1a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-1M10 3v4a1 1 0 0 1-1 1H5m2.665 9H6.647A1.647 1.647 0 0 1 5 15.353v-1.706A1.647 1.647 0 0 1 6.647 12h1.018M16 12l1.443 4.773L19 12m-6.057-.152-.943-.02a1.34 1.34 0 0 0-1.359 1.22 1.32 1.32 0 0 0 1.172 1.421l.536.059a1.273 1.273 0 0 1 1.226 1.718c-.2.571-.636.754-1.337.754h-1.13"></path></svg>`);
function FileCsvOutline($$anchor, $$props) {
  if (new.target === FileCsvOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FileCsvOutline);
  validate_prop_bindings($$props, [], [], FileCsvOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "file csv outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1221();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2221();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3221();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4221();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5221();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6221();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FileCsvOutline);
  FileCsvOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FileCsvOutline_default = FileCsvOutline;
FileCsvOutline.filename = ".../flowbite-svelte-icons/dist/FileCsvOutline.svelte";
mark_module_end(FileCsvOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FileCsvSolid.svelte
mark_module_start();
var root_2222 = svg_template(`<title> </title>`);
var root_3222 = svg_template(`<desc> </desc>`);
var root_1222 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M9 2.221V7H4.221a2 2 0 0 1 .365-.5L8.5 2.586A2 2 0 0 1 9 2.22ZM11 2v5a2 2 0 0 1-2 2H4a2 2 0 0 0-2 2v7a2 2 0 0 0 2 2 2 2 0 0 0 2 2h12a2 2 0 0 0 2-2 2 2 0 0 0 2-2v-7a2 2 0 0 0-2-2V4a2 2 0 0 0-2-2h-7Zm1.018 8.828a2.34 2.34 0 0 0-2.373 2.13v.008a2.32 2.32 0 0 0 2.06 2.497l.535.059a.993.993 0 0 0 .136.006.272.272 0 0 1 .263.367l-.008.02a.377.377 0 0 1-.018.044.49.49 0 0 1-.078.02 1.689 1.689 0 0 1-.297.021h-1.13a1 1 0 1 0 0 2h1.13c.417 0 .892-.05 1.324-.279.47-.248.78-.648.953-1.134a2.272 2.272 0 0 0-2.115-3.06l-.478-.052a.32.32 0 0 1-.285-.341.34.34 0 0 1 .344-.306l.94.02a1 1 0 1 0 .043-2l-.943-.02h-.003Zm7.933 1.482a1 1 0 1 0-1.902-.62l-.57 1.747-.522-1.726a1 1 0 0 0-1.914.578l1.443 4.773a1 1 0 0 0 1.908.021l1.557-4.773Zm-13.762.88a.647.647 0 0 1 .458-.19h1.018a1 1 0 1 0 0-2H6.647A2.647 2.647 0 0 0 4 13.647v1.706A2.647 2.647 0 0 0 6.647 18h1.018a1 1 0 1 0 0-2H6.647A.647.647 0 0 1 6 15.353v-1.706c0-.172.068-.336.19-.457Z" clip-rule="evenodd"></path></svg>`);
var root_5222 = svg_template(`<title> </title>`);
var root_6222 = svg_template(`<desc> </desc>`);
var root_4222 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M9 2.221V7H4.221a2 2 0 0 1 .365-.5L8.5 2.586A2 2 0 0 1 9 2.22ZM11 2v5a2 2 0 0 1-2 2H4a2 2 0 0 0-2 2v7a2 2 0 0 0 2 2 2 2 0 0 0 2 2h12a2 2 0 0 0 2-2 2 2 0 0 0 2-2v-7a2 2 0 0 0-2-2V4a2 2 0 0 0-2-2h-7Zm1.018 8.828a2.34 2.34 0 0 0-2.373 2.13v.008a2.32 2.32 0 0 0 2.06 2.497l.535.059a.993.993 0 0 0 .136.006.272.272 0 0 1 .263.367l-.008.02a.377.377 0 0 1-.018.044.49.49 0 0 1-.078.02 1.689 1.689 0 0 1-.297.021h-1.13a1 1 0 1 0 0 2h1.13c.417 0 .892-.05 1.324-.279.47-.248.78-.648.953-1.134a2.272 2.272 0 0 0-2.115-3.06l-.478-.052a.32.32 0 0 1-.285-.341.34.34 0 0 1 .344-.306l.94.02a1 1 0 1 0 .043-2l-.943-.02h-.003Zm7.933 1.482a1 1 0 1 0-1.902-.62l-.57 1.747-.522-1.726a1 1 0 0 0-1.914.578l1.443 4.773a1 1 0 0 0 1.908.021l1.557-4.773Zm-13.762.88a.647.647 0 0 1 .458-.19h1.018a1 1 0 1 0 0-2H6.647A2.647 2.647 0 0 0 4 13.647v1.706A2.647 2.647 0 0 0 6.647 18h1.018a1 1 0 1 0 0-2H6.647A.647.647 0 0 1 6 15.353v-1.706c0-.172.068-.336.19-.457Z" clip-rule="evenodd"></path></svg>`);
function FileCsvSolid($$anchor, $$props) {
  if (new.target === FileCsvSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FileCsvSolid);
  validate_prop_bindings($$props, [], [], FileCsvSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "file csv solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1222();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2222();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3222();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4222();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5222();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6222();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FileCsvSolid);
  FileCsvSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FileCsvSolid_default = FileCsvSolid;
FileCsvSolid.filename = ".../flowbite-svelte-icons/dist/FileCsvSolid.svelte";
mark_module_end(FileCsvSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FileDocOutline.svelte
mark_module_start();
var root_2223 = svg_template(`<title> </title>`);
var root_3223 = svg_template(`<desc> </desc>`);
var root_1223 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M5 10V7.914a1 1 0 0 1 .293-.707l3.914-3.914A1 1 0 0 1 9.914 3H18a1 1 0 0 1 1 1v6M5 19v1a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-1M10 3v4a1 1 0 0 1-1 1H5m14 9.006h-.335a1.647 1.647 0 0 1-1.647-1.647v-1.706a1.647 1.647 0 0 1 1.647-1.647L19 12M5 12v5h1.375A1.626 1.626 0 0 0 8 15.375v-1.75A1.626 1.626 0 0 0 6.375 12H5Zm9 1.5v2a1.5 1.5 0 0 1-1.5 1.5v0a1.5 1.5 0 0 1-1.5-1.5v-2a1.5 1.5 0 0 1 1.5-1.5v0a1.5 1.5 0 0 1 1.5 1.5Z"></path></svg>`);
var root_5223 = svg_template(`<title> </title>`);
var root_6223 = svg_template(`<desc> </desc>`);
var root_4223 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M5 10V7.914a1 1 0 0 1 .293-.707l3.914-3.914A1 1 0 0 1 9.914 3H18a1 1 0 0 1 1 1v6M5 19v1a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-1M10 3v4a1 1 0 0 1-1 1H5m14 9.006h-.335a1.647 1.647 0 0 1-1.647-1.647v-1.706a1.647 1.647 0 0 1 1.647-1.647L19 12M5 12v5h1.375A1.626 1.626 0 0 0 8 15.375v-1.75A1.626 1.626 0 0 0 6.375 12H5Zm9 1.5v2a1.5 1.5 0 0 1-1.5 1.5v0a1.5 1.5 0 0 1-1.5-1.5v-2a1.5 1.5 0 0 1 1.5-1.5v0a1.5 1.5 0 0 1 1.5 1.5Z"></path></svg>`);
function FileDocOutline($$anchor, $$props) {
  if (new.target === FileDocOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FileDocOutline);
  validate_prop_bindings($$props, [], [], FileDocOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "file doc outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1223();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2223();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3223();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4223();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5223();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6223();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FileDocOutline);
  FileDocOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FileDocOutline_default = FileDocOutline;
FileDocOutline.filename = ".../flowbite-svelte-icons/dist/FileDocOutline.svelte";
mark_module_end(FileDocOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FileDocSolid.svelte
mark_module_start();
var root_2224 = svg_template(`<title> </title>`);
var root_3224 = svg_template(`<desc> </desc>`);
var root_1224 = svg_template(`<svg><!><!><path d="M6 16v-3h.375a.626.626 0 0 1 .625.626v1.749a.626.626 0 0 1-.626.625H6Zm6-2.5a.5.5 0 1 1 1 0v2a.5.5 0 0 1-1 0v-2Z"></path><path fill-rule="evenodd" d="M11 7V2h7a2 2 0 0 1 2 2v5h1a1 1 0 0 1 1 1v9a1 1 0 0 1-1 1h-1a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2H3a1 1 0 0 1-1-1v-9a1 1 0 0 1 1-1h6a2 2 0 0 0 2-2Zm7.683 6.006 1.335-.024-.037-2-1.327.024a2.647 2.647 0 0 0-2.636 2.647v1.706a2.647 2.647 0 0 0 2.647 2.647H20v-2h-1.335a.647.647 0 0 1-.647-.647v-1.706a.647.647 0 0 1 .647-.647h.018ZM5 11a1 1 0 0 0-1 1v5a1 1 0 0 0 1 1h1.376A2.626 2.626 0 0 0 9 15.375v-1.75A2.626 2.626 0 0 0 6.375 11H5Zm7.5 0a2.5 2.5 0 0 0-2.5 2.5v2a2.5 2.5 0 0 0 5 0v-2a2.5 2.5 0 0 0-2.5-2.5Z" clip-rule="evenodd"></path><path d="M9 7V2.221a2 2 0 0 0-.5.365L4.586 6.5a2 2 0 0 0-.365.5H9Z"></path></svg>`);
var root_5224 = svg_template(`<title> </title>`);
var root_6224 = svg_template(`<desc> </desc>`);
var root_4224 = svg_template(`<svg><!><!><path d="M6 16v-3h.375a.626.626 0 0 1 .625.626v1.749a.626.626 0 0 1-.626.625H6Zm6-2.5a.5.5 0 1 1 1 0v2a.5.5 0 0 1-1 0v-2Z"></path><path fill-rule="evenodd" d="M11 7V2h7a2 2 0 0 1 2 2v5h1a1 1 0 0 1 1 1v9a1 1 0 0 1-1 1h-1a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2H3a1 1 0 0 1-1-1v-9a1 1 0 0 1 1-1h6a2 2 0 0 0 2-2Zm7.683 6.006 1.335-.024-.037-2-1.327.024a2.647 2.647 0 0 0-2.636 2.647v1.706a2.647 2.647 0 0 0 2.647 2.647H20v-2h-1.335a.647.647 0 0 1-.647-.647v-1.706a.647.647 0 0 1 .647-.647h.018ZM5 11a1 1 0 0 0-1 1v5a1 1 0 0 0 1 1h1.376A2.626 2.626 0 0 0 9 15.375v-1.75A2.626 2.626 0 0 0 6.375 11H5Zm7.5 0a2.5 2.5 0 0 0-2.5 2.5v2a2.5 2.5 0 0 0 5 0v-2a2.5 2.5 0 0 0-2.5-2.5Z" clip-rule="evenodd"></path><path d="M9 7V2.221a2 2 0 0 0-.5.365L4.586 6.5a2 2 0 0 0-.365.5H9Z"></path></svg>`);
function FileDocSolid($$anchor, $$props) {
  if (new.target === FileDocSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FileDocSolid);
  validate_prop_bindings($$props, [], [], FileDocSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "file doc solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1224();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2224();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3224();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      var path_2 = sibling(path_1);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4224();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5224();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6224();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_3 = sibling(node_4);
      var path_4 = sibling(path_3);
      var path_5 = sibling(path_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FileDocSolid);
  FileDocSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FileDocSolid_default = FileDocSolid;
FileDocSolid.filename = ".../flowbite-svelte-icons/dist/FileDocSolid.svelte";
mark_module_end(FileDocSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FileExportOutline.svelte
mark_module_start();
var root_2225 = svg_template(`<title> </title>`);
var root_3225 = svg_template(`<desc> </desc>`);
var root_1225 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M19 10V4a1 1 0 0 0-1-1H9.914a1 1 0 0 0-.707.293L5.293 7.207A1 1 0 0 0 5 7.914V20a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2M10 3v4a1 1 0 0 1-1 1H5m5 6h9m0 0-2-2m2 2-2 2"></path></svg>`);
var root_5225 = svg_template(`<title> </title>`);
var root_6225 = svg_template(`<desc> </desc>`);
var root_4225 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M19 10V4a1 1 0 0 0-1-1H9.914a1 1 0 0 0-.707.293L5.293 7.207A1 1 0 0 0 5 7.914V20a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2M10 3v4a1 1 0 0 1-1 1H5m5 6h9m0 0-2-2m2 2-2 2"></path></svg>`);
function FileExportOutline($$anchor, $$props) {
  if (new.target === FileExportOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FileExportOutline);
  validate_prop_bindings($$props, [], [], FileExportOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "file export outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1225();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2225();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3225();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4225();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5225();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6225();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FileExportOutline);
  FileExportOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FileExportOutline_default = FileExportOutline;
FileExportOutline.filename = ".../flowbite-svelte-icons/dist/FileExportOutline.svelte";
mark_module_end(FileExportOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FileExportSolid.svelte
mark_module_start();
var root_2226 = svg_template(`<title> </title>`);
var root_3226 = svg_template(`<desc> </desc>`);
var root_1226 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M9 7V2.221a2 2 0 0 0-.5.365L4.586 6.5a2 2 0 0 0-.365.5H9Zm2 0V2h7a2 2 0 0 1 2 2v9.293l-2-2a1 1 0 0 0-1.414 1.414l.293.293h-6.586a1 1 0 1 0 0 2h6.586l-.293.293A1 1 0 0 0 18 16.707l2-2V20a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V9h5a2 2 0 0 0 2-2Z" clip-rule="evenodd"></path></svg>`);
var root_5226 = svg_template(`<title> </title>`);
var root_6226 = svg_template(`<desc> </desc>`);
var root_4226 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M9 7V2.221a2 2 0 0 0-.5.365L4.586 6.5a2 2 0 0 0-.365.5H9Zm2 0V2h7a2 2 0 0 1 2 2v9.293l-2-2a1 1 0 0 0-1.414 1.414l.293.293h-6.586a1 1 0 1 0 0 2h6.586l-.293.293A1 1 0 0 0 18 16.707l2-2V20a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V9h5a2 2 0 0 0 2-2Z" clip-rule="evenodd"></path></svg>`);
function FileExportSolid($$anchor, $$props) {
  if (new.target === FileExportSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FileExportSolid);
  validate_prop_bindings($$props, [], [], FileExportSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "file export solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1226();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2226();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3226();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4226();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5226();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6226();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FileExportSolid);
  FileExportSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FileExportSolid_default = FileExportSolid;
FileExportSolid.filename = ".../flowbite-svelte-icons/dist/FileExportSolid.svelte";
mark_module_end(FileExportSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FileImageOutline.svelte
mark_module_start();
var root_2227 = svg_template(`<title> </title>`);
var root_3227 = svg_template(`<desc> </desc>`);
var root_1227 = svg_template(`<svg><!><!><path fill="currentColor" d="M16 18H8l2.5-6 2 4 1.5-2 2 4Zm-1-8.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Z"></path><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M10 3v4a1 1 0 0 1-1 1H5m14-4v16a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V7.914a1 1 0 0 1 .293-.707l3.914-3.914A1 1 0 0 1 9.914 3H18a1 1 0 0 1 1 1ZM8 18h8l-2-4-1.5 2-2-4L8 18Zm7-8.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Z"></path></svg>`);
var root_5227 = svg_template(`<title> </title>`);
var root_6227 = svg_template(`<desc> </desc>`);
var root_4227 = svg_template(`<svg><!><!><path fill="currentColor" d="M16 18H8l2.5-6 2 4 1.5-2 2 4Zm-1-8.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Z"></path><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M10 3v4a1 1 0 0 1-1 1H5m14-4v16a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V7.914a1 1 0 0 1 .293-.707l3.914-3.914A1 1 0 0 1 9.914 3H18a1 1 0 0 1 1 1ZM8 18h8l-2-4-1.5 2-2-4L8 18Zm7-8.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Z"></path></svg>`);
function FileImageOutline($$anchor, $$props) {
  if (new.target === FileImageOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FileImageOutline);
  validate_prop_bindings($$props, [], [], FileImageOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "file image outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1227();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2227();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3227();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4227();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5227();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6227();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_2 = sibling(node_4);
      var path_3 = sibling(path_2);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_3, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FileImageOutline);
  FileImageOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FileImageOutline_default = FileImageOutline;
FileImageOutline.filename = ".../flowbite-svelte-icons/dist/FileImageOutline.svelte";
mark_module_end(FileImageOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FileImageSolid.svelte
mark_module_start();
var root_2228 = svg_template(`<title> </title>`);
var root_3228 = svg_template(`<desc> </desc>`);
var root_1228 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M9 2.221V7H4.221a2 2 0 0 1 .365-.5L8.5 2.586A2 2 0 0 1 9 2.22ZM11 2v5a2 2 0 0 1-2 2H4v11a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2h-7Zm.394 9.553a1 1 0 0 0-1.817.062l-2.5 6A1 1 0 0 0 8 19h8a1 1 0 0 0 .894-1.447l-2-4A1 1 0 0 0 13.2 13.4l-.53.706-1.276-2.553ZM13 9.5a1.5 1.5 0 1 1 3 0 1.5 1.5 0 0 1-3 0Z" clip-rule="evenodd"></path></svg>`);
var root_5228 = svg_template(`<title> </title>`);
var root_6228 = svg_template(`<desc> </desc>`);
var root_4228 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M9 2.221V7H4.221a2 2 0 0 1 .365-.5L8.5 2.586A2 2 0 0 1 9 2.22ZM11 2v5a2 2 0 0 1-2 2H4v11a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2h-7Zm.394 9.553a1 1 0 0 0-1.817.062l-2.5 6A1 1 0 0 0 8 19h8a1 1 0 0 0 .894-1.447l-2-4A1 1 0 0 0 13.2 13.4l-.53.706-1.276-2.553ZM13 9.5a1.5 1.5 0 1 1 3 0 1.5 1.5 0 0 1-3 0Z" clip-rule="evenodd"></path></svg>`);
function FileImageSolid($$anchor, $$props) {
  if (new.target === FileImageSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FileImageSolid);
  validate_prop_bindings($$props, [], [], FileImageSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "file image solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1228();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2228();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3228();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4228();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5228();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6228();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FileImageSolid);
  FileImageSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FileImageSolid_default = FileImageSolid;
FileImageSolid.filename = ".../flowbite-svelte-icons/dist/FileImageSolid.svelte";
mark_module_end(FileImageSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FileImportOutline.svelte
mark_module_start();
var root_2229 = svg_template(`<title> </title>`);
var root_3229 = svg_template(`<desc> </desc>`);
var root_1229 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M5 12V7.914a1 1 0 0 1 .293-.707l3.914-3.914A1 1 0 0 1 9.914 3H18a1 1 0 0 1 1 1v16a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1v-4m5-13v4a1 1 0 0 1-1 1H5m0 6h9m0 0-2-2m2 2-2 2"></path></svg>`);
var root_5229 = svg_template(`<title> </title>`);
var root_6229 = svg_template(`<desc> </desc>`);
var root_4229 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M5 12V7.914a1 1 0 0 1 .293-.707l3.914-3.914A1 1 0 0 1 9.914 3H18a1 1 0 0 1 1 1v16a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1v-4m5-13v4a1 1 0 0 1-1 1H5m0 6h9m0 0-2-2m2 2-2 2"></path></svg>`);
function FileImportOutline($$anchor, $$props) {
  if (new.target === FileImportOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FileImportOutline);
  validate_prop_bindings($$props, [], [], FileImportOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "file import outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1229();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2229();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3229();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4229();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5229();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6229();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FileImportOutline);
  FileImportOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FileImportOutline_default = FileImportOutline;
FileImportOutline.filename = ".../flowbite-svelte-icons/dist/FileImportOutline.svelte";
mark_module_end(FileImportOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FileImportSolid.svelte
mark_module_start();
var root_2230 = svg_template(`<title> </title>`);
var root_3230 = svg_template(`<desc> </desc>`);
var root_1230 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M9 7V2.221a2 2 0 0 0-.5.365L4.586 6.5a2 2 0 0 0-.365.5H9Zm2 0V2h7a2 2 0 0 1 2 2v16a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2v-5h7.586l-.293.293a1 1 0 0 0 1.414 1.414l2-2a1 1 0 0 0 0-1.414l-2-2a1 1 0 0 0-1.414 1.414l.293.293H4V9h5a2 2 0 0 0 2-2Z" clip-rule="evenodd"></path></svg>`);
var root_5230 = svg_template(`<title> </title>`);
var root_6230 = svg_template(`<desc> </desc>`);
var root_4230 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M9 7V2.221a2 2 0 0 0-.5.365L4.586 6.5a2 2 0 0 0-.365.5H9Zm2 0V2h7a2 2 0 0 1 2 2v16a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2v-5h7.586l-.293.293a1 1 0 0 0 1.414 1.414l2-2a1 1 0 0 0 0-1.414l-2-2a1 1 0 0 0-1.414 1.414l.293.293H4V9h5a2 2 0 0 0 2-2Z" clip-rule="evenodd"></path></svg>`);
function FileImportSolid($$anchor, $$props) {
  if (new.target === FileImportSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FileImportSolid);
  validate_prop_bindings($$props, [], [], FileImportSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "file import solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1230();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2230();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3230();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4230();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5230();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6230();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FileImportSolid);
  FileImportSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FileImportSolid_default = FileImportSolid;
FileImportSolid.filename = ".../flowbite-svelte-icons/dist/FileImportSolid.svelte";
mark_module_end(FileImportSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FileInvoiceOutline.svelte
mark_module_start();
var root_2231 = svg_template(`<title> </title>`);
var root_3231 = svg_template(`<desc> </desc>`);
var root_1231 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M10 3v4a1 1 0 0 1-1 1H5m8-2h3m-3 3h3m-4 3v6m4-3H8M19 4v16a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V7.914a1 1 0 0 1 .293-.707l3.914-3.914A1 1 0 0 1 9.914 3H18a1 1 0 0 1 1 1ZM8 12v6h8v-6H8Z"></path></svg>`);
var root_5231 = svg_template(`<title> </title>`);
var root_6231 = svg_template(`<desc> </desc>`);
var root_4231 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M10 3v4a1 1 0 0 1-1 1H5m8-2h3m-3 3h3m-4 3v6m4-3H8M19 4v16a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V7.914a1 1 0 0 1 .293-.707l3.914-3.914A1 1 0 0 1 9.914 3H18a1 1 0 0 1 1 1ZM8 12v6h8v-6H8Z"></path></svg>`);
function FileInvoiceOutline($$anchor, $$props) {
  if (new.target === FileInvoiceOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FileInvoiceOutline);
  validate_prop_bindings($$props, [], [], FileInvoiceOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "file invoice outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1231();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2231();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3231();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4231();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5231();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6231();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FileInvoiceOutline);
  FileInvoiceOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FileInvoiceOutline_default = FileInvoiceOutline;
FileInvoiceOutline.filename = ".../flowbite-svelte-icons/dist/FileInvoiceOutline.svelte";
mark_module_end(FileInvoiceOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FileInvoiceSolid.svelte
mark_module_start();
var root_2232 = svg_template(`<title> </title>`);
var root_3232 = svg_template(`<desc> </desc>`);
var root_1232 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M9 7V2.221a2 2 0 0 0-.5.365L4.586 6.5a2 2 0 0 0-.365.5H9Zm2 0V2h7a2 2 0 0 1 2 2v16a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V9h5a2 2 0 0 0 2-2Zm2-2a1 1 0 1 0 0 2h3a1 1 0 1 0 0-2h-3Zm0 3a1 1 0 1 0 0 2h3a1 1 0 1 0 0-2h-3Zm-6 4a1 1 0 0 1 1-1h8a1 1 0 0 1 1 1v6a1 1 0 0 1-1 1H8a1 1 0 0 1-1-1v-6Zm8 1v1h-2v-1h2Zm0 3h-2v1h2v-1Zm-4-3v1H9v-1h2Zm0 3H9v1h2v-1Z" clip-rule="evenodd"></path></svg>`);
var root_5232 = svg_template(`<title> </title>`);
var root_6232 = svg_template(`<desc> </desc>`);
var root_4232 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M9 7V2.221a2 2 0 0 0-.5.365L4.586 6.5a2 2 0 0 0-.365.5H9Zm2 0V2h7a2 2 0 0 1 2 2v16a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V9h5a2 2 0 0 0 2-2Zm2-2a1 1 0 1 0 0 2h3a1 1 0 1 0 0-2h-3Zm0 3a1 1 0 1 0 0 2h3a1 1 0 1 0 0-2h-3Zm-6 4a1 1 0 0 1 1-1h8a1 1 0 0 1 1 1v6a1 1 0 0 1-1 1H8a1 1 0 0 1-1-1v-6Zm8 1v1h-2v-1h2Zm0 3h-2v1h2v-1Zm-4-3v1H9v-1h2Zm0 3H9v1h2v-1Z" clip-rule="evenodd"></path></svg>`);
function FileInvoiceSolid($$anchor, $$props) {
  if (new.target === FileInvoiceSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FileInvoiceSolid);
  validate_prop_bindings($$props, [], [], FileInvoiceSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "file invoice solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1232();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2232();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3232();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4232();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5232();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6232();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FileInvoiceSolid);
  FileInvoiceSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FileInvoiceSolid_default = FileInvoiceSolid;
FileInvoiceSolid.filename = ".../flowbite-svelte-icons/dist/FileInvoiceSolid.svelte";
mark_module_end(FileInvoiceSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FileLinesOutline.svelte
mark_module_start();
var root_2233 = svg_template(`<title> </title>`);
var root_3233 = svg_template(`<desc> </desc>`);
var root_1233 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M10 3v4a1 1 0 0 1-1 1H5m4 8h6m-6-4h6m4-8v16a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V7.914a1 1 0 0 1 .293-.707l3.914-3.914A1 1 0 0 1 9.914 3H18a1 1 0 0 1 1 1Z"></path></svg>`);
var root_5233 = svg_template(`<title> </title>`);
var root_6233 = svg_template(`<desc> </desc>`);
var root_4233 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M10 3v4a1 1 0 0 1-1 1H5m4 8h6m-6-4h6m4-8v16a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V7.914a1 1 0 0 1 .293-.707l3.914-3.914A1 1 0 0 1 9.914 3H18a1 1 0 0 1 1 1Z"></path></svg>`);
function FileLinesOutline($$anchor, $$props) {
  if (new.target === FileLinesOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FileLinesOutline);
  validate_prop_bindings($$props, [], [], FileLinesOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "file lines outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1233();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2233();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3233();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4233();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5233();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6233();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FileLinesOutline);
  FileLinesOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FileLinesOutline_default = FileLinesOutline;
FileLinesOutline.filename = ".../flowbite-svelte-icons/dist/FileLinesOutline.svelte";
mark_module_end(FileLinesOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FileLinesSolid.svelte
mark_module_start();
var root_2234 = svg_template(`<title> </title>`);
var root_3234 = svg_template(`<desc> </desc>`);
var root_1234 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M9 2.221V7H4.221a2 2 0 0 1 .365-.5L8.5 2.586A2 2 0 0 1 9 2.22ZM11 2v5a2 2 0 0 1-2 2H4v11a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2h-7ZM8 16a1 1 0 0 1 1-1h6a1 1 0 1 1 0 2H9a1 1 0 0 1-1-1Zm1-5a1 1 0 1 0 0 2h6a1 1 0 1 0 0-2H9Z" clip-rule="evenodd"></path></svg>`);
var root_5234 = svg_template(`<title> </title>`);
var root_6234 = svg_template(`<desc> </desc>`);
var root_4234 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M9 2.221V7H4.221a2 2 0 0 1 .365-.5L8.5 2.586A2 2 0 0 1 9 2.22ZM11 2v5a2 2 0 0 1-2 2H4v11a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2h-7ZM8 16a1 1 0 0 1 1-1h6a1 1 0 1 1 0 2H9a1 1 0 0 1-1-1Zm1-5a1 1 0 1 0 0 2h6a1 1 0 1 0 0-2H9Z" clip-rule="evenodd"></path></svg>`);
function FileLinesSolid($$anchor, $$props) {
  if (new.target === FileLinesSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FileLinesSolid);
  validate_prop_bindings($$props, [], [], FileLinesSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "file lines solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1234();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2234();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3234();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4234();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5234();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6234();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FileLinesSolid);
  FileLinesSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FileLinesSolid_default = FileLinesSolid;
FileLinesSolid.filename = ".../flowbite-svelte-icons/dist/FileLinesSolid.svelte";
mark_module_end(FileLinesSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FileMusicOutline.svelte
mark_module_start();
var root_2235 = svg_template(`<title> </title>`);
var root_3235 = svg_template(`<desc> </desc>`);
var root_1235 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M10 3v4a1 1 0 0 1-1 1H5m8 7.5V8s3 1 3 4m3-8v16a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V7.914a1 1 0 0 1 .293-.707l3.914-3.914A1 1 0 0 1 9.914 3H18a1 1 0 0 1 1 1Zm-6 12c0 1.105-1.12 2-2.5 2S8 17.105 8 16s1.12-2 2.5-2 2.5.895 2.5 2Z"></path></svg>`);
var root_5235 = svg_template(`<title> </title>`);
var root_6235 = svg_template(`<desc> </desc>`);
var root_4235 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M10 3v4a1 1 0 0 1-1 1H5m8 7.5V8s3 1 3 4m3-8v16a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V7.914a1 1 0 0 1 .293-.707l3.914-3.914A1 1 0 0 1 9.914 3H18a1 1 0 0 1 1 1Zm-6 12c0 1.105-1.12 2-2.5 2S8 17.105 8 16s1.12-2 2.5-2 2.5.895 2.5 2Z"></path></svg>`);
function FileMusicOutline($$anchor, $$props) {
  if (new.target === FileMusicOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FileMusicOutline);
  validate_prop_bindings($$props, [], [], FileMusicOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "file music outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1235();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2235();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3235();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4235();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5235();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6235();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FileMusicOutline);
  FileMusicOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FileMusicOutline_default = FileMusicOutline;
FileMusicOutline.filename = ".../flowbite-svelte-icons/dist/FileMusicOutline.svelte";
mark_module_end(FileMusicOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FileMusicSolid.svelte
mark_module_start();
var root_2236 = svg_template(`<title> </title>`);
var root_3236 = svg_template(`<desc> </desc>`);
var root_1236 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M9 7V2.221a2 2 0 0 0-.5.365L4.586 6.5a2 2 0 0 0-.365.5H9Zm2 0V2h7a2 2 0 0 1 2 2v16a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V9h5a2 2 0 0 0 2-2Zm2.318.052h-.002A1 1 0 0 0 12 8v5.293A4.033 4.033 0 0 0 10.5 13C8.787 13 7 14.146 7 16s1.787 3 3.5 3 3.5-1.146 3.5-3c0-.107-.006-.211-.017-.313A1.04 1.04 0 0 0 14 15.5V9.766c.538.493 1 1.204 1 2.234a1 1 0 1 0 2 0c0-1.881-.956-3.14-1.86-3.893a6.4 6.4 0 0 0-1.636-.985 4.009 4.009 0 0 0-.165-.063l-.014-.005-.005-.001-.002-.001ZM9 16c0-.356.452-1 1.5-1s1.5.644 1.5 1-.452 1-1.5 1S9 16.356 9 16Z" clip-rule="evenodd"></path></svg>`);
var root_5236 = svg_template(`<title> </title>`);
var root_6236 = svg_template(`<desc> </desc>`);
var root_4236 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M9 7V2.221a2 2 0 0 0-.5.365L4.586 6.5a2 2 0 0 0-.365.5H9Zm2 0V2h7a2 2 0 0 1 2 2v16a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V9h5a2 2 0 0 0 2-2Zm2.318.052h-.002A1 1 0 0 0 12 8v5.293A4.033 4.033 0 0 0 10.5 13C8.787 13 7 14.146 7 16s1.787 3 3.5 3 3.5-1.146 3.5-3c0-.107-.006-.211-.017-.313A1.04 1.04 0 0 0 14 15.5V9.766c.538.493 1 1.204 1 2.234a1 1 0 1 0 2 0c0-1.881-.956-3.14-1.86-3.893a6.4 6.4 0 0 0-1.636-.985 4.009 4.009 0 0 0-.165-.063l-.014-.005-.005-.001-.002-.001ZM9 16c0-.356.452-1 1.5-1s1.5.644 1.5 1-.452 1-1.5 1S9 16.356 9 16Z" clip-rule="evenodd"></path></svg>`);
function FileMusicSolid($$anchor, $$props) {
  if (new.target === FileMusicSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FileMusicSolid);
  validate_prop_bindings($$props, [], [], FileMusicSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "file music solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1236();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2236();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3236();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4236();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5236();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6236();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FileMusicSolid);
  FileMusicSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FileMusicSolid_default = FileMusicSolid;
FileMusicSolid.filename = ".../flowbite-svelte-icons/dist/FileMusicSolid.svelte";
mark_module_end(FileMusicSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FileOutline.svelte
mark_module_start();
var root_2237 = svg_template(`<title> </title>`);
var root_3237 = svg_template(`<desc> </desc>`);
var root_1237 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linejoin="round" d="M10 3v4a1 1 0 0 1-1 1H5m14-4v16a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V7.914a1 1 0 0 1 .293-.707l3.914-3.914A1 1 0 0 1 9.914 3H18a1 1 0 0 1 1 1Z"></path></svg>`);
var root_5237 = svg_template(`<title> </title>`);
var root_6237 = svg_template(`<desc> </desc>`);
var root_4237 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linejoin="round" d="M10 3v4a1 1 0 0 1-1 1H5m14-4v16a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V7.914a1 1 0 0 1 .293-.707l3.914-3.914A1 1 0 0 1 9.914 3H18a1 1 0 0 1 1 1Z"></path></svg>`);
function FileOutline($$anchor, $$props) {
  if (new.target === FileOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FileOutline);
  validate_prop_bindings($$props, [], [], FileOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "file outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1237();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2237();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3237();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4237();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5237();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6237();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FileOutline);
  FileOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FileOutline_default = FileOutline;
FileOutline.filename = ".../flowbite-svelte-icons/dist/FileOutline.svelte";
mark_module_end(FileOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FilePasteOutline.svelte
mark_module_start();
var root_2238 = svg_template(`<title> </title>`);
var root_3238 = svg_template(`<desc> </desc>`);
var root_1238 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M9 20H5a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1h2.429M7 8h3M8 8V4h4v2m4 0V5h-4m3 4v3a1 1 0 0 1-1 1h-3m9-3v9a1 1 0 0 1-1 1h-7a1 1 0 0 1-1-1v-6.397a1 1 0 0 1 .27-.683l2.434-2.603a1 1 0 0 1 .73-.317H19a1 1 0 0 1 1 1Z"></path></svg>`);
var root_5238 = svg_template(`<title> </title>`);
var root_6238 = svg_template(`<desc> </desc>`);
var root_4238 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M9 20H5a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1h2.429M7 8h3M8 8V4h4v2m4 0V5h-4m3 4v3a1 1 0 0 1-1 1h-3m9-3v9a1 1 0 0 1-1 1h-7a1 1 0 0 1-1-1v-6.397a1 1 0 0 1 .27-.683l2.434-2.603a1 1 0 0 1 .73-.317H19a1 1 0 0 1 1 1Z"></path></svg>`);
function FilePasteOutline($$anchor, $$props) {
  if (new.target === FilePasteOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FilePasteOutline);
  validate_prop_bindings($$props, [], [], FilePasteOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "file paste outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1238();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2238();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3238();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4238();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5238();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6238();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FilePasteOutline);
  FilePasteOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FilePasteOutline_default = FilePasteOutline;
FilePasteOutline.filename = ".../flowbite-svelte-icons/dist/FilePasteOutline.svelte";
mark_module_end(FilePasteOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FilePasteSolid.svelte
mark_module_start();
var root_2239 = svg_template(`<title> </title>`);
var root_3239 = svg_template(`<desc> </desc>`);
var root_1239 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M6.5 3.85c0-.47.392-.85.875-.85h5.25c.483 0 .875.38.875.85h1.75c.966 0 1.75.761 1.75 1.7V6h-1c-.728 0-1.732-.06-2.434.095a4.01 4.01 0 0 0-.88.307.91.91 0 0 0-.061-.002h-.875V4.7h-3.5v1.7h-.875a.863.863 0 0 0-.875.85c0 .47.392.85.875.85h3.36L9.077 9.871a4 4 0 0 0-.892 1.526C7.97 12.083 8 13.268 8 14v5c0 .729.195 1.412.535 2H4.75C3.784 21 3 20.239 3 19.3V5.55c0-.939.784-1.7 1.75-1.7H6.5Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M14 8.048V12h-3.907a2 2 0 0 1 .446-.763l2.434-2.603A2 2 0 0 1 14 8.048ZM16 8v4a2 2 0 0 1-2 2h-4v5a2 2 0 0 0 2 2h7a2 2 0 0 0 2-2v-9a2 2 0 0 0-2-2h-3Z" clip-rule="evenodd"></path></svg>`);
var root_5239 = svg_template(`<title> </title>`);
var root_6239 = svg_template(`<desc> </desc>`);
var root_4239 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M6.5 3.85c0-.47.392-.85.875-.85h5.25c.483 0 .875.38.875.85h1.75c.966 0 1.75.761 1.75 1.7V6h-1c-.728 0-1.732-.06-2.434.095a4.01 4.01 0 0 0-.88.307.91.91 0 0 0-.061-.002h-.875V4.7h-3.5v1.7h-.875a.863.863 0 0 0-.875.85c0 .47.392.85.875.85h3.36L9.077 9.871a4 4 0 0 0-.892 1.526C7.97 12.083 8 13.268 8 14v5c0 .729.195 1.412.535 2H4.75C3.784 21 3 20.239 3 19.3V5.55c0-.939.784-1.7 1.75-1.7H6.5Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M14 8.048V12h-3.907a2 2 0 0 1 .446-.763l2.434-2.603A2 2 0 0 1 14 8.048ZM16 8v4a2 2 0 0 1-2 2h-4v5a2 2 0 0 0 2 2h7a2 2 0 0 0 2-2v-9a2 2 0 0 0-2-2h-3Z" clip-rule="evenodd"></path></svg>`);
function FilePasteSolid($$anchor, $$props) {
  if (new.target === FilePasteSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FilePasteSolid);
  validate_prop_bindings($$props, [], [], FilePasteSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "file paste solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1239();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2239();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3239();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4239();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5239();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6239();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_2 = sibling(node_4);
      var path_3 = sibling(path_2);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FilePasteSolid);
  FilePasteSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FilePasteSolid_default = FilePasteSolid;
FilePasteSolid.filename = ".../flowbite-svelte-icons/dist/FilePasteSolid.svelte";
mark_module_end(FilePasteSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FilePdfOutline.svelte
mark_module_start();
var root_2240 = svg_template(`<title> </title>`);
var root_3240 = svg_template(`<desc> </desc>`);
var root_1240 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M5 17v-5h1.5a1.5 1.5 0 1 1 0 3H5m12 2v-5h2m-2 3h2M5 10V7.914a1 1 0 0 1 .293-.707l3.914-3.914A1 1 0 0 1 9.914 3H18a1 1 0 0 1 1 1v6M5 19v1a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-1M10 3v4a1 1 0 0 1-1 1H5m6 4v5h1.375A1.627 1.627 0 0 0 14 15.375v-1.75A1.627 1.627 0 0 0 12.375 12H11Z"></path></svg>`);
var root_5240 = svg_template(`<title> </title>`);
var root_6240 = svg_template(`<desc> </desc>`);
var root_4240 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M5 17v-5h1.5a1.5 1.5 0 1 1 0 3H5m12 2v-5h2m-2 3h2M5 10V7.914a1 1 0 0 1 .293-.707l3.914-3.914A1 1 0 0 1 9.914 3H18a1 1 0 0 1 1 1v6M5 19v1a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-1M10 3v4a1 1 0 0 1-1 1H5m6 4v5h1.375A1.627 1.627 0 0 0 14 15.375v-1.75A1.627 1.627 0 0 0 12.375 12H11Z"></path></svg>`);
function FilePdfOutline($$anchor, $$props) {
  if (new.target === FilePdfOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FilePdfOutline);
  validate_prop_bindings($$props, [], [], FilePdfOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "file pdf outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1240();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2240();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3240();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4240();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5240();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6240();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FilePdfOutline);
  FilePdfOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FilePdfOutline_default = FilePdfOutline;
FilePdfOutline.filename = ".../flowbite-svelte-icons/dist/FilePdfOutline.svelte";
mark_module_end(FilePdfOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FilePdfSolid.svelte
mark_module_start();
var root_2241 = svg_template(`<title> </title>`);
var root_3241 = svg_template(`<desc> </desc>`);
var root_1241 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M9 2.221V7H4.221a2 2 0 0 1 .365-.5L8.5 2.586A2 2 0 0 1 9 2.22ZM11 2v5a2 2 0 0 1-2 2H4a2 2 0 0 0-2 2v7a2 2 0 0 0 2 2 2 2 0 0 0 2 2h12a2 2 0 0 0 2-2 2 2 0 0 0 2-2v-7a2 2 0 0 0-2-2V4a2 2 0 0 0-2-2h-7Zm-6 9a1 1 0 0 0-1 1v5a1 1 0 1 0 2 0v-1h.5a2.5 2.5 0 0 0 0-5H5Zm1.5 3H6v-1h.5a.5.5 0 0 1 0 1Zm4.5-3a1 1 0 0 0-1 1v5a1 1 0 0 0 1 1h1.376A2.626 2.626 0 0 0 15 15.375v-1.75A2.626 2.626 0 0 0 12.375 11H11Zm1 5v-3h.375a.626.626 0 0 1 .625.626v1.748a.625.625 0 0 1-.626.626H12Zm5-5a1 1 0 0 0-1 1v5a1 1 0 1 0 2 0v-1h1a1 1 0 1 0 0-2h-1v-1h1a1 1 0 1 0 0-2h-2Z" clip-rule="evenodd"></path></svg>`);
var root_5241 = svg_template(`<title> </title>`);
var root_6241 = svg_template(`<desc> </desc>`);
var root_4241 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M9 2.221V7H4.221a2 2 0 0 1 .365-.5L8.5 2.586A2 2 0 0 1 9 2.22ZM11 2v5a2 2 0 0 1-2 2H4a2 2 0 0 0-2 2v7a2 2 0 0 0 2 2 2 2 0 0 0 2 2h12a2 2 0 0 0 2-2 2 2 0 0 0 2-2v-7a2 2 0 0 0-2-2V4a2 2 0 0 0-2-2h-7Zm-6 9a1 1 0 0 0-1 1v5a1 1 0 1 0 2 0v-1h.5a2.5 2.5 0 0 0 0-5H5Zm1.5 3H6v-1h.5a.5.5 0 0 1 0 1Zm4.5-3a1 1 0 0 0-1 1v5a1 1 0 0 0 1 1h1.376A2.626 2.626 0 0 0 15 15.375v-1.75A2.626 2.626 0 0 0 12.375 11H11Zm1 5v-3h.375a.626.626 0 0 1 .625.626v1.748a.625.625 0 0 1-.626.626H12Zm5-5a1 1 0 0 0-1 1v5a1 1 0 1 0 2 0v-1h1a1 1 0 1 0 0-2h-1v-1h1a1 1 0 1 0 0-2h-2Z" clip-rule="evenodd"></path></svg>`);
function FilePdfSolid($$anchor, $$props) {
  if (new.target === FilePdfSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FilePdfSolid);
  validate_prop_bindings($$props, [], [], FilePdfSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "file pdf solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1241();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2241();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3241();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4241();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5241();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6241();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FilePdfSolid);
  FilePdfSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FilePdfSolid_default = FilePdfSolid;
FilePdfSolid.filename = ".../flowbite-svelte-icons/dist/FilePdfSolid.svelte";
mark_module_end(FilePdfSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FilePenOutline.svelte
mark_module_start();
var root_2242 = svg_template(`<title> </title>`);
var root_3242 = svg_template(`<desc> </desc>`);
var root_1242 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M18 5V4a1 1 0 0 0-1-1H8.914a1 1 0 0 0-.707.293L4.293 7.207A1 1 0 0 0 4 7.914V20a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-5M9 3v4a1 1 0 0 1-1 1H4m11.383.772 2.745 2.746m1.215-3.906a2.089 2.089 0 0 1 0 2.953l-6.65 6.646L9 17.95l.739-3.692 6.646-6.646a2.087 2.087 0 0 1 2.958 0Z"></path></svg>`);
var root_5242 = svg_template(`<title> </title>`);
var root_6242 = svg_template(`<desc> </desc>`);
var root_4242 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M18 5V4a1 1 0 0 0-1-1H8.914a1 1 0 0 0-.707.293L4.293 7.207A1 1 0 0 0 4 7.914V20a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-5M9 3v4a1 1 0 0 1-1 1H4m11.383.772 2.745 2.746m1.215-3.906a2.089 2.089 0 0 1 0 2.953l-6.65 6.646L9 17.95l.739-3.692 6.646-6.646a2.087 2.087 0 0 1 2.958 0Z"></path></svg>`);
function FilePenOutline($$anchor, $$props) {
  if (new.target === FilePenOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FilePenOutline);
  validate_prop_bindings($$props, [], [], FilePenOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "file pen outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1242();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2242();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3242();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4242();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5242();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6242();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FilePenOutline);
  FilePenOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FilePenOutline_default = FilePenOutline;
FilePenOutline.filename = ".../flowbite-svelte-icons/dist/FilePenOutline.svelte";
mark_module_end(FilePenOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FilePenSolid.svelte
mark_module_start();
var root_2243 = svg_template(`<title> </title>`);
var root_3243 = svg_template(`<desc> </desc>`);
var root_1243 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M8 7V2.221a2 2 0 0 0-.5.365L3.586 6.5a2 2 0 0 0-.365.5H8Zm2 0V2h7a2 2 0 0 1 2 2v.126a5.087 5.087 0 0 0-4.74 1.368v.001l-6.642 6.642a3 3 0 0 0-.82 1.532l-.74 3.692a3 3 0 0 0 3.53 3.53l3.694-.738a3 3 0 0 0 1.532-.82L19 15.149V20a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V9h5a2 2 0 0 0 2-2Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M17.447 8.08a1.087 1.087 0 0 1 1.187.238l.002.001a1.088 1.088 0 0 1 0 1.539l-.377.377-1.54-1.542.373-.374.002-.001c.1-.102.22-.182.353-.237Zm-2.143 2.027-4.644 4.644-.385 1.924 1.925-.385 4.644-4.642-1.54-1.54Zm2.56-4.11a3.087 3.087 0 0 0-2.187.909l-6.645 6.645a1 1 0 0 0-.274.51l-.739 3.693a1 1 0 0 0 1.177 1.176l3.693-.738a1 1 0 0 0 .51-.274l6.65-6.646a3.088 3.088 0 0 0-2.185-5.275Z" clip-rule="evenodd"></path></svg>`);
var root_5243 = svg_template(`<title> </title>`);
var root_6243 = svg_template(`<desc> </desc>`);
var root_4243 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M8 7V2.221a2 2 0 0 0-.5.365L3.586 6.5a2 2 0 0 0-.365.5H8Zm2 0V2h7a2 2 0 0 1 2 2v.126a5.087 5.087 0 0 0-4.74 1.368v.001l-6.642 6.642a3 3 0 0 0-.82 1.532l-.74 3.692a3 3 0 0 0 3.53 3.53l3.694-.738a3 3 0 0 0 1.532-.82L19 15.149V20a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V9h5a2 2 0 0 0 2-2Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M17.447 8.08a1.087 1.087 0 0 1 1.187.238l.002.001a1.088 1.088 0 0 1 0 1.539l-.377.377-1.54-1.542.373-.374.002-.001c.1-.102.22-.182.353-.237Zm-2.143 2.027-4.644 4.644-.385 1.924 1.925-.385 4.644-4.642-1.54-1.54Zm2.56-4.11a3.087 3.087 0 0 0-2.187.909l-6.645 6.645a1 1 0 0 0-.274.51l-.739 3.693a1 1 0 0 0 1.177 1.176l3.693-.738a1 1 0 0 0 .51-.274l6.65-6.646a3.088 3.088 0 0 0-2.185-5.275Z" clip-rule="evenodd"></path></svg>`);
function FilePenSolid($$anchor, $$props) {
  if (new.target === FilePenSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FilePenSolid);
  validate_prop_bindings($$props, [], [], FilePenSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "file pen solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1243();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2243();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3243();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4243();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5243();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6243();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_2 = sibling(node_4);
      var path_3 = sibling(path_2);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FilePenSolid);
  FilePenSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FilePenSolid_default = FilePenSolid;
FilePenSolid.filename = ".../flowbite-svelte-icons/dist/FilePenSolid.svelte";
mark_module_end(FilePenSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FilePptOutline.svelte
mark_module_start();
var root_2244 = svg_template(`<title> </title>`);
var root_3244 = svg_template(`<desc> </desc>`);
var root_1244 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M5 17v-5h1.5a1.5 1.5 0 1 1 0 3H5m6 2v-5h1.5a1.5 1.5 0 1 1 0 3H11m7-3v5m-1-5h2M5 10V7.914a1 1 0 0 1 .293-.707l3.914-3.914A1 1 0 0 1 9.914 3H18a1 1 0 0 1 1 1v6M5 19v1a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-1M10 3v4a1 1 0 0 1-1 1H5"></path></svg>`);
var root_5244 = svg_template(`<title> </title>`);
var root_6244 = svg_template(`<desc> </desc>`);
var root_4244 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M5 17v-5h1.5a1.5 1.5 0 1 1 0 3H5m6 2v-5h1.5a1.5 1.5 0 1 1 0 3H11m7-3v5m-1-5h2M5 10V7.914a1 1 0 0 1 .293-.707l3.914-3.914A1 1 0 0 1 9.914 3H18a1 1 0 0 1 1 1v6M5 19v1a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-1M10 3v4a1 1 0 0 1-1 1H5"></path></svg>`);
function FilePptOutline($$anchor, $$props) {
  if (new.target === FilePptOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FilePptOutline);
  validate_prop_bindings($$props, [], [], FilePptOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "file ppt outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1244();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2244();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3244();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4244();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5244();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6244();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FilePptOutline);
  FilePptOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FilePptOutline_default = FilePptOutline;
FilePptOutline.filename = ".../flowbite-svelte-icons/dist/FilePptOutline.svelte";
mark_module_end(FilePptOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FilePptSolid.svelte
mark_module_start();
var root_2245 = svg_template(`<title> </title>`);
var root_3245 = svg_template(`<desc> </desc>`);
var root_1245 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M9 2.221V7H4.221a2 2 0 0 1 .365-.5L8.5 2.586A2 2 0 0 1 9 2.22ZM11 2v5a2 2 0 0 1-2 2H4a2 2 0 0 0-2 2v7a2 2 0 0 0 2 2 2 2 0 0 0 2 2h12a2 2 0 0 0 2-2 2 2 0 0 0 2-2v-7a2 2 0 0 0-2-2V4a2 2 0 0 0-2-2h-7Zm-6 9a1 1 0 0 0-1 1v5a1 1 0 1 0 2 0v-1h.5a2.5 2.5 0 0 0 0-5H5Zm1.5 3H6v-1h.5a.5.5 0 0 1 0 1Zm4.5-3a1 1 0 0 0-1 1v5a1 1 0 1 0 2 0v-1h.5a2.5 2.5 0 0 0 0-5H11Zm1.5 3H12v-1h.5a.5.5 0 0 1 0 1Zm4.5-3a1 1 0 1 0 0 2v4a1 1 0 1 0 2 0v-4a1 1 0 1 0 0-2h-2Z" clip-rule="evenodd"></path></svg>`);
var root_5245 = svg_template(`<title> </title>`);
var root_6245 = svg_template(`<desc> </desc>`);
var root_4245 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M9 2.221V7H4.221a2 2 0 0 1 .365-.5L8.5 2.586A2 2 0 0 1 9 2.22ZM11 2v5a2 2 0 0 1-2 2H4a2 2 0 0 0-2 2v7a2 2 0 0 0 2 2 2 2 0 0 0 2 2h12a2 2 0 0 0 2-2 2 2 0 0 0 2-2v-7a2 2 0 0 0-2-2V4a2 2 0 0 0-2-2h-7Zm-6 9a1 1 0 0 0-1 1v5a1 1 0 1 0 2 0v-1h.5a2.5 2.5 0 0 0 0-5H5Zm1.5 3H6v-1h.5a.5.5 0 0 1 0 1Zm4.5-3a1 1 0 0 0-1 1v5a1 1 0 1 0 2 0v-1h.5a2.5 2.5 0 0 0 0-5H11Zm1.5 3H12v-1h.5a.5.5 0 0 1 0 1Zm4.5-3a1 1 0 1 0 0 2v4a1 1 0 1 0 2 0v-4a1 1 0 1 0 0-2h-2Z" clip-rule="evenodd"></path></svg>`);
function FilePptSolid($$anchor, $$props) {
  if (new.target === FilePptSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FilePptSolid);
  validate_prop_bindings($$props, [], [], FilePptSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "file ppt solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1245();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2245();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3245();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4245();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5245();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6245();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FilePptSolid);
  FilePptSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FilePptSolid_default = FilePptSolid;
FilePptSolid.filename = ".../flowbite-svelte-icons/dist/FilePptSolid.svelte";
mark_module_end(FilePptSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FileSearchOutline.svelte
mark_module_start();
var root_2246 = svg_template(`<title> </title>`);
var root_3246 = svg_template(`<desc> </desc>`);
var root_1246 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M10 3v4a1 1 0 0 1-1 1H5m8 7.5 2.5 2.5M19 4v16a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V7.914a1 1 0 0 1 .293-.707l3.914-3.914A1 1 0 0 1 9.914 3H18a1 1 0 0 1 1 1Zm-5 9.5a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0Z"></path></svg>`);
var root_5246 = svg_template(`<title> </title>`);
var root_6246 = svg_template(`<desc> </desc>`);
var root_4246 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M10 3v4a1 1 0 0 1-1 1H5m8 7.5 2.5 2.5M19 4v16a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V7.914a1 1 0 0 1 .293-.707l3.914-3.914A1 1 0 0 1 9.914 3H18a1 1 0 0 1 1 1Zm-5 9.5a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0Z"></path></svg>`);
function FileSearchOutline($$anchor, $$props) {
  if (new.target === FileSearchOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FileSearchOutline);
  validate_prop_bindings($$props, [], [], FileSearchOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "file search outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1246();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2246();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3246();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4246();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5246();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6246();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FileSearchOutline);
  FileSearchOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FileSearchOutline_default = FileSearchOutline;
FileSearchOutline.filename = ".../flowbite-svelte-icons/dist/FileSearchOutline.svelte";
mark_module_end(FileSearchOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FileSearchSolid.svelte
mark_module_start();
var root_2247 = svg_template(`<title> </title>`);
var root_3247 = svg_template(`<desc> </desc>`);
var root_1247 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M9 7V2.221a2 2 0 0 0-.5.365L4.586 6.5a2 2 0 0 0-.365.5H9Zm2 0V2h7a2 2 0 0 1 2 2v16a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V9h5a2 2 0 0 0 2-2Zm.5 5a1.5 1.5 0 1 0 0 3 1.5 1.5 0 0 0 0-3Zm0 5c.47 0 .917-.092 1.326-.26l1.967 1.967a1 1 0 0 0 1.414-1.414l-1.817-1.818A3.5 3.5 0 1 0 11.5 17Z" clip-rule="evenodd"></path></svg>`);
var root_5247 = svg_template(`<title> </title>`);
var root_6247 = svg_template(`<desc> </desc>`);
var root_4247 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M9 7V2.221a2 2 0 0 0-.5.365L4.586 6.5a2 2 0 0 0-.365.5H9Zm2 0V2h7a2 2 0 0 1 2 2v16a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V9h5a2 2 0 0 0 2-2Zm.5 5a1.5 1.5 0 1 0 0 3 1.5 1.5 0 0 0 0-3Zm0 5c.47 0 .917-.092 1.326-.26l1.967 1.967a1 1 0 0 0 1.414-1.414l-1.817-1.818A3.5 3.5 0 1 0 11.5 17Z" clip-rule="evenodd"></path></svg>`);
function FileSearchSolid($$anchor, $$props) {
  if (new.target === FileSearchSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FileSearchSolid);
  validate_prop_bindings($$props, [], [], FileSearchSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "file search solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1247();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2247();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3247();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4247();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5247();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6247();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FileSearchSolid);
  FileSearchSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FileSearchSolid_default = FileSearchSolid;
FileSearchSolid.filename = ".../flowbite-svelte-icons/dist/FileSearchSolid.svelte";
mark_module_end(FileSearchSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FileShieldOutline.svelte
mark_module_start();
var root_2248 = svg_template(`<title> </title>`);
var root_3248 = svg_template(`<desc> </desc>`);
var root_1248 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M18 9V4a1 1 0 0 0-1-1H8.914a1 1 0 0 0-.707.293L4.293 7.207A1 1 0 0 0 4 7.914V20a1 1 0 0 0 1 1h6M9 3v4a1 1 0 0 1-1 1H4m11 13a11.426 11.426 0 0 1-3.637-3.99A11.139 11.139 0 0 1 10 11.833L15 10l5 1.833a11.137 11.137 0 0 1-1.363 5.176A11.425 11.425 0 0 1 15.001 21Z"></path></svg>`);
var root_5248 = svg_template(`<title> </title>`);
var root_6248 = svg_template(`<desc> </desc>`);
var root_4248 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M18 9V4a1 1 0 0 0-1-1H8.914a1 1 0 0 0-.707.293L4.293 7.207A1 1 0 0 0 4 7.914V20a1 1 0 0 0 1 1h6M9 3v4a1 1 0 0 1-1 1H4m11 13a11.426 11.426 0 0 1-3.637-3.99A11.139 11.139 0 0 1 10 11.833L15 10l5 1.833a11.137 11.137 0 0 1-1.363 5.176A11.425 11.425 0 0 1 15.001 21Z"></path></svg>`);
function FileShieldOutline($$anchor, $$props) {
  if (new.target === FileShieldOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FileShieldOutline);
  validate_prop_bindings($$props, [], [], FileShieldOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "file shield outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1248();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2248();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3248();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4248();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5248();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6248();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FileShieldOutline);
  FileShieldOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FileShieldOutline_default = FileShieldOutline;
FileShieldOutline.filename = ".../flowbite-svelte-icons/dist/FileShieldOutline.svelte";
mark_module_end(FileShieldOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FileShieldSolid.svelte
mark_module_start();
var root_2249 = svg_template(`<title> </title>`);
var root_3249 = svg_template(`<desc> </desc>`);
var root_1249 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M9 7V2.221a2 2 0 0 0-.5.365L4.586 6.5a2 2 0 0 0-.365.5H9Zm2 0V2h7a2 2 0 0 1 2 2v5.703l-4.311-1.58a2 2 0 0 0-1.377 0l-5 1.832A2 2 0 0 0 8 11.861c.03 2.134.582 4.228 1.607 6.106.848 1.555 2 2.924 3.382 4.033H6a2 2 0 0 1-2-2V9h5a2 2 0 0 0 2-2Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M15.345 9.061a1 1 0 0 0-.689 0l-5 1.833a1 1 0 0 0-.656.953c.028 1.97.538 3.905 1.485 5.641a12.425 12.425 0 0 0 3.956 4.34 1 1 0 0 0 1.12 0 12.426 12.426 0 0 0 3.954-4.34A12.14 12.14 0 0 0 21 11.848a1 1 0 0 0-.656-.954l-5-1.833ZM15 19.765a10.401 10.401 0 0 0 2.76-3.235 10.15 10.15 0 0 0 1.206-4.011L15 11.065v8.7Z" clip-rule="evenodd"></path></svg>`);
var root_5249 = svg_template(`<title> </title>`);
var root_6249 = svg_template(`<desc> </desc>`);
var root_4249 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M9 7V2.221a2 2 0 0 0-.5.365L4.586 6.5a2 2 0 0 0-.365.5H9Zm2 0V2h7a2 2 0 0 1 2 2v5.703l-4.311-1.58a2 2 0 0 0-1.377 0l-5 1.832A2 2 0 0 0 8 11.861c.03 2.134.582 4.228 1.607 6.106.848 1.555 2 2.924 3.382 4.033H6a2 2 0 0 1-2-2V9h5a2 2 0 0 0 2-2Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M15.345 9.061a1 1 0 0 0-.689 0l-5 1.833a1 1 0 0 0-.656.953c.028 1.97.538 3.905 1.485 5.641a12.425 12.425 0 0 0 3.956 4.34 1 1 0 0 0 1.12 0 12.426 12.426 0 0 0 3.954-4.34A12.14 12.14 0 0 0 21 11.848a1 1 0 0 0-.656-.954l-5-1.833ZM15 19.765a10.401 10.401 0 0 0 2.76-3.235 10.15 10.15 0 0 0 1.206-4.011L15 11.065v8.7Z" clip-rule="evenodd"></path></svg>`);
function FileShieldSolid($$anchor, $$props) {
  if (new.target === FileShieldSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FileShieldSolid);
  validate_prop_bindings($$props, [], [], FileShieldSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "file shield solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1249();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2249();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3249();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4249();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5249();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6249();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_2 = sibling(node_4);
      var path_3 = sibling(path_2);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FileShieldSolid);
  FileShieldSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FileShieldSolid_default = FileShieldSolid;
FileShieldSolid.filename = ".../flowbite-svelte-icons/dist/FileShieldSolid.svelte";
mark_module_end(FileShieldSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FileSolid.svelte
mark_module_start();
var root_2250 = svg_template(`<title> </title>`);
var root_3250 = svg_template(`<desc> </desc>`);
var root_1250 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M9 2.221V7H4.221a2 2 0 0 1 .365-.5L8.5 2.586A2 2 0 0 1 9 2.22ZM11 2v5a2 2 0 0 1-2 2H4v11a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2h-7Z" clip-rule="evenodd"></path></svg>`);
var root_5250 = svg_template(`<title> </title>`);
var root_6250 = svg_template(`<desc> </desc>`);
var root_4250 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M9 2.221V7H4.221a2 2 0 0 1 .365-.5L8.5 2.586A2 2 0 0 1 9 2.22ZM11 2v5a2 2 0 0 1-2 2H4v11a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2h-7Z" clip-rule="evenodd"></path></svg>`);
function FileSolid($$anchor, $$props) {
  if (new.target === FileSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FileSolid);
  validate_prop_bindings($$props, [], [], FileSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "file solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1250();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2250();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3250();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4250();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5250();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6250();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FileSolid);
  FileSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FileSolid_default = FileSolid;
FileSolid.filename = ".../flowbite-svelte-icons/dist/FileSolid.svelte";
mark_module_end(FileSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FileVideoOutline.svelte
mark_module_start();
var root_2251 = svg_template(`<title> </title>`);
var root_3251 = svg_template(`<desc> </desc>`);
var root_1251 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linejoin="round" d="M10 3v4a1 1 0 0 1-1 1H5m14-4v16a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V7.914a1 1 0 0 1 .293-.707l3.914-3.914A1 1 0 0 1 9.914 3H18a1 1 0 0 1 1 1ZM9 12h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H9a1 1 0 0 1-1-1v-2a1 1 0 0 1 1-1Zm5.697 2.395v-.733l1.269-1.219v2.984l-1.268-1.032Z"></path></svg>`);
var root_5251 = svg_template(`<title> </title>`);
var root_6251 = svg_template(`<desc> </desc>`);
var root_4251 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linejoin="round" d="M10 3v4a1 1 0 0 1-1 1H5m14-4v16a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V7.914a1 1 0 0 1 .293-.707l3.914-3.914A1 1 0 0 1 9.914 3H18a1 1 0 0 1 1 1ZM9 12h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H9a1 1 0 0 1-1-1v-2a1 1 0 0 1 1-1Zm5.697 2.395v-.733l1.269-1.219v2.984l-1.268-1.032Z"></path></svg>`);
function FileVideoOutline($$anchor, $$props) {
  if (new.target === FileVideoOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FileVideoOutline);
  validate_prop_bindings($$props, [], [], FileVideoOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "file video outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1251();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2251();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3251();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4251();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5251();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6251();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FileVideoOutline);
  FileVideoOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FileVideoOutline_default = FileVideoOutline;
FileVideoOutline.filename = ".../flowbite-svelte-icons/dist/FileVideoOutline.svelte";
mark_module_end(FileVideoOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FileVideoSolid.svelte
mark_module_start();
var root_2252 = svg_template(`<title> </title>`);
var root_3252 = svg_template(`<desc> </desc>`);
var root_1252 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M9 7V2.221a2 2 0 0 0-.5.365L4.586 6.5a2 2 0 0 0-.365.5H9Zm2 0V2h7a2 2 0 0 1 2 2v16a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V9h5a2 2 0 0 0 2-2Zm-2 4a2 2 0 0 0-2 2v2a2 2 0 0 0 2 2h2a2 2 0 0 0 2-2v-2a2 2 0 0 0-2-2H9Zm0 2h2v2H9v-2Zm7.965-.557a1 1 0 0 0-1.692-.72l-1.268 1.218a1 1 0 0 0-.308.721v.733a1 1 0 0 0 .37.776l1.267 1.032a1 1 0 0 0 1.631-.776v-2.984Z" clip-rule="evenodd"></path></svg>`);
var root_5252 = svg_template(`<title> </title>`);
var root_6252 = svg_template(`<desc> </desc>`);
var root_4252 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M9 7V2.221a2 2 0 0 0-.5.365L4.586 6.5a2 2 0 0 0-.365.5H9Zm2 0V2h7a2 2 0 0 1 2 2v16a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V9h5a2 2 0 0 0 2-2Zm-2 4a2 2 0 0 0-2 2v2a2 2 0 0 0 2 2h2a2 2 0 0 0 2-2v-2a2 2 0 0 0-2-2H9Zm0 2h2v2H9v-2Zm7.965-.557a1 1 0 0 0-1.692-.72l-1.268 1.218a1 1 0 0 0-.308.721v.733a1 1 0 0 0 .37.776l1.267 1.032a1 1 0 0 0 1.631-.776v-2.984Z" clip-rule="evenodd"></path></svg>`);
function FileVideoSolid($$anchor, $$props) {
  if (new.target === FileVideoSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FileVideoSolid);
  validate_prop_bindings($$props, [], [], FileVideoSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "file video solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1252();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2252();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3252();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4252();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5252();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6252();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FileVideoSolid);
  FileVideoSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FileVideoSolid_default = FileVideoSolid;
FileVideoSolid.filename = ".../flowbite-svelte-icons/dist/FileVideoSolid.svelte";
mark_module_end(FileVideoSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FileWordOutline.svelte
mark_module_start();
var root_2253 = svg_template(`<title> </title>`);
var root_3253 = svg_template(`<desc> </desc>`);
var root_1253 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M10 3v4a1 1 0 0 1-1 1H5m4 4 1 5 2-3.333L14 17l1-5m4-8v16a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V7.914a1 1 0 0 1 .293-.707l3.914-3.914A1 1 0 0 1 9.914 3H18a1 1 0 0 1 1 1Z"></path></svg>`);
var root_5253 = svg_template(`<title> </title>`);
var root_6253 = svg_template(`<desc> </desc>`);
var root_4253 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M10 3v4a1 1 0 0 1-1 1H5m4 4 1 5 2-3.333L14 17l1-5m4-8v16a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V7.914a1 1 0 0 1 .293-.707l3.914-3.914A1 1 0 0 1 9.914 3H18a1 1 0 0 1 1 1Z"></path></svg>`);
function FileWordOutline($$anchor, $$props) {
  if (new.target === FileWordOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FileWordOutline);
  validate_prop_bindings($$props, [], [], FileWordOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "file word outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1253();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2253();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3253();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4253();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5253();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6253();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FileWordOutline);
  FileWordOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FileWordOutline_default = FileWordOutline;
FileWordOutline.filename = ".../flowbite-svelte-icons/dist/FileWordOutline.svelte";
mark_module_end(FileWordOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FileWordSolid.svelte
mark_module_start();
var root_2254 = svg_template(`<title> </title>`);
var root_3254 = svg_template(`<desc> </desc>`);
var root_1254 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M9 7V2.221a2 2 0 0 0-.5.365L4.586 6.5a2 2 0 0 0-.365.5H9Zm2 0V2h7a2 2 0 0 1 2 2v16a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V9h5a2 2 0 0 0 2-2Zm-1.02 4.804a1 1 0 1 0-1.96.392l1 5a1 1 0 0 0 1.838.319L12 15.61l1.143 1.905a1 1 0 0 0 1.838-.319l1-5a1 1 0 0 0-1.962-.392l-.492 2.463-.67-1.115a1 1 0 0 0-1.714 0l-.67 1.116-.492-2.464Z" clip-rule="evenodd"></path></svg>`);
var root_5254 = svg_template(`<title> </title>`);
var root_6254 = svg_template(`<desc> </desc>`);
var root_4254 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M9 7V2.221a2 2 0 0 0-.5.365L4.586 6.5a2 2 0 0 0-.365.5H9Zm2 0V2h7a2 2 0 0 1 2 2v16a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V9h5a2 2 0 0 0 2-2Zm-1.02 4.804a1 1 0 1 0-1.96.392l1 5a1 1 0 0 0 1.838.319L12 15.61l1.143 1.905a1 1 0 0 0 1.838-.319l1-5a1 1 0 0 0-1.962-.392l-.492 2.463-.67-1.115a1 1 0 0 0-1.714 0l-.67 1.116-.492-2.464Z" clip-rule="evenodd"></path></svg>`);
function FileWordSolid($$anchor, $$props) {
  if (new.target === FileWordSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FileWordSolid);
  validate_prop_bindings($$props, [], [], FileWordSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "file word solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1254();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2254();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3254();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4254();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5254();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6254();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FileWordSolid);
  FileWordSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FileWordSolid_default = FileWordSolid;
FileWordSolid.filename = ".../flowbite-svelte-icons/dist/FileWordSolid.svelte";
mark_module_end(FileWordSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FileZipOutline.svelte
mark_module_start();
var root_2255 = svg_template(`<title> </title>`);
var root_3255 = svg_template(`<desc> </desc>`);
var root_1255 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" d="M10 3v4a1 1 0 0 1-1 1H5m14-4v16a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V7.914a1 1 0 0 1 .293-.707l3.914-3.914A1 1 0 0 1 9.914 3H18a1 1 0 0 1 1 1Zm-4 1h.01v.01H15V5Zm-2 2h.01v.01H13V7Zm2 2h.01v.01H15V9Zm-2 2h.01v.01H13V11Zm2 2h.01v.01H15V13Zm-2 2h.01v.01H13V15Zm2 2h.01v.01H15V17Zm-2 2h.01v.01H13V19Z"></path></svg>`);
var root_5255 = svg_template(`<title> </title>`);
var root_6255 = svg_template(`<desc> </desc>`);
var root_4255 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" d="M10 3v4a1 1 0 0 1-1 1H5m14-4v16a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V7.914a1 1 0 0 1 .293-.707l3.914-3.914A1 1 0 0 1 9.914 3H18a1 1 0 0 1 1 1Zm-4 1h.01v.01H15V5Zm-2 2h.01v.01H13V7Zm2 2h.01v.01H15V9Zm-2 2h.01v.01H13V11Zm2 2h.01v.01H15V13Zm-2 2h.01v.01H13V15Zm2 2h.01v.01H15V17Zm-2 2h.01v.01H13V19Z"></path></svg>`);
function FileZipOutline($$anchor, $$props) {
  if (new.target === FileZipOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FileZipOutline);
  validate_prop_bindings($$props, [], [], FileZipOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "file zip outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1255();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2255();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3255();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4255();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5255();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6255();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FileZipOutline);
  FileZipOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FileZipOutline_default = FileZipOutline;
FileZipOutline.filename = ".../flowbite-svelte-icons/dist/FileZipOutline.svelte";
mark_module_end(FileZipOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FileZipSolid.svelte
mark_module_start();
var root_2256 = svg_template(`<title> </title>`);
var root_3256 = svg_template(`<desc> </desc>`);
var root_1256 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M9 2.221V7H4.221a2 2 0 0 1 .365-.5L8.5 2.586A2 2 0 0 1 9 2.22ZM11 2v5a2 2 0 0 1-2 2H4v11a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2h-7Zm3 2h2.01v2.01h-2V8h2v2.01h-2V12h2v2.01h-2V16h2v2.01h-2v2H12V18h2v-1.99h-2V14h2v-1.99h-2V10h2V8.01h-2V6h2V4Z" clip-rule="evenodd"></path></svg>`);
var root_5256 = svg_template(`<title> </title>`);
var root_6256 = svg_template(`<desc> </desc>`);
var root_4256 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M9 2.221V7H4.221a2 2 0 0 1 .365-.5L8.5 2.586A2 2 0 0 1 9 2.22ZM11 2v5a2 2 0 0 1-2 2H4v11a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2h-7Zm3 2h2.01v2.01h-2V8h2v2.01h-2V12h2v2.01h-2V16h2v2.01h-2v2H12V18h2v-1.99h-2V14h2v-1.99h-2V10h2V8.01h-2V6h2V4Z" clip-rule="evenodd"></path></svg>`);
function FileZipSolid($$anchor, $$props) {
  if (new.target === FileZipSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FileZipSolid);
  validate_prop_bindings($$props, [], [], FileZipSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "file zip solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1256();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2256();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3256();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4256();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5256();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6256();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FileZipSolid);
  FileZipSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FileZipSolid_default = FileZipSolid;
FileZipSolid.filename = ".../flowbite-svelte-icons/dist/FileZipSolid.svelte";
mark_module_end(FileZipSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FilterOutline.svelte
mark_module_start();
var root_2257 = svg_template(`<title> </title>`);
var root_3257 = svg_template(`<desc> </desc>`);
var root_1257 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" d="M18.796 4H5.204a1 1 0 0 0-.753 1.659l5.302 6.058a1 1 0 0 1 .247.659v4.874a.5.5 0 0 0 .2.4l3 2.25a.5.5 0 0 0 .8-.4v-7.124a1 1 0 0 1 .247-.659l5.302-6.059c.566-.646.106-1.658-.753-1.658Z"></path></svg>`);
var root_5257 = svg_template(`<title> </title>`);
var root_6257 = svg_template(`<desc> </desc>`);
var root_4257 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" d="M18.796 4H5.204a1 1 0 0 0-.753 1.659l5.302 6.058a1 1 0 0 1 .247.659v4.874a.5.5 0 0 0 .2.4l3 2.25a.5.5 0 0 0 .8-.4v-7.124a1 1 0 0 1 .247-.659l5.302-6.059c.566-.646.106-1.658-.753-1.658Z"></path></svg>`);
function FilterOutline($$anchor, $$props) {
  if (new.target === FilterOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FilterOutline);
  validate_prop_bindings($$props, [], [], FilterOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "filter outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1257();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2257();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3257();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4257();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5257();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6257();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FilterOutline);
  FilterOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FilterOutline_default = FilterOutline;
FilterOutline.filename = ".../flowbite-svelte-icons/dist/FilterOutline.svelte";
mark_module_end(FilterOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FilterSolid.svelte
mark_module_start();
var root_2258 = svg_template(`<title> </title>`);
var root_3258 = svg_template(`<desc> </desc>`);
var root_1258 = svg_template(`<svg><!><!><path d="M5.05 3C3.291 3 2.352 5.024 3.51 6.317l5.422 6.059v4.874c0 .472.227.917.613 1.2l3.069 2.25c1.01.742 2.454.036 2.454-1.2v-7.124l5.422-6.059C21.647 5.024 20.708 3 18.95 3H5.05Z"></path></svg>`);
var root_5258 = svg_template(`<title> </title>`);
var root_6258 = svg_template(`<desc> </desc>`);
var root_4258 = svg_template(`<svg><!><!><path d="M5.05 3C3.291 3 2.352 5.024 3.51 6.317l5.422 6.059v4.874c0 .472.227.917.613 1.2l3.069 2.25c1.01.742 2.454.036 2.454-1.2v-7.124l5.422-6.059C21.647 5.024 20.708 3 18.95 3H5.05Z"></path></svg>`);
function FilterSolid($$anchor, $$props) {
  if (new.target === FilterSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FilterSolid);
  validate_prop_bindings($$props, [], [], FilterSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "filter solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1258();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2258();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3258();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4258();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5258();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6258();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FilterSolid);
  FilterSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FilterSolid_default = FilterSolid;
FilterSolid.filename = ".../flowbite-svelte-icons/dist/FilterSolid.svelte";
mark_module_end(FilterSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FingerprintOutline.svelte
mark_module_start();
var root_2259 = svg_template(`<title> </title>`);
var root_3259 = svg_template(`<desc> </desc>`);
var root_1259 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M21 12a28.076 28.076 0 0 1-1.091 9M7.231 4.37a8.994 8.994 0 0 1 12.88 3.73M2.958 15S3 14.577 3 12a8.949 8.949 0 0 1 1.735-5.307m12.84 3.088A5.98 5.98 0 0 1 18 12a30 30 0 0 1-.464 6.232M6 12a6 6 0 0 1 9.352-4.974M4 21a5.964 5.964 0 0 1 1.01-3.328 5.15 5.15 0 0 0 .786-1.926m8.66 2.486a13.96 13.96 0 0 1-.962 2.683M7.5 19.336C9 17.092 9 14.845 9 12a3 3 0 1 1 6 0c0 .749 0 1.521-.031 2.311M12 12c0 3 0 6-2 9"></path></svg>`);
var root_5259 = svg_template(`<title> </title>`);
var root_6259 = svg_template(`<desc> </desc>`);
var root_4259 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M21 12a28.076 28.076 0 0 1-1.091 9M7.231 4.37a8.994 8.994 0 0 1 12.88 3.73M2.958 15S3 14.577 3 12a8.949 8.949 0 0 1 1.735-5.307m12.84 3.088A5.98 5.98 0 0 1 18 12a30 30 0 0 1-.464 6.232M6 12a6 6 0 0 1 9.352-4.974M4 21a5.964 5.964 0 0 1 1.01-3.328 5.15 5.15 0 0 0 .786-1.926m8.66 2.486a13.96 13.96 0 0 1-.962 2.683M7.5 19.336C9 17.092 9 14.845 9 12a3 3 0 1 1 6 0c0 .749 0 1.521-.031 2.311M12 12c0 3 0 6-2 9"></path></svg>`);
function FingerprintOutline($$anchor, $$props) {
  if (new.target === FingerprintOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FingerprintOutline);
  validate_prop_bindings($$props, [], [], FingerprintOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "fingerprint outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1259();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2259();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3259();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4259();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5259();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6259();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FingerprintOutline);
  FingerprintOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FingerprintOutline_default = FingerprintOutline;
FingerprintOutline.filename = ".../flowbite-svelte-icons/dist/FingerprintOutline.svelte";
mark_module_end(FingerprintOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FireOutline.svelte
mark_module_start();
var root_2260 = svg_template(`<title> </title>`);
var root_3260 = svg_template(`<desc> </desc>`);
var root_1260 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M18.122 17.645a7.185 7.185 0 0 1-2.656 2.495 7.06 7.06 0 0 1-3.52.853 6.617 6.617 0 0 1-3.306-.718 6.73 6.73 0 0 1-2.54-2.266c-2.672-4.57.287-8.846.887-9.668A4.448 4.448 0 0 0 8.07 6.31 4.49 4.49 0 0 0 7.997 4c1.284.965 6.43 3.258 5.525 10.631 1.496-1.136 2.7-3.046 2.846-6.216 1.43 1.061 3.985 5.462 1.754 9.23Z"></path></svg>`);
var root_5260 = svg_template(`<title> </title>`);
var root_6260 = svg_template(`<desc> </desc>`);
var root_4260 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M18.122 17.645a7.185 7.185 0 0 1-2.656 2.495 7.06 7.06 0 0 1-3.52.853 6.617 6.617 0 0 1-3.306-.718 6.73 6.73 0 0 1-2.54-2.266c-2.672-4.57.287-8.846.887-9.668A4.448 4.448 0 0 0 8.07 6.31 4.49 4.49 0 0 0 7.997 4c1.284.965 6.43 3.258 5.525 10.631 1.496-1.136 2.7-3.046 2.846-6.216 1.43 1.061 3.985 5.462 1.754 9.23Z"></path></svg>`);
function FireOutline($$anchor, $$props) {
  if (new.target === FireOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FireOutline);
  validate_prop_bindings($$props, [], [], FireOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "fire outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1260();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2260();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3260();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4260();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5260();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6260();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FireOutline);
  FireOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FireOutline_default = FireOutline;
FireOutline.filename = ".../flowbite-svelte-icons/dist/FireOutline.svelte";
mark_module_end(FireOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FireSolid.svelte
mark_module_start();
var root_2261 = svg_template(`<title> </title>`);
var root_3261 = svg_template(`<desc> </desc>`);
var root_1261 = svg_template(`<svg><!><!><path d="M8.597 3.2A1 1 0 0 0 7.04 4.289a3.49 3.49 0 0 1 .057 1.795 3.448 3.448 0 0 1-.84 1.575.999.999 0 0 0-.077.094c-.596.817-3.96 5.6-.941 10.762l.03.049a7.73 7.73 0 0 0 2.917 2.602 7.617 7.617 0 0 0 3.772.829 8.06 8.06 0 0 0 3.986-.975 8.185 8.185 0 0 0 3.04-2.864c1.301-2.2 1.184-4.556.588-6.441-.583-1.848-1.68-3.414-2.607-4.102a1 1 0 0 0-1.594.757c-.067 1.431-.363 2.551-.794 3.431-.222-2.407-1.127-4.196-2.224-5.524-1.147-1.39-2.564-2.3-3.323-2.788a8.487 8.487 0 0 1-.432-.287Z"></path></svg>`);
var root_5261 = svg_template(`<title> </title>`);
var root_6261 = svg_template(`<desc> </desc>`);
var root_4261 = svg_template(`<svg><!><!><path d="M8.597 3.2A1 1 0 0 0 7.04 4.289a3.49 3.49 0 0 1 .057 1.795 3.448 3.448 0 0 1-.84 1.575.999.999 0 0 0-.077.094c-.596.817-3.96 5.6-.941 10.762l.03.049a7.73 7.73 0 0 0 2.917 2.602 7.617 7.617 0 0 0 3.772.829 8.06 8.06 0 0 0 3.986-.975 8.185 8.185 0 0 0 3.04-2.864c1.301-2.2 1.184-4.556.588-6.441-.583-1.848-1.68-3.414-2.607-4.102a1 1 0 0 0-1.594.757c-.067 1.431-.363 2.551-.794 3.431-.222-2.407-1.127-4.196-2.224-5.524-1.147-1.39-2.564-2.3-3.323-2.788a8.487 8.487 0 0 1-.432-.287Z"></path></svg>`);
function FireSolid($$anchor, $$props) {
  if (new.target === FireSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FireSolid);
  validate_prop_bindings($$props, [], [], FireSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "fire solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1261();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2261();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3261();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4261();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5261();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6261();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FireSolid);
  FireSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FireSolid_default = FireSolid;
FireSolid.filename = ".../flowbite-svelte-icons/dist/FireSolid.svelte";
mark_module_end(FireSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FlagOutline.svelte
mark_module_start();
var root_2262 = svg_template(`<title> </title>`);
var root_3262 = svg_template(`<desc> </desc>`);
var root_1262 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M5 14v7M5 4.971v9.541c5.6-5.538 8.4 2.64 14-.086v-9.54C13.4 7.61 10.6-.568 5 4.97Z"></path></svg>`);
var root_5262 = svg_template(`<title> </title>`);
var root_6262 = svg_template(`<desc> </desc>`);
var root_4262 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M5 14v7M5 4.971v9.541c5.6-5.538 8.4 2.64 14-.086v-9.54C13.4 7.61 10.6-.568 5 4.97Z"></path></svg>`);
function FlagOutline($$anchor, $$props) {
  if (new.target === FlagOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FlagOutline);
  validate_prop_bindings($$props, [], [], FlagOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "flag outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1262();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2262();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3262();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4262();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5262();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6262();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FlagOutline);
  FlagOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FlagOutline_default = FlagOutline;
FlagOutline.filename = ".../flowbite-svelte-icons/dist/FlagOutline.svelte";
mark_module_end(FlagOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FlagSolid.svelte
mark_module_start();
var root_2263 = svg_template(`<title> </title>`);
var root_3263 = svg_template(`<desc> </desc>`);
var root_1263 = svg_template(`<svg><!><!><path d="M13.09 3.294c1.924.95 3.422 1.69 5.472.692a1 1 0 0 1 1.438.9v9.54a1 1 0 0 1-.562.9c-2.981 1.45-5.382.24-7.25-.701a38.739 38.739 0 0 0-.622-.31c-1.033-.497-1.887-.812-2.756-.77-.76.036-1.672.357-2.81 1.396V21a1 1 0 1 1-2 0V4.971a1 1 0 0 1 .297-.71c1.522-1.506 2.967-2.185 4.417-2.255 1.407-.068 2.653.453 3.72.967.225.108.443.216.655.32Z"></path></svg>`);
var root_5263 = svg_template(`<title> </title>`);
var root_6263 = svg_template(`<desc> </desc>`);
var root_4263 = svg_template(`<svg><!><!><path d="M13.09 3.294c1.924.95 3.422 1.69 5.472.692a1 1 0 0 1 1.438.9v9.54a1 1 0 0 1-.562.9c-2.981 1.45-5.382.24-7.25-.701a38.739 38.739 0 0 0-.622-.31c-1.033-.497-1.887-.812-2.756-.77-.76.036-1.672.357-2.81 1.396V21a1 1 0 1 1-2 0V4.971a1 1 0 0 1 .297-.71c1.522-1.506 2.967-2.185 4.417-2.255 1.407-.068 2.653.453 3.72.967.225.108.443.216.655.32Z"></path></svg>`);
function FlagSolid($$anchor, $$props) {
  if (new.target === FlagSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FlagSolid);
  validate_prop_bindings($$props, [], [], FlagSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "flag solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1263();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2263();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3263();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4263();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5263();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6263();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FlagSolid);
  FlagSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FlagSolid_default = FlagSolid;
FlagSolid.filename = ".../flowbite-svelte-icons/dist/FlagSolid.svelte";
mark_module_end(FlagSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FloppyDiskAltOutline.svelte
mark_module_start();
var root_2264 = svg_template(`<title> </title>`);
var root_3264 = svg_template(`<desc> </desc>`);
var root_1264 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" d="M11 16h2m6.707-9.293-2.414-2.414A1 1 0 0 0 16.586 4H5a1 1 0 0 0-1 1v14a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1V7.414a1 1 0 0 0-.293-.707ZM16 20v-6a1 1 0 0 0-1-1H9a1 1 0 0 0-1 1v6h8ZM9 4h6v3a1 1 0 0 1-1 1h-4a1 1 0 0 1-1-1V4Z"></path></svg>`);
var root_5264 = svg_template(`<title> </title>`);
var root_6264 = svg_template(`<desc> </desc>`);
var root_4264 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" d="M11 16h2m6.707-9.293-2.414-2.414A1 1 0 0 0 16.586 4H5a1 1 0 0 0-1 1v14a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1V7.414a1 1 0 0 0-.293-.707ZM16 20v-6a1 1 0 0 0-1-1H9a1 1 0 0 0-1 1v6h8ZM9 4h6v3a1 1 0 0 1-1 1h-4a1 1 0 0 1-1-1V4Z"></path></svg>`);
function FloppyDiskAltOutline($$anchor, $$props) {
  if (new.target === FloppyDiskAltOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FloppyDiskAltOutline);
  validate_prop_bindings($$props, [], [], FloppyDiskAltOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "floppy disk alt outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1264();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2264();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3264();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4264();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5264();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6264();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FloppyDiskAltOutline);
  FloppyDiskAltOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FloppyDiskAltOutline_default = FloppyDiskAltOutline;
FloppyDiskAltOutline.filename = ".../flowbite-svelte-icons/dist/FloppyDiskAltOutline.svelte";
mark_module_end(FloppyDiskAltOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FloppyDiskAltSolid.svelte
mark_module_start();
var root_2265 = svg_template(`<title> </title>`);
var root_3265 = svg_template(`<desc> </desc>`);
var root_1265 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M5 3a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V7.414A2 2 0 0 0 20.414 6L18 3.586A2 2 0 0 0 16.586 3H5Zm3 11a1 1 0 0 1 1-1h6a1 1 0 0 1 1 1v6H8v-6Zm1-7V5h6v2a1 1 0 0 1-1 1h-4a1 1 0 0 1-1-1Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M14 17h-4v-2h4v2Z" clip-rule="evenodd"></path></svg>`);
var root_5265 = svg_template(`<title> </title>`);
var root_6265 = svg_template(`<desc> </desc>`);
var root_4265 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M5 3a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V7.414A2 2 0 0 0 20.414 6L18 3.586A2 2 0 0 0 16.586 3H5Zm3 11a1 1 0 0 1 1-1h6a1 1 0 0 1 1 1v6H8v-6Zm1-7V5h6v2a1 1 0 0 1-1 1h-4a1 1 0 0 1-1-1Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M14 17h-4v-2h4v2Z" clip-rule="evenodd"></path></svg>`);
function FloppyDiskAltSolid($$anchor, $$props) {
  if (new.target === FloppyDiskAltSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FloppyDiskAltSolid);
  validate_prop_bindings($$props, [], [], FloppyDiskAltSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "floppy disk alt solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1265();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2265();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3265();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4265();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5265();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6265();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_2 = sibling(node_4);
      var path_3 = sibling(path_2);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FloppyDiskAltSolid);
  FloppyDiskAltSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FloppyDiskAltSolid_default = FloppyDiskAltSolid;
FloppyDiskAltSolid.filename = ".../flowbite-svelte-icons/dist/FloppyDiskAltSolid.svelte";
mark_module_end(FloppyDiskAltSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FloppyDiskOutline.svelte
mark_module_start();
var root_2266 = svg_template(`<title> </title>`);
var root_3266 = svg_template(`<desc> </desc>`);
var root_1266 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linejoin="round" d="M4 5a1 1 0 0 1 1-1h11.586a1 1 0 0 1 .707.293l2.414 2.414a1 1 0 0 1 .293.707V19a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1V5Z"></path><path stroke="currentColor" stroke-linejoin="round" d="M8 4h8v4H8V4Zm7 10a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"></path></svg>`);
var root_5266 = svg_template(`<title> </title>`);
var root_6266 = svg_template(`<desc> </desc>`);
var root_4266 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linejoin="round" d="M4 5a1 1 0 0 1 1-1h11.586a1 1 0 0 1 .707.293l2.414 2.414a1 1 0 0 1 .293.707V19a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1V5Z"></path><path stroke="currentColor" stroke-linejoin="round" d="M8 4h8v4H8V4Zm7 10a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"></path></svg>`);
function FloppyDiskOutline($$anchor, $$props) {
  if (new.target === FloppyDiskOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FloppyDiskOutline);
  validate_prop_bindings($$props, [], [], FloppyDiskOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "floppy disk outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1266();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2266();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3266();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4266();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5266();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6266();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_2 = sibling(node_4);
      var path_3 = sibling(path_2);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_2, "stroke-width", strokeWidth());
        set_attribute(path_3, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FloppyDiskOutline);
  FloppyDiskOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FloppyDiskOutline_default = FloppyDiskOutline;
FloppyDiskOutline.filename = ".../flowbite-svelte-icons/dist/FloppyDiskOutline.svelte";
mark_module_end(FloppyDiskOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FloppyDiskSolid.svelte
mark_module_start();
var root_2267 = svg_template(`<title> </title>`);
var root_3267 = svg_template(`<desc> </desc>`);
var root_1267 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M5 3a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V7.414A2 2 0 0 0 20.414 6L18 3.586A2 2 0 0 0 16.586 3H5Zm10 11a3 3 0 1 1-6 0 3 3 0 0 1 6 0ZM8 7V5h8v2a1 1 0 0 1-1 1H9a1 1 0 0 1-1-1Z" clip-rule="evenodd"></path></svg>`);
var root_5267 = svg_template(`<title> </title>`);
var root_6267 = svg_template(`<desc> </desc>`);
var root_4267 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M5 3a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V7.414A2 2 0 0 0 20.414 6L18 3.586A2 2 0 0 0 16.586 3H5Zm10 11a3 3 0 1 1-6 0 3 3 0 0 1 6 0ZM8 7V5h8v2a1 1 0 0 1-1 1H9a1 1 0 0 1-1-1Z" clip-rule="evenodd"></path></svg>`);
function FloppyDiskSolid($$anchor, $$props) {
  if (new.target === FloppyDiskSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FloppyDiskSolid);
  validate_prop_bindings($$props, [], [], FloppyDiskSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "floppy disk solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1267();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2267();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3267();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4267();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5267();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6267();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FloppyDiskSolid);
  FloppyDiskSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FloppyDiskSolid_default = FloppyDiskSolid;
FloppyDiskSolid.filename = ".../flowbite-svelte-icons/dist/FloppyDiskSolid.svelte";
mark_module_end(FloppyDiskSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FlowbiteSolid.svelte
mark_module_start();
var root_2268 = svg_template(`<title> </title>`);
var root_3268 = svg_template(`<desc> </desc>`);
var root_1268 = svg_template(`<svg><!><!><path d="M15.907 11.998 10.332 9.23a.9.9 0 0 1-.16-.037l-.018-.007v6.554c0 .017.008.034.01.051l2.388-2.974 3.355-.82Z"></path><path d="m11.463 4.054 5.579 3.323A4.02 4.02 0 0 1 18.525 9c.332.668.47 1.414.398 2.155a3.07 3.07 0 0 1-.745 1.65 3.108 3.108 0 0 1-1.55.951c-.022.007-.045.005-.07.01-.062.03-.126.057-.191.08l-2.72.667-1.992 2.48c-.18.227-.41.409-.67.534.047.034.085.077.137.107a2.05 2.05 0 0 0 1.995.035c.592-.33 2.15-1.201 4.636-2.892l.28-.19c1.328-.895 3.616-2.442 3.967-4.215a9.94 9.94 0 0 0-1.713-4.154 10.027 10.027 0 0 0-3.375-2.989 10.107 10.107 0 0 0-8.802-.418c1.162.287 2.287.704 3.354 1.243Z"></path><path d="M5.382 17.082v-6.457a3.7 3.7 0 0 1 .45-1.761 3.733 3.733 0 0 1 1.238-1.34 3.915 3.915 0 0 1 3.433-.245c.176.03.347.084.508.161l5.753 2.856c.082.05.161.105.236.165a2.128 2.128 0 0 0-.953-1.455l-5.51-3.284c-1.74-.857-3.906-1.523-5.244-1.097a9.96 9.96 0 0 0-2.5 3.496 9.895 9.895 0 0 0 .283 8.368 9.973 9.973 0 0 0 2.73 3.322 17.161 17.161 0 0 1-.424-2.729Z"></path><path d="m19.102 16.163-.272.183c-2.557 1.74-4.169 2.64-4.698 2.935a4.083 4.083 0 0 1-2 .53 3.946 3.946 0 0 1-1.983-.535 3.788 3.788 0 0 1-1.36-1.361 3.752 3.752 0 0 1-.51-1.85 1.812 1.812 0 0 1-.043-.26V9.143c0-.024.009-.046.01-.07-.056.02-.11.043-.162.07a1.796 1.796 0 0 0-.787 1.516v6.377a10.67 10.67 0 0 0 1.113 4.27 10.11 10.11 0 0 0 8.505-.53 10.022 10.022 0 0 0 3.282-2.858 9.936 9.936 0 0 0 1.75-3.97 19.615 19.615 0 0 1-2.845 2.216Z"></path></svg>`);
var root_5268 = svg_template(`<title> </title>`);
var root_6268 = svg_template(`<desc> </desc>`);
var root_4268 = svg_template(`<svg><!><!><path d="M15.907 11.998 10.332 9.23a.9.9 0 0 1-.16-.037l-.018-.007v6.554c0 .017.008.034.01.051l2.388-2.974 3.355-.82Z"></path><path d="m11.463 4.054 5.579 3.323A4.02 4.02 0 0 1 18.525 9c.332.668.47 1.414.398 2.155a3.07 3.07 0 0 1-.745 1.65 3.108 3.108 0 0 1-1.55.951c-.022.007-.045.005-.07.01-.062.03-.126.057-.191.08l-2.72.667-1.992 2.48c-.18.227-.41.409-.67.534.047.034.085.077.137.107a2.05 2.05 0 0 0 1.995.035c.592-.33 2.15-1.201 4.636-2.892l.28-.19c1.328-.895 3.616-2.442 3.967-4.215a9.94 9.94 0 0 0-1.713-4.154 10.027 10.027 0 0 0-3.375-2.989 10.107 10.107 0 0 0-8.802-.418c1.162.287 2.287.704 3.354 1.243Z"></path><path d="M5.382 17.082v-6.457a3.7 3.7 0 0 1 .45-1.761 3.733 3.733 0 0 1 1.238-1.34 3.915 3.915 0 0 1 3.433-.245c.176.03.347.084.508.161l5.753 2.856c.082.05.161.105.236.165a2.128 2.128 0 0 0-.953-1.455l-5.51-3.284c-1.74-.857-3.906-1.523-5.244-1.097a9.96 9.96 0 0 0-2.5 3.496 9.895 9.895 0 0 0 .283 8.368 9.973 9.973 0 0 0 2.73 3.322 17.161 17.161 0 0 1-.424-2.729Z"></path><path d="m19.102 16.163-.272.183c-2.557 1.74-4.169 2.64-4.698 2.935a4.083 4.083 0 0 1-2 .53 3.946 3.946 0 0 1-1.983-.535 3.788 3.788 0 0 1-1.36-1.361 3.752 3.752 0 0 1-.51-1.85 1.812 1.812 0 0 1-.043-.26V9.143c0-.024.009-.046.01-.07-.056.02-.11.043-.162.07a1.796 1.796 0 0 0-.787 1.516v6.377a10.67 10.67 0 0 0 1.113 4.27 10.11 10.11 0 0 0 8.505-.53 10.022 10.022 0 0 0 3.282-2.858 9.936 9.936 0 0 0 1.75-3.97 19.615 19.615 0 0 1-2.845 2.216Z"></path></svg>`);
function FlowbiteSolid($$anchor, $$props) {
  if (new.target === FlowbiteSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FlowbiteSolid);
  validate_prop_bindings($$props, [], [], FlowbiteSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "flowbite solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1268();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2268();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3268();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      var path_2 = sibling(path_1);
      var path_3 = sibling(path_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4268();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5268();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6268();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_4 = sibling(node_4);
      var path_5 = sibling(path_4);
      var path_6 = sibling(path_5);
      var path_7 = sibling(path_6);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FlowbiteSolid);
  FlowbiteSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FlowbiteSolid_default = FlowbiteSolid;
FlowbiteSolid.filename = ".../flowbite-svelte-icons/dist/FlowbiteSolid.svelte";
mark_module_end(FlowbiteSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FolderArrowRightOutline.svelte
mark_module_start();
var root_2269 = svg_template(`<title> </title>`);
var root_3269 = svg_template(`<desc> </desc>`);
var root_1269 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M13.5 8H4m4 6h8m0 0-2-2m2 2-2 2M4 6v13a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1V9a1 1 0 0 0-1-1h-5.032a1 1 0 0 1-.768-.36l-1.9-2.28a1 1 0 0 0-.768-.36H5a1 1 0 0 0-1 1Z"></path></svg>`);
var root_5269 = svg_template(`<title> </title>`);
var root_6269 = svg_template(`<desc> </desc>`);
var root_4269 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M13.5 8H4m4 6h8m0 0-2-2m2 2-2 2M4 6v13a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1V9a1 1 0 0 0-1-1h-5.032a1 1 0 0 1-.768-.36l-1.9-2.28a1 1 0 0 0-.768-.36H5a1 1 0 0 0-1 1Z"></path></svg>`);
function FolderArrowRightOutline($$anchor, $$props) {
  if (new.target === FolderArrowRightOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FolderArrowRightOutline);
  validate_prop_bindings($$props, [], [], FolderArrowRightOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "folder arrow right outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1269();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2269();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3269();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4269();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5269();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6269();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FolderArrowRightOutline);
  FolderArrowRightOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FolderArrowRightOutline_default = FolderArrowRightOutline;
FolderArrowRightOutline.filename = ".../flowbite-svelte-icons/dist/FolderArrowRightOutline.svelte";
mark_module_end(FolderArrowRightOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FolderArrowRightSolid.svelte
mark_module_start();
var root_2270 = svg_template(`<title> </title>`);
var root_3270 = svg_template(`<desc> </desc>`);
var root_1270 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M5 4a2 2 0 0 0-2 2v1h10.968l-1.9-2.28A2 2 0 0 0 10.532 4H5ZM3 19V9h18v10a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2Zm11.707-7.707a1 1 0 0 0-1.414 1.414l.293.293H8a1 1 0 1 0 0 2h5.586l-.293.293a1 1 0 0 0 1.414 1.414l2-2a1 1 0 0 0 0-1.414l-2-2Z" clip-rule="evenodd"></path></svg>`);
var root_5270 = svg_template(`<title> </title>`);
var root_6270 = svg_template(`<desc> </desc>`);
var root_4270 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M5 4a2 2 0 0 0-2 2v1h10.968l-1.9-2.28A2 2 0 0 0 10.532 4H5ZM3 19V9h18v10a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2Zm11.707-7.707a1 1 0 0 0-1.414 1.414l.293.293H8a1 1 0 1 0 0 2h5.586l-.293.293a1 1 0 0 0 1.414 1.414l2-2a1 1 0 0 0 0-1.414l-2-2Z" clip-rule="evenodd"></path></svg>`);
function FolderArrowRightSolid($$anchor, $$props) {
  if (new.target === FolderArrowRightSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FolderArrowRightSolid);
  validate_prop_bindings($$props, [], [], FolderArrowRightSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "folder arrow right solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1270();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2270();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3270();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4270();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5270();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6270();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FolderArrowRightSolid);
  FolderArrowRightSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FolderArrowRightSolid_default = FolderArrowRightSolid;
FolderArrowRightSolid.filename = ".../flowbite-svelte-icons/dist/FolderArrowRightSolid.svelte";
mark_module_end(FolderArrowRightSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FolderDuplicateOutline.svelte
mark_module_start();
var root_2271 = svg_template(`<title> </title>`);
var root_3271 = svg_template(`<desc> </desc>`);
var root_1271 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12 11H4m15.5 5a.5.5 0 0 0 .5-.5V8a1 1 0 0 0-1-1h-3.75a1 1 0 0 1-.829-.44l-1.436-2.12a1 1 0 0 0-.828-.44H8a1 1 0 0 0-1 1M4 9v10a1 1 0 0 0 1 1h11a1 1 0 0 0 1-1v-7a1 1 0 0 0-1-1h-3.75a1 1 0 0 1-.829-.44L9.985 8.44A1 1 0 0 0 9.157 8H5a1 1 0 0 0-1 1Z"></path></svg>`);
var root_5271 = svg_template(`<title> </title>`);
var root_6271 = svg_template(`<desc> </desc>`);
var root_4271 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12 11H4m15.5 5a.5.5 0 0 0 .5-.5V8a1 1 0 0 0-1-1h-3.75a1 1 0 0 1-.829-.44l-1.436-2.12a1 1 0 0 0-.828-.44H8a1 1 0 0 0-1 1M4 9v10a1 1 0 0 0 1 1h11a1 1 0 0 0 1-1v-7a1 1 0 0 0-1-1h-3.75a1 1 0 0 1-.829-.44L9.985 8.44A1 1 0 0 0 9.157 8H5a1 1 0 0 0-1 1Z"></path></svg>`);
function FolderDuplicateOutline($$anchor, $$props) {
  if (new.target === FolderDuplicateOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FolderDuplicateOutline);
  validate_prop_bindings($$props, [], [], FolderDuplicateOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "folder duplicate outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1271();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2271();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3271();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4271();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5271();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6271();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FolderDuplicateOutline);
  FolderDuplicateOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FolderDuplicateOutline_default = FolderDuplicateOutline;
FolderDuplicateOutline.filename = ".../flowbite-svelte-icons/dist/FolderDuplicateOutline.svelte";
mark_module_end(FolderDuplicateOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FolderDuplicateSolid.svelte
mark_module_start();
var root_2272 = svg_template(`<title> </title>`);
var root_3272 = svg_template(`<desc> </desc>`);
var root_1272 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M6 5a2 2 0 0 1 2-2h4.157a2 2 0 0 1 1.656.879L15.249 6H19a2 2 0 0 1 2 2v7a2 2 0 0 1-2 2v-5a3 3 0 0 0-3-3h-3.22l-1.14-1.682A3 3 0 0 0 9.157 6H6V5Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M3 9a2 2 0 0 1 2-2h4.157a2 2 0 0 1 1.656.879L12.249 10H3V9Zm0 3v7a2 2 0 0 0 2 2h11a2 2 0 0 0 2-2v-7H3Z" clip-rule="evenodd"></path></svg>`);
var root_5272 = svg_template(`<title> </title>`);
var root_6272 = svg_template(`<desc> </desc>`);
var root_4272 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M6 5a2 2 0 0 1 2-2h4.157a2 2 0 0 1 1.656.879L15.249 6H19a2 2 0 0 1 2 2v7a2 2 0 0 1-2 2v-5a3 3 0 0 0-3-3h-3.22l-1.14-1.682A3 3 0 0 0 9.157 6H6V5Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M3 9a2 2 0 0 1 2-2h4.157a2 2 0 0 1 1.656.879L12.249 10H3V9Zm0 3v7a2 2 0 0 0 2 2h11a2 2 0 0 0 2-2v-7H3Z" clip-rule="evenodd"></path></svg>`);
function FolderDuplicateSolid($$anchor, $$props) {
  if (new.target === FolderDuplicateSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FolderDuplicateSolid);
  validate_prop_bindings($$props, [], [], FolderDuplicateSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "folder duplicate solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1272();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2272();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3272();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4272();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5272();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6272();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_2 = sibling(node_4);
      var path_3 = sibling(path_2);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FolderDuplicateSolid);
  FolderDuplicateSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FolderDuplicateSolid_default = FolderDuplicateSolid;
FolderDuplicateSolid.filename = ".../flowbite-svelte-icons/dist/FolderDuplicateSolid.svelte";
mark_module_end(FolderDuplicateSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FolderOpenOutline.svelte
mark_module_start();
var root_2273 = svg_template(`<title> </title>`);
var root_3273 = svg_template(`<desc> </desc>`);
var root_1273 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M3 19V6a1 1 0 0 1 1-1h4.032a1 1 0 0 1 .768.36l1.9 2.28a1 1 0 0 0 .768.36H16a1 1 0 0 1 1 1v1M3 19l3-8h15l-3 8H3Z"></path></svg>`);
var root_5273 = svg_template(`<title> </title>`);
var root_6273 = svg_template(`<desc> </desc>`);
var root_4273 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M3 19V6a1 1 0 0 1 1-1h4.032a1 1 0 0 1 .768.36l1.9 2.28a1 1 0 0 0 .768.36H16a1 1 0 0 1 1 1v1M3 19l3-8h15l-3 8H3Z"></path></svg>`);
function FolderOpenOutline($$anchor, $$props) {
  if (new.target === FolderOpenOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FolderOpenOutline);
  validate_prop_bindings($$props, [], [], FolderOpenOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "folder open outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1273();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2273();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3273();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4273();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5273();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6273();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FolderOpenOutline);
  FolderOpenOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FolderOpenOutline_default = FolderOpenOutline;
FolderOpenOutline.filename = ".../flowbite-svelte-icons/dist/FolderOpenOutline.svelte";
mark_module_end(FolderOpenOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FolderOpenSolid.svelte
mark_module_start();
var root_2274 = svg_template(`<title> </title>`);
var root_3274 = svg_template(`<desc> </desc>`);
var root_1274 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M4 4a2 2 0 0 0-2 2v12a2 2 0 0 0 .087.586l2.977-7.937A1 1 0 0 1 6 10h12V9a2 2 0 0 0-2-2h-4.532l-1.9-2.28A2 2 0 0 0 8.032 4H4Zm2.693 8H6.5l-3 8H18l3-8H6.693Z" clip-rule="evenodd"></path></svg>`);
var root_5274 = svg_template(`<title> </title>`);
var root_6274 = svg_template(`<desc> </desc>`);
var root_4274 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M4 4a2 2 0 0 0-2 2v12a2 2 0 0 0 .087.586l2.977-7.937A1 1 0 0 1 6 10h12V9a2 2 0 0 0-2-2h-4.532l-1.9-2.28A2 2 0 0 0 8.032 4H4Zm2.693 8H6.5l-3 8H18l3-8H6.693Z" clip-rule="evenodd"></path></svg>`);
function FolderOpenSolid($$anchor, $$props) {
  if (new.target === FolderOpenSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FolderOpenSolid);
  validate_prop_bindings($$props, [], [], FolderOpenSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "folder open solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1274();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2274();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3274();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4274();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5274();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6274();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FolderOpenSolid);
  FolderOpenSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FolderOpenSolid_default = FolderOpenSolid;
FolderOpenSolid.filename = ".../flowbite-svelte-icons/dist/FolderOpenSolid.svelte";
mark_module_end(FolderOpenSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FolderOutline.svelte
mark_module_start();
var root_2275 = svg_template(`<title> </title>`);
var root_3275 = svg_template(`<desc> </desc>`);
var root_1275 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M13.5 8H4m0-2v13a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1V9a1 1 0 0 0-1-1h-5.032a1 1 0 0 1-.768-.36l-1.9-2.28a1 1 0 0 0-.768-.36H5a1 1 0 0 0-1 1Z"></path></svg>`);
var root_5275 = svg_template(`<title> </title>`);
var root_6275 = svg_template(`<desc> </desc>`);
var root_4275 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M13.5 8H4m0-2v13a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1V9a1 1 0 0 0-1-1h-5.032a1 1 0 0 1-.768-.36l-1.9-2.28a1 1 0 0 0-.768-.36H5a1 1 0 0 0-1 1Z"></path></svg>`);
function FolderOutline($$anchor, $$props) {
  if (new.target === FolderOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FolderOutline);
  validate_prop_bindings($$props, [], [], FolderOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "folder outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1275();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2275();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3275();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4275();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5275();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6275();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FolderOutline);
  FolderOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FolderOutline_default = FolderOutline;
FolderOutline.filename = ".../flowbite-svelte-icons/dist/FolderOutline.svelte";
mark_module_end(FolderOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FolderPlusOutline.svelte
mark_module_start();
var root_2276 = svg_template(`<title> </title>`);
var root_3276 = svg_template(`<desc> </desc>`);
var root_1276 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M14 8H4m8 3.5v5M9.5 14h5M4 6v13a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1V9a1 1 0 0 0-1-1h-5.032a1 1 0 0 1-.768-.36l-1.9-2.28a1 1 0 0 0-.768-.36H5a1 1 0 0 0-1 1Z"></path></svg>`);
var root_5276 = svg_template(`<title> </title>`);
var root_6276 = svg_template(`<desc> </desc>`);
var root_4276 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M14 8H4m8 3.5v5M9.5 14h5M4 6v13a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1V9a1 1 0 0 0-1-1h-5.032a1 1 0 0 1-.768-.36l-1.9-2.28a1 1 0 0 0-.768-.36H5a1 1 0 0 0-1 1Z"></path></svg>`);
function FolderPlusOutline($$anchor, $$props) {
  if (new.target === FolderPlusOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FolderPlusOutline);
  validate_prop_bindings($$props, [], [], FolderPlusOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "folder plus outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1276();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2276();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3276();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4276();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5276();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6276();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FolderPlusOutline);
  FolderPlusOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FolderPlusOutline_default = FolderPlusOutline;
FolderPlusOutline.filename = ".../flowbite-svelte-icons/dist/FolderPlusOutline.svelte";
mark_module_end(FolderPlusOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FolderPlusSolid.svelte
mark_module_start();
var root_2277 = svg_template(`<title> </title>`);
var root_3277 = svg_template(`<desc> </desc>`);
var root_1277 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M5 4a2 2 0 0 0-2 2v1h10.968l-1.9-2.28A2 2 0 0 0 10.532 4H5ZM3 19V9h18v10a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2Zm9-8.5a1 1 0 0 1 1 1V13h1.5a1 1 0 1 1 0 2H13v1.5a1 1 0 1 1-2 0V15H9.5a1 1 0 1 1 0-2H11v-1.5a1 1 0 0 1 1-1Z" clip-rule="evenodd"></path></svg>`);
var root_5277 = svg_template(`<title> </title>`);
var root_6277 = svg_template(`<desc> </desc>`);
var root_4277 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M5 4a2 2 0 0 0-2 2v1h10.968l-1.9-2.28A2 2 0 0 0 10.532 4H5ZM3 19V9h18v10a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2Zm9-8.5a1 1 0 0 1 1 1V13h1.5a1 1 0 1 1 0 2H13v1.5a1 1 0 1 1-2 0V15H9.5a1 1 0 1 1 0-2H11v-1.5a1 1 0 0 1 1-1Z" clip-rule="evenodd"></path></svg>`);
function FolderPlusSolid($$anchor, $$props) {
  if (new.target === FolderPlusSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FolderPlusSolid);
  validate_prop_bindings($$props, [], [], FolderPlusSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "folder plus solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1277();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2277();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3277();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4277();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5277();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6277();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FolderPlusSolid);
  FolderPlusSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FolderPlusSolid_default = FolderPlusSolid;
FolderPlusSolid.filename = ".../flowbite-svelte-icons/dist/FolderPlusSolid.svelte";
mark_module_end(FolderPlusSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/FolderSolid.svelte
mark_module_start();
var root_2278 = svg_template(`<title> </title>`);
var root_3278 = svg_template(`<desc> </desc>`);
var root_1278 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M3 6a2 2 0 0 1 2-2h5.532a2 2 0 0 1 1.536.72l1.9 2.28H3V6Zm0 3v10a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V9H3Z" clip-rule="evenodd"></path></svg>`);
var root_5278 = svg_template(`<title> </title>`);
var root_6278 = svg_template(`<desc> </desc>`);
var root_4278 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M3 6a2 2 0 0 1 2-2h5.532a2 2 0 0 1 1.536.72l1.9 2.28H3V6Zm0 3v10a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V9H3Z" clip-rule="evenodd"></path></svg>`);
function FolderSolid($$anchor, $$props) {
  if (new.target === FolderSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, FolderSolid);
  validate_prop_bindings($$props, [], [], FolderSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "folder solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1278();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2278();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3278();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4278();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5278();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6278();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FolderSolid);
  FolderSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FolderSolid_default = FolderSolid;
FolderSolid.filename = ".../flowbite-svelte-icons/dist/FolderSolid.svelte";
mark_module_end(FolderSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ForwardOutline.svelte
mark_module_start();
var root_2279 = svg_template(`<title> </title>`);
var root_3279 = svg_template(`<desc> </desc>`);
var root_1279 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M4.248 19C3.22 15.77 5.275 8.232 12.466 8.232V6.079a1.025 1.025 0 0 1 1.644-.862l5.479 4.307a1.108 1.108 0 0 1 0 1.723l-5.48 4.307a1.026 1.026 0 0 1-1.643-.861v-2.154C5.275 13.616 4.248 19 4.248 19Z"></path></svg>`);
var root_5279 = svg_template(`<title> </title>`);
var root_6279 = svg_template(`<desc> </desc>`);
var root_4279 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M4.248 19C3.22 15.77 5.275 8.232 12.466 8.232V6.079a1.025 1.025 0 0 1 1.644-.862l5.479 4.307a1.108 1.108 0 0 1 0 1.723l-5.48 4.307a1.026 1.026 0 0 1-1.643-.861v-2.154C5.275 13.616 4.248 19 4.248 19Z"></path></svg>`);
function ForwardOutline($$anchor, $$props) {
  if (new.target === ForwardOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ForwardOutline);
  validate_prop_bindings($$props, [], [], ForwardOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "forward outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1279();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2279();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3279();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4279();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5279();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6279();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ForwardOutline);
  ForwardOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ForwardOutline_default = ForwardOutline;
ForwardOutline.filename = ".../flowbite-svelte-icons/dist/ForwardOutline.svelte";
mark_module_end(ForwardOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ForwardSolid.svelte
mark_module_start();
var root_2280 = svg_template(`<title> </title>`);
var root_3280 = svg_template(`<desc> </desc>`);
var root_1280 = svg_template(`<svg><!><!><path d="M5.027 10.9a8.729 8.729 0 0 1 6.422-3.62v-1.2A2.061 2.061 0 0 1 12.61 4.2a1.986 1.986 0 0 1 2.104.23l5.491 4.308a2.11 2.11 0 0 1 .588 2.566 2.109 2.109 0 0 1-.588.734l-5.489 4.308a1.983 1.983 0 0 1-2.104.228 2.065 2.065 0 0 1-1.16-1.876v-.942c-5.33 1.284-6.212 5.251-6.25 5.441a1 1 0 0 1-.923.806h-.06a1.003 1.003 0 0 1-.955-.7A10.221 10.221 0 0 1 5.027 10.9Z"></path></svg>`);
var root_5280 = svg_template(`<title> </title>`);
var root_6280 = svg_template(`<desc> </desc>`);
var root_4280 = svg_template(`<svg><!><!><path d="M5.027 10.9a8.729 8.729 0 0 1 6.422-3.62v-1.2A2.061 2.061 0 0 1 12.61 4.2a1.986 1.986 0 0 1 2.104.23l5.491 4.308a2.11 2.11 0 0 1 .588 2.566 2.109 2.109 0 0 1-.588.734l-5.489 4.308a1.983 1.983 0 0 1-2.104.228 2.065 2.065 0 0 1-1.16-1.876v-.942c-5.33 1.284-6.212 5.251-6.25 5.441a1 1 0 0 1-.923.806h-.06a1.003 1.003 0 0 1-.955-.7A10.221 10.221 0 0 1 5.027 10.9Z"></path></svg>`);
function ForwardSolid($$anchor, $$props) {
  if (new.target === ForwardSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ForwardSolid);
  validate_prop_bindings($$props, [], [], ForwardSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "forward solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1280();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2280();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3280();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4280();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5280();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6280();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ForwardSolid);
  ForwardSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ForwardSolid_default = ForwardSolid;
ForwardSolid.filename = ".../flowbite-svelte-icons/dist/ForwardSolid.svelte";
mark_module_end(ForwardSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ForwardStepOutline.svelte
mark_module_start();
var root_2281 = svg_template(`<title> </title>`);
var root_3281 = svg_template(`<desc> </desc>`);
var root_1281 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M16 6v12M8 6v12l8-6-8-6Z"></path></svg>`);
var root_5281 = svg_template(`<title> </title>`);
var root_6281 = svg_template(`<desc> </desc>`);
var root_4281 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M16 6v12M8 6v12l8-6-8-6Z"></path></svg>`);
function ForwardStepOutline($$anchor, $$props) {
  if (new.target === ForwardStepOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ForwardStepOutline);
  validate_prop_bindings($$props, [], [], ForwardStepOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "forward step outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1281();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2281();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3281();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4281();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5281();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6281();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ForwardStepOutline);
  ForwardStepOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ForwardStepOutline_default = ForwardStepOutline;
ForwardStepOutline.filename = ".../flowbite-svelte-icons/dist/ForwardStepOutline.svelte";
mark_module_end(ForwardStepOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ForwardStepSolid.svelte
mark_module_start();
var root_2282 = svg_template(`<title> </title>`);
var root_3282 = svg_template(`<desc> </desc>`);
var root_1282 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M17 6a1 1 0 1 0-2 0v4L8.6 5.2A1 1 0 0 0 7 6v12a1 1 0 0 0 1.6.8L15 14v4a1 1 0 1 0 2 0V6Z" clip-rule="evenodd"></path></svg>`);
var root_5282 = svg_template(`<title> </title>`);
var root_6282 = svg_template(`<desc> </desc>`);
var root_4282 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M17 6a1 1 0 1 0-2 0v4L8.6 5.2A1 1 0 0 0 7 6v12a1 1 0 0 0 1.6.8L15 14v4a1 1 0 1 0 2 0V6Z" clip-rule="evenodd"></path></svg>`);
function ForwardStepSolid($$anchor, $$props) {
  if (new.target === ForwardStepSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ForwardStepSolid);
  validate_prop_bindings($$props, [], [], ForwardStepSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "forward step solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1282();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2282();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3282();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4282();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5282();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6282();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ForwardStepSolid);
  ForwardStepSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ForwardStepSolid_default = ForwardStepSolid;
ForwardStepSolid.filename = ".../flowbite-svelte-icons/dist/ForwardStepSolid.svelte";
mark_module_end(ForwardStepSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/GiftBoxOutline.svelte
mark_module_start();
var root_2283 = svg_template(`<title> </title>`);
var root_3283 = svg_template(`<desc> </desc>`);
var root_1283 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M10 21v-9m3-4H7.5a2.5 2.5 0 1 1 0-5c1.5 0 2.875 1.25 3.875 2.5M14 21v-9m-9 0h14v8a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1v-8ZM4 8h16a1 1 0 0 1 1 1v3H3V9a1 1 0 0 1 1-1Zm12.155-5c-3 0-5.5 5-5.5 5h5.5a2.5 2.5 0 0 0 0-5Z"></path></svg>`);
var root_5283 = svg_template(`<title> </title>`);
var root_6283 = svg_template(`<desc> </desc>`);
var root_4283 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M10 21v-9m3-4H7.5a2.5 2.5 0 1 1 0-5c1.5 0 2.875 1.25 3.875 2.5M14 21v-9m-9 0h14v8a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1v-8ZM4 8h16a1 1 0 0 1 1 1v3H3V9a1 1 0 0 1 1-1Zm12.155-5c-3 0-5.5 5-5.5 5h5.5a2.5 2.5 0 0 0 0-5Z"></path></svg>`);
function GiftBoxOutline($$anchor, $$props) {
  if (new.target === GiftBoxOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, GiftBoxOutline);
  validate_prop_bindings($$props, [], [], GiftBoxOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "gift box outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1283();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2283();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3283();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4283();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5283();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6283();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(GiftBoxOutline);
  GiftBoxOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var GiftBoxOutline_default = GiftBoxOutline;
GiftBoxOutline.filename = ".../flowbite-svelte-icons/dist/GiftBoxOutline.svelte";
mark_module_end(GiftBoxOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/GiftBoxSolid.svelte
mark_module_start();
var root_2284 = svg_template(`<title> </title>`);
var root_3284 = svg_template(`<desc> </desc>`);
var root_1284 = svg_template(`<svg><!><!><path d="M20 7h-.7c.229-.467.349-.98.351-1.5a3.5 3.5 0 0 0-3.5-3.5c-1.717 0-3.215 1.2-4.331 2.481C10.4 2.842 8.949 2 7.5 2A3.5 3.5 0 0 0 4 5.5c.003.52.123 1.033.351 1.5H4a2 2 0 0 0-2 2v2a1 1 0 0 0 1 1h18a1 1 0 0 0 1-1V9a2 2 0 0 0-2-2Zm-9.942 0H7.5a1.5 1.5 0 0 1 0-3c.9 0 2 .754 3.092 2.122-.219.337-.392.635-.534.878Zm6.1 0h-3.742c.933-1.368 2.371-3 3.739-3a1.5 1.5 0 0 1 0 3h.003ZM13 14h-2v8h2v-8Zm-4 0H4v6a2 2 0 0 0 2 2h3v-8Zm6 0v8h3a2 2 0 0 0 2-2v-6h-5Z"></path></svg>`);
var root_5284 = svg_template(`<title> </title>`);
var root_6284 = svg_template(`<desc> </desc>`);
var root_4284 = svg_template(`<svg><!><!><path d="M20 7h-.7c.229-.467.349-.98.351-1.5a3.5 3.5 0 0 0-3.5-3.5c-1.717 0-3.215 1.2-4.331 2.481C10.4 2.842 8.949 2 7.5 2A3.5 3.5 0 0 0 4 5.5c.003.52.123 1.033.351 1.5H4a2 2 0 0 0-2 2v2a1 1 0 0 0 1 1h18a1 1 0 0 0 1-1V9a2 2 0 0 0-2-2Zm-9.942 0H7.5a1.5 1.5 0 0 1 0-3c.9 0 2 .754 3.092 2.122-.219.337-.392.635-.534.878Zm6.1 0h-3.742c.933-1.368 2.371-3 3.739-3a1.5 1.5 0 0 1 0 3h.003ZM13 14h-2v8h2v-8Zm-4 0H4v6a2 2 0 0 0 2 2h3v-8Zm6 0v8h3a2 2 0 0 0 2-2v-6h-5Z"></path></svg>`);
function GiftBoxSolid($$anchor, $$props) {
  if (new.target === GiftBoxSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, GiftBoxSolid);
  validate_prop_bindings($$props, [], [], GiftBoxSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "gift box solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1284();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2284();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3284();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4284();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5284();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6284();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(GiftBoxSolid);
  GiftBoxSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var GiftBoxSolid_default = GiftBoxSolid;
GiftBoxSolid.filename = ".../flowbite-svelte-icons/dist/GiftBoxSolid.svelte";
mark_module_end(GiftBoxSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/GithubSolid.svelte
mark_module_start();
var root_2285 = svg_template(`<title> </title>`);
var root_3285 = svg_template(`<desc> </desc>`);
var root_1285 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M12.006 2a9.847 9.847 0 0 0-6.484 2.44 10.32 10.32 0 0 0-3.393 6.17 10.48 10.48 0 0 0 1.317 6.955 10.045 10.045 0 0 0 5.4 4.418c.504.095.683-.223.683-.494 0-.245-.01-1.052-.014-1.908-2.78.62-3.366-1.21-3.366-1.21a2.711 2.711 0 0 0-1.11-1.5c-.907-.637.07-.621.07-.621.317.044.62.163.885.346.266.183.487.426.647.71.135.253.318.476.538.655a2.079 2.079 0 0 0 2.37.196c.045-.52.27-1.006.635-1.37-2.219-.259-4.554-1.138-4.554-5.07a4.022 4.022 0 0 1 1.031-2.75 3.77 3.77 0 0 1 .096-2.713s.839-.275 2.749 1.05a9.26 9.26 0 0 1 5.004 0c1.906-1.325 2.74-1.05 2.74-1.05.37.858.406 1.828.101 2.713a4.017 4.017 0 0 1 1.029 2.75c0 3.939-2.339 4.805-4.564 5.058a2.471 2.471 0 0 1 .679 1.897c0 1.372-.012 2.477-.012 2.814 0 .272.18.592.687.492a10.05 10.05 0 0 0 5.388-4.421 10.473 10.473 0 0 0 1.313-6.948 10.32 10.32 0 0 0-3.39-6.165A9.847 9.847 0 0 0 12.007 2Z" clip-rule="evenodd"></path></svg>`);
var root_5285 = svg_template(`<title> </title>`);
var root_6285 = svg_template(`<desc> </desc>`);
var root_4285 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M12.006 2a9.847 9.847 0 0 0-6.484 2.44 10.32 10.32 0 0 0-3.393 6.17 10.48 10.48 0 0 0 1.317 6.955 10.045 10.045 0 0 0 5.4 4.418c.504.095.683-.223.683-.494 0-.245-.01-1.052-.014-1.908-2.78.62-3.366-1.21-3.366-1.21a2.711 2.711 0 0 0-1.11-1.5c-.907-.637.07-.621.07-.621.317.044.62.163.885.346.266.183.487.426.647.71.135.253.318.476.538.655a2.079 2.079 0 0 0 2.37.196c.045-.52.27-1.006.635-1.37-2.219-.259-4.554-1.138-4.554-5.07a4.022 4.022 0 0 1 1.031-2.75 3.77 3.77 0 0 1 .096-2.713s.839-.275 2.749 1.05a9.26 9.26 0 0 1 5.004 0c1.906-1.325 2.74-1.05 2.74-1.05.37.858.406 1.828.101 2.713a4.017 4.017 0 0 1 1.029 2.75c0 3.939-2.339 4.805-4.564 5.058a2.471 2.471 0 0 1 .679 1.897c0 1.372-.012 2.477-.012 2.814 0 .272.18.592.687.492a10.05 10.05 0 0 0 5.388-4.421 10.473 10.473 0 0 0 1.313-6.948 10.32 10.32 0 0 0-3.39-6.165A9.847 9.847 0 0 0 12.007 2Z" clip-rule="evenodd"></path></svg>`);
function GithubSolid($$anchor, $$props) {
  if (new.target === GithubSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, GithubSolid);
  validate_prop_bindings($$props, [], [], GithubSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "github solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1285();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2285();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3285();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4285();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5285();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6285();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(GithubSolid);
  GithubSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var GithubSolid_default = GithubSolid;
GithubSolid.filename = ".../flowbite-svelte-icons/dist/GithubSolid.svelte";
mark_module_end(GithubSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/GlobeOutline.svelte
mark_module_start();
var root_2286 = svg_template(`<title> </title>`);
var root_3286 = svg_template(`<desc> </desc>`);
var root_1286 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" d="M4.37 7.657c2.063.528 2.396 2.806 3.202 3.87 1.07 1.413 2.075 1.228 3.192 2.644 1.805 2.289 1.312 5.705 1.312 6.705M20 15h-1a4 4 0 0 0-4 4v1M8.587 3.992c0 .822.112 1.886 1.515 2.58 1.402.693 2.918.351 2.918 2.334 0 .276 0 2.008 1.972 2.008 2.026.031 2.026-1.678 2.026-2.008 0-.65.527-.9 1.177-.9H20M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"></path></svg>`);
var root_5286 = svg_template(`<title> </title>`);
var root_6286 = svg_template(`<desc> </desc>`);
var root_4286 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" d="M4.37 7.657c2.063.528 2.396 2.806 3.202 3.87 1.07 1.413 2.075 1.228 3.192 2.644 1.805 2.289 1.312 5.705 1.312 6.705M20 15h-1a4 4 0 0 0-4 4v1M8.587 3.992c0 .822.112 1.886 1.515 2.58 1.402.693 2.918.351 2.918 2.334 0 .276 0 2.008 1.972 2.008 2.026.031 2.026-1.678 2.026-2.008 0-.65.527-.9 1.177-.9H20M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"></path></svg>`);
function GlobeOutline($$anchor, $$props) {
  if (new.target === GlobeOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, GlobeOutline);
  validate_prop_bindings($$props, [], [], GlobeOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "globe outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1286();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2286();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3286();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4286();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5286();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6286();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(GlobeOutline);
  GlobeOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var GlobeOutline_default = GlobeOutline;
GlobeOutline.filename = ".../flowbite-svelte-icons/dist/GlobeOutline.svelte";
mark_module_end(GlobeOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/GlobeSolid.svelte
mark_module_start();
var root_2287 = svg_template(`<title> </title>`);
var root_3287 = svg_template(`<desc> </desc>`);
var root_1287 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M8.64 4.737A7.97 7.97 0 0 1 12 4a7.997 7.997 0 0 1 6.933 4.006h-.738c-.65 0-1.177.25-1.177.9 0 .33 0 2.04-2.026 2.008-1.972 0-1.972-1.732-1.972-2.008 0-1.429-.787-1.65-1.752-1.923-.374-.105-.774-.218-1.166-.411-1.004-.497-1.347-1.183-1.461-1.835ZM6 4a10.06 10.06 0 0 0-2.812 3.27A9.956 9.956 0 0 0 2 12c0 5.289 4.106 9.619 9.304 9.976l.054.004a10.12 10.12 0 0 0 1.155.007h.002a10.024 10.024 0 0 0 1.5-.19 9.925 9.925 0 0 0 2.259-.754 10.041 10.041 0 0 0 4.987-5.263A9.917 9.917 0 0 0 22 12a10.025 10.025 0 0 0-.315-2.5A10.001 10.001 0 0 0 12 2a9.964 9.964 0 0 0-6 2Zm13.372 11.113a2.575 2.575 0 0 0-.75-.112h-.217A3.405 3.405 0 0 0 15 18.405v1.014a8.027 8.027 0 0 0 4.372-4.307ZM12.114 20H12A8 8 0 0 1 5.1 7.95c.95.541 1.421 1.537 1.835 2.415.209.441.403.853.637 1.162.54.712 1.063 1.019 1.591 1.328.52.305 1.047.613 1.6 1.316 1.44 1.825 1.419 4.366 1.35 5.828Z" clip-rule="evenodd"></path></svg>`);
var root_5287 = svg_template(`<title> </title>`);
var root_6287 = svg_template(`<desc> </desc>`);
var root_4287 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M8.64 4.737A7.97 7.97 0 0 1 12 4a7.997 7.997 0 0 1 6.933 4.006h-.738c-.65 0-1.177.25-1.177.9 0 .33 0 2.04-2.026 2.008-1.972 0-1.972-1.732-1.972-2.008 0-1.429-.787-1.65-1.752-1.923-.374-.105-.774-.218-1.166-.411-1.004-.497-1.347-1.183-1.461-1.835ZM6 4a10.06 10.06 0 0 0-2.812 3.27A9.956 9.956 0 0 0 2 12c0 5.289 4.106 9.619 9.304 9.976l.054.004a10.12 10.12 0 0 0 1.155.007h.002a10.024 10.024 0 0 0 1.5-.19 9.925 9.925 0 0 0 2.259-.754 10.041 10.041 0 0 0 4.987-5.263A9.917 9.917 0 0 0 22 12a10.025 10.025 0 0 0-.315-2.5A10.001 10.001 0 0 0 12 2a9.964 9.964 0 0 0-6 2Zm13.372 11.113a2.575 2.575 0 0 0-.75-.112h-.217A3.405 3.405 0 0 0 15 18.405v1.014a8.027 8.027 0 0 0 4.372-4.307ZM12.114 20H12A8 8 0 0 1 5.1 7.95c.95.541 1.421 1.537 1.835 2.415.209.441.403.853.637 1.162.54.712 1.063 1.019 1.591 1.328.52.305 1.047.613 1.6 1.316 1.44 1.825 1.419 4.366 1.35 5.828Z" clip-rule="evenodd"></path></svg>`);
function GlobeSolid($$anchor, $$props) {
  if (new.target === GlobeSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, GlobeSolid);
  validate_prop_bindings($$props, [], [], GlobeSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "globe solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1287();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2287();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3287();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4287();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5287();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6287();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(GlobeSolid);
  GlobeSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var GlobeSolid_default = GlobeSolid;
GlobeSolid.filename = ".../flowbite-svelte-icons/dist/GlobeSolid.svelte";
mark_module_end(GlobeSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/GoogleSolid.svelte
mark_module_start();
var root_2288 = svg_template(`<title> </title>`);
var root_3288 = svg_template(`<desc> </desc>`);
var root_1288 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M12.037 21.998a10.313 10.313 0 0 1-7.168-3.049 9.888 9.888 0 0 1-2.868-7.118 9.947 9.947 0 0 1 3.064-6.949A10.37 10.37 0 0 1 12.212 2h.176a9.935 9.935 0 0 1 6.614 2.564L16.457 6.88a6.187 6.187 0 0 0-4.131-1.566 6.9 6.9 0 0 0-4.794 1.913 6.618 6.618 0 0 0-2.045 4.657 6.608 6.608 0 0 0 1.882 4.723 6.891 6.891 0 0 0 4.725 2.07h.143c1.41.072 2.8-.354 3.917-1.2a5.77 5.77 0 0 0 2.172-3.41l.043-.117H12.22v-3.41h9.678c.075.617.109 1.238.1 1.859-.099 5.741-4.017 9.6-9.746 9.6l-.215-.002Z" clip-rule="evenodd"></path></svg>`);
var root_5288 = svg_template(`<title> </title>`);
var root_6288 = svg_template(`<desc> </desc>`);
var root_4288 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M12.037 21.998a10.313 10.313 0 0 1-7.168-3.049 9.888 9.888 0 0 1-2.868-7.118 9.947 9.947 0 0 1 3.064-6.949A10.37 10.37 0 0 1 12.212 2h.176a9.935 9.935 0 0 1 6.614 2.564L16.457 6.88a6.187 6.187 0 0 0-4.131-1.566 6.9 6.9 0 0 0-4.794 1.913 6.618 6.618 0 0 0-2.045 4.657 6.608 6.608 0 0 0 1.882 4.723 6.891 6.891 0 0 0 4.725 2.07h.143c1.41.072 2.8-.354 3.917-1.2a5.77 5.77 0 0 0 2.172-3.41l.043-.117H12.22v-3.41h9.678c.075.617.109 1.238.1 1.859-.099 5.741-4.017 9.6-9.746 9.6l-.215-.002Z" clip-rule="evenodd"></path></svg>`);
function GoogleSolid($$anchor, $$props) {
  if (new.target === GoogleSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, GoogleSolid);
  validate_prop_bindings($$props, [], [], GoogleSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "google solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1288();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2288();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3288();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4288();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5288();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6288();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(GoogleSolid);
  GoogleSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var GoogleSolid_default = GoogleSolid;
GoogleSolid.filename = ".../flowbite-svelte-icons/dist/GoogleSolid.svelte";
mark_module_end(GoogleSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/GridOutline.svelte
mark_module_start();
var root_2289 = svg_template(`<title> </title>`);
var root_3289 = svg_template(`<desc> </desc>`);
var root_1289 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M9.143 4H4.857A.857.857 0 0 0 4 4.857v4.286c0 .473.384.857.857.857h4.286A.857.857 0 0 0 10 9.143V4.857A.857.857 0 0 0 9.143 4Zm10 0h-4.286a.857.857 0 0 0-.857.857v4.286c0 .473.384.857.857.857h4.286A.857.857 0 0 0 20 9.143V4.857A.857.857 0 0 0 19.143 4Zm-10 10H4.857a.857.857 0 0 0-.857.857v4.286c0 .473.384.857.857.857h4.286a.857.857 0 0 0 .857-.857v-4.286A.857.857 0 0 0 9.143 14Zm10 0h-4.286a.857.857 0 0 0-.857.857v4.286c0 .473.384.857.857.857h4.286a.857.857 0 0 0 .857-.857v-4.286a.857.857 0 0 0-.857-.857Z"></path></svg>`);
var root_5289 = svg_template(`<title> </title>`);
var root_6289 = svg_template(`<desc> </desc>`);
var root_4289 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M9.143 4H4.857A.857.857 0 0 0 4 4.857v4.286c0 .473.384.857.857.857h4.286A.857.857 0 0 0 10 9.143V4.857A.857.857 0 0 0 9.143 4Zm10 0h-4.286a.857.857 0 0 0-.857.857v4.286c0 .473.384.857.857.857h4.286A.857.857 0 0 0 20 9.143V4.857A.857.857 0 0 0 19.143 4Zm-10 10H4.857a.857.857 0 0 0-.857.857v4.286c0 .473.384.857.857.857h4.286a.857.857 0 0 0 .857-.857v-4.286A.857.857 0 0 0 9.143 14Zm10 0h-4.286a.857.857 0 0 0-.857.857v4.286c0 .473.384.857.857.857h4.286a.857.857 0 0 0 .857-.857v-4.286a.857.857 0 0 0-.857-.857Z"></path></svg>`);
function GridOutline($$anchor, $$props) {
  if (new.target === GridOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, GridOutline);
  validate_prop_bindings($$props, [], [], GridOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "grid outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1289();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2289();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3289();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4289();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5289();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6289();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(GridOutline);
  GridOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var GridOutline_default = GridOutline;
GridOutline.filename = ".../flowbite-svelte-icons/dist/GridOutline.svelte";
mark_module_end(GridOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/GridPlusOutline.svelte
mark_module_start();
var root_2290 = svg_template(`<title> </title>`);
var root_3290 = svg_template(`<desc> </desc>`);
var root_1290 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M14 17h6m-3 3v-6M4.857 4h4.286c.473 0 .857.384.857.857v4.286a.857.857 0 0 1-.857.857H4.857A.857.857 0 0 1 4 9.143V4.857C4 4.384 4.384 4 4.857 4Zm10 0h4.286c.473 0 .857.384.857.857v4.286a.857.857 0 0 1-.857.857h-4.286A.857.857 0 0 1 14 9.143V4.857c0-.473.384-.857.857-.857Zm-10 10h4.286c.473 0 .857.384.857.857v4.286a.857.857 0 0 1-.857.857H4.857A.857.857 0 0 1 4 19.143v-4.286c0-.473.384-.857.857-.857Z"></path></svg>`);
var root_5290 = svg_template(`<title> </title>`);
var root_6290 = svg_template(`<desc> </desc>`);
var root_4290 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M14 17h6m-3 3v-6M4.857 4h4.286c.473 0 .857.384.857.857v4.286a.857.857 0 0 1-.857.857H4.857A.857.857 0 0 1 4 9.143V4.857C4 4.384 4.384 4 4.857 4Zm10 0h4.286c.473 0 .857.384.857.857v4.286a.857.857 0 0 1-.857.857h-4.286A.857.857 0 0 1 14 9.143V4.857c0-.473.384-.857.857-.857Zm-10 10h4.286c.473 0 .857.384.857.857v4.286a.857.857 0 0 1-.857.857H4.857A.857.857 0 0 1 4 19.143v-4.286c0-.473.384-.857.857-.857Z"></path></svg>`);
function GridPlusOutline($$anchor, $$props) {
  if (new.target === GridPlusOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, GridPlusOutline);
  validate_prop_bindings($$props, [], [], GridPlusOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "grid plus outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1290();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2290();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3290();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4290();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5290();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6290();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(GridPlusOutline);
  GridPlusOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var GridPlusOutline_default = GridPlusOutline;
GridPlusOutline.filename = ".../flowbite-svelte-icons/dist/GridPlusOutline.svelte";
mark_module_end(GridPlusOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/GridPlusSolid.svelte
mark_module_start();
var root_2291 = svg_template(`<title> </title>`);
var root_3291 = svg_template(`<desc> </desc>`);
var root_1291 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M4.857 3A1.857 1.857 0 0 0 3 4.857v4.286C3 10.169 3.831 11 4.857 11h4.286A1.857 1.857 0 0 0 11 9.143V4.857A1.857 1.857 0 0 0 9.143 3H4.857Zm10 0A1.857 1.857 0 0 0 13 4.857v4.286c0 1.026.831 1.857 1.857 1.857h4.286A1.857 1.857 0 0 0 21 9.143V4.857A1.857 1.857 0 0 0 19.143 3h-4.286Zm-10 10A1.857 1.857 0 0 0 3 14.857v4.286C3 20.169 3.831 21 4.857 21h4.286A1.857 1.857 0 0 0 11 19.143v-4.286A1.857 1.857 0 0 0 9.143 13H4.857ZM18 14a1 1 0 1 0-2 0v2h-2a1 1 0 1 0 0 2h2v2a1 1 0 1 0 2 0v-2h2a1 1 0 1 0 0-2h-2v-2Z" clip-rule="evenodd"></path></svg>`);
var root_5291 = svg_template(`<title> </title>`);
var root_6291 = svg_template(`<desc> </desc>`);
var root_4291 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M4.857 3A1.857 1.857 0 0 0 3 4.857v4.286C3 10.169 3.831 11 4.857 11h4.286A1.857 1.857 0 0 0 11 9.143V4.857A1.857 1.857 0 0 0 9.143 3H4.857Zm10 0A1.857 1.857 0 0 0 13 4.857v4.286c0 1.026.831 1.857 1.857 1.857h4.286A1.857 1.857 0 0 0 21 9.143V4.857A1.857 1.857 0 0 0 19.143 3h-4.286Zm-10 10A1.857 1.857 0 0 0 3 14.857v4.286C3 20.169 3.831 21 4.857 21h4.286A1.857 1.857 0 0 0 11 19.143v-4.286A1.857 1.857 0 0 0 9.143 13H4.857ZM18 14a1 1 0 1 0-2 0v2h-2a1 1 0 1 0 0 2h2v2a1 1 0 1 0 2 0v-2h2a1 1 0 1 0 0-2h-2v-2Z" clip-rule="evenodd"></path></svg>`);
function GridPlusSolid($$anchor, $$props) {
  if (new.target === GridPlusSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, GridPlusSolid);
  validate_prop_bindings($$props, [], [], GridPlusSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "grid plus solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1291();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2291();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3291();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4291();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5291();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6291();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(GridPlusSolid);
  GridPlusSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var GridPlusSolid_default = GridPlusSolid;
GridPlusSolid.filename = ".../flowbite-svelte-icons/dist/GridPlusSolid.svelte";
mark_module_end(GridPlusSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/GridSolid.svelte
mark_module_start();
var root_2292 = svg_template(`<title> </title>`);
var root_3292 = svg_template(`<desc> </desc>`);
var root_1292 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M4.857 3A1.857 1.857 0 0 0 3 4.857v4.286C3 10.169 3.831 11 4.857 11h4.286A1.857 1.857 0 0 0 11 9.143V4.857A1.857 1.857 0 0 0 9.143 3H4.857Zm10 0A1.857 1.857 0 0 0 13 4.857v4.286c0 1.026.831 1.857 1.857 1.857h4.286A1.857 1.857 0 0 0 21 9.143V4.857A1.857 1.857 0 0 0 19.143 3h-4.286Zm-10 10A1.857 1.857 0 0 0 3 14.857v4.286C3 20.169 3.831 21 4.857 21h4.286A1.857 1.857 0 0 0 11 19.143v-4.286A1.857 1.857 0 0 0 9.143 13H4.857Zm10 0A1.857 1.857 0 0 0 13 14.857v4.286c0 1.026.831 1.857 1.857 1.857h4.286A1.857 1.857 0 0 0 21 19.143v-4.286A1.857 1.857 0 0 0 19.143 13h-4.286Z" clip-rule="evenodd"></path></svg>`);
var root_5292 = svg_template(`<title> </title>`);
var root_6292 = svg_template(`<desc> </desc>`);
var root_4292 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M4.857 3A1.857 1.857 0 0 0 3 4.857v4.286C3 10.169 3.831 11 4.857 11h4.286A1.857 1.857 0 0 0 11 9.143V4.857A1.857 1.857 0 0 0 9.143 3H4.857Zm10 0A1.857 1.857 0 0 0 13 4.857v4.286c0 1.026.831 1.857 1.857 1.857h4.286A1.857 1.857 0 0 0 21 9.143V4.857A1.857 1.857 0 0 0 19.143 3h-4.286Zm-10 10A1.857 1.857 0 0 0 3 14.857v4.286C3 20.169 3.831 21 4.857 21h4.286A1.857 1.857 0 0 0 11 19.143v-4.286A1.857 1.857 0 0 0 9.143 13H4.857Zm10 0A1.857 1.857 0 0 0 13 14.857v4.286c0 1.026.831 1.857 1.857 1.857h4.286A1.857 1.857 0 0 0 21 19.143v-4.286A1.857 1.857 0 0 0 19.143 13h-4.286Z" clip-rule="evenodd"></path></svg>`);
function GridSolid($$anchor, $$props) {
  if (new.target === GridSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, GridSolid);
  validate_prop_bindings($$props, [], [], GridSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "grid solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1292();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2292();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3292();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4292();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5292();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6292();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(GridSolid);
  GridSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var GridSolid_default = GridSolid;
GridSolid.filename = ".../flowbite-svelte-icons/dist/GridSolid.svelte";
mark_module_end(GridSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/HeadphonesOutline.svelte
mark_module_start();
var root_2293 = svg_template(`<title> </title>`);
var root_3293 = svg_template(`<desc> </desc>`);
var root_1293 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linejoin="round" d="M20 16v-4a8 8 0 1 0-16 0v4m16 0v2a2 2 0 0 1-2 2h-2v-6h2a2 2 0 0 1 2 2ZM4 16v2a2 2 0 0 0 2 2h2v-6H6a2 2 0 0 0-2 2Z"></path></svg>`);
var root_5293 = svg_template(`<title> </title>`);
var root_6293 = svg_template(`<desc> </desc>`);
var root_4293 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linejoin="round" d="M20 16v-4a8 8 0 1 0-16 0v4m16 0v2a2 2 0 0 1-2 2h-2v-6h2a2 2 0 0 1 2 2ZM4 16v2a2 2 0 0 0 2 2h2v-6H6a2 2 0 0 0-2 2Z"></path></svg>`);
function HeadphonesOutline($$anchor, $$props) {
  if (new.target === HeadphonesOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, HeadphonesOutline);
  validate_prop_bindings($$props, [], [], HeadphonesOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "headphones outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1293();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2293();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3293();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4293();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5293();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6293();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(HeadphonesOutline);
  HeadphonesOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var HeadphonesOutline_default = HeadphonesOutline;
HeadphonesOutline.filename = ".../flowbite-svelte-icons/dist/HeadphonesOutline.svelte";
mark_module_end(HeadphonesOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/HeadphonesSolid.svelte
mark_module_start();
var root_2294 = svg_template(`<title> </title>`);
var root_3294 = svg_template(`<desc> </desc>`);
var root_1294 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M12 5a7 7 0 0 0-7 7v1.17c.313-.11.65-.17 1-.17h2a1 1 0 0 1 1 1v6a1 1 0 0 1-1 1H6a3 3 0 0 1-3-3v-6a9 9 0 0 1 18 0v6a3 3 0 0 1-3 3h-2a1 1 0 0 1-1-1v-6a1 1 0 0 1 1-1h2c.35 0 .687.06 1 .17V12a7 7 0 0 0-7-7Z" clip-rule="evenodd"></path></svg>`);
var root_5294 = svg_template(`<title> </title>`);
var root_6294 = svg_template(`<desc> </desc>`);
var root_4294 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M12 5a7 7 0 0 0-7 7v1.17c.313-.11.65-.17 1-.17h2a1 1 0 0 1 1 1v6a1 1 0 0 1-1 1H6a3 3 0 0 1-3-3v-6a9 9 0 0 1 18 0v6a3 3 0 0 1-3 3h-2a1 1 0 0 1-1-1v-6a1 1 0 0 1 1-1h2c.35 0 .687.06 1 .17V12a7 7 0 0 0-7-7Z" clip-rule="evenodd"></path></svg>`);
function HeadphonesSolid($$anchor, $$props) {
  if (new.target === HeadphonesSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, HeadphonesSolid);
  validate_prop_bindings($$props, [], [], HeadphonesSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "headphones solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1294();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2294();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3294();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4294();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5294();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6294();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(HeadphonesSolid);
  HeadphonesSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var HeadphonesSolid_default = HeadphonesSolid;
HeadphonesSolid.filename = ".../flowbite-svelte-icons/dist/HeadphonesSolid.svelte";
mark_module_end(HeadphonesSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/HeartOutline.svelte
mark_module_start();
var root_2295 = svg_template(`<title> </title>`);
var root_3295 = svg_template(`<desc> </desc>`);
var root_1295 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12.01 6.001C6.5 1 1 8 5.782 13.001L12.011 20l6.23-7C23 8 17.5 1 12.01 6.002Z"></path></svg>`);
var root_5295 = svg_template(`<title> </title>`);
var root_6295 = svg_template(`<desc> </desc>`);
var root_4295 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12.01 6.001C6.5 1 1 8 5.782 13.001L12.011 20l6.23-7C23 8 17.5 1 12.01 6.002Z"></path></svg>`);
function HeartOutline($$anchor, $$props) {
  if (new.target === HeartOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, HeartOutline);
  validate_prop_bindings($$props, [], [], HeartOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "heart outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1295();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2295();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3295();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4295();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5295();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6295();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(HeartOutline);
  HeartOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var HeartOutline_default = HeartOutline;
HeartOutline.filename = ".../flowbite-svelte-icons/dist/HeartOutline.svelte";
mark_module_end(HeartOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/HeartSolid.svelte
mark_module_start();
var root_2296 = svg_template(`<title> </title>`);
var root_3296 = svg_template(`<desc> </desc>`);
var root_1296 = svg_template(`<svg><!><!><path d="m12.75 20.66 6.184-7.098c2.677-2.884 2.559-6.506.754-8.705-.898-1.095-2.206-1.816-3.72-1.855-1.293-.034-2.652.43-3.963 1.442-1.315-1.012-2.678-1.476-3.973-1.442-1.515.04-2.825.76-3.724 1.855-1.806 2.201-1.915 5.823.772 8.706l6.183 7.097c.19.216.46.34.743.34a.985.985 0 0 0 .743-.34Z"></path></svg>`);
var root_5296 = svg_template(`<title> </title>`);
var root_6296 = svg_template(`<desc> </desc>`);
var root_4296 = svg_template(`<svg><!><!><path d="m12.75 20.66 6.184-7.098c2.677-2.884 2.559-6.506.754-8.705-.898-1.095-2.206-1.816-3.72-1.855-1.293-.034-2.652.43-3.963 1.442-1.315-1.012-2.678-1.476-3.973-1.442-1.515.04-2.825.76-3.724 1.855-1.806 2.201-1.915 5.823.772 8.706l6.183 7.097c.19.216.46.34.743.34a.985.985 0 0 0 .743-.34Z"></path></svg>`);
function HeartSolid($$anchor, $$props) {
  if (new.target === HeartSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, HeartSolid);
  validate_prop_bindings($$props, [], [], HeartSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "heart solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1296();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2296();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3296();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4296();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5296();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6296();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(HeartSolid);
  HeartSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var HeartSolid_default = HeartSolid;
HeartSolid.filename = ".../flowbite-svelte-icons/dist/HeartSolid.svelte";
mark_module_end(HeartSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/HomeOutline.svelte
mark_module_start();
var root_2297 = svg_template(`<title> </title>`);
var root_3297 = svg_template(`<desc> </desc>`);
var root_1297 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m4 12 8-8 8 8M6 10.5V19a1 1 0 0 0 1 1h3v-3a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v3h3a1 1 0 0 0 1-1v-8.5"></path></svg>`);
var root_5297 = svg_template(`<title> </title>`);
var root_6297 = svg_template(`<desc> </desc>`);
var root_4297 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m4 12 8-8 8 8M6 10.5V19a1 1 0 0 0 1 1h3v-3a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v3h3a1 1 0 0 0 1-1v-8.5"></path></svg>`);
function HomeOutline($$anchor, $$props) {
  if (new.target === HomeOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, HomeOutline);
  validate_prop_bindings($$props, [], [], HomeOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "home outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1297();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2297();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3297();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4297();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5297();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6297();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(HomeOutline);
  HomeOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var HomeOutline_default = HomeOutline;
HomeOutline.filename = ".../flowbite-svelte-icons/dist/HomeOutline.svelte";
mark_module_end(HomeOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/HomeSolid.svelte
mark_module_start();
var root_2298 = svg_template(`<title> </title>`);
var root_3298 = svg_template(`<desc> </desc>`);
var root_1298 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M11.293 3.293a1 1 0 0 1 1.414 0l6 6 2 2a1 1 0 0 1-1.414 1.414L19 12.414V19a2 2 0 0 1-2 2h-3a1 1 0 0 1-1-1v-3h-2v3a1 1 0 0 1-1 1H7a2 2 0 0 1-2-2v-6.586l-.293.293a1 1 0 0 1-1.414-1.414l2-2 6-6Z" clip-rule="evenodd"></path></svg>`);
var root_5298 = svg_template(`<title> </title>`);
var root_6298 = svg_template(`<desc> </desc>`);
var root_4298 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M11.293 3.293a1 1 0 0 1 1.414 0l6 6 2 2a1 1 0 0 1-1.414 1.414L19 12.414V19a2 2 0 0 1-2 2h-3a1 1 0 0 1-1-1v-3h-2v3a1 1 0 0 1-1 1H7a2 2 0 0 1-2-2v-6.586l-.293.293a1 1 0 0 1-1.414-1.414l2-2 6-6Z" clip-rule="evenodd"></path></svg>`);
function HomeSolid($$anchor, $$props) {
  if (new.target === HomeSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, HomeSolid);
  validate_prop_bindings($$props, [], [], HomeSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "home solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1298();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2298();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3298();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4298();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5298();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6298();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(HomeSolid);
  HomeSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var HomeSolid_default = HomeSolid;
HomeSolid.filename = ".../flowbite-svelte-icons/dist/HomeSolid.svelte";
mark_module_end(HomeSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/HourglassOutline.svelte
mark_module_start();
var root_2299 = svg_template(`<title> </title>`);
var root_3299 = svg_template(`<desc> </desc>`);
var root_1299 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M18.5 4h-13m13 16h-13M8 20v-3.333a2 2 0 0 1 .4-1.2L10 12.6a1 1 0 0 0 0-1.2L8.4 8.533a2 2 0 0 1-.4-1.2V4h8v3.333a2 2 0 0 1-.4 1.2L13.957 11.4a1 1 0 0 0 0 1.2l1.643 2.867a2 2 0 0 1 .4 1.2V20H8Z"></path></svg>`);
var root_5299 = svg_template(`<title> </title>`);
var root_6299 = svg_template(`<desc> </desc>`);
var root_4299 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M18.5 4h-13m13 16h-13M8 20v-3.333a2 2 0 0 1 .4-1.2L10 12.6a1 1 0 0 0 0-1.2L8.4 8.533a2 2 0 0 1-.4-1.2V4h8v3.333a2 2 0 0 1-.4 1.2L13.957 11.4a1 1 0 0 0 0 1.2l1.643 2.867a2 2 0 0 1 .4 1.2V20H8Z"></path></svg>`);
function HourglassOutline($$anchor, $$props) {
  if (new.target === HourglassOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, HourglassOutline);
  validate_prop_bindings($$props, [], [], HourglassOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "hourglass outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1299();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2299();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3299();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4299();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5299();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6299();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(HourglassOutline);
  HourglassOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var HourglassOutline_default = HourglassOutline;
HourglassOutline.filename = ".../flowbite-svelte-icons/dist/HourglassOutline.svelte";
mark_module_end(HourglassOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/HourglassSolid.svelte
mark_module_start();
var root_2300 = svg_template(`<title> </title>`);
var root_3300 = svg_template(`<desc> </desc>`);
var root_1300 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M5.5 3a1 1 0 0 0 0 2H7v2.333a3 3 0 0 0 .556 1.74l1.57 2.814A1.1 1.1 0 0 0 9.2 12a.998.998 0 0 0-.073.113l-1.57 2.814A3 3 0 0 0 7 16.667V19H5.5a1 1 0 1 0 0 2h13a1 1 0 1 0 0-2H17v-2.333a3 3 0 0 0-.56-1.745l-1.616-2.82a1 1 0 0 0-.067-.102 1 1 0 0 0 .067-.103l1.616-2.819A3 3 0 0 0 17 7.333V5h1.5a1 1 0 1 0 0-2h-13Z" clip-rule="evenodd"></path></svg>`);
var root_5300 = svg_template(`<title> </title>`);
var root_6300 = svg_template(`<desc> </desc>`);
var root_4300 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M5.5 3a1 1 0 0 0 0 2H7v2.333a3 3 0 0 0 .556 1.74l1.57 2.814A1.1 1.1 0 0 0 9.2 12a.998.998 0 0 0-.073.113l-1.57 2.814A3 3 0 0 0 7 16.667V19H5.5a1 1 0 1 0 0 2h13a1 1 0 1 0 0-2H17v-2.333a3 3 0 0 0-.56-1.745l-1.616-2.82a1 1 0 0 0-.067-.102 1 1 0 0 0 .067-.103l1.616-2.819A3 3 0 0 0 17 7.333V5h1.5a1 1 0 1 0 0-2h-13Z" clip-rule="evenodd"></path></svg>`);
function HourglassSolid($$anchor, $$props) {
  if (new.target === HourglassSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, HourglassSolid);
  validate_prop_bindings($$props, [], [], HourglassSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "hourglass solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1300();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2300();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3300();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4300();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5300();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6300();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(HourglassSolid);
  HourglassSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var HourglassSolid_default = HourglassSolid;
HourglassSolid.filename = ".../flowbite-svelte-icons/dist/HourglassSolid.svelte";
mark_module_end(HourglassSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/HtmlSolid.svelte
mark_module_start();
var root_2301 = svg_template(`<title> </title>`);
var root_3301 = svg_template(`<desc> </desc>`);
var root_1301 = svg_template(`<svg><!><!><path d="m3 2 1.578 17.824L12 22l7.467-2.175L21 2H3Zm14.049 6.048H9.075l.172 2.016h7.697l-.626 6.565-4.246 1.381-4.281-1.455-.288-2.932h2.024l.16 1.411 2.4.815 2.346-.763.297-3.005H7.416l-.562-6.05h10.412l-.217 2.017Z"></path></svg>`);
var root_5301 = svg_template(`<title> </title>`);
var root_6301 = svg_template(`<desc> </desc>`);
var root_4301 = svg_template(`<svg><!><!><path d="m3 2 1.578 17.824L12 22l7.467-2.175L21 2H3Zm14.049 6.048H9.075l.172 2.016h7.697l-.626 6.565-4.246 1.381-4.281-1.455-.288-2.932h2.024l.16 1.411 2.4.815 2.346-.763.297-3.005H7.416l-.562-6.05h10.412l-.217 2.017Z"></path></svg>`);
function HtmlSolid($$anchor, $$props) {
  if (new.target === HtmlSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, HtmlSolid);
  validate_prop_bindings($$props, [], [], HtmlSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "html solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1301();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2301();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3301();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4301();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5301();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6301();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(HtmlSolid);
  HtmlSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var HtmlSolid_default = HtmlSolid;
HtmlSolid.filename = ".../flowbite-svelte-icons/dist/HtmlSolid.svelte";
mark_module_end(HtmlSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/IconOutline.svelte
mark_module_start();
function IconOutline($$anchor, $$props) {
  if (new.target === IconOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, IconOutline);
  validate_prop_bindings($$props, [], [], IconOutline);
  let restProps = rest_props(
    $$props,
    [
      "icon",
      "size",
      "role",
      "color",
      "ariaLabel",
      "class"
    ],
    "restProps"
  );
  var fragment = comment();
  var node = first_child(fragment);
  component(node, () => $$props.icon, ($$component) => {
    validate_dynamic_component(() => {
      validate_component($$component)(node, spread_props(
        {
          get fill() {
            return $$props.color;
          }
        },
        () => restProps,
        {
          get role() {
            return $$props.role;
          },
          get size() {
            return $$props.size;
          },
          get class() {
            return $$props.class;
          },
          get ariaLabel() {
            return $$props.ariaLabel;
          }
        }
      ));
    });
  });
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(IconOutline);
  IconOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var IconOutline_default = IconOutline;
IconOutline.filename = ".../flowbite-svelte-icons/dist/IconOutline.svelte";
mark_module_end(IconOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/IconSolid.svelte
mark_module_start();
function IconSolid($$anchor, $$props) {
  if (new.target === IconSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, IconSolid);
  validate_prop_bindings($$props, [], [], IconSolid);
  let restProps = rest_props(
    $$props,
    [
      "icon",
      "size",
      "role",
      "color",
      "ariaLabel",
      "strokeWidth",
      "class"
    ],
    "restProps"
  );
  var fragment = comment();
  var node = first_child(fragment);
  component(node, () => $$props.icon, ($$component) => {
    validate_dynamic_component(() => {
      validate_component($$component)(node, spread_props(
        {
          fill: "none",
          get color() {
            return $$props.color;
          }
        },
        () => restProps,
        {
          get role() {
            return $$props.role;
          },
          get size() {
            return $$props.size;
          },
          get strokeWidth() {
            return $$props.strokeWidth;
          },
          get class() {
            return $$props.class;
          },
          get ariaLabel() {
            return $$props.ariaLabel;
          }
        }
      ));
    });
  });
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(IconSolid);
  IconSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var IconSolid_default = IconSolid;
IconSolid.filename = ".../flowbite-svelte-icons/dist/IconSolid.svelte";
mark_module_end(IconSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ImageOutline.svelte
mark_module_start();
var root_2302 = svg_template(`<title> </title>`);
var root_3302 = svg_template(`<desc> </desc>`);
var root_1302 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m3 16 5-7 6 6.5m6.5 2.5L16 13l-4.286 6M14 10h.01M4 19h16a1 1 0 0 0 1-1V6a1 1 0 0 0-1-1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1Z"></path></svg>`);
var root_5302 = svg_template(`<title> </title>`);
var root_6302 = svg_template(`<desc> </desc>`);
var root_4302 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m3 16 5-7 6 6.5m6.5 2.5L16 13l-4.286 6M14 10h.01M4 19h16a1 1 0 0 0 1-1V6a1 1 0 0 0-1-1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1Z"></path></svg>`);
function ImageOutline($$anchor, $$props) {
  if (new.target === ImageOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ImageOutline);
  validate_prop_bindings($$props, [], [], ImageOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "image outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1302();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2302();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3302();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4302();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5302();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6302();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ImageOutline);
  ImageOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ImageOutline_default = ImageOutline;
ImageOutline.filename = ".../flowbite-svelte-icons/dist/ImageOutline.svelte";
mark_module_end(ImageOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ImageSolid.svelte
mark_module_start();
var root_2303 = svg_template(`<title> </title>`);
var root_3303 = svg_template(`<desc> </desc>`);
var root_1303 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M13 10a1 1 0 0 1 1-1h.01a1 1 0 1 1 0 2H14a1 1 0 0 1-1-1Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M2 6a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v12c0 .556-.227 1.06-.593 1.422A.999.999 0 0 1 20.5 20H4a2.002 2.002 0 0 1-2-2V6Zm6.892 12 3.833-5.356-3.99-4.322a1 1 0 0 0-1.549.097L4 12.879V6h16v9.95l-3.257-3.619a1 1 0 0 0-1.557.088L11.2 18H8.892Z" clip-rule="evenodd"></path></svg>`);
var root_5303 = svg_template(`<title> </title>`);
var root_6303 = svg_template(`<desc> </desc>`);
var root_4303 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M13 10a1 1 0 0 1 1-1h.01a1 1 0 1 1 0 2H14a1 1 0 0 1-1-1Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M2 6a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v12c0 .556-.227 1.06-.593 1.422A.999.999 0 0 1 20.5 20H4a2.002 2.002 0 0 1-2-2V6Zm6.892 12 3.833-5.356-3.99-4.322a1 1 0 0 0-1.549.097L4 12.879V6h16v9.95l-3.257-3.619a1 1 0 0 0-1.557.088L11.2 18H8.892Z" clip-rule="evenodd"></path></svg>`);
function ImageSolid($$anchor, $$props) {
  if (new.target === ImageSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ImageSolid);
  validate_prop_bindings($$props, [], [], ImageSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "image solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1303();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2303();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3303();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4303();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5303();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6303();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_2 = sibling(node_4);
      var path_3 = sibling(path_2);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ImageSolid);
  ImageSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ImageSolid_default = ImageSolid;
ImageSolid.filename = ".../flowbite-svelte-icons/dist/ImageSolid.svelte";
mark_module_end(ImageSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/InboxFullOutline.svelte
mark_module_start();
var root_2304 = svg_template(`<title> </title>`);
var root_3304 = svg_template(`<desc> </desc>`);
var root_1304 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M4 13h3.439a.991.991 0 0 1 .908.6 3.978 3.978 0 0 0 7.306 0 .99.99 0 0 1 .908-.6H20M4 13v6a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1v-6M4 13l2-9h12l2 9M9 7h6m-7 3h8"></path></svg>`);
var root_5304 = svg_template(`<title> </title>`);
var root_6304 = svg_template(`<desc> </desc>`);
var root_4304 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M4 13h3.439a.991.991 0 0 1 .908.6 3.978 3.978 0 0 0 7.306 0 .99.99 0 0 1 .908-.6H20M4 13v6a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1v-6M4 13l2-9h12l2 9M9 7h6m-7 3h8"></path></svg>`);
function InboxFullOutline($$anchor, $$props) {
  if (new.target === InboxFullOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, InboxFullOutline);
  validate_prop_bindings($$props, [], [], InboxFullOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "inbox full outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1304();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2304();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3304();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4304();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5304();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6304();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(InboxFullOutline);
  InboxFullOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var InboxFullOutline_default = InboxFullOutline;
InboxFullOutline.filename = ".../flowbite-svelte-icons/dist/InboxFullOutline.svelte";
mark_module_end(InboxFullOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/InboxFullSolid.svelte
mark_module_start();
var root_2305 = svg_template(`<title> </title>`);
var root_3305 = svg_template(`<desc> </desc>`);
var root_1305 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M5.024 3.783A1 1 0 0 1 6 3h12a1 1 0 0 1 .976.783L20.802 12h-4.244a1.99 1.99 0 0 0-1.824 1.205 2.978 2.978 0 0 1-5.468 0A1.991 1.991 0 0 0 7.442 12H3.198l1.826-8.217ZM3 14v5a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-5h-4.43a4.978 4.978 0 0 1-9.14 0H3Zm5-7a1 1 0 0 1 1-1h6a1 1 0 1 1 0 2H9a1 1 0 0 1-1-1Zm0 2a1 1 0 0 0 0 2h8a1 1 0 1 0 0-2H8Z" clip-rule="evenodd"></path></svg>`);
var root_5305 = svg_template(`<title> </title>`);
var root_6305 = svg_template(`<desc> </desc>`);
var root_4305 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M5.024 3.783A1 1 0 0 1 6 3h12a1 1 0 0 1 .976.783L20.802 12h-4.244a1.99 1.99 0 0 0-1.824 1.205 2.978 2.978 0 0 1-5.468 0A1.991 1.991 0 0 0 7.442 12H3.198l1.826-8.217ZM3 14v5a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-5h-4.43a4.978 4.978 0 0 1-9.14 0H3Zm5-7a1 1 0 0 1 1-1h6a1 1 0 1 1 0 2H9a1 1 0 0 1-1-1Zm0 2a1 1 0 0 0 0 2h8a1 1 0 1 0 0-2H8Z" clip-rule="evenodd"></path></svg>`);
function InboxFullSolid($$anchor, $$props) {
  if (new.target === InboxFullSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, InboxFullSolid);
  validate_prop_bindings($$props, [], [], InboxFullSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "inbox full solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1305();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2305();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3305();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4305();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5305();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6305();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(InboxFullSolid);
  InboxFullSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var InboxFullSolid_default = InboxFullSolid;
InboxFullSolid.filename = ".../flowbite-svelte-icons/dist/InboxFullSolid.svelte";
mark_module_end(InboxFullSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/InboxOutline.svelte
mark_module_start();
var root_2306 = svg_template(`<title> </title>`);
var root_3306 = svg_template(`<desc> </desc>`);
var root_1306 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M4 13h3.439a.991.991 0 0 1 .908.6 3.978 3.978 0 0 0 7.306 0 .99.99 0 0 1 .908-.6H20M4 13v6a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1v-6M4 13l2-9h12l2 9"></path></svg>`);
var root_5306 = svg_template(`<title> </title>`);
var root_6306 = svg_template(`<desc> </desc>`);
var root_4306 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M4 13h3.439a.991.991 0 0 1 .908.6 3.978 3.978 0 0 0 7.306 0 .99.99 0 0 1 .908-.6H20M4 13v6a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1v-6M4 13l2-9h12l2 9"></path></svg>`);
function InboxOutline($$anchor, $$props) {
  if (new.target === InboxOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, InboxOutline);
  validate_prop_bindings($$props, [], [], InboxOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "inbox outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1306();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2306();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3306();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4306();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5306();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6306();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(InboxOutline);
  InboxOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var InboxOutline_default = InboxOutline;
InboxOutline.filename = ".../flowbite-svelte-icons/dist/InboxOutline.svelte";
mark_module_end(InboxOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/InboxSolid.svelte
mark_module_start();
var root_2307 = svg_template(`<title> </title>`);
var root_3307 = svg_template(`<desc> </desc>`);
var root_1307 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M5.024 3.783A1 1 0 0 1 6 3h12a1 1 0 0 1 .976.783L20.802 12h-4.244a1.99 1.99 0 0 0-1.824 1.205 2.978 2.978 0 0 1-5.468 0A1.991 1.991 0 0 0 7.442 12H3.198l1.826-8.217ZM3 14v5a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-5h-4.43a4.978 4.978 0 0 1-9.14 0H3Z" clip-rule="evenodd"></path></svg>`);
var root_5307 = svg_template(`<title> </title>`);
var root_6307 = svg_template(`<desc> </desc>`);
var root_4307 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M5.024 3.783A1 1 0 0 1 6 3h12a1 1 0 0 1 .976.783L20.802 12h-4.244a1.99 1.99 0 0 0-1.824 1.205 2.978 2.978 0 0 1-5.468 0A1.991 1.991 0 0 0 7.442 12H3.198l1.826-8.217ZM3 14v5a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-5h-4.43a4.978 4.978 0 0 1-9.14 0H3Z" clip-rule="evenodd"></path></svg>`);
function InboxSolid($$anchor, $$props) {
  if (new.target === InboxSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, InboxSolid);
  validate_prop_bindings($$props, [], [], InboxSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "inbox solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1307();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2307();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3307();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4307();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5307();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6307();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(InboxSolid);
  InboxSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var InboxSolid_default = InboxSolid;
InboxSolid.filename = ".../flowbite-svelte-icons/dist/InboxSolid.svelte";
mark_module_end(InboxSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/IndentOutline.svelte
mark_module_start();
var root_2308 = svg_template(`<title> </title>`);
var root_3308 = svg_template(`<desc> </desc>`);
var root_1308 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M6 6h12M6 18h12m-5-8h5m-5 4h5M6 9v6l3.5-3L6 9Z"></path></svg>`);
var root_5308 = svg_template(`<title> </title>`);
var root_6308 = svg_template(`<desc> </desc>`);
var root_4308 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M6 6h12M6 18h12m-5-8h5m-5 4h5M6 9v6l3.5-3L6 9Z"></path></svg>`);
function IndentOutline($$anchor, $$props) {
  if (new.target === IndentOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, IndentOutline);
  validate_prop_bindings($$props, [], [], IndentOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "indent outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1308();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2308();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3308();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4308();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5308();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6308();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(IndentOutline);
  IndentOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var IndentOutline_default = IndentOutline;
IndentOutline.filename = ".../flowbite-svelte-icons/dist/IndentOutline.svelte";
mark_module_end(IndentOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/IndentSolid.svelte
mark_module_start();
var root_2309 = svg_template(`<title> </title>`);
var root_3309 = svg_template(`<desc> </desc>`);
var root_1309 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M5 6a1 1 0 0 1 1-1h12a1 1 0 1 1 0 2H6a1 1 0 0 1-1-1Zm0 12a1 1 0 0 1 1-1h12a1 1 0 1 1 0 2H6a1 1 0 0 1-1-1Zm1.65-9.76A1 1 0 0 0 5 9v6a1 1 0 0 0 1.65.76l3.5-3a1 1 0 0 0 0-1.52l-3.5-3ZM12 10a1 1 0 0 1 1-1h5a1 1 0 1 1 0 2h-5a1 1 0 0 1-1-1Zm0 4a1 1 0 0 1 1-1h5a1 1 0 1 1 0 2h-5a1 1 0 0 1-1-1Z" clip-rule="evenodd"></path></svg>`);
var root_5309 = svg_template(`<title> </title>`);
var root_6309 = svg_template(`<desc> </desc>`);
var root_4309 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M5 6a1 1 0 0 1 1-1h12a1 1 0 1 1 0 2H6a1 1 0 0 1-1-1Zm0 12a1 1 0 0 1 1-1h12a1 1 0 1 1 0 2H6a1 1 0 0 1-1-1Zm1.65-9.76A1 1 0 0 0 5 9v6a1 1 0 0 0 1.65.76l3.5-3a1 1 0 0 0 0-1.52l-3.5-3ZM12 10a1 1 0 0 1 1-1h5a1 1 0 1 1 0 2h-5a1 1 0 0 1-1-1Zm0 4a1 1 0 0 1 1-1h5a1 1 0 1 1 0 2h-5a1 1 0 0 1-1-1Z" clip-rule="evenodd"></path></svg>`);
function IndentSolid($$anchor, $$props) {
  if (new.target === IndentSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, IndentSolid);
  validate_prop_bindings($$props, [], [], IndentSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "indent solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1309();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2309();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3309();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4309();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5309();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6309();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(IndentSolid);
  IndentSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var IndentSolid_default = IndentSolid;
IndentSolid.filename = ".../flowbite-svelte-icons/dist/IndentSolid.svelte";
mark_module_end(IndentSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/InfoCircleOutline.svelte
mark_module_start();
var root_2310 = svg_template(`<title> </title>`);
var root_3310 = svg_template(`<desc> </desc>`);
var root_1310 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M10 11h2v5m-2 0h4m-2.592-8.5h.01M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"></path></svg>`);
var root_5310 = svg_template(`<title> </title>`);
var root_6310 = svg_template(`<desc> </desc>`);
var root_4310 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M10 11h2v5m-2 0h4m-2.592-8.5h.01M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"></path></svg>`);
function InfoCircleOutline($$anchor, $$props) {
  if (new.target === InfoCircleOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, InfoCircleOutline);
  validate_prop_bindings($$props, [], [], InfoCircleOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "info circle outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1310();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2310();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3310();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4310();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5310();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6310();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(InfoCircleOutline);
  InfoCircleOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var InfoCircleOutline_default = InfoCircleOutline;
InfoCircleOutline.filename = ".../flowbite-svelte-icons/dist/InfoCircleOutline.svelte";
mark_module_end(InfoCircleOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/InfoCircleSolid.svelte
mark_module_start();
var root_2311 = svg_template(`<title> </title>`);
var root_3311 = svg_template(`<desc> </desc>`);
var root_1311 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M2 12C2 6.477 6.477 2 12 2s10 4.477 10 10-4.477 10-10 10S2 17.523 2 12Zm9.408-5.5a1 1 0 1 0 0 2h.01a1 1 0 1 0 0-2h-.01ZM10 10a1 1 0 1 0 0 2h1v3h-1a1 1 0 1 0 0 2h4a1 1 0 1 0 0-2h-1v-4a1 1 0 0 0-1-1h-2Z" clip-rule="evenodd"></path></svg>`);
var root_5311 = svg_template(`<title> </title>`);
var root_6311 = svg_template(`<desc> </desc>`);
var root_4311 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M2 12C2 6.477 6.477 2 12 2s10 4.477 10 10-4.477 10-10 10S2 17.523 2 12Zm9.408-5.5a1 1 0 1 0 0 2h.01a1 1 0 1 0 0-2h-.01ZM10 10a1 1 0 1 0 0 2h1v3h-1a1 1 0 1 0 0 2h4a1 1 0 1 0 0-2h-1v-4a1 1 0 0 0-1-1h-2Z" clip-rule="evenodd"></path></svg>`);
function InfoCircleSolid($$anchor, $$props) {
  if (new.target === InfoCircleSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, InfoCircleSolid);
  validate_prop_bindings($$props, [], [], InfoCircleSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "info circle solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1311();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2311();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3311();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4311();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5311();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6311();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(InfoCircleSolid);
  InfoCircleSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var InfoCircleSolid_default = InfoCircleSolid;
InfoCircleSolid.filename = ".../flowbite-svelte-icons/dist/InfoCircleSolid.svelte";
mark_module_end(InfoCircleSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/InstagramSolid.svelte
mark_module_start();
var root_2312 = svg_template(`<title> </title>`);
var root_3312 = svg_template(`<desc> </desc>`);
var root_1312 = svg_template(`<svg><!><!><path fill="currentColor" fill-rule="evenodd" d="M3 8a5 5 0 0 1 5-5h8a5 5 0 0 1 5 5v8a5 5 0 0 1-5 5H8a5 5 0 0 1-5-5V8Zm5-3a3 3 0 0 0-3 3v8a3 3 0 0 0 3 3h8a3 3 0 0 0 3-3V8a3 3 0 0 0-3-3H8Zm7.597 2.214a1 1 0 0 1 1-1h.01a1 1 0 1 1 0 2h-.01a1 1 0 0 1-1-1ZM12 9a3 3 0 1 0 0 6 3 3 0 0 0 0-6Zm-5 3a5 5 0 1 1 10 0 5 5 0 0 1-10 0Z" clip-rule="evenodd"></path></svg>`);
var root_5312 = svg_template(`<title> </title>`);
var root_6312 = svg_template(`<desc> </desc>`);
var root_4312 = svg_template(`<svg><!><!><path fill="currentColor" fill-rule="evenodd" d="M3 8a5 5 0 0 1 5-5h8a5 5 0 0 1 5 5v8a5 5 0 0 1-5 5H8a5 5 0 0 1-5-5V8Zm5-3a3 3 0 0 0-3 3v8a3 3 0 0 0 3 3h8a3 3 0 0 0 3-3V8a3 3 0 0 0-3-3H8Zm7.597 2.214a1 1 0 0 1 1-1h.01a1 1 0 1 1 0 2h-.01a1 1 0 0 1-1-1ZM12 9a3 3 0 1 0 0 6 3 3 0 0 0 0-6Zm-5 3a5 5 0 1 1 10 0 5 5 0 0 1-10 0Z" clip-rule="evenodd"></path></svg>`);
function InstagramSolid($$anchor, $$props) {
  if (new.target === InstagramSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, InstagramSolid);
  validate_prop_bindings($$props, [], [], InstagramSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "instagram solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1312();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2312();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3312();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4312();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5312();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6312();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(InstagramSolid);
  InstagramSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var InstagramSolid_default = InstagramSolid;
InstagramSolid.filename = ".../flowbite-svelte-icons/dist/InstagramSolid.svelte";
mark_module_end(InstagramSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/KeyboardOutline.svelte
mark_module_start();
var root_2313 = svg_template(`<title> </title>`);
var root_3313 = svg_template(`<desc> </desc>`);
var root_1313 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="square" d="M8 15h7.01v.01H15L8 15Z"></path><path stroke="currentColor" stroke-linecap="square" d="M20 6H4a1 1 0 0 0-1 1v10a1 1 0 0 0 1 1h16a1 1 0 0 0 1-1V7a1 1 0 0 0-1-1Z"></path><path stroke="currentColor" stroke-linecap="square" d="M6 9h.01v.01H6V9Zm0 3h.01v.01H6V12Zm0 3h.01v.01H6V15Zm3-6h.01v.01H9V9Zm0 3h.01v.01H9V12Zm3-3h.01v.01H12V9Zm0 3h.01v.01H12V12Zm3 0h.01v.01H15V12Zm3 0h.01v.01H18V12Zm0 3h.01v.01H18V15Zm-3-6h.01v.01H15V9Zm3 0h.01v.01H18V9Z"></path></svg>`);
var root_5313 = svg_template(`<title> </title>`);
var root_6313 = svg_template(`<desc> </desc>`);
var root_4313 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="square" d="M8 15h7.01v.01H15L8 15Z"></path><path stroke="currentColor" stroke-linecap="square" d="M20 6H4a1 1 0 0 0-1 1v10a1 1 0 0 0 1 1h16a1 1 0 0 0 1-1V7a1 1 0 0 0-1-1Z"></path><path stroke="currentColor" stroke-linecap="square" d="M6 9h.01v.01H6V9Zm0 3h.01v.01H6V12Zm0 3h.01v.01H6V15Zm3-6h.01v.01H9V9Zm0 3h.01v.01H9V12Zm3-3h.01v.01H12V9Zm0 3h.01v.01H12V12Zm3 0h.01v.01H15V12Zm3 0h.01v.01H18V12Zm0 3h.01v.01H18V15Zm-3-6h.01v.01H15V9Zm3 0h.01v.01H18V9Z"></path></svg>`);
function KeyboardOutline($$anchor, $$props) {
  if (new.target === KeyboardOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, KeyboardOutline);
  validate_prop_bindings($$props, [], [], KeyboardOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "keyboard outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1313();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2313();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3313();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      var path_2 = sibling(path_1);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
        set_attribute(path_1, "stroke-width", strokeWidth());
        set_attribute(path_2, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4313();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5313();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6313();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_3 = sibling(node_4);
      var path_4 = sibling(path_3);
      var path_5 = sibling(path_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_3, "stroke-width", strokeWidth());
        set_attribute(path_4, "stroke-width", strokeWidth());
        set_attribute(path_5, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(KeyboardOutline);
  KeyboardOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var KeyboardOutline_default = KeyboardOutline;
KeyboardOutline.filename = ".../flowbite-svelte-icons/dist/KeyboardOutline.svelte";
mark_module_end(KeyboardOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/KeyboardSolid.svelte
mark_module_start();
var root_2314 = svg_template(`<title> </title>`);
var root_3314 = svg_template(`<desc> </desc>`);
var root_1314 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M2 7a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V7Zm5.01 1H5v2.01h2.01V8Zm3 0H8v2.01h2.01V8Zm3 0H11v2.01h2.01V8Zm3 0H14v2.01h2.01V8Zm3 0H17v2.01h2.01V8Zm-12 3H5v2.01h2.01V11Zm3 0H8v2.01h2.01V11Zm3 0H11v2.01h2.01V11Zm3 0H14v2.01h2.01V11Zm3 0H17v2.01h2.01V11Zm-12 3H5v2.01h2.01V14ZM8 14l-.001 2 8.011.01V14H8Zm11.01 0H17v2.01h2.01V14Z" clip-rule="evenodd"></path></svg>`);
var root_5314 = svg_template(`<title> </title>`);
var root_6314 = svg_template(`<desc> </desc>`);
var root_4314 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M2 7a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V7Zm5.01 1H5v2.01h2.01V8Zm3 0H8v2.01h2.01V8Zm3 0H11v2.01h2.01V8Zm3 0H14v2.01h2.01V8Zm3 0H17v2.01h2.01V8Zm-12 3H5v2.01h2.01V11Zm3 0H8v2.01h2.01V11Zm3 0H11v2.01h2.01V11Zm3 0H14v2.01h2.01V11Zm3 0H17v2.01h2.01V11Zm-12 3H5v2.01h2.01V14ZM8 14l-.001 2 8.011.01V14H8Zm11.01 0H17v2.01h2.01V14Z" clip-rule="evenodd"></path></svg>`);
function KeyboardSolid($$anchor, $$props) {
  if (new.target === KeyboardSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, KeyboardSolid);
  validate_prop_bindings($$props, [], [], KeyboardSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "keyboard solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1314();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2314();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3314();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4314();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5314();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6314();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(KeyboardSolid);
  KeyboardSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var KeyboardSolid_default = KeyboardSolid;
KeyboardSolid.filename = ".../flowbite-svelte-icons/dist/KeyboardSolid.svelte";
mark_module_end(KeyboardSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/LabelOutline.svelte
mark_module_start();
var root_2315 = svg_template(`<title> </title>`);
var root_3315 = svg_template(`<desc> </desc>`);
var root_1315 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M15.2 6H4a1 1 0 0 0-1 1v10a1 1 0 0 0 1 1h11.2a1 1 0 0 0 .747-.334l4.46-5a1 1 0 0 0 0-1.332l-4.46-5A1 1 0 0 0 15.2 6Z"></path></svg>`);
var root_5315 = svg_template(`<title> </title>`);
var root_6315 = svg_template(`<desc> </desc>`);
var root_4315 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M15.2 6H4a1 1 0 0 0-1 1v10a1 1 0 0 0 1 1h11.2a1 1 0 0 0 .747-.334l4.46-5a1 1 0 0 0 0-1.332l-4.46-5A1 1 0 0 0 15.2 6Z"></path></svg>`);
function LabelOutline($$anchor, $$props) {
  if (new.target === LabelOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, LabelOutline);
  validate_prop_bindings($$props, [], [], LabelOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "label outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1315();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2315();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3315();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4315();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5315();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6315();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(LabelOutline);
  LabelOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var LabelOutline_default = LabelOutline;
LabelOutline.filename = ".../flowbite-svelte-icons/dist/LabelOutline.svelte";
mark_module_end(LabelOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/LabelSolid.svelte
mark_module_start();
var root_2316 = svg_template(`<title> </title>`);
var root_3316 = svg_template(`<desc> </desc>`);
var root_1316 = svg_template(`<svg><!><!><path d="M4 6a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h11.613a2 2 0 0 0 1.346-.52l4.4-4a2 2 0 0 0 0-2.96l-4.4-4A2 2 0 0 0 15.613 6H4Z"></path></svg>`);
var root_5316 = svg_template(`<title> </title>`);
var root_6316 = svg_template(`<desc> </desc>`);
var root_4316 = svg_template(`<svg><!><!><path d="M4 6a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h11.613a2 2 0 0 0 1.346-.52l4.4-4a2 2 0 0 0 0-2.96l-4.4-4A2 2 0 0 0 15.613 6H4Z"></path></svg>`);
function LabelSolid($$anchor, $$props) {
  if (new.target === LabelSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, LabelSolid);
  validate_prop_bindings($$props, [], [], LabelSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "label solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1316();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2316();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3316();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4316();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5316();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6316();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(LabelSolid);
  LabelSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var LabelSolid_default = LabelSolid;
LabelSolid.filename = ".../flowbite-svelte-icons/dist/LabelSolid.svelte";
mark_module_end(LabelSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/LandmarkOutline.svelte
mark_module_start();
var root_2317 = svg_template(`<title> </title>`);
var root_3317 = svg_template(`<desc> </desc>`);
var root_1317 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" d="M3 21h18M4 18h16M6 10v8m4-8v8m4-8v8m4-8v8M4 9.5v-.955a1 1 0 0 1 .458-.84l7-4.52a1 1 0 0 1 1.084 0l7 4.52a1 1 0 0 1 .458.84V9.5a.5.5 0 0 1-.5.5h-15a.5.5 0 0 1-.5-.5Z"></path></svg>`);
var root_5317 = svg_template(`<title> </title>`);
var root_6317 = svg_template(`<desc> </desc>`);
var root_4317 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" d="M3 21h18M4 18h16M6 10v8m4-8v8m4-8v8m4-8v8M4 9.5v-.955a1 1 0 0 1 .458-.84l7-4.52a1 1 0 0 1 1.084 0l7 4.52a1 1 0 0 1 .458.84V9.5a.5.5 0 0 1-.5.5h-15a.5.5 0 0 1-.5-.5Z"></path></svg>`);
function LandmarkOutline($$anchor, $$props) {
  if (new.target === LandmarkOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, LandmarkOutline);
  validate_prop_bindings($$props, [], [], LandmarkOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "landmark outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1317();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2317();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3317();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4317();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5317();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6317();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(LandmarkOutline);
  LandmarkOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var LandmarkOutline_default = LandmarkOutline;
LandmarkOutline.filename = ".../flowbite-svelte-icons/dist/LandmarkOutline.svelte";
mark_module_end(LandmarkOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/LandmarkSolid.svelte
mark_module_start();
var root_2318 = svg_template(`<title> </title>`);
var root_3318 = svg_template(`<desc> </desc>`);
var root_1318 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M10.915 2.345a2 2 0 0 1 2.17 0l7 4.52A2 2 0 0 1 21 8.544V9.5a1.5 1.5 0 0 1-1.5 1.5H19v6h1a1 1 0 1 1 0 2H4a1 1 0 1 1 0-2h1v-6h-.5A1.5 1.5 0 0 1 3 9.5v-.955a2 2 0 0 1 .915-1.68l7-4.52ZM17 17v-6h-2v6h2Zm-6-6h2v6h-2v-6Zm-2 6v-6H7v6h2Z" clip-rule="evenodd"></path><path d="M2 21a1 1 0 0 1 1-1h18a1 1 0 1 1 0 2H3a1 1 0 0 1-1-1Z"></path></svg>`);
var root_5318 = svg_template(`<title> </title>`);
var root_6318 = svg_template(`<desc> </desc>`);
var root_4318 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M10.915 2.345a2 2 0 0 1 2.17 0l7 4.52A2 2 0 0 1 21 8.544V9.5a1.5 1.5 0 0 1-1.5 1.5H19v6h1a1 1 0 1 1 0 2H4a1 1 0 1 1 0-2h1v-6h-.5A1.5 1.5 0 0 1 3 9.5v-.955a2 2 0 0 1 .915-1.68l7-4.52ZM17 17v-6h-2v6h2Zm-6-6h2v6h-2v-6Zm-2 6v-6H7v6h2Z" clip-rule="evenodd"></path><path d="M2 21a1 1 0 0 1 1-1h18a1 1 0 1 1 0 2H3a1 1 0 0 1-1-1Z"></path></svg>`);
function LandmarkSolid($$anchor, $$props) {
  if (new.target === LandmarkSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, LandmarkSolid);
  validate_prop_bindings($$props, [], [], LandmarkSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "landmark solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1318();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2318();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3318();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4318();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5318();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6318();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_2 = sibling(node_4);
      var path_3 = sibling(path_2);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(LandmarkSolid);
  LandmarkSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var LandmarkSolid_default = LandmarkSolid;
LandmarkSolid.filename = ".../flowbite-svelte-icons/dist/LandmarkSolid.svelte";
mark_module_end(LandmarkSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/LanguageOutline.svelte
mark_module_start();
var root_2319 = svg_template(`<title> </title>`);
var root_3319 = svg_template(`<desc> </desc>`);
var root_1319 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m13 19 3.5-9 3.5 9m-6.125-2h5.25M3 7h7m0 0h2m-2 0c0 1.63-.793 3.926-2.239 5.655M7.5 6.818V5m.261 7.655C6.79 13.82 5.521 14.725 4 15m3.761-2.345L5 10m2.761 2.655L10.2 15"></path></svg>`);
var root_5319 = svg_template(`<title> </title>`);
var root_6319 = svg_template(`<desc> </desc>`);
var root_4319 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m13 19 3.5-9 3.5 9m-6.125-2h5.25M3 7h7m0 0h2m-2 0c0 1.63-.793 3.926-2.239 5.655M7.5 6.818V5m.261 7.655C6.79 13.82 5.521 14.725 4 15m3.761-2.345L5 10m2.761 2.655L10.2 15"></path></svg>`);
function LanguageOutline($$anchor, $$props) {
  if (new.target === LanguageOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, LanguageOutline);
  validate_prop_bindings($$props, [], [], LanguageOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "language outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1319();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2319();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3319();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4319();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5319();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6319();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(LanguageOutline);
  LanguageOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var LanguageOutline_default = LanguageOutline;
LanguageOutline.filename = ".../flowbite-svelte-icons/dist/LanguageOutline.svelte";
mark_module_end(LanguageOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/LayersOutline.svelte
mark_module_start();
var root_2320 = svg_template(`<title> </title>`);
var root_3320 = svg_template(`<desc> </desc>`);
var root_1320 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M5.005 11.19V12l6.998 4.042L19 12v-.81M5 16.15v.81L11.997 21l6.998-4.042v-.81M12.003 3 5.005 7.042l6.998 4.042L19 7.042 12.003 3Z"></path></svg>`);
var root_5320 = svg_template(`<title> </title>`);
var root_6320 = svg_template(`<desc> </desc>`);
var root_4320 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M5.005 11.19V12l6.998 4.042L19 12v-.81M5 16.15v.81L11.997 21l6.998-4.042v-.81M12.003 3 5.005 7.042l6.998 4.042L19 7.042 12.003 3Z"></path></svg>`);
function LayersOutline($$anchor, $$props) {
  if (new.target === LayersOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, LayersOutline);
  validate_prop_bindings($$props, [], [], LayersOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "layers outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1320();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2320();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3320();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4320();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5320();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6320();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(LayersOutline);
  LayersOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var LayersOutline_default = LayersOutline;
LayersOutline.filename = ".../flowbite-svelte-icons/dist/LayersOutline.svelte";
mark_module_end(LayersOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/LayersSolid.svelte
mark_module_start();
var root_2321 = svg_template(`<title> </title>`);
var root_3321 = svg_template(`<desc> </desc>`);
var root_1321 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M5.005 10.19a1 1 0 0 1 1 1v.233l5.998 3.464L18 11.423v-.232a1 1 0 1 1 2 0V12a1 1 0 0 1-.5.866l-6.997 4.042a1 1 0 0 1-1 0l-6.998-4.042a1 1 0 0 1-.5-.866v-.81a1 1 0 0 1 1-1ZM5 15.15a1 1 0 0 1 1 1v.232l5.997 3.464 5.998-3.464v-.232a1 1 0 1 1 2 0v.81a1 1 0 0 1-.5.865l-6.998 4.042a1 1 0 0 1-1 0L4.5 17.824a1 1 0 0 1-.5-.866v-.81a1 1 0 0 1 1-1Z" clip-rule="evenodd"></path><path d="M12.503 2.134a1 1 0 0 0-1 0L4.501 6.17A1 1 0 0 0 4.5 7.902l7.002 4.047a1 1 0 0 0 1 0l6.998-4.04a1 1 0 0 0 0-1.732l-6.997-4.042Z"></path></svg>`);
var root_5321 = svg_template(`<title> </title>`);
var root_6321 = svg_template(`<desc> </desc>`);
var root_4321 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M5.005 10.19a1 1 0 0 1 1 1v.233l5.998 3.464L18 11.423v-.232a1 1 0 1 1 2 0V12a1 1 0 0 1-.5.866l-6.997 4.042a1 1 0 0 1-1 0l-6.998-4.042a1 1 0 0 1-.5-.866v-.81a1 1 0 0 1 1-1ZM5 15.15a1 1 0 0 1 1 1v.232l5.997 3.464 5.998-3.464v-.232a1 1 0 1 1 2 0v.81a1 1 0 0 1-.5.865l-6.998 4.042a1 1 0 0 1-1 0L4.5 17.824a1 1 0 0 1-.5-.866v-.81a1 1 0 0 1 1-1Z" clip-rule="evenodd"></path><path d="M12.503 2.134a1 1 0 0 0-1 0L4.501 6.17A1 1 0 0 0 4.5 7.902l7.002 4.047a1 1 0 0 0 1 0l6.998-4.04a1 1 0 0 0 0-1.732l-6.997-4.042Z"></path></svg>`);
function LayersSolid($$anchor, $$props) {
  if (new.target === LayersSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, LayersSolid);
  validate_prop_bindings($$props, [], [], LayersSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "layers solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1321();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2321();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3321();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4321();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5321();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6321();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_2 = sibling(node_4);
      var path_3 = sibling(path_2);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(LayersSolid);
  LayersSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var LayersSolid_default = LayersSolid;
LayersSolid.filename = ".../flowbite-svelte-icons/dist/LayersSolid.svelte";
mark_module_end(LayersSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/LetterBoldOutline.svelte
mark_module_start();
var root_2322 = svg_template(`<title> </title>`);
var root_3322 = svg_template(`<desc> </desc>`);
var root_1322 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M8 5h4.5a3.5 3.5 0 1 1 0 7H8m0-7v7m0-7H6m2 7h6.5a3.5 3.5 0 1 1 0 7H8m0-7v7m0 0H6"></path></svg>`);
var root_5322 = svg_template(`<title> </title>`);
var root_6322 = svg_template(`<desc> </desc>`);
var root_4322 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M8 5h4.5a3.5 3.5 0 1 1 0 7H8m0-7v7m0-7H6m2 7h6.5a3.5 3.5 0 1 1 0 7H8m0-7v7m0 0H6"></path></svg>`);
function LetterBoldOutline($$anchor, $$props) {
  if (new.target === LetterBoldOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, LetterBoldOutline);
  validate_prop_bindings($$props, [], [], LetterBoldOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "letter bold outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1322();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2322();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3322();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4322();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5322();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6322();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(LetterBoldOutline);
  LetterBoldOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var LetterBoldOutline_default = LetterBoldOutline;
LetterBoldOutline.filename = ".../flowbite-svelte-icons/dist/LetterBoldOutline.svelte";
mark_module_end(LetterBoldOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/LetterItalicOutline.svelte
mark_module_start();
var root_2323 = svg_template(`<title> </title>`);
var root_3323 = svg_template(`<desc> </desc>`);
var root_1323 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m8.874 19 6.143-14M6 19h6.33m-.66-14H18"></path></svg>`);
var root_5323 = svg_template(`<title> </title>`);
var root_6323 = svg_template(`<desc> </desc>`);
var root_4323 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m8.874 19 6.143-14M6 19h6.33m-.66-14H18"></path></svg>`);
function LetterItalicOutline($$anchor, $$props) {
  if (new.target === LetterItalicOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, LetterItalicOutline);
  validate_prop_bindings($$props, [], [], LetterItalicOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "letter italic outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1323();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2323();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3323();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4323();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5323();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6323();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(LetterItalicOutline);
  LetterItalicOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var LetterItalicOutline_default = LetterItalicOutline;
LetterItalicOutline.filename = ".../flowbite-svelte-icons/dist/LetterItalicOutline.svelte";
mark_module_end(LetterItalicOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/LetterUnderlineOutline.svelte
mark_module_start();
var root_2324 = svg_template(`<title> </title>`);
var root_3324 = svg_template(`<desc> </desc>`);
var root_1324 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" d="M6 19h12M8 5v9a4 4 0 0 0 8 0V5M6 5h4m4 0h4"></path></svg>`);
var root_5324 = svg_template(`<title> </title>`);
var root_6324 = svg_template(`<desc> </desc>`);
var root_4324 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" d="M6 19h12M8 5v9a4 4 0 0 0 8 0V5M6 5h4m4 0h4"></path></svg>`);
function LetterUnderlineOutline($$anchor, $$props) {
  if (new.target === LetterUnderlineOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, LetterUnderlineOutline);
  validate_prop_bindings($$props, [], [], LetterUnderlineOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "letter underline outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1324();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2324();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3324();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4324();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5324();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6324();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(LetterUnderlineOutline);
  LetterUnderlineOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var LetterUnderlineOutline_default = LetterUnderlineOutline;
LetterUnderlineOutline.filename = ".../flowbite-svelte-icons/dist/LetterUnderlineOutline.svelte";
mark_module_end(LetterUnderlineOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/LifeSaverOutline.svelte
mark_module_start();
var root_2325 = svg_template(`<title> </title>`);
var root_3325 = svg_template(`<desc> </desc>`);
var root_1325 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m13.46 8.291 3.849-3.849a1.5 1.5 0 0 1 2.122 0l.127.127a1.5 1.5 0 0 1 0 2.122l-3.84 3.838a4 4 0 0 0-2.258-2.238Zm0 0a4 4 0 0 1 2.263 2.238l3.662-3.662a8.961 8.961 0 0 1 0 10.27l-3.676-3.676m-2.25-5.17 3.678-3.676a8.961 8.961 0 0 0-10.27 0l3.662 3.662a4 4 0 0 0-2.238 2.258L4.615 6.863a8.96 8.96 0 0 0 0 10.27l3.662-3.662a4 4 0 0 0 2.258 2.238l-3.672 3.676a8.96 8.96 0 0 0 10.27 0l-3.662-3.662a4.001 4.001 0 0 0 2.238-2.262m0 0 3.849 3.848a1.5 1.5 0 0 1 0 2.122l-.127.126a1.499 1.499 0 0 1-2.122 0l-3.838-3.838a4 4 0 0 0 2.238-2.258Zm.29-1.461a4 4 0 1 1-8 0 4 4 0 0 1 8 0Zm-7.718 1.471-3.84 3.838a1.5 1.5 0 0 0 0 2.122l.128.126a1.5 1.5 0 0 0 2.122 0l3.848-3.848a4 4 0 0 1-2.258-2.238Zm2.248-5.19L6.69 4.442a1.5 1.5 0 0 0-2.122 0l-.127.127a1.5 1.5 0 0 0 0 2.122l3.849 3.848a4 4 0 0 1 2.238-2.258Z"></path></svg>`);
var root_5325 = svg_template(`<title> </title>`);
var root_6325 = svg_template(`<desc> </desc>`);
var root_4325 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m13.46 8.291 3.849-3.849a1.5 1.5 0 0 1 2.122 0l.127.127a1.5 1.5 0 0 1 0 2.122l-3.84 3.838a4 4 0 0 0-2.258-2.238Zm0 0a4 4 0 0 1 2.263 2.238l3.662-3.662a8.961 8.961 0 0 1 0 10.27l-3.676-3.676m-2.25-5.17 3.678-3.676a8.961 8.961 0 0 0-10.27 0l3.662 3.662a4 4 0 0 0-2.238 2.258L4.615 6.863a8.96 8.96 0 0 0 0 10.27l3.662-3.662a4 4 0 0 0 2.258 2.238l-3.672 3.676a8.96 8.96 0 0 0 10.27 0l-3.662-3.662a4.001 4.001 0 0 0 2.238-2.262m0 0 3.849 3.848a1.5 1.5 0 0 1 0 2.122l-.127.126a1.499 1.499 0 0 1-2.122 0l-3.838-3.838a4 4 0 0 0 2.238-2.258Zm.29-1.461a4 4 0 1 1-8 0 4 4 0 0 1 8 0Zm-7.718 1.471-3.84 3.838a1.5 1.5 0 0 0 0 2.122l.128.126a1.5 1.5 0 0 0 2.122 0l3.848-3.848a4 4 0 0 1-2.258-2.238Zm2.248-5.19L6.69 4.442a1.5 1.5 0 0 0-2.122 0l-.127.127a1.5 1.5 0 0 0 0 2.122l3.849 3.848a4 4 0 0 1 2.238-2.258Z"></path></svg>`);
function LifeSaverOutline($$anchor, $$props) {
  if (new.target === LifeSaverOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, LifeSaverOutline);
  validate_prop_bindings($$props, [], [], LifeSaverOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "life saver outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1325();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2325();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3325();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4325();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5325();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6325();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(LifeSaverOutline);
  LifeSaverOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var LifeSaverOutline_default = LifeSaverOutline;
LifeSaverOutline.filename = ".../flowbite-svelte-icons/dist/LifeSaverOutline.svelte";
mark_module_end(LifeSaverOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/LifeSaverSolid.svelte
mark_module_start();
var root_2326 = svg_template(`<title> </title>`);
var root_3326 = svg_template(`<desc> </desc>`);
var root_1326 = svg_template(`<svg><!><!><path d="m7.4 3.736 3.43 3.429A5.046 5.046 0 0 1 12.133 7c.356.01.71.06 1.056.147l3.41-3.412a2.32 2.32 0 0 1 .451-.344A9.89 9.89 0 0 0 12.268 2a10.022 10.022 0 0 0-5.322 1.392c.165.095.318.211.454.344Zm11.451 1.54-.127-.127a.5.5 0 0 0-.706 0l-2.932 2.932c.03.023.05.054.078.077.237.194.454.41.651.645.033.038.077.067.11.107l2.926-2.927a.5.5 0 0 0 0-.707Zm-2.931 9.81c-.025.03-.058.052-.082.082a4.97 4.97 0 0 1-.633.639c-.04.036-.072.083-.115.117l2.927 2.927a.5.5 0 0 0 .707 0l.127-.127a.5.5 0 0 0 0-.707l-2.932-2.931Zm-1.443-4.763a3.037 3.037 0 0 0-1.383-1.1l-.012-.007a2.956 2.956 0 0 0-1-.213H12a2.964 2.964 0 0 0-2.122.893c-.285.29-.509.634-.657 1.013l-.009.016a2.96 2.96 0 0 0-.21 1 2.99 2.99 0 0 0 .488 1.716l.032.04a3.04 3.04 0 0 0 1.384 1.1l.012.007c.319.129.657.2 1 .213.393.015.784-.05 1.15-.192.012-.005.021-.013.033-.018a3.01 3.01 0 0 0 1.676-1.7v-.007a2.89 2.89 0 0 0 0-2.207 2.868 2.868 0 0 0-.27-.515c-.007-.012-.02-.025-.03-.039Zm6.137-3.373a2.53 2.53 0 0 1-.349.447l-3.426 3.426c.112.428.166.869.161 1.311a4.954 4.954 0 0 1-.148 1.054l3.413 3.412c.133.134.249.283.347.444A9.88 9.88 0 0 0 22 12.269a9.913 9.913 0 0 0-1.386-5.319ZM16.6 20.264l-3.42-3.421c-.386.1-.782.152-1.18.157h-.135c-.356-.01-.71-.06-1.056-.147L7.4 20.265a2.503 2.503 0 0 1-.444.347A9.884 9.884 0 0 0 11.732 22H12a9.9 9.9 0 0 0 5.044-1.388 2.515 2.515 0 0 1-.444-.348ZM3.735 16.6l3.426-3.426a4.608 4.608 0 0 1-.013-2.367L3.735 7.4a2.508 2.508 0 0 1-.349-.447 9.889 9.889 0 0 0 0 10.1 2.48 2.48 0 0 1 .35-.453Zm5.101-.758a4.959 4.959 0 0 1-.65-.645c-.034-.038-.078-.067-.11-.107L5.15 18.017a.5.5 0 0 0 0 .707l.127.127a.5.5 0 0 0 .706 0l2.932-2.933c-.029-.018-.049-.053-.078-.076Zm-.755-6.928c.03-.037.07-.063.1-.1.183-.22.383-.423.6-.609.046-.04.081-.092.128-.13L5.983 5.149a.5.5 0 0 0-.707 0l-.127.127a.5.5 0 0 0 0 .707l2.932 2.931Z"></path></svg>`);
var root_5326 = svg_template(`<title> </title>`);
var root_6326 = svg_template(`<desc> </desc>`);
var root_4326 = svg_template(`<svg><!><!><path d="m7.4 3.736 3.43 3.429A5.046 5.046 0 0 1 12.133 7c.356.01.71.06 1.056.147l3.41-3.412a2.32 2.32 0 0 1 .451-.344A9.89 9.89 0 0 0 12.268 2a10.022 10.022 0 0 0-5.322 1.392c.165.095.318.211.454.344Zm11.451 1.54-.127-.127a.5.5 0 0 0-.706 0l-2.932 2.932c.03.023.05.054.078.077.237.194.454.41.651.645.033.038.077.067.11.107l2.926-2.927a.5.5 0 0 0 0-.707Zm-2.931 9.81c-.025.03-.058.052-.082.082a4.97 4.97 0 0 1-.633.639c-.04.036-.072.083-.115.117l2.927 2.927a.5.5 0 0 0 .707 0l.127-.127a.5.5 0 0 0 0-.707l-2.932-2.931Zm-1.443-4.763a3.037 3.037 0 0 0-1.383-1.1l-.012-.007a2.956 2.956 0 0 0-1-.213H12a2.964 2.964 0 0 0-2.122.893c-.285.29-.509.634-.657 1.013l-.009.016a2.96 2.96 0 0 0-.21 1 2.99 2.99 0 0 0 .488 1.716l.032.04a3.04 3.04 0 0 0 1.384 1.1l.012.007c.319.129.657.2 1 .213.393.015.784-.05 1.15-.192.012-.005.021-.013.033-.018a3.01 3.01 0 0 0 1.676-1.7v-.007a2.89 2.89 0 0 0 0-2.207 2.868 2.868 0 0 0-.27-.515c-.007-.012-.02-.025-.03-.039Zm6.137-3.373a2.53 2.53 0 0 1-.349.447l-3.426 3.426c.112.428.166.869.161 1.311a4.954 4.954 0 0 1-.148 1.054l3.413 3.412c.133.134.249.283.347.444A9.88 9.88 0 0 0 22 12.269a9.913 9.913 0 0 0-1.386-5.319ZM16.6 20.264l-3.42-3.421c-.386.1-.782.152-1.18.157h-.135c-.356-.01-.71-.06-1.056-.147L7.4 20.265a2.503 2.503 0 0 1-.444.347A9.884 9.884 0 0 0 11.732 22H12a9.9 9.9 0 0 0 5.044-1.388 2.515 2.515 0 0 1-.444-.348ZM3.735 16.6l3.426-3.426a4.608 4.608 0 0 1-.013-2.367L3.735 7.4a2.508 2.508 0 0 1-.349-.447 9.889 9.889 0 0 0 0 10.1 2.48 2.48 0 0 1 .35-.453Zm5.101-.758a4.959 4.959 0 0 1-.65-.645c-.034-.038-.078-.067-.11-.107L5.15 18.017a.5.5 0 0 0 0 .707l.127.127a.5.5 0 0 0 .706 0l2.932-2.933c-.029-.018-.049-.053-.078-.076Zm-.755-6.928c.03-.037.07-.063.1-.1.183-.22.383-.423.6-.609.046-.04.081-.092.128-.13L5.983 5.149a.5.5 0 0 0-.707 0l-.127.127a.5.5 0 0 0 0 .707l2.932 2.931Z"></path></svg>`);
function LifeSaverSolid($$anchor, $$props) {
  if (new.target === LifeSaverSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, LifeSaverSolid);
  validate_prop_bindings($$props, [], [], LifeSaverSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "life saver solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1326();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2326();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3326();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4326();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5326();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6326();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(LifeSaverSolid);
  LifeSaverSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var LifeSaverSolid_default = LifeSaverSolid;
LifeSaverSolid.filename = ".../flowbite-svelte-icons/dist/LifeSaverSolid.svelte";
mark_module_end(LifeSaverSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/LightbulbOutline.svelte
mark_module_start();
var root_2327 = svg_template(`<title> </title>`);
var root_3327 = svg_template(`<desc> </desc>`);
var root_1327 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M9 9a3 3 0 0 1 3-3m-2 15h4m0-3c0-4.1 4-4.9 4-9A6 6 0 1 0 6 9c0 4 4 5 4 9h4Z"></path></svg>`);
var root_5327 = svg_template(`<title> </title>`);
var root_6327 = svg_template(`<desc> </desc>`);
var root_4327 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M9 9a3 3 0 0 1 3-3m-2 15h4m0-3c0-4.1 4-4.9 4-9A6 6 0 1 0 6 9c0 4 4 5 4 9h4Z"></path></svg>`);
function LightbulbOutline($$anchor, $$props) {
  if (new.target === LightbulbOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, LightbulbOutline);
  validate_prop_bindings($$props, [], [], LightbulbOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "lightbulb outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1327();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2327();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3327();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4327();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5327();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6327();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(LightbulbOutline);
  LightbulbOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var LightbulbOutline_default = LightbulbOutline;
LightbulbOutline.filename = ".../flowbite-svelte-icons/dist/LightbulbOutline.svelte";
mark_module_end(LightbulbOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/LightbulbSolid.svelte
mark_module_start();
var root_2328 = svg_template(`<title> </title>`);
var root_3328 = svg_template(`<desc> </desc>`);
var root_1328 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M7.05 4.05A7 7 0 0 1 19 9c0 2.407-1.197 3.874-2.186 5.084l-.04.048C15.77 15.362 15 16.34 15 18a1 1 0 0 1-1 1h-4a1 1 0 0 1-1-1c0-1.612-.77-2.613-1.78-3.875l-.045-.056C6.193 12.842 5 11.352 5 9a7 7 0 0 1 2.05-4.95ZM9 21a1 1 0 0 1 1-1h4a1 1 0 1 1 0 2h-4a1 1 0 0 1-1-1Zm1.586-13.414A2 2 0 0 1 12 7a1 1 0 1 0 0-2 4 4 0 0 0-4 4 1 1 0 0 0 2 0 2 2 0 0 1 .586-1.414Z" clip-rule="evenodd"></path></svg>`);
var root_5328 = svg_template(`<title> </title>`);
var root_6328 = svg_template(`<desc> </desc>`);
var root_4328 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M7.05 4.05A7 7 0 0 1 19 9c0 2.407-1.197 3.874-2.186 5.084l-.04.048C15.77 15.362 15 16.34 15 18a1 1 0 0 1-1 1h-4a1 1 0 0 1-1-1c0-1.612-.77-2.613-1.78-3.875l-.045-.056C6.193 12.842 5 11.352 5 9a7 7 0 0 1 2.05-4.95ZM9 21a1 1 0 0 1 1-1h4a1 1 0 1 1 0 2h-4a1 1 0 0 1-1-1Zm1.586-13.414A2 2 0 0 1 12 7a1 1 0 1 0 0-2 4 4 0 0 0-4 4 1 1 0 0 0 2 0 2 2 0 0 1 .586-1.414Z" clip-rule="evenodd"></path></svg>`);
function LightbulbSolid($$anchor, $$props) {
  if (new.target === LightbulbSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, LightbulbSolid);
  validate_prop_bindings($$props, [], [], LightbulbSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "lightbulb solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1328();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2328();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3328();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4328();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5328();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6328();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(LightbulbSolid);
  LightbulbSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var LightbulbSolid_default = LightbulbSolid;
LightbulbSolid.filename = ".../flowbite-svelte-icons/dist/LightbulbSolid.svelte";
mark_module_end(LightbulbSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/LinkOutline.svelte
mark_module_start();
var root_2329 = svg_template(`<title> </title>`);
var root_3329 = svg_template(`<desc> </desc>`);
var root_1329 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M13.213 9.787a3.391 3.391 0 0 0-4.795 0l-3.425 3.426a3.39 3.39 0 0 0 4.795 4.794l.321-.304m-.321-4.49a3.39 3.39 0 0 0 4.795 0l3.424-3.426a3.39 3.39 0 0 0-4.794-4.795l-1.028.961"></path></svg>`);
var root_5329 = svg_template(`<title> </title>`);
var root_6329 = svg_template(`<desc> </desc>`);
var root_4329 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M13.213 9.787a3.391 3.391 0 0 0-4.795 0l-3.425 3.426a3.39 3.39 0 0 0 4.795 4.794l.321-.304m-.321-4.49a3.39 3.39 0 0 0 4.795 0l3.424-3.426a3.39 3.39 0 0 0-4.794-4.795l-1.028.961"></path></svg>`);
function LinkOutline($$anchor, $$props) {
  if (new.target === LinkOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, LinkOutline);
  validate_prop_bindings($$props, [], [], LinkOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "link outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1329();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2329();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3329();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4329();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5329();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6329();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(LinkOutline);
  LinkOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var LinkOutline_default = LinkOutline;
LinkOutline.filename = ".../flowbite-svelte-icons/dist/LinkOutline.svelte";
mark_module_end(LinkOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/LinkedinSolid.svelte
mark_module_start();
var root_2330 = svg_template(`<title> </title>`);
var root_3330 = svg_template(`<desc> </desc>`);
var root_1330 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M12.51 8.796v1.697a3.738 3.738 0 0 1 3.288-1.684c3.455 0 4.202 2.16 4.202 4.97V19.5h-3.2v-5.072c0-1.21-.244-2.766-2.128-2.766-1.827 0-2.139 1.317-2.139 2.676V19.5h-3.19V8.796h3.168ZM7.2 6.106a1.61 1.61 0 0 1-.988 1.483 1.595 1.595 0 0 1-1.743-.348A1.607 1.607 0 0 1 5.6 4.5a1.601 1.601 0 0 1 1.6 1.606Z" clip-rule="evenodd"></path><path d="M7.2 8.809H4V19.5h3.2V8.809Z"></path></svg>`);
var root_5330 = svg_template(`<title> </title>`);
var root_6330 = svg_template(`<desc> </desc>`);
var root_4330 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M12.51 8.796v1.697a3.738 3.738 0 0 1 3.288-1.684c3.455 0 4.202 2.16 4.202 4.97V19.5h-3.2v-5.072c0-1.21-.244-2.766-2.128-2.766-1.827 0-2.139 1.317-2.139 2.676V19.5h-3.19V8.796h3.168ZM7.2 6.106a1.61 1.61 0 0 1-.988 1.483 1.595 1.595 0 0 1-1.743-.348A1.607 1.607 0 0 1 5.6 4.5a1.601 1.601 0 0 1 1.6 1.606Z" clip-rule="evenodd"></path><path d="M7.2 8.809H4V19.5h3.2V8.809Z"></path></svg>`);
function LinkedinSolid($$anchor, $$props) {
  if (new.target === LinkedinSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, LinkedinSolid);
  validate_prop_bindings($$props, [], [], LinkedinSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "linkedin solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1330();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2330();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3330();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4330();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5330();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6330();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_2 = sibling(node_4);
      var path_3 = sibling(path_2);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(LinkedinSolid);
  LinkedinSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var LinkedinSolid_default = LinkedinSolid;
LinkedinSolid.filename = ".../flowbite-svelte-icons/dist/LinkedinSolid.svelte";
mark_module_end(LinkedinSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ListMusicOutline.svelte
mark_module_start();
var root_2331 = svg_template(`<title> </title>`);
var root_3331 = svg_template(`<desc> </desc>`);
var root_1331 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M17 15.5V5s3 1 3 4m-7-3H4m9 4H4m4 4H4m13 2.4c0 1.326-1.343 2.4-3 2.4s-3-1.075-3-2.4 1.343-2.4 3-2.4 3 1.075 3 2.4Z"></path></svg>`);
var root_5331 = svg_template(`<title> </title>`);
var root_6331 = svg_template(`<desc> </desc>`);
var root_4331 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M17 15.5V5s3 1 3 4m-7-3H4m9 4H4m4 4H4m13 2.4c0 1.326-1.343 2.4-3 2.4s-3-1.075-3-2.4 1.343-2.4 3-2.4 3 1.075 3 2.4Z"></path></svg>`);
function ListMusicOutline($$anchor, $$props) {
  if (new.target === ListMusicOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ListMusicOutline);
  validate_prop_bindings($$props, [], [], ListMusicOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "list music outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1331();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2331();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3331();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4331();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5331();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6331();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ListMusicOutline);
  ListMusicOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ListMusicOutline_default = ListMusicOutline;
ListMusicOutline.filename = ".../flowbite-svelte-icons/dist/ListMusicOutline.svelte";
mark_module_end(ListMusicOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ListMusicSolid.svelte
mark_module_start();
var root_2332 = svg_template(`<title> </title>`);
var root_3332 = svg_template(`<desc> </desc>`);
var root_1332 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M17.316 4.052a.99.99 0 0 0-.9.14c-.262.19-.416.495-.416.82v8.566a4.573 4.573 0 0 0-2-.464c-1.99 0-4 1.342-4 3.443 0 2.1 2.01 3.443 4 3.443 1.99 0 4-1.342 4-3.443V6.801c.538.5 1 1.219 1 2.262 0 .56.448 1.013 1 1.013s1-.453 1-1.013c0-1.905-.956-3.18-1.86-3.942a6.391 6.391 0 0 0-1.636-.998 4 4 0 0 0-.166-.063l-.013-.005-.005-.002h-.002l-.002-.001ZM4 5.012c-.552 0-1 .454-1 1.013 0 .56.448 1.013 1 1.013h9c.552 0 1-.453 1-1.013 0-.559-.448-1.012-1-1.012H4Zm0 4.051c-.552 0-1 .454-1 1.013 0 .56.448 1.013 1 1.013h9c.552 0 1-.454 1-1.013 0-.56-.448-1.013-1-1.013H4Zm0 4.05c-.552 0-1 .454-1 1.014 0 .559.448 1.012 1 1.012h4c.552 0 1-.453 1-1.012 0-.56-.448-1.013-1-1.013H4Z" clip-rule="evenodd"></path></svg>`);
var root_5332 = svg_template(`<title> </title>`);
var root_6332 = svg_template(`<desc> </desc>`);
var root_4332 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M17.316 4.052a.99.99 0 0 0-.9.14c-.262.19-.416.495-.416.82v8.566a4.573 4.573 0 0 0-2-.464c-1.99 0-4 1.342-4 3.443 0 2.1 2.01 3.443 4 3.443 1.99 0 4-1.342 4-3.443V6.801c.538.5 1 1.219 1 2.262 0 .56.448 1.013 1 1.013s1-.453 1-1.013c0-1.905-.956-3.18-1.86-3.942a6.391 6.391 0 0 0-1.636-.998 4 4 0 0 0-.166-.063l-.013-.005-.005-.002h-.002l-.002-.001ZM4 5.012c-.552 0-1 .454-1 1.013 0 .56.448 1.013 1 1.013h9c.552 0 1-.453 1-1.013 0-.559-.448-1.012-1-1.012H4Zm0 4.051c-.552 0-1 .454-1 1.013 0 .56.448 1.013 1 1.013h9c.552 0 1-.454 1-1.013 0-.56-.448-1.013-1-1.013H4Zm0 4.05c-.552 0-1 .454-1 1.014 0 .559.448 1.012 1 1.012h4c.552 0 1-.453 1-1.012 0-.56-.448-1.013-1-1.013H4Z" clip-rule="evenodd"></path></svg>`);
function ListMusicSolid($$anchor, $$props) {
  if (new.target === ListMusicSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ListMusicSolid);
  validate_prop_bindings($$props, [], [], ListMusicSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "list music solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1332();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2332();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3332();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4332();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5332();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6332();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ListMusicSolid);
  ListMusicSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ListMusicSolid_default = ListMusicSolid;
ListMusicSolid.filename = ".../flowbite-svelte-icons/dist/ListMusicSolid.svelte";
mark_module_end(ListMusicSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ListOutline.svelte
mark_module_start();
var root_2333 = svg_template(`<title> </title>`);
var root_3333 = svg_template(`<desc> </desc>`);
var root_1333 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" d="M9 8h10M9 12h10M9 16h10M4.99 8H5m-.02 4h.01m0 4H5"></path></svg>`);
var root_5333 = svg_template(`<title> </title>`);
var root_6333 = svg_template(`<desc> </desc>`);
var root_4333 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" d="M9 8h10M9 12h10M9 16h10M4.99 8H5m-.02 4h.01m0 4H5"></path></svg>`);
function ListOutline($$anchor, $$props) {
  if (new.target === ListOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ListOutline);
  validate_prop_bindings($$props, [], [], ListOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "list outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1333();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2333();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3333();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4333();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5333();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6333();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ListOutline);
  ListOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ListOutline_default = ListOutline;
ListOutline.filename = ".../flowbite-svelte-icons/dist/ListOutline.svelte";
mark_module_end(ListOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/LockOpenOutline.svelte
mark_module_start();
var root_2334 = svg_template(`<title> </title>`);
var root_3334 = svg_template(`<desc> </desc>`);
var root_1334 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M10 14v3m4-6V7a3 3 0 1 1 6 0v4M5 11h10a1 1 0 0 1 1 1v7a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1v-7a1 1 0 0 1 1-1Z"></path></svg>`);
var root_5334 = svg_template(`<title> </title>`);
var root_6334 = svg_template(`<desc> </desc>`);
var root_4334 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M10 14v3m4-6V7a3 3 0 1 1 6 0v4M5 11h10a1 1 0 0 1 1 1v7a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1v-7a1 1 0 0 1 1-1Z"></path></svg>`);
function LockOpenOutline($$anchor, $$props) {
  if (new.target === LockOpenOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, LockOpenOutline);
  validate_prop_bindings($$props, [], [], LockOpenOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "lock open outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1334();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2334();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3334();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4334();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5334();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6334();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(LockOpenOutline);
  LockOpenOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var LockOpenOutline_default = LockOpenOutline;
LockOpenOutline.filename = ".../flowbite-svelte-icons/dist/LockOpenOutline.svelte";
mark_module_end(LockOpenOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/LockOpenSolid.svelte
mark_module_start();
var root_2335 = svg_template(`<title> </title>`);
var root_3335 = svg_template(`<desc> </desc>`);
var root_1335 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M15 7a2 2 0 1 1 4 0v4a1 1 0 1 0 2 0V7a4 4 0 0 0-8 0v3H5a2 2 0 0 0-2 2v7a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2v-7a2 2 0 0 0-2-2V7Zm-5 6a1 1 0 0 1 1 1v3a1 1 0 1 1-2 0v-3a1 1 0 0 1 1-1Z" clip-rule="evenodd"></path></svg>`);
var root_5335 = svg_template(`<title> </title>`);
var root_6335 = svg_template(`<desc> </desc>`);
var root_4335 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M15 7a2 2 0 1 1 4 0v4a1 1 0 1 0 2 0V7a4 4 0 0 0-8 0v3H5a2 2 0 0 0-2 2v7a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2v-7a2 2 0 0 0-2-2V7Zm-5 6a1 1 0 0 1 1 1v3a1 1 0 1 1-2 0v-3a1 1 0 0 1 1-1Z" clip-rule="evenodd"></path></svg>`);
function LockOpenSolid($$anchor, $$props) {
  if (new.target === LockOpenSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, LockOpenSolid);
  validate_prop_bindings($$props, [], [], LockOpenSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "lock open solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1335();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2335();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3335();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4335();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5335();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6335();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(LockOpenSolid);
  LockOpenSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var LockOpenSolid_default = LockOpenSolid;
LockOpenSolid.filename = ".../flowbite-svelte-icons/dist/LockOpenSolid.svelte";
mark_module_end(LockOpenSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/LockOutline.svelte
mark_module_start();
var root_2336 = svg_template(`<title> </title>`);
var root_3336 = svg_template(`<desc> </desc>`);
var root_1336 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12 14v3m-3-6V7a3 3 0 1 1 6 0v4m-8 0h10a1 1 0 0 1 1 1v7a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1v-7a1 1 0 0 1 1-1Z"></path></svg>`);
var root_5336 = svg_template(`<title> </title>`);
var root_6336 = svg_template(`<desc> </desc>`);
var root_4336 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12 14v3m-3-6V7a3 3 0 1 1 6 0v4m-8 0h10a1 1 0 0 1 1 1v7a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1v-7a1 1 0 0 1 1-1Z"></path></svg>`);
function LockOutline($$anchor, $$props) {
  if (new.target === LockOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, LockOutline);
  validate_prop_bindings($$props, [], [], LockOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "lock outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1336();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2336();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3336();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4336();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5336();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6336();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(LockOutline);
  LockOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var LockOutline_default = LockOutline;
LockOutline.filename = ".../flowbite-svelte-icons/dist/LockOutline.svelte";
mark_module_end(LockOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/LockSolid.svelte
mark_module_start();
var root_2337 = svg_template(`<title> </title>`);
var root_3337 = svg_template(`<desc> </desc>`);
var root_1337 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M8 10V7a4 4 0 1 1 8 0v3h1a2 2 0 0 1 2 2v7a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h1Zm2-3a2 2 0 1 1 4 0v3h-4V7Zm2 6a1 1 0 0 1 1 1v3a1 1 0 1 1-2 0v-3a1 1 0 0 1 1-1Z" clip-rule="evenodd"></path></svg>`);
var root_5337 = svg_template(`<title> </title>`);
var root_6337 = svg_template(`<desc> </desc>`);
var root_4337 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M8 10V7a4 4 0 1 1 8 0v3h1a2 2 0 0 1 2 2v7a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h1Zm2-3a2 2 0 1 1 4 0v3h-4V7Zm2 6a1 1 0 0 1 1 1v3a1 1 0 1 1-2 0v-3a1 1 0 0 1 1-1Z" clip-rule="evenodd"></path></svg>`);
function LockSolid($$anchor, $$props) {
  if (new.target === LockSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, LockSolid);
  validate_prop_bindings($$props, [], [], LockSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "lock solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1337();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2337();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3337();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4337();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5337();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6337();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(LockSolid);
  LockSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var LockSolid_default = LockSolid;
LockSolid.filename = ".../flowbite-svelte-icons/dist/LockSolid.svelte";
mark_module_end(LockSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/LockTimeOutline.svelte
mark_module_start();
var root_2338 = svg_template(`<title> </title>`);
var root_3338 = svg_template(`<desc> </desc>`);
var root_1338 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M9.5 11H5a1 1 0 0 0-1 1v7a1 1 0 0 0 1 1h4.5M7 11V7a3 3 0 0 1 6 0v1.5m2.5 5.5v1.5l1 1m3.5-1a4.5 4.5 0 1 1-9 0 4.5 4.5 0 0 1 9 0Z"></path></svg>`);
var root_5338 = svg_template(`<title> </title>`);
var root_6338 = svg_template(`<desc> </desc>`);
var root_4338 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M9.5 11H5a1 1 0 0 0-1 1v7a1 1 0 0 0 1 1h4.5M7 11V7a3 3 0 0 1 6 0v1.5m2.5 5.5v1.5l1 1m3.5-1a4.5 4.5 0 1 1-9 0 4.5 4.5 0 0 1 9 0Z"></path></svg>`);
function LockTimeOutline($$anchor, $$props) {
  if (new.target === LockTimeOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, LockTimeOutline);
  validate_prop_bindings($$props, [], [], LockTimeOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "lock time outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1338();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2338();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3338();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4338();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5338();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6338();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(LockTimeOutline);
  LockTimeOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var LockTimeOutline_default = LockTimeOutline;
LockTimeOutline.filename = ".../flowbite-svelte-icons/dist/LockTimeOutline.svelte";
mark_module_end(LockTimeOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/LockTimeSolid.svelte
mark_module_start();
var root_2339 = svg_template(`<title> </title>`);
var root_3339 = svg_template(`<desc> </desc>`);
var root_1339 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M10 5a2 2 0 0 0-2 2v3h2.4A7.48 7.48 0 0 0 8 15.5a7.48 7.48 0 0 0 2.4 5.5H5a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h1V7a4 4 0 1 1 8 0v1.15a7.446 7.446 0 0 0-1.943.685A.999.999 0 0 1 12 8.5V7a2 2 0 0 0-2-2Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M10 15.5a5.5 5.5 0 1 1 11 0 5.5 5.5 0 0 1-11 0Zm6.5-1.5a1 1 0 1 0-2 0v1.5a1 1 0 0 0 .293.707l1 1a1 1 0 0 0 1.414-1.414l-.707-.707V14Z" clip-rule="evenodd"></path></svg>`);
var root_5339 = svg_template(`<title> </title>`);
var root_6339 = svg_template(`<desc> </desc>`);
var root_4339 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M10 5a2 2 0 0 0-2 2v3h2.4A7.48 7.48 0 0 0 8 15.5a7.48 7.48 0 0 0 2.4 5.5H5a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h1V7a4 4 0 1 1 8 0v1.15a7.446 7.446 0 0 0-1.943.685A.999.999 0 0 1 12 8.5V7a2 2 0 0 0-2-2Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M10 15.5a5.5 5.5 0 1 1 11 0 5.5 5.5 0 0 1-11 0Zm6.5-1.5a1 1 0 1 0-2 0v1.5a1 1 0 0 0 .293.707l1 1a1 1 0 0 0 1.414-1.414l-.707-.707V14Z" clip-rule="evenodd"></path></svg>`);
function LockTimeSolid($$anchor, $$props) {
  if (new.target === LockTimeSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, LockTimeSolid);
  validate_prop_bindings($$props, [], [], LockTimeSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "lock time solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1339();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2339();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3339();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4339();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5339();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6339();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_2 = sibling(node_4);
      var path_3 = sibling(path_2);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(LockTimeSolid);
  LockTimeSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var LockTimeSolid_default = LockTimeSolid;
LockTimeSolid.filename = ".../flowbite-svelte-icons/dist/LockTimeSolid.svelte";
mark_module_end(LockTimeSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/MailBoxOutline.svelte
mark_module_start();
var root_2340 = svg_template(`<title> </title>`);
var root_3340 = svg_template(`<desc> </desc>`);
var root_1340 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M11 16v-5.5A3.5 3.5 0 0 0 7.5 7m3.5 9H4v-5.5A3.5 3.5 0 0 1 7.5 7m3.5 9v4M7.5 7H14m0 0V4h2.5M14 7v3m-3.5 6H20v-6a3 3 0 0 0-3-3m-2 9v4m-8-6.5h1"></path></svg>`);
var root_5340 = svg_template(`<title> </title>`);
var root_6340 = svg_template(`<desc> </desc>`);
var root_4340 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M11 16v-5.5A3.5 3.5 0 0 0 7.5 7m3.5 9H4v-5.5A3.5 3.5 0 0 1 7.5 7m3.5 9v4M7.5 7H14m0 0V4h2.5M14 7v3m-3.5 6H20v-6a3 3 0 0 0-3-3m-2 9v4m-8-6.5h1"></path></svg>`);
function MailBoxOutline($$anchor, $$props) {
  if (new.target === MailBoxOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, MailBoxOutline);
  validate_prop_bindings($$props, [], [], MailBoxOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "mail box outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1340();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2340();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3340();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4340();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5340();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6340();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(MailBoxOutline);
  MailBoxOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var MailBoxOutline_default = MailBoxOutline;
MailBoxOutline.filename = ".../flowbite-svelte-icons/dist/MailBoxOutline.svelte";
mark_module_end(MailBoxOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/MailBoxSolid.svelte
mark_module_start();
var root_2341 = svg_template(`<title> </title>`);
var root_3341 = svg_template(`<desc> </desc>`);
var root_1341 = svg_template(`<svg><!><!><path d="M17 6h-2V5h1a1 1 0 1 0 0-2h-2a1 1 0 0 0-1 1v2h-.541A5.965 5.965 0 0 1 14 10v4a1 1 0 1 1-2 0v-4c0-2.206-1.794-4-4-4-.075 0-.148.012-.22.028C7.686 6.022 7.596 6 7.5 6A4.505 4.505 0 0 0 3 10.5V16a1 1 0 0 0 1 1h7v3a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1v-3h5a1 1 0 0 0 1-1v-6c0-2.206-1.794-4-4-4Zm-9 8.5H7a1 1 0 1 1 0-2h1a1 1 0 1 1 0 2Z"></path></svg>`);
var root_5341 = svg_template(`<title> </title>`);
var root_6341 = svg_template(`<desc> </desc>`);
var root_4341 = svg_template(`<svg><!><!><path d="M17 6h-2V5h1a1 1 0 1 0 0-2h-2a1 1 0 0 0-1 1v2h-.541A5.965 5.965 0 0 1 14 10v4a1 1 0 1 1-2 0v-4c0-2.206-1.794-4-4-4-.075 0-.148.012-.22.028C7.686 6.022 7.596 6 7.5 6A4.505 4.505 0 0 0 3 10.5V16a1 1 0 0 0 1 1h7v3a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1v-3h5a1 1 0 0 0 1-1v-6c0-2.206-1.794-4-4-4Zm-9 8.5H7a1 1 0 1 1 0-2h1a1 1 0 1 1 0 2Z"></path></svg>`);
function MailBoxSolid($$anchor, $$props) {
  if (new.target === MailBoxSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, MailBoxSolid);
  validate_prop_bindings($$props, [], [], MailBoxSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "mail box solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1341();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2341();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3341();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4341();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5341();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6341();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(MailBoxSolid);
  MailBoxSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var MailBoxSolid_default = MailBoxSolid;
MailBoxSolid.filename = ".../flowbite-svelte-icons/dist/MailBoxSolid.svelte";
mark_module_end(MailBoxSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/MapPinAltOutline.svelte
mark_module_start();
var root_2342 = svg_template(`<title> </title>`);
var root_3342 = svg_template(`<desc> </desc>`);
var root_1342 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12 13a3 3 0 1 0 0-6 3 3 0 0 0 0 6Z"></path><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M17.8 13.938h-.011a7 7 0 1 0-11.464.144h-.016l.14.171c.1.127.2.251.3.371L12 21l5.13-6.248c.194-.209.374-.429.54-.659l.13-.155Z"></path></svg>`);
var root_5342 = svg_template(`<title> </title>`);
var root_6342 = svg_template(`<desc> </desc>`);
var root_4342 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12 13a3 3 0 1 0 0-6 3 3 0 0 0 0 6Z"></path><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M17.8 13.938h-.011a7 7 0 1 0-11.464.144h-.016l.14.171c.1.127.2.251.3.371L12 21l5.13-6.248c.194-.209.374-.429.54-.659l.13-.155Z"></path></svg>`);
function MapPinAltOutline($$anchor, $$props) {
  if (new.target === MapPinAltOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, MapPinAltOutline);
  validate_prop_bindings($$props, [], [], MapPinAltOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "map pin alt outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1342();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2342();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3342();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4342();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5342();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6342();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_2 = sibling(node_4);
      var path_3 = sibling(path_2);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_2, "stroke-width", strokeWidth());
        set_attribute(path_3, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(MapPinAltOutline);
  MapPinAltOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var MapPinAltOutline_default = MapPinAltOutline;
MapPinAltOutline.filename = ".../flowbite-svelte-icons/dist/MapPinAltOutline.svelte";
mark_module_end(MapPinAltOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/MapPinAltSolid.svelte
mark_module_start();
var root_2343 = svg_template(`<title> </title>`);
var root_3343 = svg_template(`<desc> </desc>`);
var root_1343 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M11.906 1.994a8.002 8.002 0 0 1 8.09 8.421 7.996 7.996 0 0 1-1.297 3.957.996.996 0 0 1-.133.204l-.108.129c-.178.243-.37.477-.573.699l-5.112 6.224a1 1 0 0 1-1.545 0L5.982 15.26l-.002-.002a18.146 18.146 0 0 1-.309-.38l-.133-.163a.999.999 0 0 1-.13-.202 7.995 7.995 0 0 1 6.498-12.518ZM15 9.997a3 3 0 1 1-5.999 0 3 3 0 0 1 5.999 0Z" clip-rule="evenodd"></path></svg>`);
var root_5343 = svg_template(`<title> </title>`);
var root_6343 = svg_template(`<desc> </desc>`);
var root_4343 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M11.906 1.994a8.002 8.002 0 0 1 8.09 8.421 7.996 7.996 0 0 1-1.297 3.957.996.996 0 0 1-.133.204l-.108.129c-.178.243-.37.477-.573.699l-5.112 6.224a1 1 0 0 1-1.545 0L5.982 15.26l-.002-.002a18.146 18.146 0 0 1-.309-.38l-.133-.163a.999.999 0 0 1-.13-.202 7.995 7.995 0 0 1 6.498-12.518ZM15 9.997a3 3 0 1 1-5.999 0 3 3 0 0 1 5.999 0Z" clip-rule="evenodd"></path></svg>`);
function MapPinAltSolid($$anchor, $$props) {
  if (new.target === MapPinAltSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, MapPinAltSolid);
  validate_prop_bindings($$props, [], [], MapPinAltSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "map pin alt solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1343();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2343();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3343();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4343();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5343();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6343();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(MapPinAltSolid);
  MapPinAltSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var MapPinAltSolid_default = MapPinAltSolid;
MapPinAltSolid.filename = ".../flowbite-svelte-icons/dist/MapPinAltSolid.svelte";
mark_module_end(MapPinAltSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/MapPinOutline.svelte
mark_module_start();
var root_2344 = svg_template(`<title> </title>`);
var root_3344 = svg_template(`<desc> </desc>`);
var root_1344 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12 15a6 6 0 1 0 0-12 6 6 0 0 0 0 12Zm0 0v6M9.5 9A2.5 2.5 0 0 1 12 6.5"></path></svg>`);
var root_5344 = svg_template(`<title> </title>`);
var root_6344 = svg_template(`<desc> </desc>`);
var root_4344 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12 15a6 6 0 1 0 0-12 6 6 0 0 0 0 12Zm0 0v6M9.5 9A2.5 2.5 0 0 1 12 6.5"></path></svg>`);
function MapPinOutline($$anchor, $$props) {
  if (new.target === MapPinOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, MapPinOutline);
  validate_prop_bindings($$props, [], [], MapPinOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "map pin outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1344();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2344();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3344();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4344();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5344();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6344();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(MapPinOutline);
  MapPinOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var MapPinOutline_default = MapPinOutline;
MapPinOutline.filename = ".../flowbite-svelte-icons/dist/MapPinOutline.svelte";
mark_module_end(MapPinOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/MapPinSolid.svelte
mark_module_start();
var root_2345 = svg_template(`<title> </title>`);
var root_3345 = svg_template(`<desc> </desc>`);
var root_1345 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M5 9a7 7 0 1 1 8 6.93V21a1 1 0 1 1-2 0v-5.07A7.001 7.001 0 0 1 5 9Zm5.94-1.06A1.5 1.5 0 0 1 12 7.5a1 1 0 1 0 0-2A3.5 3.5 0 0 0 8.5 9a1 1 0 0 0 2 0c0-.398.158-.78.44-1.06Z" clip-rule="evenodd"></path></svg>`);
var root_5345 = svg_template(`<title> </title>`);
var root_6345 = svg_template(`<desc> </desc>`);
var root_4345 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M5 9a7 7 0 1 1 8 6.93V21a1 1 0 1 1-2 0v-5.07A7.001 7.001 0 0 1 5 9Zm5.94-1.06A1.5 1.5 0 0 1 12 7.5a1 1 0 1 0 0-2A3.5 3.5 0 0 0 8.5 9a1 1 0 0 0 2 0c0-.398.158-.78.44-1.06Z" clip-rule="evenodd"></path></svg>`);
function MapPinSolid($$anchor, $$props) {
  if (new.target === MapPinSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, MapPinSolid);
  validate_prop_bindings($$props, [], [], MapPinSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "map pin solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1345();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2345();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3345();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4345();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5345();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6345();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(MapPinSolid);
  MapPinSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var MapPinSolid_default = MapPinSolid;
MapPinSolid.filename = ".../flowbite-svelte-icons/dist/MapPinSolid.svelte";
mark_module_end(MapPinSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/MastercardSolid.svelte
mark_module_start();
var root_2346 = svg_template(`<title> </title>`);
var root_3346 = svg_template(`<desc> </desc>`);
var root_1346 = svg_template(`<svg><!><!><path fill="currentColor" fill-rule="evenodd" d="M4 4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2H4Zm5.178 12.137a4.137 4.137 0 1 1 1.036-8.144A6.113 6.113 0 0 0 8.726 12c0 1.531.56 2.931 1.488 4.006a4.114 4.114 0 0 1-1.036.131ZM10.726 12c0-1.183.496-2.252 1.294-3.006A4.125 4.125 0 0 1 13.315 12a4.126 4.126 0 0 1-1.294 3.006A4.126 4.126 0 0 1 10.726 12Zm4.59 0a6.11 6.11 0 0 1-1.489 4.006 4.137 4.137 0 1 0 0-8.013A6.113 6.113 0 0 1 15.315 12Z" clip-rule="evenodd"></path></svg>`);
var root_5346 = svg_template(`<title> </title>`);
var root_6346 = svg_template(`<desc> </desc>`);
var root_4346 = svg_template(`<svg><!><!><path fill="currentColor" fill-rule="evenodd" d="M4 4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2H4Zm5.178 12.137a4.137 4.137 0 1 1 1.036-8.144A6.113 6.113 0 0 0 8.726 12c0 1.531.56 2.931 1.488 4.006a4.114 4.114 0 0 1-1.036.131ZM10.726 12c0-1.183.496-2.252 1.294-3.006A4.125 4.125 0 0 1 13.315 12a4.126 4.126 0 0 1-1.294 3.006A4.126 4.126 0 0 1 10.726 12Zm4.59 0a6.11 6.11 0 0 1-1.489 4.006 4.137 4.137 0 1 0 0-8.013A6.113 6.113 0 0 1 15.315 12Z" clip-rule="evenodd"></path></svg>`);
function MastercardSolid($$anchor, $$props) {
  if (new.target === MastercardSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, MastercardSolid);
  validate_prop_bindings($$props, [], [], MastercardSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "mastercard solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1346();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2346();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3346();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4346();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5346();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6346();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(MastercardSolid);
  MastercardSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var MastercardSolid_default = MastercardSolid;
MastercardSolid.filename = ".../flowbite-svelte-icons/dist/MastercardSolid.svelte";
mark_module_end(MastercardSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/MessageCaptionOutline.svelte
mark_module_start();
var root_2347 = svg_template(`<title> </title>`);
var root_3347 = svg_template(`<desc> </desc>`);
var root_1347 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M7 9h5m3 0h2M7 12h2m3 0h5M5 5h14a1 1 0 0 1 1 1v9a1 1 0 0 1-1 1h-6.616a1 1 0 0 0-.67.257l-2.88 2.592A.5.5 0 0 1 8 18.477V17a1 1 0 0 0-1-1H5a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1Z"></path></svg>`);
var root_5347 = svg_template(`<title> </title>`);
var root_6347 = svg_template(`<desc> </desc>`);
var root_4347 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M7 9h5m3 0h2M7 12h2m3 0h5M5 5h14a1 1 0 0 1 1 1v9a1 1 0 0 1-1 1h-6.616a1 1 0 0 0-.67.257l-2.88 2.592A.5.5 0 0 1 8 18.477V17a1 1 0 0 0-1-1H5a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1Z"></path></svg>`);
function MessageCaptionOutline($$anchor, $$props) {
  if (new.target === MessageCaptionOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, MessageCaptionOutline);
  validate_prop_bindings($$props, [], [], MessageCaptionOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "message caption outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1347();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2347();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3347();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4347();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5347();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6347();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(MessageCaptionOutline);
  MessageCaptionOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var MessageCaptionOutline_default = MessageCaptionOutline;
MessageCaptionOutline.filename = ".../flowbite-svelte-icons/dist/MessageCaptionOutline.svelte";
mark_module_end(MessageCaptionOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/MessageCaptionSolid.svelte
mark_module_start();
var root_2348 = svg_template(`<title> </title>`);
var root_3348 = svg_template(`<desc> </desc>`);
var root_1348 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M3 6a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v9a2 2 0 0 1-2 2h-6.616l-2.88 2.592C8.537 20.461 7 19.776 7 18.477V17H5a2 2 0 0 1-2-2V6Zm4 2a1 1 0 0 0 0 2h5a1 1 0 1 0 0-2H7Zm8 0a1 1 0 1 0 0 2h2a1 1 0 1 0 0-2h-2Zm-8 3a1 1 0 1 0 0 2h2a1 1 0 1 0 0-2H7Zm5 0a1 1 0 1 0 0 2h5a1 1 0 1 0 0-2h-5Z" clip-rule="evenodd"></path></svg>`);
var root_5348 = svg_template(`<title> </title>`);
var root_6348 = svg_template(`<desc> </desc>`);
var root_4348 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M3 6a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v9a2 2 0 0 1-2 2h-6.616l-2.88 2.592C8.537 20.461 7 19.776 7 18.477V17H5a2 2 0 0 1-2-2V6Zm4 2a1 1 0 0 0 0 2h5a1 1 0 1 0 0-2H7Zm8 0a1 1 0 1 0 0 2h2a1 1 0 1 0 0-2h-2Zm-8 3a1 1 0 1 0 0 2h2a1 1 0 1 0 0-2H7Zm5 0a1 1 0 1 0 0 2h5a1 1 0 1 0 0-2h-5Z" clip-rule="evenodd"></path></svg>`);
function MessageCaptionSolid($$anchor, $$props) {
  if (new.target === MessageCaptionSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, MessageCaptionSolid);
  validate_prop_bindings($$props, [], [], MessageCaptionSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "message caption solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1348();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2348();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3348();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4348();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5348();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6348();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(MessageCaptionSolid);
  MessageCaptionSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var MessageCaptionSolid_default = MessageCaptionSolid;
MessageCaptionSolid.filename = ".../flowbite-svelte-icons/dist/MessageCaptionSolid.svelte";
mark_module_end(MessageCaptionSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/MessageDotsOutline.svelte
mark_module_start();
var root_2349 = svg_template(`<title> </title>`);
var root_3349 = svg_template(`<desc> </desc>`);
var root_1349 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M16 10.5h.01m-4.01 0h.01M8 10.5h.01M5 5h14a1 1 0 0 1 1 1v9a1 1 0 0 1-1 1h-6.6a1 1 0 0 0-.69.275l-2.866 2.723A.5.5 0 0 1 8 18.635V17a1 1 0 0 0-1-1H5a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1Z"></path></svg>`);
var root_5349 = svg_template(`<title> </title>`);
var root_6349 = svg_template(`<desc> </desc>`);
var root_4349 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M16 10.5h.01m-4.01 0h.01M8 10.5h.01M5 5h14a1 1 0 0 1 1 1v9a1 1 0 0 1-1 1h-6.6a1 1 0 0 0-.69.275l-2.866 2.723A.5.5 0 0 1 8 18.635V17a1 1 0 0 0-1-1H5a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1Z"></path></svg>`);
function MessageDotsOutline($$anchor, $$props) {
  if (new.target === MessageDotsOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, MessageDotsOutline);
  validate_prop_bindings($$props, [], [], MessageDotsOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "message dots outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1349();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2349();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3349();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4349();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5349();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6349();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(MessageDotsOutline);
  MessageDotsOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var MessageDotsOutline_default = MessageDotsOutline;
MessageDotsOutline.filename = ".../flowbite-svelte-icons/dist/MessageDotsOutline.svelte";
mark_module_end(MessageDotsOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/MessageDotsSolid.svelte
mark_module_start();
var root_2350 = svg_template(`<title> </title>`);
var root_3350 = svg_template(`<desc> </desc>`);
var root_1350 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M3 5.983C3 4.888 3.895 4 5 4h14c1.105 0 2 .888 2 1.983v8.923a1.992 1.992 0 0 1-2 1.983h-6.6l-2.867 2.7c-.955.899-2.533.228-2.533-1.08v-1.62H5c-1.105 0-2-.888-2-1.983V5.983Zm5.706 3.809a1 1 0 1 0-1.412 1.417 1 1 0 1 0 1.412-1.417Zm2.585.002a1 1 0 1 1 .003 1.414 1 1 0 0 1-.003-1.414Zm5.415-.002a1 1 0 1 0-1.412 1.417 1 1 0 1 0 1.412-1.417Z" clip-rule="evenodd"></path></svg>`);
var root_5350 = svg_template(`<title> </title>`);
var root_6350 = svg_template(`<desc> </desc>`);
var root_4350 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M3 5.983C3 4.888 3.895 4 5 4h14c1.105 0 2 .888 2 1.983v8.923a1.992 1.992 0 0 1-2 1.983h-6.6l-2.867 2.7c-.955.899-2.533.228-2.533-1.08v-1.62H5c-1.105 0-2-.888-2-1.983V5.983Zm5.706 3.809a1 1 0 1 0-1.412 1.417 1 1 0 1 0 1.412-1.417Zm2.585.002a1 1 0 1 1 .003 1.414 1 1 0 0 1-.003-1.414Zm5.415-.002a1 1 0 1 0-1.412 1.417 1 1 0 1 0 1.412-1.417Z" clip-rule="evenodd"></path></svg>`);
function MessageDotsSolid($$anchor, $$props) {
  if (new.target === MessageDotsSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, MessageDotsSolid);
  validate_prop_bindings($$props, [], [], MessageDotsSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "message dots solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1350();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2350();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3350();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4350();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5350();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6350();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(MessageDotsSolid);
  MessageDotsSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var MessageDotsSolid_default = MessageDotsSolid;
MessageDotsSolid.filename = ".../flowbite-svelte-icons/dist/MessageDotsSolid.svelte";
mark_module_end(MessageDotsSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/MessagesOutline.svelte
mark_module_start();
var root_2351 = svg_template(`<title> </title>`);
var root_3351 = svg_template(`<desc> </desc>`);
var root_1351 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M9 17h6l3 3v-3h2V9h-2M4 4h11v8H9l-3 3v-3H4V4Z"></path></svg>`);
var root_5351 = svg_template(`<title> </title>`);
var root_6351 = svg_template(`<desc> </desc>`);
var root_4351 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M9 17h6l3 3v-3h2V9h-2M4 4h11v8H9l-3 3v-3H4V4Z"></path></svg>`);
function MessagesOutline($$anchor, $$props) {
  if (new.target === MessagesOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, MessagesOutline);
  validate_prop_bindings($$props, [], [], MessagesOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "messages outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1351();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2351();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3351();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4351();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5351();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6351();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(MessagesOutline);
  MessagesOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var MessagesOutline_default = MessagesOutline;
MessagesOutline.filename = ".../flowbite-svelte-icons/dist/MessagesOutline.svelte";
mark_module_end(MessagesOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/MessagesSolid.svelte
mark_module_start();
var root_2352 = svg_template(`<title> </title>`);
var root_3352 = svg_template(`<desc> </desc>`);
var root_1352 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M4 3a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h1v2a1 1 0 0 0 1.707.707L9.414 13H15a1 1 0 0 0 1-1V4a1 1 0 0 0-1-1H4Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M8.023 17.215c.033-.03.066-.062.098-.094L10.243 15H15a3 3 0 0 0 3-3V8h2a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1h-1v2a1 1 0 0 1-1.707.707L14.586 18H9a1 1 0 0 1-.977-.785Z" clip-rule="evenodd"></path></svg>`);
var root_5352 = svg_template(`<title> </title>`);
var root_6352 = svg_template(`<desc> </desc>`);
var root_4352 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M4 3a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h1v2a1 1 0 0 0 1.707.707L9.414 13H15a1 1 0 0 0 1-1V4a1 1 0 0 0-1-1H4Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M8.023 17.215c.033-.03.066-.062.098-.094L10.243 15H15a3 3 0 0 0 3-3V8h2a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1h-1v2a1 1 0 0 1-1.707.707L14.586 18H9a1 1 0 0 1-.977-.785Z" clip-rule="evenodd"></path></svg>`);
function MessagesSolid($$anchor, $$props) {
  if (new.target === MessagesSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, MessagesSolid);
  validate_prop_bindings($$props, [], [], MessagesSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "messages solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1352();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2352();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3352();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4352();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5352();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6352();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_2 = sibling(node_4);
      var path_3 = sibling(path_2);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(MessagesSolid);
  MessagesSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var MessagesSolid_default = MessagesSolid;
MessagesSolid.filename = ".../flowbite-svelte-icons/dist/MessagesSolid.svelte";
mark_module_end(MessagesSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/MicrophoneOutline.svelte
mark_module_start();
var root_2353 = svg_template(`<title> </title>`);
var root_3353 = svg_template(`<desc> </desc>`);
var root_1353 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M19 9v3a5.006 5.006 0 0 1-5 5h-4a5.006 5.006 0 0 1-5-5V9m7 9v3m-3 0h6M11 3h2a3 3 0 0 1 3 3v5a3 3 0 0 1-3 3h-2a3 3 0 0 1-3-3V6a3 3 0 0 1 3-3Z"></path></svg>`);
var root_5353 = svg_template(`<title> </title>`);
var root_6353 = svg_template(`<desc> </desc>`);
var root_4353 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M19 9v3a5.006 5.006 0 0 1-5 5h-4a5.006 5.006 0 0 1-5-5V9m7 9v3m-3 0h6M11 3h2a3 3 0 0 1 3 3v5a3 3 0 0 1-3 3h-2a3 3 0 0 1-3-3V6a3 3 0 0 1 3-3Z"></path></svg>`);
function MicrophoneOutline($$anchor, $$props) {
  if (new.target === MicrophoneOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, MicrophoneOutline);
  validate_prop_bindings($$props, [], [], MicrophoneOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "microphone outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1353();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2353();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3353();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4353();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5353();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6353();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(MicrophoneOutline);
  MicrophoneOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var MicrophoneOutline_default = MicrophoneOutline;
MicrophoneOutline.filename = ".../flowbite-svelte-icons/dist/MicrophoneOutline.svelte";
mark_module_end(MicrophoneOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/MicrophoneSlashOutline.svelte
mark_module_start();
var root_2354 = svg_template(`<title> </title>`);
var root_3354 = svg_template(`<desc> </desc>`);
var root_1354 = svg_template(`<svg><!><!><path fill="currentColor" d="M19.97 9.012a1 1 0 1 0-2 0h2Zm-1 2.988 1 .001V12h-1Zm-8.962 4.98-.001 1h.001v-1Zm-3.52-1.46.708-.708-.707.707ZM5.029 12h-1v.001l1-.001Zm3.984 7.963a1 1 0 1 0 0 2v-2Zm5.975 2a1 1 0 0 0 0-2v2ZM7.017 8.017a1 1 0 1 0 2 0h-2Zm6.641 4.862a1 1 0 1 0 .667 1.886l-.667-1.886Zm-7.63-2.87a1 1 0 1 0-2 0h2Zm9.953 5.435a1 1 0 1 0 1 1.731l-1-1.731ZM12 16.979h1a1 1 0 0 0-1-1v1ZM5.736 4.322a1 1 0 0 0-1.414 1.414l1.414-1.414Zm12.528 15.356a1 1 0 0 0 1.414-1.414l-1.414 1.414ZM17.97 9.012V12h2V9.012h-2Zm0 2.987a3.985 3.985 0 0 1-1.168 2.813l1.415 1.414a5.985 5.985 0 0 0 1.753-4.225l-2-.002Zm-7.962 3.98a3.985 3.985 0 0 1-2.813-1.167l-1.414 1.414a5.985 5.985 0 0 0 4.225 1.753l.002-2Zm-2.813-1.167a3.985 3.985 0 0 1-1.167-2.813l-2 .002a5.985 5.985 0 0 0 1.753 4.225l1.414-1.414Zm3.808-10.775h1.992v-2h-1.992v2Zm1.992 0c1.097 0 1.987.89 1.987 1.988h2a3.988 3.988 0 0 0-3.987-3.988v2Zm1.987 1.988v4.98h2v-4.98h-2Zm-5.967 0c0-1.098.89-1.988 1.988-1.988v-2a3.988 3.988 0 0 0-3.988 3.988h2Zm-.004 15.938H12v-2H9.012v2Zm2.988 0h2.987v-2H12v2ZM9.016 8.017V6.025h-2v1.992h2Zm5.967 2.987a1.99 1.99 0 0 1-1.325 1.875l.667 1.886a3.989 3.989 0 0 0 2.658-3.76h-2ZM6.03 12v-1.992h-2V12h2Zm10.774 2.812a3.92 3.92 0 0 1-.823.632l1.002 1.731a5.982 5.982 0 0 0 1.236-.949l-1.415-1.414ZM4.322 5.736l13.942 13.942 1.414-1.414L5.736 4.322 4.322 5.736ZM12 15.98h-1.992v2H12v-2Zm-1 1v3.984h2V16.98h-2Z"></path></svg>`);
var root_5354 = svg_template(`<title> </title>`);
var root_6354 = svg_template(`<desc> </desc>`);
var root_4354 = svg_template(`<svg><!><!><path fill="currentColor" d="M19.97 9.012a1 1 0 1 0-2 0h2Zm-1 2.988 1 .001V12h-1Zm-8.962 4.98-.001 1h.001v-1Zm-3.52-1.46.708-.708-.707.707ZM5.029 12h-1v.001l1-.001Zm3.984 7.963a1 1 0 1 0 0 2v-2Zm5.975 2a1 1 0 0 0 0-2v2ZM7.017 8.017a1 1 0 1 0 2 0h-2Zm6.641 4.862a1 1 0 1 0 .667 1.886l-.667-1.886Zm-7.63-2.87a1 1 0 1 0-2 0h2Zm9.953 5.435a1 1 0 1 0 1 1.731l-1-1.731ZM12 16.979h1a1 1 0 0 0-1-1v1ZM5.736 4.322a1 1 0 0 0-1.414 1.414l1.414-1.414Zm12.528 15.356a1 1 0 0 0 1.414-1.414l-1.414 1.414ZM17.97 9.012V12h2V9.012h-2Zm0 2.987a3.985 3.985 0 0 1-1.168 2.813l1.415 1.414a5.985 5.985 0 0 0 1.753-4.225l-2-.002Zm-7.962 3.98a3.985 3.985 0 0 1-2.813-1.167l-1.414 1.414a5.985 5.985 0 0 0 4.225 1.753l.002-2Zm-2.813-1.167a3.985 3.985 0 0 1-1.167-2.813l-2 .002a5.985 5.985 0 0 0 1.753 4.225l1.414-1.414Zm3.808-10.775h1.992v-2h-1.992v2Zm1.992 0c1.097 0 1.987.89 1.987 1.988h2a3.988 3.988 0 0 0-3.987-3.988v2Zm1.987 1.988v4.98h2v-4.98h-2Zm-5.967 0c0-1.098.89-1.988 1.988-1.988v-2a3.988 3.988 0 0 0-3.988 3.988h2Zm-.004 15.938H12v-2H9.012v2Zm2.988 0h2.987v-2H12v2ZM9.016 8.017V6.025h-2v1.992h2Zm5.967 2.987a1.99 1.99 0 0 1-1.325 1.875l.667 1.886a3.989 3.989 0 0 0 2.658-3.76h-2ZM6.03 12v-1.992h-2V12h2Zm10.774 2.812a3.92 3.92 0 0 1-.823.632l1.002 1.731a5.982 5.982 0 0 0 1.236-.949l-1.415-1.414ZM4.322 5.736l13.942 13.942 1.414-1.414L5.736 4.322 4.322 5.736ZM12 15.98h-1.992v2H12v-2Zm-1 1v3.984h2V16.98h-2Z"></path></svg>`);
function MicrophoneSlashOutline($$anchor, $$props) {
  if (new.target === MicrophoneSlashOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, MicrophoneSlashOutline);
  validate_prop_bindings($$props, [], [], MicrophoneSlashOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "microphone slash outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1354();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2354();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3354();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: "none",
          color: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4354();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5354();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6354();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: "none",
          color: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(MicrophoneSlashOutline);
  MicrophoneSlashOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var MicrophoneSlashOutline_default = MicrophoneSlashOutline;
MicrophoneSlashOutline.filename = ".../flowbite-svelte-icons/dist/MicrophoneSlashOutline.svelte";
mark_module_end(MicrophoneSlashOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/MicrophoneSlashSolid.svelte
mark_module_start();
var root_2355 = svg_template(`<title> </title>`);
var root_3355 = svg_template(`<desc> </desc>`);
var root_1355 = svg_template(`<svg><!><!><path d="m15.506 14.097.994.995A3.989 3.989 0 0 0 17.975 12V9.011a.996.996 0 0 1 1.992 0v2.99a5.981 5.981 0 0 1-2.054 4.503l1.762 1.762a.996.996 0 1 1-1.408 1.408L4.325 5.733a.996.996 0 0 1 1.408-1.408L7.04 5.632a3.984 3.984 0 0 1 3.964-3.59h1.992c2.2 0 3.983 1.783 3.983 3.983v4.98a3.975 3.975 0 0 1-1.473 3.092ZM4.033 10.008a.996.996 0 1 1 1.992 0V12a3.99 3.99 0 0 0 3.984 3.984H12c.55 0 .996.446.996.996v2.988h1.992a.996.996 0 0 1 0 1.992H9.012a.996.996 0 0 1 0-1.992h1.992v-1.992h-.997a5.981 5.981 0 0 1-5.974-5.974v-1.993Z"></path></svg>`);
var root_5355 = svg_template(`<title> </title>`);
var root_6355 = svg_template(`<desc> </desc>`);
var root_4355 = svg_template(`<svg><!><!><path d="m15.506 14.097.994.995A3.989 3.989 0 0 0 17.975 12V9.011a.996.996 0 0 1 1.992 0v2.99a5.981 5.981 0 0 1-2.054 4.503l1.762 1.762a.996.996 0 1 1-1.408 1.408L4.325 5.733a.996.996 0 0 1 1.408-1.408L7.04 5.632a3.984 3.984 0 0 1 3.964-3.59h1.992c2.2 0 3.983 1.783 3.983 3.983v4.98a3.975 3.975 0 0 1-1.473 3.092ZM4.033 10.008a.996.996 0 1 1 1.992 0V12a3.99 3.99 0 0 0 3.984 3.984H12c.55 0 .996.446.996.996v2.988h1.992a.996.996 0 0 1 0 1.992H9.012a.996.996 0 0 1 0-1.992h1.992v-1.992h-.997a5.981 5.981 0 0 1-5.974-5.974v-1.993Z"></path></svg>`);
function MicrophoneSlashSolid($$anchor, $$props) {
  if (new.target === MicrophoneSlashSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, MicrophoneSlashSolid);
  validate_prop_bindings($$props, [], [], MicrophoneSlashSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "microphone slash solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1355();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2355();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3355();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4355();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5355();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6355();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(MicrophoneSlashSolid);
  MicrophoneSlashSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var MicrophoneSlashSolid_default = MicrophoneSlashSolid;
MicrophoneSlashSolid.filename = ".../flowbite-svelte-icons/dist/MicrophoneSlashSolid.svelte";
mark_module_end(MicrophoneSlashSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/MicrophoneSolid.svelte
mark_module_start();
var root_2356 = svg_template(`<title> </title>`);
var root_3356 = svg_template(`<desc> </desc>`);
var root_1356 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M5 8a1 1 0 0 1 1 1v3a4.006 4.006 0 0 0 4 4h4a4.006 4.006 0 0 0 4-4V9a1 1 0 1 1 2 0v3.001A6.006 6.006 0 0 1 14.001 18H13v2h2a1 1 0 1 1 0 2H9a1 1 0 1 1 0-2h2v-2H9.999A6.006 6.006 0 0 1 4 12.001V9a1 1 0 0 1 1-1Z" clip-rule="evenodd"></path><path d="M7 6a4 4 0 0 1 4-4h2a4 4 0 0 1 4 4v5a4 4 0 0 1-4 4h-2a4 4 0 0 1-4-4V6Z"></path></svg>`);
var root_5356 = svg_template(`<title> </title>`);
var root_6356 = svg_template(`<desc> </desc>`);
var root_4356 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M5 8a1 1 0 0 1 1 1v3a4.006 4.006 0 0 0 4 4h4a4.006 4.006 0 0 0 4-4V9a1 1 0 1 1 2 0v3.001A6.006 6.006 0 0 1 14.001 18H13v2h2a1 1 0 1 1 0 2H9a1 1 0 1 1 0-2h2v-2H9.999A6.006 6.006 0 0 1 4 12.001V9a1 1 0 0 1 1-1Z" clip-rule="evenodd"></path><path d="M7 6a4 4 0 0 1 4-4h2a4 4 0 0 1 4 4v5a4 4 0 0 1-4 4h-2a4 4 0 0 1-4-4V6Z"></path></svg>`);
function MicrophoneSolid($$anchor, $$props) {
  if (new.target === MicrophoneSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, MicrophoneSolid);
  validate_prop_bindings($$props, [], [], MicrophoneSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "microphone solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1356();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2356();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3356();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4356();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5356();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6356();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_2 = sibling(node_4);
      var path_3 = sibling(path_2);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(MicrophoneSolid);
  MicrophoneSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var MicrophoneSolid_default = MicrophoneSolid;
MicrophoneSolid.filename = ".../flowbite-svelte-icons/dist/MicrophoneSolid.svelte";
mark_module_end(MicrophoneSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/MinimizeOutline.svelte
mark_module_start();
var root_2357 = svg_template(`<title> </title>`);
var root_3357 = svg_template(`<desc> </desc>`);
var root_1357 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M5 9h4m0 0V5m0 4L4 4m15 5h-4m0 0V5m0 4 5-5M5 15h4m0 0v4m0-4-5 5m15-5h-4m0 0v4m0-4 5 5"></path></svg>`);
var root_5357 = svg_template(`<title> </title>`);
var root_6357 = svg_template(`<desc> </desc>`);
var root_4357 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M5 9h4m0 0V5m0 4L4 4m15 5h-4m0 0V5m0 4 5-5M5 15h4m0 0v4m0-4-5 5m15-5h-4m0 0v4m0-4 5 5"></path></svg>`);
function MinimizeOutline($$anchor, $$props) {
  if (new.target === MinimizeOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, MinimizeOutline);
  validate_prop_bindings($$props, [], [], MinimizeOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "minimize outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1357();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2357();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3357();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4357();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5357();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6357();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(MinimizeOutline);
  MinimizeOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var MinimizeOutline_default = MinimizeOutline;
MinimizeOutline.filename = ".../flowbite-svelte-icons/dist/MinimizeOutline.svelte";
mark_module_end(MinimizeOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/MinusOutline.svelte
mark_module_start();
var root_2358 = svg_template(`<title> </title>`);
var root_3358 = svg_template(`<desc> </desc>`);
var root_1358 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M5 12h14"></path></svg>`);
var root_5358 = svg_template(`<title> </title>`);
var root_6358 = svg_template(`<desc> </desc>`);
var root_4358 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M5 12h14"></path></svg>`);
function MinusOutline($$anchor, $$props) {
  if (new.target === MinusOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, MinusOutline);
  validate_prop_bindings($$props, [], [], MinusOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "minus outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1358();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2358();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3358();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4358();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5358();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6358();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(MinusOutline);
  MinusOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var MinusOutline_default = MinusOutline;
MinusOutline.filename = ".../flowbite-svelte-icons/dist/MinusOutline.svelte";
mark_module_end(MinusOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/MobilePhoneOutline.svelte
mark_module_start();
var root_2359 = svg_template(`<title> </title>`);
var root_3359 = svg_template(`<desc> </desc>`);
var root_1359 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M6 15h12M6 6h12m-6 12h.01M7 21h10a1 1 0 0 0 1-1V4a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1v16a1 1 0 0 0 1 1Z"></path></svg>`);
var root_5359 = svg_template(`<title> </title>`);
var root_6359 = svg_template(`<desc> </desc>`);
var root_4359 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M6 15h12M6 6h12m-6 12h.01M7 21h10a1 1 0 0 0 1-1V4a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1v16a1 1 0 0 0 1 1Z"></path></svg>`);
function MobilePhoneOutline($$anchor, $$props) {
  if (new.target === MobilePhoneOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, MobilePhoneOutline);
  validate_prop_bindings($$props, [], [], MobilePhoneOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "mobile phone outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1359();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2359();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3359();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4359();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5359();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6359();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(MobilePhoneOutline);
  MobilePhoneOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var MobilePhoneOutline_default = MobilePhoneOutline;
MobilePhoneOutline.filename = ".../flowbite-svelte-icons/dist/MobilePhoneOutline.svelte";
mark_module_end(MobilePhoneOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/MobilePhoneSolid.svelte
mark_module_start();
var root_2360 = svg_template(`<title> </title>`);
var root_3360 = svg_template(`<desc> </desc>`);
var root_1360 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M5 4a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v16a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V4Zm12 12V5H7v11h10Zm-5 1a1 1 0 1 0 0 2h.01a1 1 0 1 0 0-2H12Z" clip-rule="evenodd"></path></svg>`);
var root_5360 = svg_template(`<title> </title>`);
var root_6360 = svg_template(`<desc> </desc>`);
var root_4360 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M5 4a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v16a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V4Zm12 12V5H7v11h10Zm-5 1a1 1 0 1 0 0 2h.01a1 1 0 1 0 0-2H12Z" clip-rule="evenodd"></path></svg>`);
function MobilePhoneSolid($$anchor, $$props) {
  if (new.target === MobilePhoneSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, MobilePhoneSolid);
  validate_prop_bindings($$props, [], [], MobilePhoneSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "mobile phone solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1360();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2360();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3360();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4360();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5360();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6360();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(MobilePhoneSolid);
  MobilePhoneSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var MobilePhoneSolid_default = MobilePhoneSolid;
MobilePhoneSolid.filename = ".../flowbite-svelte-icons/dist/MobilePhoneSolid.svelte";
mark_module_end(MobilePhoneSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/MoonOutline.svelte
mark_module_start();
var root_2361 = svg_template(`<title> </title>`);
var root_3361 = svg_template(`<desc> </desc>`);
var root_1361 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12 21a9 9 0 0 1-.5-17.986V3c-.354.966-.5 1.911-.5 3a9 9 0 0 0 9 9c.239 0 .254.018.488 0A9.004 9.004 0 0 1 12 21Z"></path></svg>`);
var root_5361 = svg_template(`<title> </title>`);
var root_6361 = svg_template(`<desc> </desc>`);
var root_4361 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12 21a9 9 0 0 1-.5-17.986V3c-.354.966-.5 1.911-.5 3a9 9 0 0 0 9 9c.239 0 .254.018.488 0A9.004 9.004 0 0 1 12 21Z"></path></svg>`);
function MoonOutline($$anchor, $$props) {
  if (new.target === MoonOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, MoonOutline);
  validate_prop_bindings($$props, [], [], MoonOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "moon outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1361();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2361();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3361();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4361();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5361();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6361();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(MoonOutline);
  MoonOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var MoonOutline_default = MoonOutline;
MoonOutline.filename = ".../flowbite-svelte-icons/dist/MoonOutline.svelte";
mark_module_end(MoonOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/MoonSolid.svelte
mark_module_start();
var root_2362 = svg_template(`<title> </title>`);
var root_3362 = svg_template(`<desc> </desc>`);
var root_1362 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M11.675 2.015a.998.998 0 0 0-.403.011C6.09 2.4 2 6.722 2 12c0 5.523 4.477 10 10 10 4.356 0 8.058-2.784 9.43-6.667a1 1 0 0 0-1.02-1.33c-.08.006-.105.005-.127.005h-.001l-.028-.002A5.227 5.227 0 0 0 20 14a8 8 0 0 1-8-8c0-.952.121-1.752.404-2.558a.996.996 0 0 0 .096-.428V3a1 1 0 0 0-.825-.985Z" clip-rule="evenodd"></path></svg>`);
var root_5362 = svg_template(`<title> </title>`);
var root_6362 = svg_template(`<desc> </desc>`);
var root_4362 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M11.675 2.015a.998.998 0 0 0-.403.011C6.09 2.4 2 6.722 2 12c0 5.523 4.477 10 10 10 4.356 0 8.058-2.784 9.43-6.667a1 1 0 0 0-1.02-1.33c-.08.006-.105.005-.127.005h-.001l-.028-.002A5.227 5.227 0 0 0 20 14a8 8 0 0 1-8-8c0-.952.121-1.752.404-2.558a.996.996 0 0 0 .096-.428V3a1 1 0 0 0-.825-.985Z" clip-rule="evenodd"></path></svg>`);
function MoonSolid($$anchor, $$props) {
  if (new.target === MoonSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, MoonSolid);
  validate_prop_bindings($$props, [], [], MoonSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "moon solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1362();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2362();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3362();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4362();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5362();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6362();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(MoonSolid);
  MoonSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var MoonSolid_default = MoonSolid;
MoonSolid.filename = ".../flowbite-svelte-icons/dist/MoonSolid.svelte";
mark_module_end(MoonSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/NewspaperOutline.svelte
mark_module_start();
var root_2363 = svg_template(`<title> </title>`);
var root_3363 = svg_template(`<desc> </desc>`);
var root_1363 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M19 7h1v12a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1V5a1 1 0 0 0-1-1H5a1 1 0 0 0-1 1v14a1 1 0 0 0 1 1h11.5M7 14h6m-6 3h6m0-10h.5m-.5 3h.5M7 7h3v3H7V7Z"></path></svg>`);
var root_5363 = svg_template(`<title> </title>`);
var root_6363 = svg_template(`<desc> </desc>`);
var root_4363 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M19 7h1v12a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1V5a1 1 0 0 0-1-1H5a1 1 0 0 0-1 1v14a1 1 0 0 0 1 1h11.5M7 14h6m-6 3h6m0-10h.5m-.5 3h.5M7 7h3v3H7V7Z"></path></svg>`);
function NewspaperOutline($$anchor, $$props) {
  if (new.target === NewspaperOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, NewspaperOutline);
  validate_prop_bindings($$props, [], [], NewspaperOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "newspaper outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1363();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2363();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3363();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4363();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5363();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6363();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(NewspaperOutline);
  NewspaperOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var NewspaperOutline_default = NewspaperOutline;
NewspaperOutline.filename = ".../flowbite-svelte-icons/dist/NewspaperOutline.svelte";
mark_module_end(NewspaperOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/NewspaperSolid.svelte
mark_module_start();
var root_2364 = svg_template(`<title> </title>`);
var root_3364 = svg_template(`<desc> </desc>`);
var root_1364 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M5 3a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h11.5c.07 0 .14-.007.207-.021.095.014.193.021.293.021h2a2 2 0 0 0 2-2V7a1 1 0 0 0-1-1h-1a1 1 0 1 0 0 2v11h-2V5a2 2 0 0 0-2-2H5Zm7 4a1 1 0 0 1 1-1h.5a1 1 0 1 1 0 2H13a1 1 0 0 1-1-1Zm0 3a1 1 0 0 1 1-1h.5a1 1 0 1 1 0 2H13a1 1 0 0 1-1-1Zm-6 4a1 1 0 0 1 1-1h6a1 1 0 1 1 0 2H7a1 1 0 0 1-1-1Zm0 3a1 1 0 0 1 1-1h6a1 1 0 1 1 0 2H7a1 1 0 0 1-1-1ZM7 6a1 1 0 0 0-1 1v3a1 1 0 0 0 1 1h3a1 1 0 0 0 1-1V7a1 1 0 0 0-1-1H7Zm1 3V8h1v1H8Z" clip-rule="evenodd"></path></svg>`);
var root_5364 = svg_template(`<title> </title>`);
var root_6364 = svg_template(`<desc> </desc>`);
var root_4364 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M5 3a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h11.5c.07 0 .14-.007.207-.021.095.014.193.021.293.021h2a2 2 0 0 0 2-2V7a1 1 0 0 0-1-1h-1a1 1 0 1 0 0 2v11h-2V5a2 2 0 0 0-2-2H5Zm7 4a1 1 0 0 1 1-1h.5a1 1 0 1 1 0 2H13a1 1 0 0 1-1-1Zm0 3a1 1 0 0 1 1-1h.5a1 1 0 1 1 0 2H13a1 1 0 0 1-1-1Zm-6 4a1 1 0 0 1 1-1h6a1 1 0 1 1 0 2H7a1 1 0 0 1-1-1Zm0 3a1 1 0 0 1 1-1h6a1 1 0 1 1 0 2H7a1 1 0 0 1-1-1ZM7 6a1 1 0 0 0-1 1v3a1 1 0 0 0 1 1h3a1 1 0 0 0 1-1V7a1 1 0 0 0-1-1H7Zm1 3V8h1v1H8Z" clip-rule="evenodd"></path></svg>`);
function NewspaperSolid($$anchor, $$props) {
  if (new.target === NewspaperSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, NewspaperSolid);
  validate_prop_bindings($$props, [], [], NewspaperSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "newspaper solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1364();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2364();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3364();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4364();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5364();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6364();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(NewspaperSolid);
  NewspaperSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var NewspaperSolid_default = NewspaperSolid;
NewspaperSolid.filename = ".../flowbite-svelte-icons/dist/NewspaperSolid.svelte";
mark_module_end(NewspaperSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/NpmSolid.svelte
mark_module_start();
var root_2365 = svg_template(`<title> </title>`);
var root_3365 = svg_template(`<desc> </desc>`);
var root_1365 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12 3.87H4v16h8v-13h5v13h3v-16h-8Z"></path></svg>`);
var root_5365 = svg_template(`<title> </title>`);
var root_6365 = svg_template(`<desc> </desc>`);
var root_4365 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12 3.87H4v16h8v-13h5v13h3v-16h-8Z"></path></svg>`);
function NpmSolid($$anchor, $$props) {
  if (new.target === NpmSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, NpmSolid);
  validate_prop_bindings($$props, [], [], NpmSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "npm solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1365();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2365();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3365();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4365();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5365();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6365();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(NpmSolid);
  NpmSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var NpmSolid_default = NpmSolid;
NpmSolid.filename = ".../flowbite-svelte-icons/dist/NpmSolid.svelte";
mark_module_end(NpmSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ObjectsColumnOutline.svelte
mark_module_start();
var root_2366 = svg_template(`<title> </title>`);
var root_3366 = svg_template(`<desc> </desc>`);
var root_1366 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linejoin="round" d="M4 5a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1V5Zm16 14a1 1 0 0 1-1 1h-4a1 1 0 0 1-1-1v-2a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v2ZM4 13a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v6a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1v-6Zm16-2a1 1 0 0 1-1 1h-4a1 1 0 0 1-1-1V5a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v6Z"></path></svg>`);
var root_5366 = svg_template(`<title> </title>`);
var root_6366 = svg_template(`<desc> </desc>`);
var root_4366 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linejoin="round" d="M4 5a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1V5Zm16 14a1 1 0 0 1-1 1h-4a1 1 0 0 1-1-1v-2a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v2ZM4 13a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v6a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1v-6Zm16-2a1 1 0 0 1-1 1h-4a1 1 0 0 1-1-1V5a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v6Z"></path></svg>`);
function ObjectsColumnOutline($$anchor, $$props) {
  if (new.target === ObjectsColumnOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ObjectsColumnOutline);
  validate_prop_bindings($$props, [], [], ObjectsColumnOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "objects column outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1366();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2366();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3366();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4366();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5366();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6366();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ObjectsColumnOutline);
  ObjectsColumnOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ObjectsColumnOutline_default = ObjectsColumnOutline;
ObjectsColumnOutline.filename = ".../flowbite-svelte-icons/dist/ObjectsColumnOutline.svelte";
mark_module_end(ObjectsColumnOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ObjectsColumnSolid.svelte
mark_module_start();
var root_2367 = svg_template(`<title> </title>`);
var root_3367 = svg_template(`<desc> </desc>`);
var root_1367 = svg_template(`<svg><!><!><path d="M5 3a2 2 0 0 0-2 2v2a2 2 0 0 0 2 2h4a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2H5Zm14 18a2 2 0 0 0 2-2v-2a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v2a2 2 0 0 0 2 2h4ZM5 11a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h4a2 2 0 0 0 2-2v-6a2 2 0 0 0-2-2H5Zm14 2a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h4Z"></path></svg>`);
var root_5367 = svg_template(`<title> </title>`);
var root_6367 = svg_template(`<desc> </desc>`);
var root_4367 = svg_template(`<svg><!><!><path d="M5 3a2 2 0 0 0-2 2v2a2 2 0 0 0 2 2h4a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2H5Zm14 18a2 2 0 0 0 2-2v-2a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v2a2 2 0 0 0 2 2h4ZM5 11a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h4a2 2 0 0 0 2-2v-6a2 2 0 0 0-2-2H5Zm14 2a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h4Z"></path></svg>`);
function ObjectsColumnSolid($$anchor, $$props) {
  if (new.target === ObjectsColumnSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ObjectsColumnSolid);
  validate_prop_bindings($$props, [], [], ObjectsColumnSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "objects column solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1367();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2367();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3367();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4367();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5367();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6367();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ObjectsColumnSolid);
  ObjectsColumnSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ObjectsColumnSolid_default = ObjectsColumnSolid;
ObjectsColumnSolid.filename = ".../flowbite-svelte-icons/dist/ObjectsColumnSolid.svelte";
mark_module_end(ObjectsColumnSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/OrderedListOutline.svelte
mark_module_start();
var root_2368 = svg_template(`<title> </title>`);
var root_3368 = svg_template(`<desc> </desc>`);
var root_1368 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12 6h8m-8 6h8m-8 6h8M4 16a2 2 0 1 1 3.321 1.5L4 20h5M4 5l2-1v6m-2 0h4"></path></svg>`);
var root_5368 = svg_template(`<title> </title>`);
var root_6368 = svg_template(`<desc> </desc>`);
var root_4368 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12 6h8m-8 6h8m-8 6h8M4 16a2 2 0 1 1 3.321 1.5L4 20h5M4 5l2-1v6m-2 0h4"></path></svg>`);
function OrderedListOutline($$anchor, $$props) {
  if (new.target === OrderedListOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, OrderedListOutline);
  validate_prop_bindings($$props, [], [], OrderedListOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "ordered list outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1368();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2368();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3368();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4368();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5368();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6368();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(OrderedListOutline);
  OrderedListOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var OrderedListOutline_default = OrderedListOutline;
OrderedListOutline.filename = ".../flowbite-svelte-icons/dist/OrderedListOutline.svelte";
mark_module_end(OrderedListOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/OutdentOutline.svelte
mark_module_start();
var root_2369 = svg_template(`<title> </title>`);
var root_3369 = svg_template(`<desc> </desc>`);
var root_1369 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M6 6h12M6 18h12m-5-8h5m-5 4h5M9.5 9v6L6 12l3.5-3Z"></path></svg>`);
var root_5369 = svg_template(`<title> </title>`);
var root_6369 = svg_template(`<desc> </desc>`);
var root_4369 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M6 6h12M6 18h12m-5-8h5m-5 4h5M9.5 9v6L6 12l3.5-3Z"></path></svg>`);
function OutdentOutline($$anchor, $$props) {
  if (new.target === OutdentOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, OutdentOutline);
  validate_prop_bindings($$props, [], [], OutdentOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "outdent outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1369();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2369();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3369();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4369();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5369();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6369();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(OutdentOutline);
  OutdentOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var OutdentOutline_default = OutdentOutline;
OutdentOutline.filename = ".../flowbite-svelte-icons/dist/OutdentOutline.svelte";
mark_module_end(OutdentOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/OutdentSolid.svelte
mark_module_start();
var root_2370 = svg_template(`<title> </title>`);
var root_3370 = svg_template(`<desc> </desc>`);
var root_1370 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M5 6a1 1 0 0 1 1-1h12a1 1 0 1 1 0 2H6a1 1 0 0 1-1-1Zm0 12a1 1 0 0 1 1-1h12a1 1 0 1 1 0 2H6a1 1 0 0 1-1-1Zm3.85-9.76A1 1 0 0 1 10.5 9v6a1 1 0 0 1-1.65.76l-3.5-3a1 1 0 0 1 0-1.52l3.5-3ZM12 10a1 1 0 0 1 1-1h5a1 1 0 1 1 0 2h-5a1 1 0 0 1-1-1Zm0 4a1 1 0 0 1 1-1h5a1 1 0 1 1 0 2h-5a1 1 0 0 1-1-1Z" clip-rule="evenodd"></path></svg>`);
var root_5370 = svg_template(`<title> </title>`);
var root_6370 = svg_template(`<desc> </desc>`);
var root_4370 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M5 6a1 1 0 0 1 1-1h12a1 1 0 1 1 0 2H6a1 1 0 0 1-1-1Zm0 12a1 1 0 0 1 1-1h12a1 1 0 1 1 0 2H6a1 1 0 0 1-1-1Zm3.85-9.76A1 1 0 0 1 10.5 9v6a1 1 0 0 1-1.65.76l-3.5-3a1 1 0 0 1 0-1.52l3.5-3ZM12 10a1 1 0 0 1 1-1h5a1 1 0 1 1 0 2h-5a1 1 0 0 1-1-1Zm0 4a1 1 0 0 1 1-1h5a1 1 0 1 1 0 2h-5a1 1 0 0 1-1-1Z" clip-rule="evenodd"></path></svg>`);
function OutdentSolid($$anchor, $$props) {
  if (new.target === OutdentSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, OutdentSolid);
  validate_prop_bindings($$props, [], [], OutdentSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "outdent solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1370();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2370();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3370();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4370();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5370();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6370();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(OutdentSolid);
  OutdentSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var OutdentSolid_default = OutdentSolid;
OutdentSolid.filename = ".../flowbite-svelte-icons/dist/OutdentSolid.svelte";
mark_module_end(OutdentSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/PaletteOutline.svelte
mark_module_start();
var root_2371 = svg_template(`<title> </title>`);
var root_3371 = svg_template(`<desc> </desc>`);
var root_1371 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12 7h.01m3.486 1.513h.01m-6.978 0h.01M6.99 12H7m9 4h2.706a1.957 1.957 0 0 0 1.883-1.325A9 9 0 1 0 3.043 12.89 9.1 9.1 0 0 0 8.2 20.1a8.62 8.62 0 0 0 3.769.9 2.013 2.013 0 0 0 2.03-2v-.857A2.036 2.036 0 0 1 16 16Z"></path></svg>`);
var root_5371 = svg_template(`<title> </title>`);
var root_6371 = svg_template(`<desc> </desc>`);
var root_4371 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12 7h.01m3.486 1.513h.01m-6.978 0h.01M6.99 12H7m9 4h2.706a1.957 1.957 0 0 0 1.883-1.325A9 9 0 1 0 3.043 12.89 9.1 9.1 0 0 0 8.2 20.1a8.62 8.62 0 0 0 3.769.9 2.013 2.013 0 0 0 2.03-2v-.857A2.036 2.036 0 0 1 16 16Z"></path></svg>`);
function PaletteOutline($$anchor, $$props) {
  if (new.target === PaletteOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, PaletteOutline);
  validate_prop_bindings($$props, [], [], PaletteOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "palette outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1371();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2371();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3371();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4371();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5371();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6371();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(PaletteOutline);
  PaletteOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var PaletteOutline_default = PaletteOutline;
PaletteOutline.filename = ".../flowbite-svelte-icons/dist/PaletteOutline.svelte";
mark_module_end(PaletteOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/PaletteSolid.svelte
mark_module_start();
var root_2372 = svg_template(`<title> </title>`);
var root_3372 = svg_template(`<desc> </desc>`);
var root_1372 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M5 3a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-3a2 2 0 0 0-2-2h-1v3a1 1 0 1 1-2 0v-3h-1v3a1 1 0 1 1-2 0v-3h-1v3a1 1 0 1 1-2 0v-3H7a1 1 0 1 1 0-2h3v-1H7a1 1 0 1 1 0-2h3V8H7a1 1 0 0 1 0-2h3V5a2 2 0 0 0-2-2H5Z" clip-rule="evenodd"></path></svg>`);
var root_5372 = svg_template(`<title> </title>`);
var root_6372 = svg_template(`<desc> </desc>`);
var root_4372 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M5 3a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-3a2 2 0 0 0-2-2h-1v3a1 1 0 1 1-2 0v-3h-1v3a1 1 0 1 1-2 0v-3h-1v3a1 1 0 1 1-2 0v-3H7a1 1 0 1 1 0-2h3v-1H7a1 1 0 1 1 0-2h3V8H7a1 1 0 0 1 0-2h3V5a2 2 0 0 0-2-2H5Z" clip-rule="evenodd"></path></svg>`);
function PaletteSolid($$anchor, $$props) {
  if (new.target === PaletteSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, PaletteSolid);
  validate_prop_bindings($$props, [], [], PaletteSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "palette solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1372();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2372();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3372();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4372();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5372();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6372();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(PaletteSolid);
  PaletteSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var PaletteSolid_default = PaletteSolid;
PaletteSolid.filename = ".../flowbite-svelte-icons/dist/PaletteSolid.svelte";
mark_module_end(PaletteSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/PaperClipOutline.svelte
mark_module_start();
var root_2373 = svg_template(`<title> </title>`);
var root_3373 = svg_template(`<desc> </desc>`);
var root_1373 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M7 8v8a5 5 0 1 0 10 0V6.5a3.5 3.5 0 1 0-7 0V15a2 2 0 0 0 4 0V8"></path></svg>`);
var root_5373 = svg_template(`<title> </title>`);
var root_6373 = svg_template(`<desc> </desc>`);
var root_4373 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M7 8v8a5 5 0 1 0 10 0V6.5a3.5 3.5 0 1 0-7 0V15a2 2 0 0 0 4 0V8"></path></svg>`);
function PaperClipOutline($$anchor, $$props) {
  if (new.target === PaperClipOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, PaperClipOutline);
  validate_prop_bindings($$props, [], [], PaperClipOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "paper clip outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1373();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2373();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3373();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4373();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5373();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6373();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(PaperClipOutline);
  PaperClipOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var PaperClipOutline_default = PaperClipOutline;
PaperClipOutline.filename = ".../flowbite-svelte-icons/dist/PaperClipOutline.svelte";
mark_module_end(PaperClipOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/PaperPlaneOutline.svelte
mark_module_start();
var root_2374 = svg_template(`<title> </title>`);
var root_3374 = svg_template(`<desc> </desc>`);
var root_1374 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m12 18-7 3 7-18 7 18-7-3Zm0 0v-5"></path></svg>`);
var root_5374 = svg_template(`<title> </title>`);
var root_6374 = svg_template(`<desc> </desc>`);
var root_4374 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m12 18-7 3 7-18 7 18-7-3Zm0 0v-5"></path></svg>`);
function PaperPlaneOutline($$anchor, $$props) {
  if (new.target === PaperPlaneOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, PaperPlaneOutline);
  validate_prop_bindings($$props, [], [], PaperPlaneOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "paper plane outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1374();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2374();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3374();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4374();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5374();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6374();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(PaperPlaneOutline);
  PaperPlaneOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var PaperPlaneOutline_default = PaperPlaneOutline;
PaperPlaneOutline.filename = ".../flowbite-svelte-icons/dist/PaperPlaneOutline.svelte";
mark_module_end(PaperPlaneOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/PaperPlaneSolid.svelte
mark_module_start();
var root_2375 = svg_template(`<title> </title>`);
var root_3375 = svg_template(`<desc> </desc>`);
var root_1375 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M12 2a1 1 0 0 1 .932.638l7 18a1 1 0 0 1-1.326 1.281L13 19.517V13a1 1 0 1 0-2 0v6.517l-5.606 2.402a1 1 0 0 1-1.326-1.281l7-18A1 1 0 0 1 12 2Z" clip-rule="evenodd"></path></svg>`);
var root_5375 = svg_template(`<title> </title>`);
var root_6375 = svg_template(`<desc> </desc>`);
var root_4375 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M12 2a1 1 0 0 1 .932.638l7 18a1 1 0 0 1-1.326 1.281L13 19.517V13a1 1 0 1 0-2 0v6.517l-5.606 2.402a1 1 0 0 1-1.326-1.281l7-18A1 1 0 0 1 12 2Z" clip-rule="evenodd"></path></svg>`);
function PaperPlaneSolid($$anchor, $$props) {
  if (new.target === PaperPlaneSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, PaperPlaneSolid);
  validate_prop_bindings($$props, [], [], PaperPlaneSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "paper plane solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1375();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2375();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3375();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4375();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5375();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6375();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(PaperPlaneSolid);
  PaperPlaneSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var PaperPlaneSolid_default = PaperPlaneSolid;
PaperPlaneSolid.filename = ".../flowbite-svelte-icons/dist/PaperPlaneSolid.svelte";
mark_module_end(PaperPlaneSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ParagraphOutline.svelte
mark_module_start();
var root_2376 = svg_template(`<title> </title>`);
var root_3376 = svg_template(`<desc> </desc>`);
var root_1376 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12 5v7m0 7v-7m4-7v14m3-14H8.5A3.5 3.5 0 0 0 5 8.5v0A3.5 3.5 0 0 0 8.5 12H12"></path></svg>`);
var root_5376 = svg_template(`<title> </title>`);
var root_6376 = svg_template(`<desc> </desc>`);
var root_4376 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12 5v7m0 7v-7m4-7v14m3-14H8.5A3.5 3.5 0 0 0 5 8.5v0A3.5 3.5 0 0 0 8.5 12H12"></path></svg>`);
function ParagraphOutline($$anchor, $$props) {
  if (new.target === ParagraphOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ParagraphOutline);
  validate_prop_bindings($$props, [], [], ParagraphOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "paragraph outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1376();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2376();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3376();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4376();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5376();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6376();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ParagraphOutline);
  ParagraphOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ParagraphOutline_default = ParagraphOutline;
ParagraphOutline.filename = ".../flowbite-svelte-icons/dist/ParagraphOutline.svelte";
mark_module_end(ParagraphOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ParagraphSolid.svelte
mark_module_start();
var root_2377 = svg_template(`<title> </title>`);
var root_3377 = svg_template(`<desc> </desc>`);
var root_1377 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M8.5 4a4.5 4.5 0 0 0 0 9H11v6a1 1 0 1 0 2 0V6h2v13a1 1 0 1 0 2 0V6h2a1 1 0 1 0 0-2H8.5Z" clip-rule="evenodd"></path></svg>`);
var root_5377 = svg_template(`<title> </title>`);
var root_6377 = svg_template(`<desc> </desc>`);
var root_4377 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M8.5 4a4.5 4.5 0 0 0 0 9H11v6a1 1 0 1 0 2 0V6h2v13a1 1 0 1 0 2 0V6h2a1 1 0 1 0 0-2H8.5Z" clip-rule="evenodd"></path></svg>`);
function ParagraphSolid($$anchor, $$props) {
  if (new.target === ParagraphSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ParagraphSolid);
  validate_prop_bindings($$props, [], [], ParagraphSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "paragraph solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1377();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2377();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3377();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4377();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5377();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6377();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ParagraphSolid);
  ParagraphSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ParagraphSolid_default = ParagraphSolid;
ParagraphSolid.filename = ".../flowbite-svelte-icons/dist/ParagraphSolid.svelte";
mark_module_end(ParagraphSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/PauseOutline.svelte
mark_module_start();
var root_2378 = svg_template(`<title> </title>`);
var root_3378 = svg_template(`<desc> </desc>`);
var root_1378 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M9 6H8a1 1 0 0 0-1 1v10a1 1 0 0 0 1 1h1a1 1 0 0 0 1-1V7a1 1 0 0 0-1-1Zm7 0h-1a1 1 0 0 0-1 1v10a1 1 0 0 0 1 1h1a1 1 0 0 0 1-1V7a1 1 0 0 0-1-1Z"></path></svg>`);
var root_5378 = svg_template(`<title> </title>`);
var root_6378 = svg_template(`<desc> </desc>`);
var root_4378 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M9 6H8a1 1 0 0 0-1 1v10a1 1 0 0 0 1 1h1a1 1 0 0 0 1-1V7a1 1 0 0 0-1-1Zm7 0h-1a1 1 0 0 0-1 1v10a1 1 0 0 0 1 1h1a1 1 0 0 0 1-1V7a1 1 0 0 0-1-1Z"></path></svg>`);
function PauseOutline($$anchor, $$props) {
  if (new.target === PauseOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, PauseOutline);
  validate_prop_bindings($$props, [], [], PauseOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "pause outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1378();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2378();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3378();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4378();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5378();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6378();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(PauseOutline);
  PauseOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var PauseOutline_default = PauseOutline;
PauseOutline.filename = ".../flowbite-svelte-icons/dist/PauseOutline.svelte";
mark_module_end(PauseOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/PauseSolid.svelte
mark_module_start();
var root_2379 = svg_template(`<title> </title>`);
var root_3379 = svg_template(`<desc> </desc>`);
var root_1379 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M8 5a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h1a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2H8Zm7 0a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h1a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2h-1Z" clip-rule="evenodd"></path></svg>`);
var root_5379 = svg_template(`<title> </title>`);
var root_6379 = svg_template(`<desc> </desc>`);
var root_4379 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M8 5a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h1a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2H8Zm7 0a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h1a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2h-1Z" clip-rule="evenodd"></path></svg>`);
function PauseSolid($$anchor, $$props) {
  if (new.target === PauseSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, PauseSolid);
  validate_prop_bindings($$props, [], [], PauseSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "pause solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1379();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2379();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3379();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4379();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5379();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6379();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(PauseSolid);
  PauseSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var PauseSolid_default = PauseSolid;
PauseSolid.filename = ".../flowbite-svelte-icons/dist/PauseSolid.svelte";
mark_module_end(PauseSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/PenNibOutline.svelte
mark_module_start();
var root_2380 = svg_template(`<title> </title>`);
var root_3380 = svg_template(`<desc> </desc>`);
var root_1380 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m4.988 19.012 5.41-5.41m2.366-6.424 4.058 4.058-2.03 5.41L5.3 20 4 18.701l3.355-9.494 5.41-2.029Zm4.626 4.625L12.197 6.61 14.807 4 20 9.194l-2.61 2.61Z"></path></svg>`);
var root_5380 = svg_template(`<title> </title>`);
var root_6380 = svg_template(`<desc> </desc>`);
var root_4380 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m4.988 19.012 5.41-5.41m2.366-6.424 4.058 4.058-2.03 5.41L5.3 20 4 18.701l3.355-9.494 5.41-2.029Zm4.626 4.625L12.197 6.61 14.807 4 20 9.194l-2.61 2.61Z"></path></svg>`);
function PenNibOutline($$anchor, $$props) {
  if (new.target === PenNibOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, PenNibOutline);
  validate_prop_bindings($$props, [], [], PenNibOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "pen nib outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1380();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2380();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3380();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4380();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5380();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6380();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(PenNibOutline);
  PenNibOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var PenNibOutline_default = PenNibOutline;
PenNibOutline.filename = ".../flowbite-svelte-icons/dist/PenNibOutline.svelte";
mark_module_end(PenNibOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/PenNibSolid.svelte
mark_module_start();
var root_2381 = svg_template(`<title> </title>`);
var root_3381 = svg_template(`<desc> </desc>`);
var root_1381 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M15.514 3.293a1 1 0 0 0-1.415 0L12.151 5.24a.93.93 0 0 1 .056.052l6.5 6.5a.97.97 0 0 1 .052.056L20.707 9.9a1 1 0 0 0 0-1.415l-5.193-5.193ZM7.004 8.27l3.892-1.46 6.293 6.293-1.46 3.893a1 1 0 0 1-.603.591l-9.494 3.355a1 1 0 0 1-.98-.18l6.452-6.453a1 1 0 0 0-1.414-1.414l-6.453 6.452a1 1 0 0 1-.18-.98l3.355-9.494a1 1 0 0 1 .591-.603Z" clip-rule="evenodd"></path></svg>`);
var root_5381 = svg_template(`<title> </title>`);
var root_6381 = svg_template(`<desc> </desc>`);
var root_4381 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M15.514 3.293a1 1 0 0 0-1.415 0L12.151 5.24a.93.93 0 0 1 .056.052l6.5 6.5a.97.97 0 0 1 .052.056L20.707 9.9a1 1 0 0 0 0-1.415l-5.193-5.193ZM7.004 8.27l3.892-1.46 6.293 6.293-1.46 3.893a1 1 0 0 1-.603.591l-9.494 3.355a1 1 0 0 1-.98-.18l6.452-6.453a1 1 0 0 0-1.414-1.414l-6.453 6.452a1 1 0 0 1-.18-.98l3.355-9.494a1 1 0 0 1 .591-.603Z" clip-rule="evenodd"></path></svg>`);
function PenNibSolid($$anchor, $$props) {
  if (new.target === PenNibSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, PenNibSolid);
  validate_prop_bindings($$props, [], [], PenNibSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "pen nib solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1381();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2381();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3381();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4381();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5381();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6381();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(PenNibSolid);
  PenNibSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var PenNibSolid_default = PenNibSolid;
PenNibSolid.filename = ".../flowbite-svelte-icons/dist/PenNibSolid.svelte";
mark_module_end(PenNibSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/PenOutline.svelte
mark_module_start();
var root_2382 = svg_template(`<title> </title>`);
var root_3382 = svg_template(`<desc> </desc>`);
var root_1382 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M10.779 17.779 4.36 19.918 6.5 13.5m4.279 4.279 8.364-8.643a3.027 3.027 0 0 0-2.14-5.165 3.03 3.03 0 0 0-2.14.886L6.5 13.5m4.279 4.279L6.499 13.5m2.14 2.14 6.213-6.504M12.75 7.04 17 11.28"></path></svg>`);
var root_5382 = svg_template(`<title> </title>`);
var root_6382 = svg_template(`<desc> </desc>`);
var root_4382 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M10.779 17.779 4.36 19.918 6.5 13.5m4.279 4.279 8.364-8.643a3.027 3.027 0 0 0-2.14-5.165 3.03 3.03 0 0 0-2.14.886L6.5 13.5m4.279 4.279L6.499 13.5m2.14 2.14 6.213-6.504M12.75 7.04 17 11.28"></path></svg>`);
function PenOutline($$anchor, $$props) {
  if (new.target === PenOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, PenOutline);
  validate_prop_bindings($$props, [], [], PenOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "pen outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1382();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2382();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3382();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4382();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5382();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6382();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(PenOutline);
  PenOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var PenOutline_default = PenOutline;
PenOutline.filename = ".../flowbite-svelte-icons/dist/PenOutline.svelte";
mark_module_end(PenOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/PenSolid.svelte
mark_module_start();
var root_2383 = svg_template(`<title> </title>`);
var root_3383 = svg_template(`<desc> </desc>`);
var root_1383 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M14 4.182A4.136 4.136 0 0 1 16.9 3c1.087 0 2.13.425 2.899 1.182A4.01 4.01 0 0 1 21 7.037c0 1.068-.43 2.092-1.194 2.849L18.5 11.214l-5.8-5.71 1.287-1.31.012-.012Zm-2.717 2.763L6.186 12.13l2.175 2.141 5.063-5.218-2.141-2.108Zm-6.25 6.886-1.98 5.849a.992.992 0 0 0 .245 1.026 1.03 1.03 0 0 0 1.043.242L10.282 19l-5.25-5.168Zm6.954 4.01 5.096-5.186-2.218-2.183-5.063 5.218 2.185 2.15Z" clip-rule="evenodd"></path></svg>`);
var root_5383 = svg_template(`<title> </title>`);
var root_6383 = svg_template(`<desc> </desc>`);
var root_4383 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M14 4.182A4.136 4.136 0 0 1 16.9 3c1.087 0 2.13.425 2.899 1.182A4.01 4.01 0 0 1 21 7.037c0 1.068-.43 2.092-1.194 2.849L18.5 11.214l-5.8-5.71 1.287-1.31.012-.012Zm-2.717 2.763L6.186 12.13l2.175 2.141 5.063-5.218-2.141-2.108Zm-6.25 6.886-1.98 5.849a.992.992 0 0 0 .245 1.026 1.03 1.03 0 0 0 1.043.242L10.282 19l-5.25-5.168Zm6.954 4.01 5.096-5.186-2.218-2.183-5.063 5.218 2.185 2.15Z" clip-rule="evenodd"></path></svg>`);
function PenSolid($$anchor, $$props) {
  if (new.target === PenSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, PenSolid);
  validate_prop_bindings($$props, [], [], PenSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "pen solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1383();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2383();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3383();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4383();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5383();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6383();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(PenSolid);
  PenSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var PenSolid_default = PenSolid;
PenSolid.filename = ".../flowbite-svelte-icons/dist/PenSolid.svelte";
mark_module_end(PenSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/PhoneHangupOutline.svelte
mark_module_start();
var root_2384 = svg_template(`<title> </title>`);
var root_3384 = svg_template(`<desc> </desc>`);
var root_1384 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M5.693 16.013H7.31a1.685 1.685 0 0 0 1.685-1.684v-.645A1.684 1.684 0 0 1 10.679 12h2.647a1.686 1.686 0 0 1 1.686 1.686v.646c0 .446.178.875.494 1.19.316.317.693.495 1.14.495h1.685a1.556 1.556 0 0 0 1.597-1.016c.078-.214.107-.776.088-1.002.014-4.415-3.571-6.003-8-6.004-4.427 0-8.014 1.585-8.01 5.996-.02.227.009.79.087 1.003a1.558 1.558 0 0 0 1.6 1.02Z"></path></svg>`);
var root_5384 = svg_template(`<title> </title>`);
var root_6384 = svg_template(`<desc> </desc>`);
var root_4384 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M5.693 16.013H7.31a1.685 1.685 0 0 0 1.685-1.684v-.645A1.684 1.684 0 0 1 10.679 12h2.647a1.686 1.686 0 0 1 1.686 1.686v.646c0 .446.178.875.494 1.19.316.317.693.495 1.14.495h1.685a1.556 1.556 0 0 0 1.597-1.016c.078-.214.107-.776.088-1.002.014-4.415-3.571-6.003-8-6.004-4.427 0-8.014 1.585-8.01 5.996-.02.227.009.79.087 1.003a1.558 1.558 0 0 0 1.6 1.02Z"></path></svg>`);
function PhoneHangupOutline($$anchor, $$props) {
  if (new.target === PhoneHangupOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, PhoneHangupOutline);
  validate_prop_bindings($$props, [], [], PhoneHangupOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "phone hangup outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1384();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2384();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3384();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4384();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5384();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6384();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(PhoneHangupOutline);
  PhoneHangupOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var PhoneHangupOutline_default = PhoneHangupOutline;
PhoneHangupOutline.filename = ".../flowbite-svelte-icons/dist/PhoneHangupOutline.svelte";
mark_module_end(PhoneHangupOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/PhoneHangupSolid.svelte
mark_module_start();
var root_2385 = svg_template(`<title> </title>`);
var root_3385 = svg_template(`<desc> </desc>`);
var root_1385 = svg_template(`<svg><!><!><path d="M12.017 6.995c-2.306 0-4.534.408-6.215 1.507-1.737 1.135-2.788 2.944-2.797 5.451a4.8 4.8 0 0 0 .01.62c.015.193.047.512.138.763a2.557 2.557 0 0 0 2.579 1.677H7.31a2.685 2.685 0 0 0 2.685-2.684v-.645a.684.684 0 0 1 .684-.684h2.647a.686.686 0 0 1 .686.687v.645c0 .712.284 1.395.787 1.898.478.478 1.101.787 1.847.787h1.647a2.555 2.555 0 0 0 2.575-1.674c.09-.25.123-.57.137-.763.015-.2.022-.433.01-.617-.002-2.508-1.049-4.32-2.785-5.458-1.68-1.1-3.907-1.51-6.213-1.51Z"></path></svg>`);
var root_5385 = svg_template(`<title> </title>`);
var root_6385 = svg_template(`<desc> </desc>`);
var root_4385 = svg_template(`<svg><!><!><path d="M12.017 6.995c-2.306 0-4.534.408-6.215 1.507-1.737 1.135-2.788 2.944-2.797 5.451a4.8 4.8 0 0 0 .01.62c.015.193.047.512.138.763a2.557 2.557 0 0 0 2.579 1.677H7.31a2.685 2.685 0 0 0 2.685-2.684v-.645a.684.684 0 0 1 .684-.684h2.647a.686.686 0 0 1 .686.687v.645c0 .712.284 1.395.787 1.898.478.478 1.101.787 1.847.787h1.647a2.555 2.555 0 0 0 2.575-1.674c.09-.25.123-.57.137-.763.015-.2.022-.433.01-.617-.002-2.508-1.049-4.32-2.785-5.458-1.68-1.1-3.907-1.51-6.213-1.51Z"></path></svg>`);
function PhoneHangupSolid($$anchor, $$props) {
  if (new.target === PhoneHangupSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, PhoneHangupSolid);
  validate_prop_bindings($$props, [], [], PhoneHangupSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "phone hangup solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1385();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2385();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3385();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4385();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5385();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6385();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(PhoneHangupSolid);
  PhoneHangupSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var PhoneHangupSolid_default = PhoneHangupSolid;
PhoneHangupSolid.filename = ".../flowbite-svelte-icons/dist/PhoneHangupSolid.svelte";
mark_module_end(PhoneHangupSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/PhoneOutline.svelte
mark_module_start();
var root_2386 = svg_template(`<title> </title>`);
var root_3386 = svg_template(`<desc> </desc>`);
var root_1386 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M18.427 14.768 17.2 13.542a1.733 1.733 0 0 0-2.45 0l-.613.613a1.732 1.732 0 0 1-2.45 0l-1.838-1.84a1.735 1.735 0 0 1 0-2.452l.612-.613a1.735 1.735 0 0 0 0-2.452L9.237 5.572a1.6 1.6 0 0 0-2.45 0c-3.223 3.2-1.702 6.896 1.519 10.117 3.22 3.221 6.914 4.745 10.12 1.535a1.601 1.601 0 0 0 0-2.456Z"></path></svg>`);
var root_5386 = svg_template(`<title> </title>`);
var root_6386 = svg_template(`<desc> </desc>`);
var root_4386 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M18.427 14.768 17.2 13.542a1.733 1.733 0 0 0-2.45 0l-.613.613a1.732 1.732 0 0 1-2.45 0l-1.838-1.84a1.735 1.735 0 0 1 0-2.452l.612-.613a1.735 1.735 0 0 0 0-2.452L9.237 5.572a1.6 1.6 0 0 0-2.45 0c-3.223 3.2-1.702 6.896 1.519 10.117 3.22 3.221 6.914 4.745 10.12 1.535a1.601 1.601 0 0 0 0-2.456Z"></path></svg>`);
function PhoneOutline($$anchor, $$props) {
  if (new.target === PhoneOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, PhoneOutline);
  validate_prop_bindings($$props, [], [], PhoneOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "phone outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1386();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2386();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3386();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4386();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5386();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6386();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(PhoneOutline);
  PhoneOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var PhoneOutline_default = PhoneOutline;
PhoneOutline.filename = ".../flowbite-svelte-icons/dist/PhoneOutline.svelte";
mark_module_end(PhoneOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/PhoneSolid.svelte
mark_module_start();
var root_2387 = svg_template(`<title> </title>`);
var root_3387 = svg_template(`<desc> </desc>`);
var root_1387 = svg_template(`<svg><!><!><path d="M7.978 4a2.553 2.553 0 0 0-1.926.877C4.233 6.7 3.699 8.751 4.153 10.814c.44 1.995 1.778 3.893 3.456 5.572 1.68 1.679 3.577 3.018 5.57 3.459 2.062.456 4.115-.073 5.94-1.885a2.556 2.556 0 0 0 .001-3.861l-1.21-1.21a2.689 2.689 0 0 0-3.802 0l-.617.618a.806.806 0 0 1-1.14 0l-1.854-1.855a.807.807 0 0 1 0-1.14l.618-.62a2.692 2.692 0 0 0 0-3.803l-1.21-1.211A2.555 2.555 0 0 0 7.978 4Z"></path></svg>`);
var root_5387 = svg_template(`<title> </title>`);
var root_6387 = svg_template(`<desc> </desc>`);
var root_4387 = svg_template(`<svg><!><!><path d="M7.978 4a2.553 2.553 0 0 0-1.926.877C4.233 6.7 3.699 8.751 4.153 10.814c.44 1.995 1.778 3.893 3.456 5.572 1.68 1.679 3.577 3.018 5.57 3.459 2.062.456 4.115-.073 5.94-1.885a2.556 2.556 0 0 0 .001-3.861l-1.21-1.21a2.689 2.689 0 0 0-3.802 0l-.617.618a.806.806 0 0 1-1.14 0l-1.854-1.855a.807.807 0 0 1 0-1.14l.618-.62a2.692 2.692 0 0 0 0-3.803l-1.21-1.211A2.555 2.555 0 0 0 7.978 4Z"></path></svg>`);
function PhoneSolid($$anchor, $$props) {
  if (new.target === PhoneSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, PhoneSolid);
  validate_prop_bindings($$props, [], [], PhoneSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "phone solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1387();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2387();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3387();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4387();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5387();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6387();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(PhoneSolid);
  PhoneSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var PhoneSolid_default = PhoneSolid;
PhoneSolid.filename = ".../flowbite-svelte-icons/dist/PhoneSolid.svelte";
mark_module_end(PhoneSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/PlayOutline.svelte
mark_module_start();
var root_2388 = svg_template(`<title> </title>`);
var root_3388 = svg_template(`<desc> </desc>`);
var root_1388 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M8 18V6l8 6-8 6Z"></path></svg>`);
var root_5388 = svg_template(`<title> </title>`);
var root_6388 = svg_template(`<desc> </desc>`);
var root_4388 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M8 18V6l8 6-8 6Z"></path></svg>`);
function PlayOutline($$anchor, $$props) {
  if (new.target === PlayOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, PlayOutline);
  validate_prop_bindings($$props, [], [], PlayOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "play outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1388();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2388();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3388();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4388();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5388();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6388();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(PlayOutline);
  PlayOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var PlayOutline_default = PlayOutline;
PlayOutline.filename = ".../flowbite-svelte-icons/dist/PlayOutline.svelte";
mark_module_end(PlayOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/PlaySolid.svelte
mark_module_start();
var root_2389 = svg_template(`<title> </title>`);
var root_3389 = svg_template(`<desc> </desc>`);
var root_1389 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M8.6 5.2A1 1 0 0 0 7 6v12a1 1 0 0 0 1.6.8l8-6a1 1 0 0 0 0-1.6l-8-6Z" clip-rule="evenodd"></path></svg>`);
var root_5389 = svg_template(`<title> </title>`);
var root_6389 = svg_template(`<desc> </desc>`);
var root_4389 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M8.6 5.2A1 1 0 0 0 7 6v12a1 1 0 0 0 1.6.8l8-6a1 1 0 0 0 0-1.6l-8-6Z" clip-rule="evenodd"></path></svg>`);
function PlaySolid($$anchor, $$props) {
  if (new.target === PlaySolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, PlaySolid);
  validate_prop_bindings($$props, [], [], PlaySolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "play solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1389();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2389();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3389();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4389();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5389();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6389();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(PlaySolid);
  PlaySolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var PlaySolid_default = PlaySolid;
PlaySolid.filename = ".../flowbite-svelte-icons/dist/PlaySolid.svelte";
mark_module_end(PlaySolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/PlusOutline.svelte
mark_module_start();
var root_2390 = svg_template(`<title> </title>`);
var root_3390 = svg_template(`<desc> </desc>`);
var root_1390 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M5 12h14m-7 7V5"></path></svg>`);
var root_5390 = svg_template(`<title> </title>`);
var root_6390 = svg_template(`<desc> </desc>`);
var root_4390 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M5 12h14m-7 7V5"></path></svg>`);
function PlusOutline($$anchor, $$props) {
  if (new.target === PlusOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, PlusOutline);
  validate_prop_bindings($$props, [], [], PlusOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "plus outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1390();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2390();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3390();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4390();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5390();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6390();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(PlusOutline);
  PlusOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var PlusOutline_default = PlusOutline;
PlusOutline.filename = ".../flowbite-svelte-icons/dist/PlusOutline.svelte";
mark_module_end(PlusOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/PrinterOutline.svelte
mark_module_start();
var root_2391 = svg_template(`<title> </title>`);
var root_3391 = svg_template(`<desc> </desc>`);
var root_1391 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linejoin="round" d="M16.444 18H19a1 1 0 0 0 1-1v-5a1 1 0 0 0-1-1H5a1 1 0 0 0-1 1v5a1 1 0 0 0 1 1h2.556M17 11V5a1 1 0 0 0-1-1H8a1 1 0 0 0-1 1v6h10ZM7 15h10v4a1 1 0 0 1-1 1H8a1 1 0 0 1-1-1v-4Z"></path></svg>`);
var root_5391 = svg_template(`<title> </title>`);
var root_6391 = svg_template(`<desc> </desc>`);
var root_4391 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linejoin="round" d="M16.444 18H19a1 1 0 0 0 1-1v-5a1 1 0 0 0-1-1H5a1 1 0 0 0-1 1v5a1 1 0 0 0 1 1h2.556M17 11V5a1 1 0 0 0-1-1H8a1 1 0 0 0-1 1v6h10ZM7 15h10v4a1 1 0 0 1-1 1H8a1 1 0 0 1-1-1v-4Z"></path></svg>`);
function PrinterOutline($$anchor, $$props) {
  if (new.target === PrinterOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, PrinterOutline);
  validate_prop_bindings($$props, [], [], PrinterOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "printer outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1391();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2391();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3391();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4391();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5391();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6391();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(PrinterOutline);
  PrinterOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var PrinterOutline_default = PrinterOutline;
PrinterOutline.filename = ".../flowbite-svelte-icons/dist/PrinterOutline.svelte";
mark_module_end(PrinterOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/PrinterSolid.svelte
mark_module_start();
var root_2392 = svg_template(`<title> </title>`);
var root_3392 = svg_template(`<desc> </desc>`);
var root_1392 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M8 3a2 2 0 0 0-2 2v3h12V5a2 2 0 0 0-2-2H8Zm-3 7a2 2 0 0 0-2 2v5a2 2 0 0 0 2 2h1v-4a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v4h1a2 2 0 0 0 2-2v-5a2 2 0 0 0-2-2H5Zm4 11a1 1 0 0 1-1-1v-4h8v4a1 1 0 0 1-1 1H9Z" clip-rule="evenodd"></path></svg>`);
var root_5392 = svg_template(`<title> </title>`);
var root_6392 = svg_template(`<desc> </desc>`);
var root_4392 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M8 3a2 2 0 0 0-2 2v3h12V5a2 2 0 0 0-2-2H8Zm-3 7a2 2 0 0 0-2 2v5a2 2 0 0 0 2 2h1v-4a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v4h1a2 2 0 0 0 2-2v-5a2 2 0 0 0-2-2H5Zm4 11a1 1 0 0 1-1-1v-4h8v4a1 1 0 0 1-1 1H9Z" clip-rule="evenodd"></path></svg>`);
function PrinterSolid($$anchor, $$props) {
  if (new.target === PrinterSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, PrinterSolid);
  validate_prop_bindings($$props, [], [], PrinterSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "printer solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1392();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2392();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3392();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4392();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5392();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6392();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(PrinterSolid);
  PrinterSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var PrinterSolid_default = PrinterSolid;
PrinterSolid.filename = ".../flowbite-svelte-icons/dist/PrinterSolid.svelte";
mark_module_end(PrinterSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ProfileCardOutline.svelte
mark_module_start();
var root_2393 = svg_template(`<title> </title>`);
var root_3393 = svg_template(`<desc> </desc>`);
var root_1393 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M15 9h3m-3 3h3m-3 3h3m-6 1c-.306-.613-.933-1-1.618-1H7.618c-.685 0-1.312.387-1.618 1M4 5h16a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1Zm7 5a2 2 0 1 1-4 0 2 2 0 0 1 4 0Z"></path></svg>`);
var root_5393 = svg_template(`<title> </title>`);
var root_6393 = svg_template(`<desc> </desc>`);
var root_4393 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M15 9h3m-3 3h3m-3 3h3m-6 1c-.306-.613-.933-1-1.618-1H7.618c-.685 0-1.312.387-1.618 1M4 5h16a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1Zm7 5a2 2 0 1 1-4 0 2 2 0 0 1 4 0Z"></path></svg>`);
function ProfileCardOutline($$anchor, $$props) {
  if (new.target === ProfileCardOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ProfileCardOutline);
  validate_prop_bindings($$props, [], [], ProfileCardOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "profile card outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1393();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2393();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3393();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4393();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5393();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6393();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ProfileCardOutline);
  ProfileCardOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ProfileCardOutline_default = ProfileCardOutline;
ProfileCardOutline.filename = ".../flowbite-svelte-icons/dist/ProfileCardOutline.svelte";
mark_module_end(ProfileCardOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ProfileCardSolid.svelte
mark_module_start();
var root_2394 = svg_template(`<title> </title>`);
var root_3394 = svg_template(`<desc> </desc>`);
var root_1394 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M4 4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2H4Zm10 5a1 1 0 0 1 1-1h3a1 1 0 1 1 0 2h-3a1 1 0 0 1-1-1Zm0 3a1 1 0 0 1 1-1h3a1 1 0 1 1 0 2h-3a1 1 0 0 1-1-1Zm0 3a1 1 0 0 1 1-1h3a1 1 0 1 1 0 2h-3a1 1 0 0 1-1-1Zm-8-5a3 3 0 1 1 6 0 3 3 0 0 1-6 0Zm1.942 4a3 3 0 0 0-2.847 2.051l-.044.133-.004.012c-.042.126-.055.167-.042.195.006.013.02.023.038.039.032.025.08.064.146.155A1 1 0 0 0 6 17h6a1 1 0 0 0 .811-.415.713.713 0 0 1 .146-.155c.019-.016.031-.026.038-.04.014-.027 0-.068-.042-.194l-.004-.012-.044-.133A3 3 0 0 0 10.059 14H7.942Z" clip-rule="evenodd"></path></svg>`);
var root_5394 = svg_template(`<title> </title>`);
var root_6394 = svg_template(`<desc> </desc>`);
var root_4394 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M4 4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2H4Zm10 5a1 1 0 0 1 1-1h3a1 1 0 1 1 0 2h-3a1 1 0 0 1-1-1Zm0 3a1 1 0 0 1 1-1h3a1 1 0 1 1 0 2h-3a1 1 0 0 1-1-1Zm0 3a1 1 0 0 1 1-1h3a1 1 0 1 1 0 2h-3a1 1 0 0 1-1-1Zm-8-5a3 3 0 1 1 6 0 3 3 0 0 1-6 0Zm1.942 4a3 3 0 0 0-2.847 2.051l-.044.133-.004.012c-.042.126-.055.167-.042.195.006.013.02.023.038.039.032.025.08.064.146.155A1 1 0 0 0 6 17h6a1 1 0 0 0 .811-.415.713.713 0 0 1 .146-.155c.019-.016.031-.026.038-.04.014-.027 0-.068-.042-.194l-.004-.012-.044-.133A3 3 0 0 0 10.059 14H7.942Z" clip-rule="evenodd"></path></svg>`);
function ProfileCardSolid($$anchor, $$props) {
  if (new.target === ProfileCardSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ProfileCardSolid);
  validate_prop_bindings($$props, [], [], ProfileCardSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "profile card solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1394();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2394();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3394();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4394();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5394();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6394();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ProfileCardSolid);
  ProfileCardSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ProfileCardSolid_default = ProfileCardSolid;
ProfileCardSolid.filename = ".../flowbite-svelte-icons/dist/ProfileCardSolid.svelte";
mark_module_end(ProfileCardSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/QrCodeOutline.svelte
mark_module_start();
var root_2395 = svg_template(`<title> </title>`);
var root_3395 = svg_template(`<desc> </desc>`);
var root_1395 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linejoin="round" d="M4 4h6v6H4V4Zm10 10h6v6h-6v-6Zm0-10h6v6h-6V4Zm-4 10h.01v.01H10V14Zm0 4h.01v.01H10V18Zm-3 2h.01v.01H7V20Zm0-4h.01v.01H7V16Zm-3 2h.01v.01H4V18Zm0-4h.01v.01H4V14Z"></path><path stroke="currentColor" stroke-linejoin="round" d="M7 7h.01v.01H7V7Zm10 10h.01v.01H17V17Z"></path></svg>`);
var root_5395 = svg_template(`<title> </title>`);
var root_6395 = svg_template(`<desc> </desc>`);
var root_4395 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linejoin="round" d="M4 4h6v6H4V4Zm10 10h6v6h-6v-6Zm0-10h6v6h-6V4Zm-4 10h.01v.01H10V14Zm0 4h.01v.01H10V18Zm-3 2h.01v.01H7V20Zm0-4h.01v.01H7V16Zm-3 2h.01v.01H4V18Zm0-4h.01v.01H4V14Z"></path><path stroke="currentColor" stroke-linejoin="round" d="M7 7h.01v.01H7V7Zm10 10h.01v.01H17V17Z"></path></svg>`);
function QrCodeOutline($$anchor, $$props) {
  if (new.target === QrCodeOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, QrCodeOutline);
  validate_prop_bindings($$props, [], [], QrCodeOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "qr code outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1395();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2395();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3395();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4395();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5395();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6395();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_2 = sibling(node_4);
      var path_3 = sibling(path_2);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_2, "stroke-width", strokeWidth());
        set_attribute(path_3, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(QrCodeOutline);
  QrCodeOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var QrCodeOutline_default = QrCodeOutline;
QrCodeOutline.filename = ".../flowbite-svelte-icons/dist/QrCodeOutline.svelte";
mark_module_end(QrCodeOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/QuestionCircleOutline.svelte
mark_module_start();
var root_2396 = svg_template(`<title> </title>`);
var root_3396 = svg_template(`<desc> </desc>`);
var root_1396 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M9.529 9.988a2.502 2.502 0 1 1 5 .191A2.441 2.441 0 0 1 12 12.582V14m-.01 3.008H12M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"></path></svg>`);
var root_5396 = svg_template(`<title> </title>`);
var root_6396 = svg_template(`<desc> </desc>`);
var root_4396 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M9.529 9.988a2.502 2.502 0 1 1 5 .191A2.441 2.441 0 0 1 12 12.582V14m-.01 3.008H12M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"></path></svg>`);
function QuestionCircleOutline($$anchor, $$props) {
  if (new.target === QuestionCircleOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, QuestionCircleOutline);
  validate_prop_bindings($$props, [], [], QuestionCircleOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "question circle outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1396();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2396();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3396();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4396();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5396();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6396();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(QuestionCircleOutline);
  QuestionCircleOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var QuestionCircleOutline_default = QuestionCircleOutline;
QuestionCircleOutline.filename = ".../flowbite-svelte-icons/dist/QuestionCircleOutline.svelte";
mark_module_end(QuestionCircleOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/QuestionCircleSolid.svelte
mark_module_start();
var root_2397 = svg_template(`<title> </title>`);
var root_3397 = svg_template(`<desc> </desc>`);
var root_1397 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M2 12C2 6.477 6.477 2 12 2s10 4.477 10 10-4.477 10-10 10S2 17.523 2 12Zm9.008-3.018a1.502 1.502 0 0 1 2.522 1.159v.024a1.44 1.44 0 0 1-1.493 1.418 1 1 0 0 0-1.037.999V14a1 1 0 1 0 2 0v-.539a3.44 3.44 0 0 0 2.529-3.256 3.502 3.502 0 0 0-7-.255 1 1 0 0 0 2 .076c.014-.398.187-.774.48-1.044Zm.982 7.026a1 1 0 1 0 0 2H12a1 1 0 1 0 0-2h-.01Z" clip-rule="evenodd"></path></svg>`);
var root_5397 = svg_template(`<title> </title>`);
var root_6397 = svg_template(`<desc> </desc>`);
var root_4397 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M2 12C2 6.477 6.477 2 12 2s10 4.477 10 10-4.477 10-10 10S2 17.523 2 12Zm9.008-3.018a1.502 1.502 0 0 1 2.522 1.159v.024a1.44 1.44 0 0 1-1.493 1.418 1 1 0 0 0-1.037.999V14a1 1 0 1 0 2 0v-.539a3.44 3.44 0 0 0 2.529-3.256 3.502 3.502 0 0 0-7-.255 1 1 0 0 0 2 .076c.014-.398.187-.774.48-1.044Zm.982 7.026a1 1 0 1 0 0 2H12a1 1 0 1 0 0-2h-.01Z" clip-rule="evenodd"></path></svg>`);
function QuestionCircleSolid($$anchor, $$props) {
  if (new.target === QuestionCircleSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, QuestionCircleSolid);
  validate_prop_bindings($$props, [], [], QuestionCircleSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "question circle solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1397();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2397();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3397();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4397();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5397();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6397();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(QuestionCircleSolid);
  QuestionCircleSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var QuestionCircleSolid_default = QuestionCircleSolid;
QuestionCircleSolid.filename = ".../flowbite-svelte-icons/dist/QuestionCircleSolid.svelte";
mark_module_end(QuestionCircleSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/QuoteOutline.svelte
mark_module_start();
var root_2398 = svg_template(`<title> </title>`);
var root_3398 = svg_template(`<desc> </desc>`);
var root_1398 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M10 11V8a1 1 0 0 0-1-1H6a1 1 0 0 0-1 1v3a1 1 0 0 0 1 1h3a1 1 0 0 0 1-1Zm0 0v2a4 4 0 0 1-4 4H5m14-6V8a1 1 0 0 0-1-1h-3a1 1 0 0 0-1 1v3a1 1 0 0 0 1 1h3a1 1 0 0 0 1-1Zm0 0v2a4 4 0 0 1-4 4h-1"></path></svg>`);
var root_5398 = svg_template(`<title> </title>`);
var root_6398 = svg_template(`<desc> </desc>`);
var root_4398 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M10 11V8a1 1 0 0 0-1-1H6a1 1 0 0 0-1 1v3a1 1 0 0 0 1 1h3a1 1 0 0 0 1-1Zm0 0v2a4 4 0 0 1-4 4H5m14-6V8a1 1 0 0 0-1-1h-3a1 1 0 0 0-1 1v3a1 1 0 0 0 1 1h3a1 1 0 0 0 1-1Zm0 0v2a4 4 0 0 1-4 4h-1"></path></svg>`);
function QuoteOutline($$anchor, $$props) {
  if (new.target === QuoteOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, QuoteOutline);
  validate_prop_bindings($$props, [], [], QuoteOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "quote outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1398();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2398();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3398();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4398();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5398();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6398();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(QuoteOutline);
  QuoteOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var QuoteOutline_default = QuoteOutline;
QuoteOutline.filename = ".../flowbite-svelte-icons/dist/QuoteOutline.svelte";
mark_module_end(QuoteOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/QuoteSolid.svelte
mark_module_start();
var root_2399 = svg_template(`<title> </title>`);
var root_3399 = svg_template(`<desc> </desc>`);
var root_1399 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M6 6a2 2 0 0 0-2 2v3a2 2 0 0 0 2 2h3a3 3 0 0 1-3 3H5a1 1 0 1 0 0 2h1a5 5 0 0 0 5-5V8a2 2 0 0 0-2-2H6Zm9 0a2 2 0 0 0-2 2v3a2 2 0 0 0 2 2h3a3 3 0 0 1-3 3h-1a1 1 0 1 0 0 2h1a5 5 0 0 0 5-5V8a2 2 0 0 0-2-2h-3Z" clip-rule="evenodd"></path></svg>`);
var root_5399 = svg_template(`<title> </title>`);
var root_6399 = svg_template(`<desc> </desc>`);
var root_4399 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M6 6a2 2 0 0 0-2 2v3a2 2 0 0 0 2 2h3a3 3 0 0 1-3 3H5a1 1 0 1 0 0 2h1a5 5 0 0 0 5-5V8a2 2 0 0 0-2-2H6Zm9 0a2 2 0 0 0-2 2v3a2 2 0 0 0 2 2h3a3 3 0 0 1-3 3h-1a1 1 0 1 0 0 2h1a5 5 0 0 0 5-5V8a2 2 0 0 0-2-2h-3Z" clip-rule="evenodd"></path></svg>`);
function QuoteSolid($$anchor, $$props) {
  if (new.target === QuoteSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, QuoteSolid);
  validate_prop_bindings($$props, [], [], QuoteSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "quote solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1399();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2399();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3399();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4399();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5399();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6399();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(QuoteSolid);
  QuoteSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var QuoteSolid_default = QuoteSolid;
QuoteSolid.filename = ".../flowbite-svelte-icons/dist/QuoteSolid.svelte";
mark_module_end(QuoteSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ReactSolid.svelte
mark_module_start();
var root_2400 = svg_template(`<title> </title>`);
var root_3400 = svg_template(`<desc> </desc>`);
var root_1400 = svg_template(`<svg><!><!><path d="M21.718 12c0-1.429-1.339-2.681-3.467-3.5.029-.18.077-.37.1-.545.217-2.058-.273-3.543-1.379-4.182-1.235-.714-2.983-.186-4.751 1.239C10.45 3.589 8.7 3.061 7.468 3.773c-1.107.639-1.6 2.124-1.379 4.182.018.175.067.365.095.545-2.127.819-3.466 2.071-3.466 3.5 0 1.429 1.339 2.681 3.466 3.5-.028.18-.077.37-.095.545-.218 2.058.272 3.543 1.379 4.182.376.213.803.322 1.235.316a5.987 5.987 0 0 0 3.514-1.56 5.992 5.992 0 0 0 3.515 1.56 2.44 2.44 0 0 0 1.236-.316c1.106-.639 1.6-2.124 1.379-4.182-.019-.175-.067-.365-.1-.545 2.132-.819 3.471-2.071 3.471-3.5Zm-6.01-7.548a1.5 1.5 0 0 1 .76.187c.733.424 1.055 1.593.884 3.212-.012.106-.043.222-.058.33-.841-.243-1.7-.418-2.57-.523a16.165 16.165 0 0 0-1.747-1.972 4.9 4.9 0 0 1 2.731-1.234Zm-7.917 8.781c.172.34.335.68.529 1.017.194.337.395.656.6.969a14.09 14.09 0 0 1-1.607-.376 14.38 14.38 0 0 1 .478-1.61Zm-.479-4.076a14.085 14.085 0 0 1 1.607-.376c-.205.313-.405.634-.6.969-.195.335-.357.677-.529 1.017-.19-.527-.35-1.064-.478-1.61ZM8.3 12a19.32 19.32 0 0 1 .888-1.75c.33-.568.69-1.118 1.076-1.65.619-.061 1.27-.1 1.954-.1.684 0 1.333.035 1.952.1a19.63 19.63 0 0 1 1.079 1.654c.325.567.621 1.15.887 1.746a18.869 18.869 0 0 1-1.953 3.403 19.218 19.218 0 0 1-3.931 0 20.169 20.169 0 0 1-1.066-1.653A19.324 19.324 0 0 1 8.3 12Zm7.816 2.25c.2-.337.358-.677.53-1.017.191.527.35 1.065.478 1.611a14.48 14.48 0 0 1-1.607.376c.202-.314.404-.635.597-.97h.002Zm.53-3.483c-.172-.34-.335-.68-.53-1.017a20.214 20.214 0 0 0-.6-.97c.542.095 1.078.22 1.606.376a14.111 14.111 0 0 1-.478 1.611h.002ZM12.217 6.34c.4.375.777.773 1.13 1.193-.37-.02-.746-.033-1.129-.033s-.76.013-1.131.033c.353-.42.73-.817 1.13-1.193Zm-4.249-1.7a1.5 1.5 0 0 1 .76-.187 4.9 4.9 0 0 1 2.729 1.233A16.253 16.253 0 0 0 9.71 7.658c-.87.105-1.728.28-2.569.524-.015-.109-.047-.225-.058-.331-.171-1.619.151-2.787.885-3.211ZM3.718 12c0-.9.974-1.83 2.645-2.506.218.857.504 1.695.856 2.506-.352.811-.638 1.65-.856 2.506C4.692 13.83 3.718 12.9 3.718 12Zm4.25 7.361c-.734-.423-1.056-1.593-.885-3.212.011-.106.043-.222.058-.331.84.243 1.697.418 2.564.524a16.37 16.37 0 0 0 1.757 1.982c-1.421 1.109-2.714 1.488-3.494 1.037Zm3.11-2.895c.374.021.753.034 1.14.034.387 0 .765-.013 1.139-.034a14.4 14.4 0 0 1-1.14 1.215 14.248 14.248 0 0 1-1.139-1.215Zm5.39 2.895c-.782.451-2.075.072-3.5-1.038a16.248 16.248 0 0 0 1.757-1.981 16.41 16.41 0 0 0 2.565-.523c.015.108.046.224.058.33.175 1.619-.148 2.789-.88 3.212Zm1.6-4.854A16.563 16.563 0 0 0 17.216 12c.352-.812.638-1.65.856-2.507 1.671.677 2.646 1.607 2.646 2.507 0 .9-.975 1.83-2.646 2.507h-.004Z"></path><path d="M12.215 13.773a1.792 1.792 0 1 0-1.786-1.8v.006a1.787 1.787 0 0 0 1.786 1.794Z"></path></svg>`);
var root_5400 = svg_template(`<title> </title>`);
var root_6400 = svg_template(`<desc> </desc>`);
var root_4400 = svg_template(`<svg><!><!><path d="M21.718 12c0-1.429-1.339-2.681-3.467-3.5.029-.18.077-.37.1-.545.217-2.058-.273-3.543-1.379-4.182-1.235-.714-2.983-.186-4.751 1.239C10.45 3.589 8.7 3.061 7.468 3.773c-1.107.639-1.6 2.124-1.379 4.182.018.175.067.365.095.545-2.127.819-3.466 2.071-3.466 3.5 0 1.429 1.339 2.681 3.466 3.5-.028.18-.077.37-.095.545-.218 2.058.272 3.543 1.379 4.182.376.213.803.322 1.235.316a5.987 5.987 0 0 0 3.514-1.56 5.992 5.992 0 0 0 3.515 1.56 2.44 2.44 0 0 0 1.236-.316c1.106-.639 1.6-2.124 1.379-4.182-.019-.175-.067-.365-.1-.545 2.132-.819 3.471-2.071 3.471-3.5Zm-6.01-7.548a1.5 1.5 0 0 1 .76.187c.733.424 1.055 1.593.884 3.212-.012.106-.043.222-.058.33-.841-.243-1.7-.418-2.57-.523a16.165 16.165 0 0 0-1.747-1.972 4.9 4.9 0 0 1 2.731-1.234Zm-7.917 8.781c.172.34.335.68.529 1.017.194.337.395.656.6.969a14.09 14.09 0 0 1-1.607-.376 14.38 14.38 0 0 1 .478-1.61Zm-.479-4.076a14.085 14.085 0 0 1 1.607-.376c-.205.313-.405.634-.6.969-.195.335-.357.677-.529 1.017-.19-.527-.35-1.064-.478-1.61ZM8.3 12a19.32 19.32 0 0 1 .888-1.75c.33-.568.69-1.118 1.076-1.65.619-.061 1.27-.1 1.954-.1.684 0 1.333.035 1.952.1a19.63 19.63 0 0 1 1.079 1.654c.325.567.621 1.15.887 1.746a18.869 18.869 0 0 1-1.953 3.403 19.218 19.218 0 0 1-3.931 0 20.169 20.169 0 0 1-1.066-1.653A19.324 19.324 0 0 1 8.3 12Zm7.816 2.25c.2-.337.358-.677.53-1.017.191.527.35 1.065.478 1.611a14.48 14.48 0 0 1-1.607.376c.202-.314.404-.635.597-.97h.002Zm.53-3.483c-.172-.34-.335-.68-.53-1.017a20.214 20.214 0 0 0-.6-.97c.542.095 1.078.22 1.606.376a14.111 14.111 0 0 1-.478 1.611h.002ZM12.217 6.34c.4.375.777.773 1.13 1.193-.37-.02-.746-.033-1.129-.033s-.76.013-1.131.033c.353-.42.73-.817 1.13-1.193Zm-4.249-1.7a1.5 1.5 0 0 1 .76-.187 4.9 4.9 0 0 1 2.729 1.233A16.253 16.253 0 0 0 9.71 7.658c-.87.105-1.728.28-2.569.524-.015-.109-.047-.225-.058-.331-.171-1.619.151-2.787.885-3.211ZM3.718 12c0-.9.974-1.83 2.645-2.506.218.857.504 1.695.856 2.506-.352.811-.638 1.65-.856 2.506C4.692 13.83 3.718 12.9 3.718 12Zm4.25 7.361c-.734-.423-1.056-1.593-.885-3.212.011-.106.043-.222.058-.331.84.243 1.697.418 2.564.524a16.37 16.37 0 0 0 1.757 1.982c-1.421 1.109-2.714 1.488-3.494 1.037Zm3.11-2.895c.374.021.753.034 1.14.034.387 0 .765-.013 1.139-.034a14.4 14.4 0 0 1-1.14 1.215 14.248 14.248 0 0 1-1.139-1.215Zm5.39 2.895c-.782.451-2.075.072-3.5-1.038a16.248 16.248 0 0 0 1.757-1.981 16.41 16.41 0 0 0 2.565-.523c.015.108.046.224.058.33.175 1.619-.148 2.789-.88 3.212Zm1.6-4.854A16.563 16.563 0 0 0 17.216 12c.352-.812.638-1.65.856-2.507 1.671.677 2.646 1.607 2.646 2.507 0 .9-.975 1.83-2.646 2.507h-.004Z"></path><path d="M12.215 13.773a1.792 1.792 0 1 0-1.786-1.8v.006a1.787 1.787 0 0 0 1.786 1.794Z"></path></svg>`);
function ReactSolid($$anchor, $$props) {
  if (new.target === ReactSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ReactSolid);
  validate_prop_bindings($$props, [], [], ReactSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "react solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1400();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2400();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3400();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4400();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5400();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6400();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_2 = sibling(node_4);
      var path_3 = sibling(path_2);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ReactSolid);
  ReactSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ReactSolid_default = ReactSolid;
ReactSolid.filename = ".../flowbite-svelte-icons/dist/ReactSolid.svelte";
mark_module_end(ReactSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ReceiptOutline.svelte
mark_module_start();
var root_2401 = svg_template(`<title> </title>`);
var root_3401 = svg_template(`<desc> </desc>`);
var root_1401 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M9 8h6m-6 4h6m-6 4h6M6 3v18l2-2 2 2 2-2 2 2 2-2 2 2V3l-2 2-2-2-2 2-2-2-2 2-2-2Z"></path></svg>`);
var root_5401 = svg_template(`<title> </title>`);
var root_6401 = svg_template(`<desc> </desc>`);
var root_4401 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M9 8h6m-6 4h6m-6 4h6M6 3v18l2-2 2 2 2-2 2 2 2-2 2 2V3l-2 2-2-2-2 2-2-2-2 2-2-2Z"></path></svg>`);
function ReceiptOutline($$anchor, $$props) {
  if (new.target === ReceiptOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ReceiptOutline);
  validate_prop_bindings($$props, [], [], ReceiptOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "receipt outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1401();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2401();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3401();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4401();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5401();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6401();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ReceiptOutline);
  ReceiptOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ReceiptOutline_default = ReceiptOutline;
ReceiptOutline.filename = ".../flowbite-svelte-icons/dist/ReceiptOutline.svelte";
mark_module_end(ReceiptOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ReceiptSolid.svelte
mark_module_start();
var root_2402 = svg_template(`<title> </title>`);
var root_3402 = svg_template(`<desc> </desc>`);
var root_1402 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M5.617 2.076a1 1 0 0 1 1.09.217L8 3.586l1.293-1.293a1 1 0 0 1 1.414 0L12 3.586l1.293-1.293a1 1 0 0 1 1.414 0L16 3.586l1.293-1.293A1 1 0 0 1 19 3v18a1 1 0 0 1-1.707.707L16 20.414l-1.293 1.293a1 1 0 0 1-1.414 0L12 20.414l-1.293 1.293a1 1 0 0 1-1.414 0L8 20.414l-1.293 1.293A1 1 0 0 1 5 21V3a1 1 0 0 1 .617-.924ZM9 7a1 1 0 0 0 0 2h6a1 1 0 1 0 0-2H9Zm0 4a1 1 0 1 0 0 2h6a1 1 0 1 0 0-2H9Zm0 4a1 1 0 1 0 0 2h6a1 1 0 1 0 0-2H9Z" clip-rule="evenodd"></path></svg>`);
var root_5402 = svg_template(`<title> </title>`);
var root_6402 = svg_template(`<desc> </desc>`);
var root_4402 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M5.617 2.076a1 1 0 0 1 1.09.217L8 3.586l1.293-1.293a1 1 0 0 1 1.414 0L12 3.586l1.293-1.293a1 1 0 0 1 1.414 0L16 3.586l1.293-1.293A1 1 0 0 1 19 3v18a1 1 0 0 1-1.707.707L16 20.414l-1.293 1.293a1 1 0 0 1-1.414 0L12 20.414l-1.293 1.293a1 1 0 0 1-1.414 0L8 20.414l-1.293 1.293A1 1 0 0 1 5 21V3a1 1 0 0 1 .617-.924ZM9 7a1 1 0 0 0 0 2h6a1 1 0 1 0 0-2H9Zm0 4a1 1 0 1 0 0 2h6a1 1 0 1 0 0-2H9Zm0 4a1 1 0 1 0 0 2h6a1 1 0 1 0 0-2H9Z" clip-rule="evenodd"></path></svg>`);
function ReceiptSolid($$anchor, $$props) {
  if (new.target === ReceiptSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ReceiptSolid);
  validate_prop_bindings($$props, [], [], ReceiptSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "receipt solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1402();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2402();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3402();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4402();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5402();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6402();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ReceiptSolid);
  ReceiptSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ReceiptSolid_default = ReceiptSolid;
ReceiptSolid.filename = ".../flowbite-svelte-icons/dist/ReceiptSolid.svelte";
mark_module_end(ReceiptSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/RectangleListOutline.svelte
mark_module_start();
var root_2403 = svg_template(`<title> </title>`);
var root_3403 = svg_template(`<desc> </desc>`);
var root_1403 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M11 9h6m-6 3h6m-6 3h6M6.996 9h.01m-.01 3h.01m-.01 3h.01M4 5h16a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1Z"></path></svg>`);
var root_5403 = svg_template(`<title> </title>`);
var root_6403 = svg_template(`<desc> </desc>`);
var root_4403 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M11 9h6m-6 3h6m-6 3h6M6.996 9h.01m-.01 3h.01m-.01 3h.01M4 5h16a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1Z"></path></svg>`);
function RectangleListOutline($$anchor, $$props) {
  if (new.target === RectangleListOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, RectangleListOutline);
  validate_prop_bindings($$props, [], [], RectangleListOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "rectangle list outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1403();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2403();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3403();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4403();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5403();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6403();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(RectangleListOutline);
  RectangleListOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var RectangleListOutline_default = RectangleListOutline;
RectangleListOutline.filename = ".../flowbite-svelte-icons/dist/RectangleListOutline.svelte";
mark_module_end(RectangleListOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/RectangleListSolid.svelte
mark_module_start();
var root_2404 = svg_template(`<title> </title>`);
var root_3404 = svg_template(`<desc> </desc>`);
var root_1404 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M2 6a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V6Zm4.996 2a1 1 0 0 0 0 2h.01a1 1 0 1 0 0-2h-.01ZM11 8a1 1 0 1 0 0 2h6a1 1 0 1 0 0-2h-6Zm-4.004 3a1 1 0 1 0 0 2h.01a1 1 0 1 0 0-2h-.01ZM11 11a1 1 0 1 0 0 2h6a1 1 0 1 0 0-2h-6Zm-4.004 3a1 1 0 1 0 0 2h.01a1 1 0 1 0 0-2h-.01ZM11 14a1 1 0 1 0 0 2h6a1 1 0 1 0 0-2h-6Z" clip-rule="evenodd"></path></svg>`);
var root_5404 = svg_template(`<title> </title>`);
var root_6404 = svg_template(`<desc> </desc>`);
var root_4404 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M2 6a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V6Zm4.996 2a1 1 0 0 0 0 2h.01a1 1 0 1 0 0-2h-.01ZM11 8a1 1 0 1 0 0 2h6a1 1 0 1 0 0-2h-6Zm-4.004 3a1 1 0 1 0 0 2h.01a1 1 0 1 0 0-2h-.01ZM11 11a1 1 0 1 0 0 2h6a1 1 0 1 0 0-2h-6Zm-4.004 3a1 1 0 1 0 0 2h.01a1 1 0 1 0 0-2h-.01ZM11 14a1 1 0 1 0 0 2h6a1 1 0 1 0 0-2h-6Z" clip-rule="evenodd"></path></svg>`);
function RectangleListSolid($$anchor, $$props) {
  if (new.target === RectangleListSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, RectangleListSolid);
  validate_prop_bindings($$props, [], [], RectangleListSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "rectangle list solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1404();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2404();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3404();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4404();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5404();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6404();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(RectangleListSolid);
  RectangleListSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var RectangleListSolid_default = RectangleListSolid;
RectangleListSolid.filename = ".../flowbite-svelte-icons/dist/RectangleListSolid.svelte";
mark_module_end(RectangleListSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/RedditSolid.svelte
mark_module_start();
var root_2405 = svg_template(`<title> </title>`);
var root_3405 = svg_template(`<desc> </desc>`);
var root_1405 = svg_template(`<svg><!><!><path fill="currentColor" d="M12.008 16.521a3.84 3.84 0 0 0 2.47-.77v.04a.281.281 0 0 0 .005-.396.281.281 0 0 0-.395-.005 3.291 3.291 0 0 1-2.09.61 3.266 3.266 0 0 1-2.081-.63.27.27 0 0 0-.38.381 3.84 3.84 0 0 0 2.47.77Z"></path><path fill="currentColor" fill-rule="evenodd" d="M22 12c0 5.523-4.477 10-10 10S2 17.523 2 12 6.477 2 12 2s10 4.477 10 10Zm-4.845-1.407A1.463 1.463 0 0 1 18.67 12a1.46 1.46 0 0 1-.808 1.33c.01.146.01.293 0 .44 0 2.242-2.61 4.061-5.829 4.061s-5.83-1.821-5.83-4.061a3.25 3.25 0 0 1 0-.44 1.458 1.458 0 0 1-.457-2.327 1.458 1.458 0 0 1 2.063-.064 7.163 7.163 0 0 1 3.9-1.23l.738-3.47v-.006a.31.31 0 0 1 .37-.236l2.452.49a1 1 0 1 1-.132.611l-2.14-.45-.649 3.12a7.11 7.11 0 0 1 3.85 1.23c.259-.246.6-.393.957-.405Z" clip-rule="evenodd"></path><path fill="currentColor" d="M15.305 13a1 1 0 1 1-2 0 1 1 0 0 1 2 0Zm-4.625 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"></path></svg>`);
var root_5405 = svg_template(`<title> </title>`);
var root_6405 = svg_template(`<desc> </desc>`);
var root_4405 = svg_template(`<svg><!><!><path fill="currentColor" d="M12.008 16.521a3.84 3.84 0 0 0 2.47-.77v.04a.281.281 0 0 0 .005-.396.281.281 0 0 0-.395-.005 3.291 3.291 0 0 1-2.09.61 3.266 3.266 0 0 1-2.081-.63.27.27 0 0 0-.38.381 3.84 3.84 0 0 0 2.47.77Z"></path><path fill="currentColor" fill-rule="evenodd" d="M22 12c0 5.523-4.477 10-10 10S2 17.523 2 12 6.477 2 12 2s10 4.477 10 10Zm-4.845-1.407A1.463 1.463 0 0 1 18.67 12a1.46 1.46 0 0 1-.808 1.33c.01.146.01.293 0 .44 0 2.242-2.61 4.061-5.829 4.061s-5.83-1.821-5.83-4.061a3.25 3.25 0 0 1 0-.44 1.458 1.458 0 0 1-.457-2.327 1.458 1.458 0 0 1 2.063-.064 7.163 7.163 0 0 1 3.9-1.23l.738-3.47v-.006a.31.31 0 0 1 .37-.236l2.452.49a1 1 0 1 1-.132.611l-2.14-.45-.649 3.12a7.11 7.11 0 0 1 3.85 1.23c.259-.246.6-.393.957-.405Z" clip-rule="evenodd"></path><path fill="currentColor" d="M15.305 13a1 1 0 1 1-2 0 1 1 0 0 1 2 0Zm-4.625 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"></path></svg>`);
function RedditSolid($$anchor, $$props) {
  if (new.target === RedditSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, RedditSolid);
  validate_prop_bindings($$props, [], [], RedditSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "reddit solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1405();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2405();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3405();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      var path_2 = sibling(path_1);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4405();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5405();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6405();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_3 = sibling(node_4);
      var path_4 = sibling(path_3);
      var path_5 = sibling(path_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(RedditSolid);
  RedditSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var RedditSolid_default = RedditSolid;
RedditSolid.filename = ".../flowbite-svelte-icons/dist/RedditSolid.svelte";
mark_module_end(RedditSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/RedoOutline.svelte
mark_module_start();
var root_2406 = svg_template(`<title> </title>`);
var root_3406 = svg_template(`<desc> </desc>`);
var root_1406 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M21 9H8a5 5 0 0 0 0 10h9m4-10-4-4m4 4-4 4"></path></svg>`);
var root_5406 = svg_template(`<title> </title>`);
var root_6406 = svg_template(`<desc> </desc>`);
var root_4406 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M21 9H8a5 5 0 0 0 0 10h9m4-10-4-4m4 4-4 4"></path></svg>`);
function RedoOutline($$anchor, $$props) {
  if (new.target === RedoOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, RedoOutline);
  validate_prop_bindings($$props, [], [], RedoOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "redo outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1406();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2406();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3406();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4406();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5406();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6406();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(RedoOutline);
  RedoOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var RedoOutline_default = RedoOutline;
RedoOutline.filename = ".../flowbite-svelte-icons/dist/RedoOutline.svelte";
mark_module_end(RedoOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/RefreshOutline.svelte
mark_module_start();
var root_2407 = svg_template(`<title> </title>`);
var root_3407 = svg_template(`<desc> </desc>`);
var root_1407 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M17.651 7.65a7.131 7.131 0 0 0-12.68 3.15M18.001 4v4h-4m-7.652 8.35a7.13 7.13 0 0 0 12.68-3.15M6 20v-4h4"></path></svg>`);
var root_5407 = svg_template(`<title> </title>`);
var root_6407 = svg_template(`<desc> </desc>`);
var root_4407 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M17.651 7.65a7.131 7.131 0 0 0-12.68 3.15M18.001 4v4h-4m-7.652 8.35a7.13 7.13 0 0 0 12.68-3.15M6 20v-4h4"></path></svg>`);
function RefreshOutline($$anchor, $$props) {
  if (new.target === RefreshOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, RefreshOutline);
  validate_prop_bindings($$props, [], [], RefreshOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "refresh outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1407();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2407();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3407();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4407();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5407();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6407();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(RefreshOutline);
  RefreshOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var RefreshOutline_default = RefreshOutline;
RefreshOutline.filename = ".../flowbite-svelte-icons/dist/RefreshOutline.svelte";
mark_module_end(RefreshOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ReplyAllOutline.svelte
mark_module_start();
var root_2408 = svg_template(`<title> </title>`);
var root_3408 = svg_template(`<desc> </desc>`);
var root_1408 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M8.757 6 3.24 10.95a1.05 1.05 0 0 0 0 1.549l5.611 5.088m5.73-3.214v1.615a.948.948 0 0 1-1.524.845l-5.108-4.251a1.1 1.1 0 0 1 0-1.646l5.108-4.251a.95.95 0 0 1 1.524.846v1.7c3.312 0 6 2.979 6 6.654v1.329a.7.7 0 0 1-1.345.353 5.174 5.174 0 0 0-4.652-3.191l-.003-.003Z"></path></svg>`);
var root_5408 = svg_template(`<title> </title>`);
var root_6408 = svg_template(`<desc> </desc>`);
var root_4408 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M8.757 6 3.24 10.95a1.05 1.05 0 0 0 0 1.549l5.611 5.088m5.73-3.214v1.615a.948.948 0 0 1-1.524.845l-5.108-4.251a1.1 1.1 0 0 1 0-1.646l5.108-4.251a.95.95 0 0 1 1.524.846v1.7c3.312 0 6 2.979 6 6.654v1.329a.7.7 0 0 1-1.345.353 5.174 5.174 0 0 0-4.652-3.191l-.003-.003Z"></path></svg>`);
function ReplyAllOutline($$anchor, $$props) {
  if (new.target === ReplyAllOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ReplyAllOutline);
  validate_prop_bindings($$props, [], [], ReplyAllOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "reply all outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1408();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2408();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3408();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4408();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5408();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6408();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ReplyAllOutline);
  ReplyAllOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ReplyAllOutline_default = ReplyAllOutline;
ReplyAllOutline.filename = ".../flowbite-svelte-icons/dist/ReplyAllOutline.svelte";
mark_module_end(ReplyAllOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ReplyAllSolid.svelte
mark_module_start();
var root_2409 = svg_template(`<title> </title>`);
var root_3409 = svg_template(`<desc> </desc>`);
var root_1409 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M9.484 6.743c.41-.368.443-1 .077-1.41a.99.99 0 0 0-1.405-.078L2.67 10.203l-.007.006A2.048 2.048 0 0 0 2 11.721a2.058 2.058 0 0 0 .662 1.51l5.584 5.09a.99.99 0 0 0 1.405-.07 1.003 1.003 0 0 0-.07-1.412l-5.577-5.082a.05.05 0 0 1 0-.072l5.48-4.942Zm6.543 9.199v-.42a4.168 4.168 0 0 1 2.715 2.415c.154.382.44.695.806.88a1.683 1.683 0 0 0 2.167-.571c.214-.322.312-.707.279-1.092V15.88c0-3.77-2.526-7.039-5.966-7.573V7.57a1.957 1.957 0 0 0-.994-1.838 1.931 1.931 0 0 0-2.153.184L7.8 10.164a.753.753 0 0 0-.012.011l-.011.01a2.098 2.098 0 0 0-.703 1.57 2.108 2.108 0 0 0 .726 1.59l5.08 4.25a1.933 1.933 0 0 0 2.929-.614c.167-.32.242-.68.218-1.04Z" clip-rule="evenodd"></path></svg>`);
var root_5409 = svg_template(`<title> </title>`);
var root_6409 = svg_template(`<desc> </desc>`);
var root_4409 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M9.484 6.743c.41-.368.443-1 .077-1.41a.99.99 0 0 0-1.405-.078L2.67 10.203l-.007.006A2.048 2.048 0 0 0 2 11.721a2.058 2.058 0 0 0 .662 1.51l5.584 5.09a.99.99 0 0 0 1.405-.07 1.003 1.003 0 0 0-.07-1.412l-5.577-5.082a.05.05 0 0 1 0-.072l5.48-4.942Zm6.543 9.199v-.42a4.168 4.168 0 0 1 2.715 2.415c.154.382.44.695.806.88a1.683 1.683 0 0 0 2.167-.571c.214-.322.312-.707.279-1.092V15.88c0-3.77-2.526-7.039-5.966-7.573V7.57a1.957 1.957 0 0 0-.994-1.838 1.931 1.931 0 0 0-2.153.184L7.8 10.164a.753.753 0 0 0-.012.011l-.011.01a2.098 2.098 0 0 0-.703 1.57 2.108 2.108 0 0 0 .726 1.59l5.08 4.25a1.933 1.933 0 0 0 2.929-.614c.167-.32.242-.68.218-1.04Z" clip-rule="evenodd"></path></svg>`);
function ReplyAllSolid($$anchor, $$props) {
  if (new.target === ReplyAllSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ReplyAllSolid);
  validate_prop_bindings($$props, [], [], ReplyAllSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "reply all solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1409();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2409();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3409();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4409();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5409();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6409();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ReplyAllSolid);
  ReplyAllSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ReplyAllSolid_default = ReplyAllSolid;
ReplyAllSolid.filename = ".../flowbite-svelte-icons/dist/ReplyAllSolid.svelte";
mark_module_end(ReplyAllSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ReplyOutline.svelte
mark_module_start();
var root_2410 = svg_template(`<title> </title>`);
var root_3410 = svg_template(`<desc> </desc>`);
var root_1410 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M14.5 8.046H11V6.119c0-.921-.9-1.446-1.524-.894l-5.108 4.49a1.2 1.2 0 0 0 0 1.739l5.108 4.49c.624.556 1.524.027 1.524-.893v-1.928h2a3.023 3.023 0 0 1 3 3.046V19a5.593 5.593 0 0 0-1.5-10.954Z"></path></svg>`);
var root_5410 = svg_template(`<title> </title>`);
var root_6410 = svg_template(`<desc> </desc>`);
var root_4410 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M14.5 8.046H11V6.119c0-.921-.9-1.446-1.524-.894l-5.108 4.49a1.2 1.2 0 0 0 0 1.739l5.108 4.49c.624.556 1.524.027 1.524-.893v-1.928h2a3.023 3.023 0 0 1 3 3.046V19a5.593 5.593 0 0 0-1.5-10.954Z"></path></svg>`);
function ReplyOutline($$anchor, $$props) {
  if (new.target === ReplyOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ReplyOutline);
  validate_prop_bindings($$props, [], [], ReplyOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "reply outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1410();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2410();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3410();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4410();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5410();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6410();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ReplyOutline);
  ReplyOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ReplyOutline_default = ReplyOutline;
ReplyOutline.filename = ".../flowbite-svelte-icons/dist/ReplyOutline.svelte";
mark_module_end(ReplyOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ReplySolid.svelte
mark_module_start();
var root_2411 = svg_template(`<title> </title>`);
var root_3411 = svg_template(`<desc> </desc>`);
var root_1411 = svg_template(`<svg><!><!><path d="M14.502 7.046h-2.5v-.928a2.122 2.122 0 0 0-1.199-1.954 1.827 1.827 0 0 0-1.984.311L3.71 8.965a2.2 2.2 0 0 0 0 3.24L8.82 16.7a1.829 1.829 0 0 0 1.985.31 2.121 2.121 0 0 0 1.199-1.959v-.928h1a2.025 2.025 0 0 1 1.999 2.047V19a1 1 0 0 0 1.275.961 6.59 6.59 0 0 0 4.662-7.22 6.593 6.593 0 0 0-6.437-5.695Z"></path></svg>`);
var root_5411 = svg_template(`<title> </title>`);
var root_6411 = svg_template(`<desc> </desc>`);
var root_4411 = svg_template(`<svg><!><!><path d="M14.502 7.046h-2.5v-.928a2.122 2.122 0 0 0-1.199-1.954 1.827 1.827 0 0 0-1.984.311L3.71 8.965a2.2 2.2 0 0 0 0 3.24L8.82 16.7a1.829 1.829 0 0 0 1.985.31 2.121 2.121 0 0 0 1.199-1.959v-.928h1a2.025 2.025 0 0 1 1.999 2.047V19a1 1 0 0 0 1.275.961 6.59 6.59 0 0 0 4.662-7.22 6.593 6.593 0 0 0-6.437-5.695Z"></path></svg>`);
function ReplySolid($$anchor, $$props) {
  if (new.target === ReplySolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ReplySolid);
  validate_prop_bindings($$props, [], [], ReplySolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "reply solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1411();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2411();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3411();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4411();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5411();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6411();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ReplySolid);
  ReplySolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ReplySolid_default = ReplySolid;
ReplySolid.filename = ".../flowbite-svelte-icons/dist/ReplySolid.svelte";
mark_module_end(ReplySolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/RestoreWindowOutline.svelte
mark_module_start();
var root_2412 = svg_template(`<title> </title>`);
var root_3412 = svg_template(`<desc> </desc>`);
var root_1412 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M3 11.5h13m-13 0V18a1 1 0 0 0 1 1h11a1 1 0 0 0 1-1v-6.5m-13 0V9a1 1 0 0 1 1-1h11a1 1 0 0 1 1 1v2.5M9 5h11a1 1 0 0 1 1 1v9a1 1 0 0 1-1 1h-1"></path></svg>`);
var root_5412 = svg_template(`<title> </title>`);
var root_6412 = svg_template(`<desc> </desc>`);
var root_4412 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M3 11.5h13m-13 0V18a1 1 0 0 0 1 1h11a1 1 0 0 0 1-1v-6.5m-13 0V9a1 1 0 0 1 1-1h11a1 1 0 0 1 1 1v2.5M9 5h11a1 1 0 0 1 1 1v9a1 1 0 0 1-1 1h-1"></path></svg>`);
function RestoreWindowOutline($$anchor, $$props) {
  if (new.target === RestoreWindowOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, RestoreWindowOutline);
  validate_prop_bindings($$props, [], [], RestoreWindowOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "restore window outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1412();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2412();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3412();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4412();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5412();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6412();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(RestoreWindowOutline);
  RestoreWindowOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var RestoreWindowOutline_default = RestoreWindowOutline;
RestoreWindowOutline.filename = ".../flowbite-svelte-icons/dist/RestoreWindowOutline.svelte";
mark_module_end(RestoreWindowOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/RocketOutline.svelte
mark_module_start();
var root_2413 = svg_template(`<title> </title>`);
var root_3413 = svg_template(`<desc> </desc>`);
var root_1413 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m10.051 8.102-3.778.322-1.994 1.994a.94.94 0 0 0 .533 1.6l2.698.316m8.39 1.617-.322 3.78-1.994 1.994a.94.94 0 0 1-1.595-.533l-.4-2.652m8.166-11.174a1.366 1.366 0 0 0-1.12-1.12c-1.616-.279-4.906-.623-6.38.853-1.671 1.672-5.211 8.015-6.31 10.023a.932.932 0 0 0 .162 1.111l.828.835.833.832a.932.932 0 0 0 1.111.163c2.008-1.102 8.35-4.642 10.021-6.312 1.475-1.478 1.133-4.77.855-6.385Zm-2.961 3.722a1.88 1.88 0 1 1-3.76 0 1.88 1.88 0 0 1 3.76 0Z"></path></svg>`);
var root_5413 = svg_template(`<title> </title>`);
var root_6413 = svg_template(`<desc> </desc>`);
var root_4413 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m10.051 8.102-3.778.322-1.994 1.994a.94.94 0 0 0 .533 1.6l2.698.316m8.39 1.617-.322 3.78-1.994 1.994a.94.94 0 0 1-1.595-.533l-.4-2.652m8.166-11.174a1.366 1.366 0 0 0-1.12-1.12c-1.616-.279-4.906-.623-6.38.853-1.671 1.672-5.211 8.015-6.31 10.023a.932.932 0 0 0 .162 1.111l.828.835.833.832a.932.932 0 0 0 1.111.163c2.008-1.102 8.35-4.642 10.021-6.312 1.475-1.478 1.133-4.77.855-6.385Zm-2.961 3.722a1.88 1.88 0 1 1-3.76 0 1.88 1.88 0 0 1 3.76 0Z"></path></svg>`);
function RocketOutline($$anchor, $$props) {
  if (new.target === RocketOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, RocketOutline);
  validate_prop_bindings($$props, [], [], RocketOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "rocket outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1413();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2413();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3413();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4413();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5413();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6413();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(RocketOutline);
  RocketOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var RocketOutline_default = RocketOutline;
RocketOutline.filename = ".../flowbite-svelte-icons/dist/RocketOutline.svelte";
mark_module_end(RocketOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/RocketSolid.svelte
mark_module_start();
var root_2414 = svg_template(`<title> </title>`);
var root_3414 = svg_template(`<desc> </desc>`);
var root_1414 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M20.337 3.664c.213.212.354.486.404.782.294 1.711.657 5.195-.906 6.76-1.77 1.768-8.485 5.517-10.611 6.683a.987.987 0 0 1-1.176-.173l-.882-.88-.877-.884a.988.988 0 0 1-.173-1.177c1.165-2.126 4.913-8.841 6.682-10.611 1.562-1.563 5.046-1.198 6.757-.904.296.05.57.191.782.404ZM5.407 7.576l4-.341-2.69 4.48-2.857-.334a.996.996 0 0 1-.565-1.694l2.112-2.111Zm11.357 7.02-.34 4-2.111 2.113a.996.996 0 0 1-1.69-.565l-.422-2.807 4.563-2.74Zm.84-6.21a1.99 1.99 0 1 1-3.98 0 1.99 1.99 0 0 1 3.98 0Z" clip-rule="evenodd"></path></svg>`);
var root_5414 = svg_template(`<title> </title>`);
var root_6414 = svg_template(`<desc> </desc>`);
var root_4414 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M20.337 3.664c.213.212.354.486.404.782.294 1.711.657 5.195-.906 6.76-1.77 1.768-8.485 5.517-10.611 6.683a.987.987 0 0 1-1.176-.173l-.882-.88-.877-.884a.988.988 0 0 1-.173-1.177c1.165-2.126 4.913-8.841 6.682-10.611 1.562-1.563 5.046-1.198 6.757-.904.296.05.57.191.782.404ZM5.407 7.576l4-.341-2.69 4.48-2.857-.334a.996.996 0 0 1-.565-1.694l2.112-2.111Zm11.357 7.02-.34 4-2.111 2.113a.996.996 0 0 1-1.69-.565l-.422-2.807 4.563-2.74Zm.84-6.21a1.99 1.99 0 1 1-3.98 0 1.99 1.99 0 0 1 3.98 0Z" clip-rule="evenodd"></path></svg>`);
function RocketSolid($$anchor, $$props) {
  if (new.target === RocketSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, RocketSolid);
  validate_prop_bindings($$props, [], [], RocketSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "rocket solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1414();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2414();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3414();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4414();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5414();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6414();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(RocketSolid);
  RocketSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var RocketSolid_default = RocketSolid;
RocketSolid.filename = ".../flowbite-svelte-icons/dist/RocketSolid.svelte";
mark_module_end(RocketSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/RulerCombinedOutline.svelte
mark_module_start();
var root_2415 = svg_template(`<title> </title>`);
var root_3415 = svg_template(`<desc> </desc>`);
var root_1415 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M9 7H7m2 3H7m2 3H7m4 2v2m3-2v2m3-2v2M4 5v14a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1v-3a1 1 0 0 0-1-1h-9a1 1 0 0 1-1-1V5a1 1 0 0 0-1-1H5a1 1 0 0 0-1 1Z"></path></svg>`);
var root_5415 = svg_template(`<title> </title>`);
var root_6415 = svg_template(`<desc> </desc>`);
var root_4415 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M9 7H7m2 3H7m2 3H7m4 2v2m3-2v2m3-2v2M4 5v14a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1v-3a1 1 0 0 0-1-1h-9a1 1 0 0 1-1-1V5a1 1 0 0 0-1-1H5a1 1 0 0 0-1 1Z"></path></svg>`);
function RulerCombinedOutline($$anchor, $$props) {
  if (new.target === RulerCombinedOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, RulerCombinedOutline);
  validate_prop_bindings($$props, [], [], RulerCombinedOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "ruler combined outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1415();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2415();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3415();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4415();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5415();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6415();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(RulerCombinedOutline);
  RulerCombinedOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var RulerCombinedOutline_default = RulerCombinedOutline;
RulerCombinedOutline.filename = ".../flowbite-svelte-icons/dist/RulerCombinedOutline.svelte";
mark_module_end(RulerCombinedOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/SalePercentOutline.svelte
mark_module_start();
var root_2416 = svg_template(`<title> </title>`);
var root_3416 = svg_template(`<desc> </desc>`);
var root_1416 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M8.891 15.107 15.11 8.89m-5.183-.52h.01m3.089 7.254h.01M14.08 3.902a2.849 2.849 0 0 0 2.176.902 2.845 2.845 0 0 1 2.94 2.94 2.849 2.849 0 0 0 .901 2.176 2.847 2.847 0 0 1 0 4.16 2.848 2.848 0 0 0-.901 2.175 2.843 2.843 0 0 1-2.94 2.94 2.848 2.848 0 0 0-2.176.902 2.847 2.847 0 0 1-4.16 0 2.85 2.85 0 0 0-2.176-.902 2.845 2.845 0 0 1-2.94-2.94 2.848 2.848 0 0 0-.901-2.176 2.848 2.848 0 0 1 0-4.16 2.849 2.849 0 0 0 .901-2.176 2.845 2.845 0 0 1 2.941-2.94 2.849 2.849 0 0 0 2.176-.901 2.847 2.847 0 0 1 4.159 0Z"></path></svg>`);
var root_5416 = svg_template(`<title> </title>`);
var root_6416 = svg_template(`<desc> </desc>`);
var root_4416 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M8.891 15.107 15.11 8.89m-5.183-.52h.01m3.089 7.254h.01M14.08 3.902a2.849 2.849 0 0 0 2.176.902 2.845 2.845 0 0 1 2.94 2.94 2.849 2.849 0 0 0 .901 2.176 2.847 2.847 0 0 1 0 4.16 2.848 2.848 0 0 0-.901 2.175 2.843 2.843 0 0 1-2.94 2.94 2.848 2.848 0 0 0-2.176.902 2.847 2.847 0 0 1-4.16 0 2.85 2.85 0 0 0-2.176-.902 2.845 2.845 0 0 1-2.94-2.94 2.848 2.848 0 0 0-.901-2.176 2.848 2.848 0 0 1 0-4.16 2.849 2.849 0 0 0 .901-2.176 2.845 2.845 0 0 1 2.941-2.94 2.849 2.849 0 0 0 2.176-.901 2.847 2.847 0 0 1 4.159 0Z"></path></svg>`);
function SalePercentOutline($$anchor, $$props) {
  if (new.target === SalePercentOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, SalePercentOutline);
  validate_prop_bindings($$props, [], [], SalePercentOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "sale percent outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1416();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2416();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3416();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4416();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5416();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6416();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(SalePercentOutline);
  SalePercentOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var SalePercentOutline_default = SalePercentOutline;
SalePercentOutline.filename = ".../flowbite-svelte-icons/dist/SalePercentOutline.svelte";
mark_module_end(SalePercentOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/SalePercentSolid.svelte
mark_module_start();
var root_2417 = svg_template(`<title> </title>`);
var root_3417 = svg_template(`<desc> </desc>`);
var root_1417 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M20.29 8.567c.133.323.334.613.59.85v.002a3.536 3.536 0 0 1 0 5.166 2.442 2.442 0 0 0-.776 1.868 3.534 3.534 0 0 1-3.651 3.653 2.483 2.483 0 0 0-1.87.776 3.537 3.537 0 0 1-5.164 0 2.44 2.44 0 0 0-1.87-.776 3.533 3.533 0 0 1-3.653-3.654 2.44 2.44 0 0 0-.775-1.868 3.537 3.537 0 0 1 0-5.166 2.44 2.44 0 0 0 .775-1.87 3.55 3.55 0 0 1 1.033-2.62 3.594 3.594 0 0 1 2.62-1.032 2.401 2.401 0 0 0 1.87-.775 3.535 3.535 0 0 1 5.165 0 2.444 2.444 0 0 0 1.869.775 3.532 3.532 0 0 1 3.652 3.652c-.012.35.051.697.184 1.02ZM9.927 7.371a1 1 0 1 0 0 2h.01a1 1 0 0 0 0-2h-.01Zm5.889 2.226a1 1 0 0 0-1.414-1.415L8.184 14.4a1 1 0 0 0 1.414 1.414l6.218-6.217Zm-2.79 5.028a1 1 0 1 0 0 2h.01a1 1 0 1 0 0-2h-.01Z" clip-rule="evenodd"></path></svg>`);
var root_5417 = svg_template(`<title> </title>`);
var root_6417 = svg_template(`<desc> </desc>`);
var root_4417 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M20.29 8.567c.133.323.334.613.59.85v.002a3.536 3.536 0 0 1 0 5.166 2.442 2.442 0 0 0-.776 1.868 3.534 3.534 0 0 1-3.651 3.653 2.483 2.483 0 0 0-1.87.776 3.537 3.537 0 0 1-5.164 0 2.44 2.44 0 0 0-1.87-.776 3.533 3.533 0 0 1-3.653-3.654 2.44 2.44 0 0 0-.775-1.868 3.537 3.537 0 0 1 0-5.166 2.44 2.44 0 0 0 .775-1.87 3.55 3.55 0 0 1 1.033-2.62 3.594 3.594 0 0 1 2.62-1.032 2.401 2.401 0 0 0 1.87-.775 3.535 3.535 0 0 1 5.165 0 2.444 2.444 0 0 0 1.869.775 3.532 3.532 0 0 1 3.652 3.652c-.012.35.051.697.184 1.02ZM9.927 7.371a1 1 0 1 0 0 2h.01a1 1 0 0 0 0-2h-.01Zm5.889 2.226a1 1 0 0 0-1.414-1.415L8.184 14.4a1 1 0 0 0 1.414 1.414l6.218-6.217Zm-2.79 5.028a1 1 0 1 0 0 2h.01a1 1 0 1 0 0-2h-.01Z" clip-rule="evenodd"></path></svg>`);
function SalePercentSolid($$anchor, $$props) {
  if (new.target === SalePercentSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, SalePercentSolid);
  validate_prop_bindings($$props, [], [], SalePercentSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "sale percent solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1417();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2417();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3417();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4417();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5417();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6417();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(SalePercentSolid);
  SalePercentSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var SalePercentSolid_default = SalePercentSolid;
SalePercentSolid.filename = ".../flowbite-svelte-icons/dist/SalePercentSolid.svelte";
mark_module_end(SalePercentSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ScaleBalancedOutline.svelte
mark_module_start();
var root_2418 = svg_template(`<title> </title>`);
var root_3418 = svg_template(`<desc> </desc>`);
var root_1418 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M5.5 21h13M12 21V7m0 0a2 2 0 1 0 0-4 2 2 0 0 0 0 4Zm2-1.8c3.073.661 2.467 2.8 5 2.8M5 8c3.359 0 2.192-2.115 5.012-2.793M7 9.556V7.75m0 1.806-1.95 4.393a.773.773 0 0 0 .37.962.785.785 0 0 0 .362.089h2.436a.785.785 0 0 0 .643-.335.776.776 0 0 0 .09-.716L7 9.556Zm10 0V7.313m0 2.243-1.95 4.393a.773.773 0 0 0 .37.962.786.786 0 0 0 .362.089h2.436a.785.785 0 0 0 .643-.335.775.775 0 0 0 .09-.716L17 9.556Z"></path></svg>`);
var root_5418 = svg_template(`<title> </title>`);
var root_6418 = svg_template(`<desc> </desc>`);
var root_4418 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M5.5 21h13M12 21V7m0 0a2 2 0 1 0 0-4 2 2 0 0 0 0 4Zm2-1.8c3.073.661 2.467 2.8 5 2.8M5 8c3.359 0 2.192-2.115 5.012-2.793M7 9.556V7.75m0 1.806-1.95 4.393a.773.773 0 0 0 .37.962.785.785 0 0 0 .362.089h2.436a.785.785 0 0 0 .643-.335.776.776 0 0 0 .09-.716L7 9.556Zm10 0V7.313m0 2.243-1.95 4.393a.773.773 0 0 0 .37.962.786.786 0 0 0 .362.089h2.436a.785.785 0 0 0 .643-.335.775.775 0 0 0 .09-.716L17 9.556Z"></path></svg>`);
function ScaleBalancedOutline($$anchor, $$props) {
  if (new.target === ScaleBalancedOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ScaleBalancedOutline);
  validate_prop_bindings($$props, [], [], ScaleBalancedOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "scale balanced outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1418();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2418();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3418();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4418();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5418();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6418();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ScaleBalancedOutline);
  ScaleBalancedOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ScaleBalancedOutline_default = ScaleBalancedOutline;
ScaleBalancedOutline.filename = ".../flowbite-svelte-icons/dist/ScaleBalancedOutline.svelte";
mark_module_end(ScaleBalancedOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ScaleBalancedSolid.svelte
mark_module_start();
var root_2419 = svg_template(`<title> </title>`);
var root_3419 = svg_template(`<desc> </desc>`);
var root_1419 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M12 4a1 1 0 1 0 0 2 1 1 0 0 0 0-2Zm-2.952.462c-.483.19-.868.432-1.19.71-.363.315-.638.677-.831.93l-.106.14c-.21.268-.36.418-.574.527C6.125 6.883 5.74 7 5 7a1 1 0 0 0 0 2c.364 0 .696-.022 1-.067v.41l-1.864 4.2a1.774 1.774 0 0 0 .821 2.255c.255.133.538.202.825.202h2.436a1.786 1.786 0 0 0 1.768-1.558 1.774 1.774 0 0 0-.122-.899L8 9.343V8.028c.2-.188.36-.38.495-.553.062-.079.118-.15.168-.217.185-.24.311-.406.503-.571a1.89 1.89 0 0 1 .24-.177A3.01 3.01 0 0 0 11 7.829V20H5.5a1 1 0 1 0 0 2h13a1 1 0 1 0 0-2H13V7.83a3.01 3.01 0 0 0 1.63-1.387c.206.091.373.19.514.29.31.219.532.465.811.78l.025.027.02.023v1.78l-1.864 4.2a1.774 1.774 0 0 0 .821 2.255c.255.133.538.202.825.202h2.436a1.785 1.785 0 0 0 1.768-1.558 1.773 1.773 0 0 0-.122-.899L18 9.343v-.452c.302.072.633.109 1 .109a1 1 0 1 0 0-2c-.48 0-.731-.098-.899-.2-.2-.12-.363-.293-.651-.617l-.024-.026c-.267-.3-.622-.7-1.127-1.057a5.152 5.152 0 0 0-1.355-.678 3.001 3.001 0 0 0-5.896.04Z" clip-rule="evenodd"></path></svg>`);
var root_5419 = svg_template(`<title> </title>`);
var root_6419 = svg_template(`<desc> </desc>`);
var root_4419 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M12 4a1 1 0 1 0 0 2 1 1 0 0 0 0-2Zm-2.952.462c-.483.19-.868.432-1.19.71-.363.315-.638.677-.831.93l-.106.14c-.21.268-.36.418-.574.527C6.125 6.883 5.74 7 5 7a1 1 0 0 0 0 2c.364 0 .696-.022 1-.067v.41l-1.864 4.2a1.774 1.774 0 0 0 .821 2.255c.255.133.538.202.825.202h2.436a1.786 1.786 0 0 0 1.768-1.558 1.774 1.774 0 0 0-.122-.899L8 9.343V8.028c.2-.188.36-.38.495-.553.062-.079.118-.15.168-.217.185-.24.311-.406.503-.571a1.89 1.89 0 0 1 .24-.177A3.01 3.01 0 0 0 11 7.829V20H5.5a1 1 0 1 0 0 2h13a1 1 0 1 0 0-2H13V7.83a3.01 3.01 0 0 0 1.63-1.387c.206.091.373.19.514.29.31.219.532.465.811.78l.025.027.02.023v1.78l-1.864 4.2a1.774 1.774 0 0 0 .821 2.255c.255.133.538.202.825.202h2.436a1.785 1.785 0 0 0 1.768-1.558 1.773 1.773 0 0 0-.122-.899L18 9.343v-.452c.302.072.633.109 1 .109a1 1 0 1 0 0-2c-.48 0-.731-.098-.899-.2-.2-.12-.363-.293-.651-.617l-.024-.026c-.267-.3-.622-.7-1.127-1.057a5.152 5.152 0 0 0-1.355-.678 3.001 3.001 0 0 0-5.896.04Z" clip-rule="evenodd"></path></svg>`);
function ScaleBalancedSolid($$anchor, $$props) {
  if (new.target === ScaleBalancedSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ScaleBalancedSolid);
  validate_prop_bindings($$props, [], [], ScaleBalancedSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "scale balanced solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1419();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2419();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3419();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4419();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5419();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6419();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ScaleBalancedSolid);
  ScaleBalancedSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ScaleBalancedSolid_default = ScaleBalancedSolid;
ScaleBalancedSolid.filename = ".../flowbite-svelte-icons/dist/ScaleBalancedSolid.svelte";
mark_module_end(ScaleBalancedSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/SearchOutline.svelte
mark_module_start();
var root_2420 = svg_template(`<title> </title>`);
var root_3420 = svg_template(`<desc> </desc>`);
var root_1420 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" d="m21 21-3.5-3.5M17 10a7 7 0 1 1-14 0 7 7 0 0 1 14 0Z"></path></svg>`);
var root_5420 = svg_template(`<title> </title>`);
var root_6420 = svg_template(`<desc> </desc>`);
var root_4420 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" d="m21 21-3.5-3.5M17 10a7 7 0 1 1-14 0 7 7 0 0 1 14 0Z"></path></svg>`);
function SearchOutline($$anchor, $$props) {
  if (new.target === SearchOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, SearchOutline);
  validate_prop_bindings($$props, [], [], SearchOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "search outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1420();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2420();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3420();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4420();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5420();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6420();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(SearchOutline);
  SearchOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var SearchOutline_default = SearchOutline;
SearchOutline.filename = ".../flowbite-svelte-icons/dist/SearchOutline.svelte";
mark_module_end(SearchOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/SearchSolid.svelte
mark_module_start();
var root_2421 = svg_template(`<title> </title>`);
var root_3421 = svg_template(`<desc> </desc>`);
var root_1421 = svg_template(`<svg><!><!><path d="M10 2a8 8 0 1 0 0 16 8 8 0 0 0 0-16Z"></path><path fill-rule="evenodd" d="M21.707 21.707a1 1 0 0 1-1.414 0l-3.5-3.5a1 1 0 0 1 1.414-1.414l3.5 3.5a1 1 0 0 1 0 1.414Z" clip-rule="evenodd"></path></svg>`);
var root_5421 = svg_template(`<title> </title>`);
var root_6421 = svg_template(`<desc> </desc>`);
var root_4421 = svg_template(`<svg><!><!><path d="M10 2a8 8 0 1 0 0 16 8 8 0 0 0 0-16Z"></path><path fill-rule="evenodd" d="M21.707 21.707a1 1 0 0 1-1.414 0l-3.5-3.5a1 1 0 0 1 1.414-1.414l3.5 3.5a1 1 0 0 1 0 1.414Z" clip-rule="evenodd"></path></svg>`);
function SearchSolid($$anchor, $$props) {
  if (new.target === SearchSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, SearchSolid);
  validate_prop_bindings($$props, [], [], SearchSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "search solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1421();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2421();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3421();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4421();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5421();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6421();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_2 = sibling(node_4);
      var path_3 = sibling(path_2);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(SearchSolid);
  SearchSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var SearchSolid_default = SearchSolid;
SearchSolid.filename = ".../flowbite-svelte-icons/dist/SearchSolid.svelte";
mark_module_end(SearchSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ServerOutline.svelte
mark_module_start();
var root_2422 = svg_template(`<title> </title>`);
var root_3422 = svg_template(`<desc> </desc>`);
var root_1422 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M5 12a1 1 0 0 0-1 1v4a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1v-4a1 1 0 0 0-1-1M5 12h14M5 12a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1h14a1 1 0 0 1 1 1v4a1 1 0 0 1-1 1m-2 3h.01M14 15h.01M17 9h.01M14 9h.01"></path></svg>`);
var root_5422 = svg_template(`<title> </title>`);
var root_6422 = svg_template(`<desc> </desc>`);
var root_4422 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M5 12a1 1 0 0 0-1 1v4a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1v-4a1 1 0 0 0-1-1M5 12h14M5 12a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1h14a1 1 0 0 1 1 1v4a1 1 0 0 1-1 1m-2 3h.01M14 15h.01M17 9h.01M14 9h.01"></path></svg>`);
function ServerOutline($$anchor, $$props) {
  if (new.target === ServerOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ServerOutline);
  validate_prop_bindings($$props, [], [], ServerOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "server outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1422();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2422();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3422();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4422();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5422();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6422();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ServerOutline);
  ServerOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ServerOutline_default = ServerOutline;
ServerOutline.filename = ".../flowbite-svelte-icons/dist/ServerOutline.svelte";
mark_module_end(ServerOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ServerSolid.svelte
mark_module_start();
var root_2423 = svg_template(`<title> </title>`);
var root_3423 = svg_template(`<desc> </desc>`);
var root_1423 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M5 5a2 2 0 0 0-2 2v3a1 1 0 0 0 1 1h16a1 1 0 0 0 1-1V7a2 2 0 0 0-2-2H5Zm9 2a1 1 0 1 0 0 2h.01a1 1 0 1 0 0-2H14Zm3 0a1 1 0 1 0 0 2h.01a1 1 0 1 0 0-2H17ZM3 17v-3a1 1 0 0 1 1-1h16a1 1 0 0 1 1 1v3a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2Zm11-2a1 1 0 1 0 0 2h.01a1 1 0 1 0 0-2H14Zm3 0a1 1 0 1 0 0 2h.01a1 1 0 1 0 0-2H17Z" clip-rule="evenodd"></path></svg>`);
var root_5423 = svg_template(`<title> </title>`);
var root_6423 = svg_template(`<desc> </desc>`);
var root_4423 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M5 5a2 2 0 0 0-2 2v3a1 1 0 0 0 1 1h16a1 1 0 0 0 1-1V7a2 2 0 0 0-2-2H5Zm9 2a1 1 0 1 0 0 2h.01a1 1 0 1 0 0-2H14Zm3 0a1 1 0 1 0 0 2h.01a1 1 0 1 0 0-2H17ZM3 17v-3a1 1 0 0 1 1-1h16a1 1 0 0 1 1 1v3a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2Zm11-2a1 1 0 1 0 0 2h.01a1 1 0 1 0 0-2H14Zm3 0a1 1 0 1 0 0 2h.01a1 1 0 1 0 0-2H17Z" clip-rule="evenodd"></path></svg>`);
function ServerSolid($$anchor, $$props) {
  if (new.target === ServerSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ServerSolid);
  validate_prop_bindings($$props, [], [], ServerSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "server solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1423();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2423();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3423();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4423();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5423();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6423();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ServerSolid);
  ServerSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ServerSolid_default = ServerSolid;
ServerSolid.filename = ".../flowbite-svelte-icons/dist/ServerSolid.svelte";
mark_module_end(ServerSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ShareAllOutline.svelte
mark_module_start();
var root_2424 = svg_template(`<title> </title>`);
var root_3424 = svg_template(`<desc> </desc>`);
var root_1424 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m15.141 6 5.518 4.95a1.05 1.05 0 0 1 0 1.549l-5.612 5.088m-6.154-3.214v1.615a.95.95 0 0 0 1.525.845l5.108-4.251a1.1 1.1 0 0 0 0-1.646l-5.108-4.251a.95.95 0 0 0-1.525.846v1.7c-3.312 0-6 2.979-6 6.654v1.329a.7.7 0 0 0 1.344.353 5.174 5.174 0 0 1 4.652-3.191l.004-.003Z"></path></svg>`);
var root_5424 = svg_template(`<title> </title>`);
var root_6424 = svg_template(`<desc> </desc>`);
var root_4424 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m15.141 6 5.518 4.95a1.05 1.05 0 0 1 0 1.549l-5.612 5.088m-6.154-3.214v1.615a.95.95 0 0 0 1.525.845l5.108-4.251a1.1 1.1 0 0 0 0-1.646l-5.108-4.251a.95.95 0 0 0-1.525.846v1.7c-3.312 0-6 2.979-6 6.654v1.329a.7.7 0 0 0 1.344.353 5.174 5.174 0 0 1 4.652-3.191l.004-.003Z"></path></svg>`);
function ShareAllOutline($$anchor, $$props) {
  if (new.target === ShareAllOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ShareAllOutline);
  validate_prop_bindings($$props, [], [], ShareAllOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "share all outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1424();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2424();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3424();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4424();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5424();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6424();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ShareAllOutline);
  ShareAllOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ShareAllOutline_default = ShareAllOutline;
ShareAllOutline.filename = ".../flowbite-svelte-icons/dist/ShareAllOutline.svelte";
mark_module_end(ShareAllOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ShareAllSolid.svelte
mark_module_start();
var root_2425 = svg_template(`<title> </title>`);
var root_3425 = svg_template(`<desc> </desc>`);
var root_1425 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M14.516 6.743c-.41-.368-.443-1-.077-1.41a.99.99 0 0 1 1.405-.078l5.487 4.948.007.006A2.047 2.047 0 0 1 22 11.721a2.06 2.06 0 0 1-.662 1.51l-5.584 5.09a.99.99 0 0 1-1.404-.07 1.003 1.003 0 0 1 .068-1.412l5.578-5.082a.05.05 0 0 0 .015-.036.051.051 0 0 0-.015-.036l-5.48-4.942Zm-6.543 9.199v-.42a4.168 4.168 0 0 0-2.715 2.415c-.154.382-.44.695-.806.88a1.683 1.683 0 0 1-2.167-.571 1.705 1.705 0 0 1-.279-1.092V15.88c0-3.77 2.526-7.039 5.967-7.573V7.57a1.957 1.957 0 0 1 .993-1.838 1.931 1.931 0 0 1 2.153.184l5.08 4.248a.646.646 0 0 1 .012.011l.011.01a2.098 2.098 0 0 1 .703 1.57 2.108 2.108 0 0 1-.726 1.59l-5.08 4.25a1.933 1.933 0 0 1-2.929-.614 1.957 1.957 0 0 1-.217-1.04Z" clip-rule="evenodd"></path></svg>`);
var root_5425 = svg_template(`<title> </title>`);
var root_6425 = svg_template(`<desc> </desc>`);
var root_4425 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M14.516 6.743c-.41-.368-.443-1-.077-1.41a.99.99 0 0 1 1.405-.078l5.487 4.948.007.006A2.047 2.047 0 0 1 22 11.721a2.06 2.06 0 0 1-.662 1.51l-5.584 5.09a.99.99 0 0 1-1.404-.07 1.003 1.003 0 0 1 .068-1.412l5.578-5.082a.05.05 0 0 0 .015-.036.051.051 0 0 0-.015-.036l-5.48-4.942Zm-6.543 9.199v-.42a4.168 4.168 0 0 0-2.715 2.415c-.154.382-.44.695-.806.88a1.683 1.683 0 0 1-2.167-.571 1.705 1.705 0 0 1-.279-1.092V15.88c0-3.77 2.526-7.039 5.967-7.573V7.57a1.957 1.957 0 0 1 .993-1.838 1.931 1.931 0 0 1 2.153.184l5.08 4.248a.646.646 0 0 1 .012.011l.011.01a2.098 2.098 0 0 1 .703 1.57 2.108 2.108 0 0 1-.726 1.59l-5.08 4.25a1.933 1.933 0 0 1-2.929-.614 1.957 1.957 0 0 1-.217-1.04Z" clip-rule="evenodd"></path></svg>`);
function ShareAllSolid($$anchor, $$props) {
  if (new.target === ShareAllSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ShareAllSolid);
  validate_prop_bindings($$props, [], [], ShareAllSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "share all solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1425();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2425();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3425();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4425();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5425();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6425();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ShareAllSolid);
  ShareAllSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ShareAllSolid_default = ShareAllSolid;
ShareAllSolid.filename = ".../flowbite-svelte-icons/dist/ShareAllSolid.svelte";
mark_module_end(ShareAllSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ShareNodesOutline.svelte
mark_module_start();
var root_2426 = svg_template(`<title> </title>`);
var root_3426 = svg_template(`<desc> </desc>`);
var root_1426 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" d="M7.926 10.898 15 7.727m-7.074 5.39L15 16.29M8 12a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0Zm12 5.5a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0Zm0-11a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0Z"></path></svg>`);
var root_5426 = svg_template(`<title> </title>`);
var root_6426 = svg_template(`<desc> </desc>`);
var root_4426 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" d="M7.926 10.898 15 7.727m-7.074 5.39L15 16.29M8 12a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0Zm12 5.5a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0Zm0-11a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0Z"></path></svg>`);
function ShareNodesOutline($$anchor, $$props) {
  if (new.target === ShareNodesOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ShareNodesOutline);
  validate_prop_bindings($$props, [], [], ShareNodesOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "share nodes outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1426();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2426();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3426();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4426();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5426();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6426();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ShareNodesOutline);
  ShareNodesOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ShareNodesOutline_default = ShareNodesOutline;
ShareNodesOutline.filename = ".../flowbite-svelte-icons/dist/ShareNodesOutline.svelte";
mark_module_end(ShareNodesOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ShareNodesSolid.svelte
mark_module_start();
var root_2427 = svg_template(`<title> </title>`);
var root_3427 = svg_template(`<desc> </desc>`);
var root_1427 = svg_template(`<svg><!><!><path d="M17.5 3a3.5 3.5 0 0 0-3.456 4.06L8.143 9.704a3.5 3.5 0 1 0-.01 4.6l5.91 2.65a3.5 3.5 0 1 0 .863-1.805l-5.94-2.662a3.53 3.53 0 0 0 .002-.961l5.948-2.667A3.5 3.5 0 1 0 17.5 3Z"></path></svg>`);
var root_5427 = svg_template(`<title> </title>`);
var root_6427 = svg_template(`<desc> </desc>`);
var root_4427 = svg_template(`<svg><!><!><path d="M17.5 3a3.5 3.5 0 0 0-3.456 4.06L8.143 9.704a3.5 3.5 0 1 0-.01 4.6l5.91 2.65a3.5 3.5 0 1 0 .863-1.805l-5.94-2.662a3.53 3.53 0 0 0 .002-.961l5.948-2.667A3.5 3.5 0 1 0 17.5 3Z"></path></svg>`);
function ShareNodesSolid($$anchor, $$props) {
  if (new.target === ShareNodesSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ShareNodesSolid);
  validate_prop_bindings($$props, [], [], ShareNodesSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "share nodes solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1427();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2427();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3427();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4427();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5427();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6427();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ShareNodesSolid);
  ShareNodesSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ShareNodesSolid_default = ShareNodesSolid;
ShareNodesSolid.filename = ".../flowbite-svelte-icons/dist/ShareNodesSolid.svelte";
mark_module_end(ShareNodesSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ShieldCheckOutline.svelte
mark_module_start();
var root_2428 = svg_template(`<title> </title>`);
var root_3428 = svg_template(`<desc> </desc>`);
var root_1428 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M9.5 11.5 11 13l4-3.5M12 20a16.405 16.405 0 0 1-5.092-5.804A16.694 16.694 0 0 1 5 6.666L12 4l7 2.667a16.695 16.695 0 0 1-1.908 7.529A16.406 16.406 0 0 1 12 20Z"></path></svg>`);
var root_5428 = svg_template(`<title> </title>`);
var root_6428 = svg_template(`<desc> </desc>`);
var root_4428 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M9.5 11.5 11 13l4-3.5M12 20a16.405 16.405 0 0 1-5.092-5.804A16.694 16.694 0 0 1 5 6.666L12 4l7 2.667a16.695 16.695 0 0 1-1.908 7.529A16.406 16.406 0 0 1 12 20Z"></path></svg>`);
function ShieldCheckOutline($$anchor, $$props) {
  if (new.target === ShieldCheckOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ShieldCheckOutline);
  validate_prop_bindings($$props, [], [], ShieldCheckOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "shield check outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1428();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2428();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3428();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4428();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5428();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6428();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ShieldCheckOutline);
  ShieldCheckOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ShieldCheckOutline_default = ShieldCheckOutline;
ShieldCheckOutline.filename = ".../flowbite-svelte-icons/dist/ShieldCheckOutline.svelte";
mark_module_end(ShieldCheckOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ShieldCheckSolid.svelte
mark_module_start();
var root_2429 = svg_template(`<title> </title>`);
var root_3429 = svg_template(`<desc> </desc>`);
var root_1429 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M11.644 3.066a1 1 0 0 1 .712 0l7 2.666A1 1 0 0 1 20 6.68a17.694 17.694 0 0 1-2.023 7.98 17.406 17.406 0 0 1-5.402 6.158 1 1 0 0 1-1.15 0 17.405 17.405 0 0 1-5.403-6.157A17.695 17.695 0 0 1 4 6.68a1 1 0 0 1 .644-.949l7-2.666Zm4.014 7.187a1 1 0 0 0-1.316-1.506l-3.296 2.884-.839-.838a1 1 0 0 0-1.414 1.414l1.5 1.5a1 1 0 0 0 1.366.046l4-3.5Z" clip-rule="evenodd"></path></svg>`);
var root_5429 = svg_template(`<title> </title>`);
var root_6429 = svg_template(`<desc> </desc>`);
var root_4429 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M11.644 3.066a1 1 0 0 1 .712 0l7 2.666A1 1 0 0 1 20 6.68a17.694 17.694 0 0 1-2.023 7.98 17.406 17.406 0 0 1-5.402 6.158 1 1 0 0 1-1.15 0 17.405 17.405 0 0 1-5.403-6.157A17.695 17.695 0 0 1 4 6.68a1 1 0 0 1 .644-.949l7-2.666Zm4.014 7.187a1 1 0 0 0-1.316-1.506l-3.296 2.884-.839-.838a1 1 0 0 0-1.414 1.414l1.5 1.5a1 1 0 0 0 1.366.046l4-3.5Z" clip-rule="evenodd"></path></svg>`);
function ShieldCheckSolid($$anchor, $$props) {
  if (new.target === ShieldCheckSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ShieldCheckSolid);
  validate_prop_bindings($$props, [], [], ShieldCheckSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "shield check solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1429();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2429();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3429();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4429();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5429();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6429();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ShieldCheckSolid);
  ShieldCheckSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ShieldCheckSolid_default = ShieldCheckSolid;
ShieldCheckSolid.filename = ".../flowbite-svelte-icons/dist/ShieldCheckSolid.svelte";
mark_module_end(ShieldCheckSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ShieldOutline.svelte
mark_module_start();
var root_2430 = svg_template(`<title> </title>`);
var root_3430 = svg_template(`<desc> </desc>`);
var root_1430 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12 20a16.405 16.405 0 0 1-5.092-5.804A16.694 16.694 0 0 1 5 6.666L12 4l7 2.667a16.695 16.695 0 0 1-1.908 7.529A16.406 16.406 0 0 1 12 20Z"></path></svg>`);
var root_5430 = svg_template(`<title> </title>`);
var root_6430 = svg_template(`<desc> </desc>`);
var root_4430 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12 20a16.405 16.405 0 0 1-5.092-5.804A16.694 16.694 0 0 1 5 6.666L12 4l7 2.667a16.695 16.695 0 0 1-1.908 7.529A16.406 16.406 0 0 1 12 20Z"></path></svg>`);
function ShieldOutline($$anchor, $$props) {
  if (new.target === ShieldOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ShieldOutline);
  validate_prop_bindings($$props, [], [], ShieldOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "shield outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1430();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2430();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3430();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4430();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5430();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6430();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ShieldOutline);
  ShieldOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ShieldOutline_default = ShieldOutline;
ShieldOutline.filename = ".../flowbite-svelte-icons/dist/ShieldOutline.svelte";
mark_module_end(ShieldOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ShieldSolid.svelte
mark_module_start();
var root_2431 = svg_template(`<title> </title>`);
var root_3431 = svg_template(`<desc> </desc>`);
var root_1431 = svg_template(`<svg><!><!><path d="M12.356 3.066a1 1 0 0 0-.712 0l-7 2.666A1 1 0 0 0 4 6.68a17.695 17.695 0 0 0 2.022 7.98 17.405 17.405 0 0 0 5.403 6.158 1 1 0 0 0 1.15 0 17.406 17.406 0 0 0 5.402-6.157A17.694 17.694 0 0 0 20 6.68a1 1 0 0 0-.644-.949l-7-2.666Z"></path></svg>`);
var root_5431 = svg_template(`<title> </title>`);
var root_6431 = svg_template(`<desc> </desc>`);
var root_4431 = svg_template(`<svg><!><!><path d="M12.356 3.066a1 1 0 0 0-.712 0l-7 2.666A1 1 0 0 0 4 6.68a17.695 17.695 0 0 0 2.022 7.98 17.405 17.405 0 0 0 5.403 6.158 1 1 0 0 0 1.15 0 17.406 17.406 0 0 0 5.402-6.157A17.694 17.694 0 0 0 20 6.68a1 1 0 0 0-.644-.949l-7-2.666Z"></path></svg>`);
function ShieldSolid($$anchor, $$props) {
  if (new.target === ShieldSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ShieldSolid);
  validate_prop_bindings($$props, [], [], ShieldSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "shield solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1431();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2431();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3431();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4431();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5431();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6431();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ShieldSolid);
  ShieldSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ShieldSolid_default = ShieldSolid;
ShieldSolid.filename = ".../flowbite-svelte-icons/dist/ShieldSolid.svelte";
mark_module_end(ShieldSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ShoppingBagOutline.svelte
mark_module_start();
var root_2432 = svg_template(`<title> </title>`);
var root_3432 = svg_template(`<desc> </desc>`);
var root_1432 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M9 10V6a3 3 0 0 1 3-3v0a3 3 0 0 1 3 3v4m3-2 .917 11.923A1 1 0 0 1 17.92 21H6.08a1 1 0 0 1-.997-1.077L6 8h12Z"></path></svg>`);
var root_5432 = svg_template(`<title> </title>`);
var root_6432 = svg_template(`<desc> </desc>`);
var root_4432 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M9 10V6a3 3 0 0 1 3-3v0a3 3 0 0 1 3 3v4m3-2 .917 11.923A1 1 0 0 1 17.92 21H6.08a1 1 0 0 1-.997-1.077L6 8h12Z"></path></svg>`);
function ShoppingBagOutline($$anchor, $$props) {
  if (new.target === ShoppingBagOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ShoppingBagOutline);
  validate_prop_bindings($$props, [], [], ShoppingBagOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "shopping bag outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1432();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2432();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3432();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4432();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5432();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6432();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ShoppingBagOutline);
  ShoppingBagOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ShoppingBagOutline_default = ShoppingBagOutline;
ShoppingBagOutline.filename = ".../flowbite-svelte-icons/dist/ShoppingBagOutline.svelte";
mark_module_end(ShoppingBagOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ShoppingBagSolid.svelte
mark_module_start();
var root_2433 = svg_template(`<title> </title>`);
var root_3433 = svg_template(`<desc> </desc>`);
var root_1433 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M14 7h-4v3a1 1 0 0 1-2 0V7H6a1 1 0 0 0-.997.923l-.917 11.924A2 2 0 0 0 6.08 22h11.84a2 2 0 0 0 1.994-2.153l-.917-11.924A1 1 0 0 0 18 7h-2v3a1 1 0 1 1-2 0V7Zm-2-3a2 2 0 0 0-2 2v1H8V6a4 4 0 0 1 8 0v1h-2V6a2 2 0 0 0-2-2Z" clip-rule="evenodd"></path></svg>`);
var root_5433 = svg_template(`<title> </title>`);
var root_6433 = svg_template(`<desc> </desc>`);
var root_4433 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M14 7h-4v3a1 1 0 0 1-2 0V7H6a1 1 0 0 0-.997.923l-.917 11.924A2 2 0 0 0 6.08 22h11.84a2 2 0 0 0 1.994-2.153l-.917-11.924A1 1 0 0 0 18 7h-2v3a1 1 0 1 1-2 0V7Zm-2-3a2 2 0 0 0-2 2v1H8V6a4 4 0 0 1 8 0v1h-2V6a2 2 0 0 0-2-2Z" clip-rule="evenodd"></path></svg>`);
function ShoppingBagSolid($$anchor, $$props) {
  if (new.target === ShoppingBagSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ShoppingBagSolid);
  validate_prop_bindings($$props, [], [], ShoppingBagSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "shopping bag solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1433();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2433();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3433();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4433();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5433();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6433();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ShoppingBagSolid);
  ShoppingBagSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ShoppingBagSolid_default = ShoppingBagSolid;
ShoppingBagSolid.filename = ".../flowbite-svelte-icons/dist/ShoppingBagSolid.svelte";
mark_module_end(ShoppingBagSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ShuffleOutline.svelte
mark_module_start();
var root_2434 = svg_template(`<title> </title>`);
var root_3434 = svg_template(`<desc> </desc>`);
var root_1434 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M13.484 9.166 15 7h5m0 0-3-3m3 3-3 3M4 17h4l1.577-2.253M4 7h4l7 10h5m0 0-3 3m3-3-3-3"></path></svg>`);
var root_5434 = svg_template(`<title> </title>`);
var root_6434 = svg_template(`<desc> </desc>`);
var root_4434 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M13.484 9.166 15 7h5m0 0-3-3m3 3-3 3M4 17h4l1.577-2.253M4 7h4l7 10h5m0 0-3 3m3-3-3-3"></path></svg>`);
function ShuffleOutline($$anchor, $$props) {
  if (new.target === ShuffleOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ShuffleOutline);
  validate_prop_bindings($$props, [], [], ShuffleOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "shuffle outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1434();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2434();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3434();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4434();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5434();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6434();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ShuffleOutline);
  ShuffleOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ShuffleOutline_default = ShuffleOutline;
ShuffleOutline.filename = ".../flowbite-svelte-icons/dist/ShuffleOutline.svelte";
mark_module_end(ShuffleOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/SortHorizontalOutline.svelte
mark_module_start();
var root_2435 = svg_template(`<title> </title>`);
var root_3435 = svg_template(`<desc> </desc>`);
var root_1435 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M4 16h13M4 16l4-4m-4 4 4 4M20 8H7m13 0-4 4m4-4-4-4"></path></svg>`);
var root_5435 = svg_template(`<title> </title>`);
var root_6435 = svg_template(`<desc> </desc>`);
var root_4435 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M4 16h13M4 16l4-4m-4 4 4 4M20 8H7m13 0-4 4m4-4-4-4"></path></svg>`);
function SortHorizontalOutline($$anchor, $$props) {
  if (new.target === SortHorizontalOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, SortHorizontalOutline);
  validate_prop_bindings($$props, [], [], SortHorizontalOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "sort horizontal outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1435();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2435();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3435();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4435();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5435();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6435();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(SortHorizontalOutline);
  SortHorizontalOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var SortHorizontalOutline_default = SortHorizontalOutline;
SortHorizontalOutline.filename = ".../flowbite-svelte-icons/dist/SortHorizontalOutline.svelte";
mark_module_end(SortHorizontalOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/SortOutline.svelte
mark_module_start();
var root_2436 = svg_template(`<title> </title>`);
var root_3436 = svg_template(`<desc> </desc>`);
var root_1436 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M8 20V10m0 10-3-3m3 3 3-3m5-13v10m0-10 3 3m-3-3-3 3"></path></svg>`);
var root_5436 = svg_template(`<title> </title>`);
var root_6436 = svg_template(`<desc> </desc>`);
var root_4436 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M8 20V10m0 10-3-3m3 3 3-3m5-13v10m0-10 3 3m-3-3-3 3"></path></svg>`);
function SortOutline($$anchor, $$props) {
  if (new.target === SortOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, SortOutline);
  validate_prop_bindings($$props, [], [], SortOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "sort outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1436();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2436();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3436();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4436();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5436();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6436();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(SortOutline);
  SortOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var SortOutline_default = SortOutline;
SortOutline.filename = ".../flowbite-svelte-icons/dist/SortOutline.svelte";
mark_module_end(SortOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/StackoverflowSolid.svelte
mark_module_start();
var root_2437 = svg_template(`<title> </title>`);
var root_3437 = svg_template(`<desc> </desc>`);
var root_1437 = svg_template(`<svg><!><!><path d="M17 20v-5h2v6.988H3V15h1.98v5H17Z"></path><path d="m6.84 14.522 8.73 1.825.369-1.755-8.73-1.825-.369 1.755Zm1.155-4.323 8.083 3.764.739-1.617-8.083-3.787-.739 1.64Zm3.372-5.481L10.235 6.08l6.859 5.704 1.132-1.362-6.859-5.704ZM15.57 17H6.655v2h8.915v-2ZM12.861 3.111l6.193 6.415 1.414-1.415-6.43-6.177-1.177 1.177Z"></path></svg>`);
var root_5437 = svg_template(`<title> </title>`);
var root_6437 = svg_template(`<desc> </desc>`);
var root_4437 = svg_template(`<svg><!><!><path d="M17 20v-5h2v6.988H3V15h1.98v5H17Z"></path><path d="m6.84 14.522 8.73 1.825.369-1.755-8.73-1.825-.369 1.755Zm1.155-4.323 8.083 3.764.739-1.617-8.083-3.787-.739 1.64Zm3.372-5.481L10.235 6.08l6.859 5.704 1.132-1.362-6.859-5.704ZM15.57 17H6.655v2h8.915v-2ZM12.861 3.111l6.193 6.415 1.414-1.415-6.43-6.177-1.177 1.177Z"></path></svg>`);
function StackoverflowSolid($$anchor, $$props) {
  if (new.target === StackoverflowSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, StackoverflowSolid);
  validate_prop_bindings($$props, [], [], StackoverflowSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "stackoverflow solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1437();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2437();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3437();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4437();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5437();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6437();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_2 = sibling(node_4);
      var path_3 = sibling(path_2);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(StackoverflowSolid);
  StackoverflowSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var StackoverflowSolid_default = StackoverflowSolid;
StackoverflowSolid.filename = ".../flowbite-svelte-icons/dist/StackoverflowSolid.svelte";
mark_module_end(StackoverflowSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/StarHalfOutline.svelte
mark_module_start();
var root_2438 = svg_template(`<title> </title>`);
var root_3438 = svg_template(`<desc> </desc>`);
var root_1438 = svg_template(`<svg><!><!><path stroke="currentColor" d="m12.25 20.825 4.247-2.436a1 1 0 0 0 .503-.867V4.03c0-.405-2.062 3.38-2.8 4.747a1 1 0 0 1-.807.523l-4.87.367c-.903.068-1.258 1.208-.55 1.776l3.576 2.878a1 1 0 0 1 .343 1.025l-1.11 4.366c-.217.856.701 1.553 1.468 1.113Z"></path></svg>`);
var root_5438 = svg_template(`<title> </title>`);
var root_6438 = svg_template(`<desc> </desc>`);
var root_4438 = svg_template(`<svg><!><!><path stroke="currentColor" d="m12.25 20.825 4.247-2.436a1 1 0 0 0 .503-.867V4.03c0-.405-2.062 3.38-2.8 4.747a1 1 0 0 1-.807.523l-4.87.367c-.903.068-1.258 1.208-.55 1.776l3.576 2.878a1 1 0 0 1 .343 1.025l-1.11 4.366c-.217.856.701 1.553 1.468 1.113Z"></path></svg>`);
function StarHalfOutline($$anchor, $$props) {
  if (new.target === StarHalfOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, StarHalfOutline);
  validate_prop_bindings($$props, [], [], StarHalfOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "star half outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1438();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2438();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3438();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4438();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5438();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6438();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(StarHalfOutline);
  StarHalfOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var StarHalfOutline_default = StarHalfOutline;
StarHalfOutline.filename = ".../flowbite-svelte-icons/dist/StarHalfOutline.svelte";
mark_module_end(StarHalfOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/StarHalfSolid.svelte
mark_module_start();
var root_2439 = svg_template(`<title> </title>`);
var root_3439 = svg_template(`<desc> </desc>`);
var root_1439 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M13 4.024v-.005c0-.053.002-.353-.217-.632a1.013 1.013 0 0 0-1.176-.315c-.192.076-.315.193-.35.225-.052.05-.094.1-.122.134a4.358 4.358 0 0 0-.31.457c-.207.343-.484.84-.773 1.375a168.719 168.719 0 0 0-1.606 3.074h-.002l-4.599.367c-1.775.14-2.495 2.339-1.143 3.488L6.17 15.14l-1.06 4.406c-.412 1.72 1.472 3.078 2.992 2.157l3.94-2.388c.592-.359.958-.996.958-1.692v-13.6Zm-2.002 0v.025-.025Z" clip-rule="evenodd"></path></svg>`);
var root_5439 = svg_template(`<title> </title>`);
var root_6439 = svg_template(`<desc> </desc>`);
var root_4439 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M13 4.024v-.005c0-.053.002-.353-.217-.632a1.013 1.013 0 0 0-1.176-.315c-.192.076-.315.193-.35.225-.052.05-.094.1-.122.134a4.358 4.358 0 0 0-.31.457c-.207.343-.484.84-.773 1.375a168.719 168.719 0 0 0-1.606 3.074h-.002l-4.599.367c-1.775.14-2.495 2.339-1.143 3.488L6.17 15.14l-1.06 4.406c-.412 1.72 1.472 3.078 2.992 2.157l3.94-2.388c.592-.359.958-.996.958-1.692v-13.6Zm-2.002 0v.025-.025Z" clip-rule="evenodd"></path></svg>`);
function StarHalfSolid($$anchor, $$props) {
  if (new.target === StarHalfSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, StarHalfSolid);
  validate_prop_bindings($$props, [], [], StarHalfSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "star half solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1439();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2439();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3439();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4439();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5439();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6439();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(StarHalfSolid);
  StarHalfSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var StarHalfSolid_default = StarHalfSolid;
StarHalfSolid.filename = ".../flowbite-svelte-icons/dist/StarHalfSolid.svelte";
mark_module_end(StarHalfSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/StarHalfStrokeOutline.svelte
mark_module_start();
var root_2440 = svg_template(`<title> </title>`);
var root_3440 = svg_template(`<desc> </desc>`);
var root_1440 = svg_template(`<svg><!><!><path stroke="currentColor" d="M12 4.392v14.832M8.476 9.38l-4.553.36c-.888.07-1.248 1.165-.572 1.737l3.47 2.934a.98.98 0 0 1 .322.98l-1.06 4.388c-.206.855.736 1.531 1.497 1.073l3.898-2.351c.32-.193.723-.193 1.044 0l3.898 2.351c.76.458 1.703-.218 1.497-1.073l-1.06-4.388a.982.982 0 0 1 .322-.98l3.47-2.934c.676-.572.316-1.667-.572-1.737l-4.553-.36a1 1 0 0 1-.845-.606l-1.754-4.165c-.342-.812-1.508-.812-1.85 0L9.321 8.774a1 1 0 0 1-.845.606Z"></path></svg>`);
var root_5440 = svg_template(`<title> </title>`);
var root_6440 = svg_template(`<desc> </desc>`);
var root_4440 = svg_template(`<svg><!><!><path stroke="currentColor" d="M12 4.392v14.832M8.476 9.38l-4.553.36c-.888.07-1.248 1.165-.572 1.737l3.47 2.934a.98.98 0 0 1 .322.98l-1.06 4.388c-.206.855.736 1.531 1.497 1.073l3.898-2.351c.32-.193.723-.193 1.044 0l3.898 2.351c.76.458 1.703-.218 1.497-1.073l-1.06-4.388a.982.982 0 0 1 .322-.98l3.47-2.934c.676-.572.316-1.667-.572-1.737l-4.553-.36a1 1 0 0 1-.845-.606l-1.754-4.165c-.342-.812-1.508-.812-1.85 0L9.321 8.774a1 1 0 0 1-.845.606Z"></path></svg>`);
function StarHalfStrokeOutline($$anchor, $$props) {
  if (new.target === StarHalfStrokeOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, StarHalfStrokeOutline);
  validate_prop_bindings($$props, [], [], StarHalfStrokeOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "star half stroke outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1440();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2440();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3440();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4440();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5440();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6440();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(StarHalfStrokeOutline);
  StarHalfStrokeOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var StarHalfStrokeOutline_default = StarHalfStrokeOutline;
StarHalfStrokeOutline.filename = ".../flowbite-svelte-icons/dist/StarHalfStrokeOutline.svelte";
mark_module_end(StarHalfStrokeOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/StarHalfStrokeSolid.svelte
mark_module_start();
var root_2441 = svg_template(`<title> </title>`);
var root_3441 = svg_template(`<desc> </desc>`);
var root_1441 = svg_template(`<svg><!><!><path d="m13.001 19.927 2.896 1.773c1.52.93 3.405-.442 2.992-2.179l-1.06-4.452 3.468-2.978c1.353-1.162.633-3.382-1.142-3.525L15.603 8.2l-1.754-4.226A1.973 1.973 0 0 0 13 3v16.927ZM10.999 3c-.36.205-.663.53-.848.974L8.397 8.2l-4.552.366c-1.775.143-2.495 2.363-1.142 3.525l3.468 2.978-1.06 4.452c-.413 1.737 1.472 3.11 2.992 2.178l2.896-1.773V3Z"></path></svg>`);
var root_5441 = svg_template(`<title> </title>`);
var root_6441 = svg_template(`<desc> </desc>`);
var root_4441 = svg_template(`<svg><!><!><path d="m13.001 19.927 2.896 1.773c1.52.93 3.405-.442 2.992-2.179l-1.06-4.452 3.468-2.978c1.353-1.162.633-3.382-1.142-3.525L15.603 8.2l-1.754-4.226A1.973 1.973 0 0 0 13 3v16.927ZM10.999 3c-.36.205-.663.53-.848.974L8.397 8.2l-4.552.366c-1.775.143-2.495 2.363-1.142 3.525l3.468 2.978-1.06 4.452c-.413 1.737 1.472 3.11 2.992 2.178l2.896-1.773V3Z"></path></svg>`);
function StarHalfStrokeSolid($$anchor, $$props) {
  if (new.target === StarHalfStrokeSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, StarHalfStrokeSolid);
  validate_prop_bindings($$props, [], [], StarHalfStrokeSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "star half stroke solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1441();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2441();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3441();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4441();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5441();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6441();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(StarHalfStrokeSolid);
  StarHalfStrokeSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var StarHalfStrokeSolid_default = StarHalfStrokeSolid;
StarHalfStrokeSolid.filename = ".../flowbite-svelte-icons/dist/StarHalfStrokeSolid.svelte";
mark_module_end(StarHalfStrokeSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/StarOutline.svelte
mark_module_start();
var root_2442 = svg_template(`<title> </title>`);
var root_3442 = svg_template(`<desc> </desc>`);
var root_1442 = svg_template(`<svg><!><!><path stroke="currentColor" d="M11.083 5.104c.35-.8 1.485-.8 1.834 0l1.752 4.022a1 1 0 0 0 .84.597l4.463.342c.9.069 1.255 1.2.556 1.771l-3.33 2.723a1 1 0 0 0-.337 1.016l1.03 4.119c.214.858-.71 1.552-1.474 1.106l-3.913-2.281a1 1 0 0 0-1.008 0L7.583 20.8c-.764.446-1.688-.248-1.474-1.106l1.03-4.119A1 1 0 0 0 6.8 14.56l-3.33-2.723c-.698-.571-.342-1.702.557-1.771l4.462-.342a1 1 0 0 0 .84-.597l1.753-4.022Z"></path></svg>`);
var root_5442 = svg_template(`<title> </title>`);
var root_6442 = svg_template(`<desc> </desc>`);
var root_4442 = svg_template(`<svg><!><!><path stroke="currentColor" d="M11.083 5.104c.35-.8 1.485-.8 1.834 0l1.752 4.022a1 1 0 0 0 .84.597l4.463.342c.9.069 1.255 1.2.556 1.771l-3.33 2.723a1 1 0 0 0-.337 1.016l1.03 4.119c.214.858-.71 1.552-1.474 1.106l-3.913-2.281a1 1 0 0 0-1.008 0L7.583 20.8c-.764.446-1.688-.248-1.474-1.106l1.03-4.119A1 1 0 0 0 6.8 14.56l-3.33-2.723c-.698-.571-.342-1.702.557-1.771l4.462-.342a1 1 0 0 0 .84-.597l1.753-4.022Z"></path></svg>`);
function StarOutline($$anchor, $$props) {
  if (new.target === StarOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, StarOutline);
  validate_prop_bindings($$props, [], [], StarOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "star outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1442();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2442();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3442();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4442();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5442();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6442();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(StarOutline);
  StarOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var StarOutline_default = StarOutline;
StarOutline.filename = ".../flowbite-svelte-icons/dist/StarOutline.svelte";
mark_module_end(StarOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/StarSolid.svelte
mark_module_start();
var root_2443 = svg_template(`<title> </title>`);
var root_3443 = svg_template(`<desc> </desc>`);
var root_1443 = svg_template(`<svg><!><!><path d="M13.849 4.22c-.684-1.626-3.014-1.626-3.698 0L8.397 8.387l-4.552.361c-1.775.14-2.495 2.331-1.142 3.477l3.468 2.937-1.06 4.392c-.413 1.713 1.472 3.067 2.992 2.149L12 19.35l3.897 2.354c1.52.918 3.405-.436 2.992-2.15l-1.06-4.39 3.468-2.938c1.353-1.146.633-3.336-1.142-3.477l-4.552-.36-1.754-4.17Z"></path></svg>`);
var root_5443 = svg_template(`<title> </title>`);
var root_6443 = svg_template(`<desc> </desc>`);
var root_4443 = svg_template(`<svg><!><!><path d="M13.849 4.22c-.684-1.626-3.014-1.626-3.698 0L8.397 8.387l-4.552.361c-1.775.14-2.495 2.331-1.142 3.477l3.468 2.937-1.06 4.392c-.413 1.713 1.472 3.067 2.992 2.149L12 19.35l3.897 2.354c1.52.918 3.405-.436 2.992-2.15l-1.06-4.39 3.468-2.938c1.353-1.146.633-3.336-1.142-3.477l-4.552-.36-1.754-4.17Z"></path></svg>`);
function StarSolid($$anchor, $$props) {
  if (new.target === StarSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, StarSolid);
  validate_prop_bindings($$props, [], [], StarSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "star solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1443();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2443();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3443();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4443();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5443();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6443();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(StarSolid);
  StarSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var StarSolid_default = StarSolid;
StarSolid.filename = ".../flowbite-svelte-icons/dist/StarSolid.svelte";
mark_module_end(StarSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/StopOutline.svelte
mark_module_start();
var root_2444 = svg_template(`<title> </title>`);
var root_3444 = svg_template(`<desc> </desc>`);
var root_1444 = svg_template(`<svg><!><!><rect width="12" height="12" x="6" y="6" stroke="currentColor" stroke-linejoin="round" rx="1"></rect></svg>`);
var root_5444 = svg_template(`<title> </title>`);
var root_6444 = svg_template(`<desc> </desc>`);
var root_4444 = svg_template(`<svg><!><!><rect width="12" height="12" x="6" y="6" stroke="currentColor" stroke-linejoin="round" rx="1"></rect></svg>`);
function StopOutline($$anchor, $$props) {
  if (new.target === StopOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, StopOutline);
  validate_prop_bindings($$props, [], [], StopOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "stop outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1444();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2444();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3444();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var rect = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(rect, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4444();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5444();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6444();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var rect_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(rect_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(StopOutline);
  StopOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var StopOutline_default = StopOutline;
StopOutline.filename = ".../flowbite-svelte-icons/dist/StopOutline.svelte";
mark_module_end(StopOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/StopSolid.svelte
mark_module_start();
var root_2445 = svg_template(`<title> </title>`);
var root_3445 = svg_template(`<desc> </desc>`);
var root_1445 = svg_template(`<svg><!><!><path d="M7 5a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2H7Z"></path></svg>`);
var root_5445 = svg_template(`<title> </title>`);
var root_6445 = svg_template(`<desc> </desc>`);
var root_4445 = svg_template(`<svg><!><!><path d="M7 5a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2H7Z"></path></svg>`);
function StopSolid($$anchor, $$props) {
  if (new.target === StopSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, StopSolid);
  validate_prop_bindings($$props, [], [], StopSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "stop solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1445();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2445();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3445();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4445();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5445();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6445();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(StopSolid);
  StopSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var StopSolid_default = StopSolid;
StopSolid.filename = ".../flowbite-svelte-icons/dist/StopSolid.svelte";
mark_module_end(StopSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/StoreOutline.svelte
mark_module_start();
var root_2446 = svg_template(`<title> </title>`);
var root_3446 = svg_template(`<desc> </desc>`);
var root_1446 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M6 12c.263 0 .524-.06.767-.175a2 2 0 0 0 .65-.491c.186-.21.333-.46.433-.734.1-.274.15-.568.15-.864a2.4 2.4 0 0 0 .586 1.591c.375.422.884.659 1.414.659.53 0 1.04-.237 1.414-.659A2.4 2.4 0 0 0 12 9.736a2.4 2.4 0 0 0 .586 1.591c.375.422.884.659 1.414.659.53 0 1.04-.237 1.414-.659A2.4 2.4 0 0 0 16 9.736c0 .295.052.588.152.861s.248.521.434.73a2 2 0 0 0 .649.488 1.809 1.809 0 0 0 1.53 0 2.03 2.03 0 0 0 .65-.488c.185-.209.332-.457.433-.73.1-.273.152-.566.152-.861 0-.974-1.108-3.85-1.618-5.121A.983.983 0 0 0 17.466 4H6.456a.986.986 0 0 0-.93.645C5.045 5.962 4 8.905 4 9.736c.023.59.241 1.148.611 1.567.37.418.865.667 1.389.697Zm0 0c.328 0 .651-.091.94-.266A2.1 2.1 0 0 0 7.66 11h.681a2.1 2.1 0 0 0 .718.734c.29.175.613.266.942.266.328 0 .651-.091.94-.266.29-.174.537-.427.719-.734h.681a2.1 2.1 0 0 0 .719.734c.289.175.612.266.94.266.329 0 .652-.091.942-.266.29-.174.536-.427.718-.734h.681c.183.307.43.56.719.734.29.174.613.266.941.266a1.819 1.819 0 0 0 1.06-.351M6 12a1.766 1.766 0 0 1-1.163-.476M5 12v7a1 1 0 0 0 1 1h2v-5h3v5h7a1 1 0 0 0 1-1v-7m-5 3v2h2v-2h-2Z"></path></svg>`);
var root_5446 = svg_template(`<title> </title>`);
var root_6446 = svg_template(`<desc> </desc>`);
var root_4446 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M6 12c.263 0 .524-.06.767-.175a2 2 0 0 0 .65-.491c.186-.21.333-.46.433-.734.1-.274.15-.568.15-.864a2.4 2.4 0 0 0 .586 1.591c.375.422.884.659 1.414.659.53 0 1.04-.237 1.414-.659A2.4 2.4 0 0 0 12 9.736a2.4 2.4 0 0 0 .586 1.591c.375.422.884.659 1.414.659.53 0 1.04-.237 1.414-.659A2.4 2.4 0 0 0 16 9.736c0 .295.052.588.152.861s.248.521.434.73a2 2 0 0 0 .649.488 1.809 1.809 0 0 0 1.53 0 2.03 2.03 0 0 0 .65-.488c.185-.209.332-.457.433-.73.1-.273.152-.566.152-.861 0-.974-1.108-3.85-1.618-5.121A.983.983 0 0 0 17.466 4H6.456a.986.986 0 0 0-.93.645C5.045 5.962 4 8.905 4 9.736c.023.59.241 1.148.611 1.567.37.418.865.667 1.389.697Zm0 0c.328 0 .651-.091.94-.266A2.1 2.1 0 0 0 7.66 11h.681a2.1 2.1 0 0 0 .718.734c.29.175.613.266.942.266.328 0 .651-.091.94-.266.29-.174.537-.427.719-.734h.681a2.1 2.1 0 0 0 .719.734c.289.175.612.266.94.266.329 0 .652-.091.942-.266.29-.174.536-.427.718-.734h.681c.183.307.43.56.719.734.29.174.613.266.941.266a1.819 1.819 0 0 0 1.06-.351M6 12a1.766 1.766 0 0 1-1.163-.476M5 12v7a1 1 0 0 0 1 1h2v-5h3v5h7a1 1 0 0 0 1-1v-7m-5 3v2h2v-2h-2Z"></path></svg>`);
function StoreOutline($$anchor, $$props) {
  if (new.target === StoreOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, StoreOutline);
  validate_prop_bindings($$props, [], [], StoreOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "store outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1446();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2446();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3446();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4446();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5446();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6446();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(StoreOutline);
  StoreOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var StoreOutline_default = StoreOutline;
StoreOutline.filename = ".../flowbite-svelte-icons/dist/StoreOutline.svelte";
mark_module_end(StoreOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/StoreSolid.svelte
mark_module_start();
var root_2447 = svg_template(`<title> </title>`);
var root_3447 = svg_template(`<desc> </desc>`);
var root_1447 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M5.535 7.677c.313-.98.687-2.023.926-2.677H17.46c.253.63.646 1.64.977 2.61.166.487.312.953.416 1.347.11.42.148.675.148.779 0 .18-.032.355-.09.515-.06.161-.144.3-.243.412-.1.111-.21.192-.324.245a.809.809 0 0 1-.686 0 1.004 1.004 0 0 1-.324-.245c-.1-.112-.183-.25-.242-.412a1.473 1.473 0 0 1-.091-.515 1 1 0 1 0-2 0 1.4 1.4 0 0 1-.333.927.896.896 0 0 1-.667.323.896.896 0 0 1-.667-.323A1.401 1.401 0 0 1 13 9.736a1 1 0 1 0-2 0 1.4 1.4 0 0 1-.333.927.896.896 0 0 1-.667.323.896.896 0 0 1-.667-.323A1.4 1.4 0 0 1 9 9.74v-.008a1 1 0 0 0-2 .003v.008a1.504 1.504 0 0 1-.18.712 1.22 1.22 0 0 1-.146.209l-.007.007a1.01 1.01 0 0 1-.325.248.82.82 0 0 1-.316.08.973.973 0 0 1-.563-.256 1.224 1.224 0 0 1-.102-.103A1.518 1.518 0 0 1 5 9.724v-.006a2.543 2.543 0 0 1 .029-.207c.024-.132.06-.296.11-.49.098-.385.237-.85.395-1.344ZM4 12.112a3.521 3.521 0 0 1-1-2.376c0-.349.098-.8.202-1.208.112-.441.264-.95.428-1.46.327-1.024.715-2.104.958-2.767A1.985 1.985 0 0 1 6.456 3h11.01c.803 0 1.539.481 1.844 1.243.258.641.67 1.697 1.019 2.72a22.3 22.3 0 0 1 .457 1.487c.114.433.214.903.214 1.286 0 .412-.072.821-.214 1.207A3.288 3.288 0 0 1 20 12.16V19a2 2 0 0 1-2 2h-6a1 1 0 0 1-1-1v-4H8v4a1 1 0 0 1-1 1H6a2 2 0 0 1-2-2v-6.888ZM13 15a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1v-2Z" clip-rule="evenodd"></path></svg>`);
var root_5447 = svg_template(`<title> </title>`);
var root_6447 = svg_template(`<desc> </desc>`);
var root_4447 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M5.535 7.677c.313-.98.687-2.023.926-2.677H17.46c.253.63.646 1.64.977 2.61.166.487.312.953.416 1.347.11.42.148.675.148.779 0 .18-.032.355-.09.515-.06.161-.144.3-.243.412-.1.111-.21.192-.324.245a.809.809 0 0 1-.686 0 1.004 1.004 0 0 1-.324-.245c-.1-.112-.183-.25-.242-.412a1.473 1.473 0 0 1-.091-.515 1 1 0 1 0-2 0 1.4 1.4 0 0 1-.333.927.896.896 0 0 1-.667.323.896.896 0 0 1-.667-.323A1.401 1.401 0 0 1 13 9.736a1 1 0 1 0-2 0 1.4 1.4 0 0 1-.333.927.896.896 0 0 1-.667.323.896.896 0 0 1-.667-.323A1.4 1.4 0 0 1 9 9.74v-.008a1 1 0 0 0-2 .003v.008a1.504 1.504 0 0 1-.18.712 1.22 1.22 0 0 1-.146.209l-.007.007a1.01 1.01 0 0 1-.325.248.82.82 0 0 1-.316.08.973.973 0 0 1-.563-.256 1.224 1.224 0 0 1-.102-.103A1.518 1.518 0 0 1 5 9.724v-.006a2.543 2.543 0 0 1 .029-.207c.024-.132.06-.296.11-.49.098-.385.237-.85.395-1.344ZM4 12.112a3.521 3.521 0 0 1-1-2.376c0-.349.098-.8.202-1.208.112-.441.264-.95.428-1.46.327-1.024.715-2.104.958-2.767A1.985 1.985 0 0 1 6.456 3h11.01c.803 0 1.539.481 1.844 1.243.258.641.67 1.697 1.019 2.72a22.3 22.3 0 0 1 .457 1.487c.114.433.214.903.214 1.286 0 .412-.072.821-.214 1.207A3.288 3.288 0 0 1 20 12.16V19a2 2 0 0 1-2 2h-6a1 1 0 0 1-1-1v-4H8v4a1 1 0 0 1-1 1H6a2 2 0 0 1-2-2v-6.888ZM13 15a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1v-2Z" clip-rule="evenodd"></path></svg>`);
function StoreSolid($$anchor, $$props) {
  if (new.target === StoreSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, StoreSolid);
  validate_prop_bindings($$props, [], [], StoreSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "store solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1447();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2447();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3447();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4447();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5447();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6447();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(StoreSolid);
  StoreSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var StoreSolid_default = StoreSolid;
StoreSolid.filename = ".../flowbite-svelte-icons/dist/StoreSolid.svelte";
mark_module_end(StoreSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/SunOutline.svelte
mark_module_start();
var root_2448 = svg_template(`<title> </title>`);
var root_3448 = svg_template(`<desc> </desc>`);
var root_1448 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12 5V3m0 18v-2M7.05 7.05 5.636 5.636m12.728 12.728L16.95 16.95M5 12H3m18 0h-2M7.05 16.95l-1.414 1.414M18.364 5.636 16.95 7.05M16 12a4 4 0 1 1-8 0 4 4 0 0 1 8 0Z"></path></svg>`);
var root_5448 = svg_template(`<title> </title>`);
var root_6448 = svg_template(`<desc> </desc>`);
var root_4448 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12 5V3m0 18v-2M7.05 7.05 5.636 5.636m12.728 12.728L16.95 16.95M5 12H3m18 0h-2M7.05 16.95l-1.414 1.414M18.364 5.636 16.95 7.05M16 12a4 4 0 1 1-8 0 4 4 0 0 1 8 0Z"></path></svg>`);
function SunOutline($$anchor, $$props) {
  if (new.target === SunOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, SunOutline);
  validate_prop_bindings($$props, [], [], SunOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "sun outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1448();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2448();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3448();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4448();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5448();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6448();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(SunOutline);
  SunOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var SunOutline_default = SunOutline;
SunOutline.filename = ".../flowbite-svelte-icons/dist/SunOutline.svelte";
mark_module_end(SunOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/SunSolid.svelte
mark_module_start();
var root_2449 = svg_template(`<title> </title>`);
var root_3449 = svg_template(`<desc> </desc>`);
var root_1449 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M13 3a1 1 0 1 0-2 0v2a1 1 0 1 0 2 0V3ZM6.343 4.929A1 1 0 0 0 4.93 6.343l1.414 1.414a1 1 0 0 0 1.414-1.414L6.343 4.929Zm12.728 1.414a1 1 0 0 0-1.414-1.414l-1.414 1.414a1 1 0 0 0 1.414 1.414l1.414-1.414ZM12 7a5 5 0 1 0 0 10 5 5 0 0 0 0-10Zm-9 4a1 1 0 1 0 0 2h2a1 1 0 1 0 0-2H3Zm16 0a1 1 0 1 0 0 2h2a1 1 0 1 0 0-2h-2ZM7.757 17.657a1 1 0 1 0-1.414-1.414l-1.414 1.414a1 1 0 1 0 1.414 1.414l1.414-1.414Zm9.9-1.414a1 1 0 0 0-1.414 1.414l1.414 1.414a1 1 0 0 0 1.414-1.414l-1.414-1.414ZM13 19a1 1 0 1 0-2 0v2a1 1 0 1 0 2 0v-2Z" clip-rule="evenodd"></path></svg>`);
var root_5449 = svg_template(`<title> </title>`);
var root_6449 = svg_template(`<desc> </desc>`);
var root_4449 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M13 3a1 1 0 1 0-2 0v2a1 1 0 1 0 2 0V3ZM6.343 4.929A1 1 0 0 0 4.93 6.343l1.414 1.414a1 1 0 0 0 1.414-1.414L6.343 4.929Zm12.728 1.414a1 1 0 0 0-1.414-1.414l-1.414 1.414a1 1 0 0 0 1.414 1.414l1.414-1.414ZM12 7a5 5 0 1 0 0 10 5 5 0 0 0 0-10Zm-9 4a1 1 0 1 0 0 2h2a1 1 0 1 0 0-2H3Zm16 0a1 1 0 1 0 0 2h2a1 1 0 1 0 0-2h-2ZM7.757 17.657a1 1 0 1 0-1.414-1.414l-1.414 1.414a1 1 0 1 0 1.414 1.414l1.414-1.414Zm9.9-1.414a1 1 0 0 0-1.414 1.414l1.414 1.414a1 1 0 0 0 1.414-1.414l-1.414-1.414ZM13 19a1 1 0 1 0-2 0v2a1 1 0 1 0 2 0v-2Z" clip-rule="evenodd"></path></svg>`);
function SunSolid($$anchor, $$props) {
  if (new.target === SunSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, SunSolid);
  validate_prop_bindings($$props, [], [], SunSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "sun solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1449();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2449();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3449();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4449();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5449();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6449();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(SunSolid);
  SunSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var SunSolid_default = SunSolid;
SunSolid.filename = ".../flowbite-svelte-icons/dist/SunSolid.svelte";
mark_module_end(SunSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/SwatchbookOutline.svelte
mark_module_start();
var root_2450 = svg_template(`<title> </title>`);
var root_3450 = svg_template(`<desc> </desc>`);
var root_1450 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" d="M7.111 20A3.111 3.111 0 0 1 4 16.889v-12C4 4.398 4.398 4 4.889 4h4.444a.89.89 0 0 1 .89.889v12A3.111 3.111 0 0 1 7.11 20Zm0 0h12a.889.889 0 0 0 .889-.889v-4.444a.889.889 0 0 0-.889-.89h-4.389a.889.889 0 0 0-.62.253l-3.767 3.665a.933.933 0 0 0-.146.185c-.868 1.433-1.581 1.858-3.078 2.12Zm0-3.556h.009m7.933-10.927 3.143 3.143a.889.889 0 0 1 0 1.257l-7.974 7.974v-8.8l3.574-3.574a.889.889 0 0 1 1.257 0Z"></path></svg>`);
var root_5450 = svg_template(`<title> </title>`);
var root_6450 = svg_template(`<desc> </desc>`);
var root_4450 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" d="M7.111 20A3.111 3.111 0 0 1 4 16.889v-12C4 4.398 4.398 4 4.889 4h4.444a.89.89 0 0 1 .89.889v12A3.111 3.111 0 0 1 7.11 20Zm0 0h12a.889.889 0 0 0 .889-.889v-4.444a.889.889 0 0 0-.889-.89h-4.389a.889.889 0 0 0-.62.253l-3.767 3.665a.933.933 0 0 0-.146.185c-.868 1.433-1.581 1.858-3.078 2.12Zm0-3.556h.009m7.933-10.927 3.143 3.143a.889.889 0 0 1 0 1.257l-7.974 7.974v-8.8l3.574-3.574a.889.889 0 0 1 1.257 0Z"></path></svg>`);
function SwatchbookOutline($$anchor, $$props) {
  if (new.target === SwatchbookOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, SwatchbookOutline);
  validate_prop_bindings($$props, [], [], SwatchbookOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "swatchbook outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1450();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2450();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3450();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4450();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5450();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6450();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(SwatchbookOutline);
  SwatchbookOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var SwatchbookOutline_default = SwatchbookOutline;
SwatchbookOutline.filename = ".../flowbite-svelte-icons/dist/SwatchbookOutline.svelte";
mark_module_end(SwatchbookOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/SwatchbookSolid.svelte
mark_module_start();
var root_2451 = svg_template(`<title> </title>`);
var root_3451 = svg_template(`<desc> </desc>`);
var root_1451 = svg_template(`<svg><!><!><path d="M20 14h-2.722L11 20.278a5.511 5.511 0 0 1-.9.722H20a1 1 0 0 0 1-1v-5a1 1 0 0 0-1-1ZM9 3H4a1 1 0 0 0-1 1v13.5a3.5 3.5 0 1 0 7 0V4a1 1 0 0 0-1-1ZM6.5 18.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2ZM19.132 7.9 15.6 4.368a1 1 0 0 0-1.414 0L12 6.55v9.9l7.132-7.132a1 1 0 0 0 0-1.418Z"></path></svg>`);
var root_5451 = svg_template(`<title> </title>`);
var root_6451 = svg_template(`<desc> </desc>`);
var root_4451 = svg_template(`<svg><!><!><path d="M20 14h-2.722L11 20.278a5.511 5.511 0 0 1-.9.722H20a1 1 0 0 0 1-1v-5a1 1 0 0 0-1-1ZM9 3H4a1 1 0 0 0-1 1v13.5a3.5 3.5 0 1 0 7 0V4a1 1 0 0 0-1-1ZM6.5 18.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2ZM19.132 7.9 15.6 4.368a1 1 0 0 0-1.414 0L12 6.55v9.9l7.132-7.132a1 1 0 0 0 0-1.418Z"></path></svg>`);
function SwatchbookSolid($$anchor, $$props) {
  if (new.target === SwatchbookSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, SwatchbookSolid);
  validate_prop_bindings($$props, [], [], SwatchbookSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "swatchbook solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1451();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2451();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3451();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4451();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5451();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6451();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(SwatchbookSolid);
  SwatchbookSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var SwatchbookSolid_default = SwatchbookSolid;
SwatchbookSolid.filename = ".../flowbite-svelte-icons/dist/SwatchbookSolid.svelte";
mark_module_end(SwatchbookSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/TableColumnOutline.svelte
mark_module_start();
var root_2452 = svg_template(`<title> </title>`);
var root_3452 = svg_template(`<desc> </desc>`);
var root_1452 = svg_template(`<svg><!><!><path stroke="currentColor" d="M3 11h18m-9 0v8m-8 0h16a1 1 0 0 0 1-1V6a1 1 0 0 0-1-1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1Z"></path></svg>`);
var root_5452 = svg_template(`<title> </title>`);
var root_6452 = svg_template(`<desc> </desc>`);
var root_4452 = svg_template(`<svg><!><!><path stroke="currentColor" d="M3 11h18m-9 0v8m-8 0h16a1 1 0 0 0 1-1V6a1 1 0 0 0-1-1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1Z"></path></svg>`);
function TableColumnOutline($$anchor, $$props) {
  if (new.target === TableColumnOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, TableColumnOutline);
  validate_prop_bindings($$props, [], [], TableColumnOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "table column outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1452();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2452();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3452();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4452();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5452();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6452();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(TableColumnOutline);
  TableColumnOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var TableColumnOutline_default = TableColumnOutline;
TableColumnOutline.filename = ".../flowbite-svelte-icons/dist/TableColumnOutline.svelte";
mark_module_end(TableColumnOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/TableColumnSolid.svelte
mark_module_start();
var root_2453 = svg_template(`<title> </title>`);
var root_3453 = svg_template(`<desc> </desc>`);
var root_1453 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M4 4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2H4Zm0 8v6h7v-6H4Zm16 6h-7v-6h7v6Z" clip-rule="evenodd"></path></svg>`);
var root_5453 = svg_template(`<title> </title>`);
var root_6453 = svg_template(`<desc> </desc>`);
var root_4453 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M4 4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2H4Zm0 8v6h7v-6H4Zm16 6h-7v-6h7v6Z" clip-rule="evenodd"></path></svg>`);
function TableColumnSolid($$anchor, $$props) {
  if (new.target === TableColumnSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, TableColumnSolid);
  validate_prop_bindings($$props, [], [], TableColumnSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "table column solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1453();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2453();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3453();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4453();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5453();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6453();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(TableColumnSolid);
  TableColumnSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var TableColumnSolid_default = TableColumnSolid;
TableColumnSolid.filename = ".../flowbite-svelte-icons/dist/TableColumnSolid.svelte";
mark_module_end(TableColumnSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/TableRowOutline.svelte
mark_module_start();
var root_2454 = svg_template(`<title> </title>`);
var root_3454 = svg_template(`<desc> </desc>`);
var root_1454 = svg_template(`<svg><!><!><path stroke="currentColor" d="M3 11h18M3 15h18m-9-4v8m-8 0h16a1 1 0 0 0 1-1V6a1 1 0 0 0-1-1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1Z"></path></svg>`);
var root_5454 = svg_template(`<title> </title>`);
var root_6454 = svg_template(`<desc> </desc>`);
var root_4454 = svg_template(`<svg><!><!><path stroke="currentColor" d="M3 11h18M3 15h18m-9-4v8m-8 0h16a1 1 0 0 0 1-1V6a1 1 0 0 0-1-1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1Z"></path></svg>`);
function TableRowOutline($$anchor, $$props) {
  if (new.target === TableRowOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, TableRowOutline);
  validate_prop_bindings($$props, [], [], TableRowOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "table row outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1454();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2454();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3454();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4454();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5454();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6454();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(TableRowOutline);
  TableRowOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var TableRowOutline_default = TableRowOutline;
TableRowOutline.filename = ".../flowbite-svelte-icons/dist/TableRowOutline.svelte";
mark_module_end(TableRowOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/TableRowSolid.svelte
mark_module_start();
var root_2455 = svg_template(`<title> </title>`);
var root_3455 = svg_template(`<desc> </desc>`);
var root_1455 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M2 6a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V6Zm2 8v-2h7v2H4Zm0 2v2h7v-2H4Zm9 2h7v-2h-7v2Zm7-4v-2h-7v2h7Z" clip-rule="evenodd"></path></svg>`);
var root_5455 = svg_template(`<title> </title>`);
var root_6455 = svg_template(`<desc> </desc>`);
var root_4455 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M2 6a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V6Zm2 8v-2h7v2H4Zm0 2v2h7v-2H4Zm9 2h7v-2h-7v2Zm7-4v-2h-7v2h7Z" clip-rule="evenodd"></path></svg>`);
function TableRowSolid($$anchor, $$props) {
  if (new.target === TableRowSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, TableRowSolid);
  validate_prop_bindings($$props, [], [], TableRowSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "table row solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1455();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2455();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3455();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4455();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5455();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6455();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(TableRowSolid);
  TableRowSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var TableRowSolid_default = TableRowSolid;
TableRowSolid.filename = ".../flowbite-svelte-icons/dist/TableRowSolid.svelte";
mark_module_end(TableRowSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/TabletOutline.svelte
mark_module_start();
var root_2456 = svg_template(`<title> </title>`);
var root_3456 = svg_template(`<desc> </desc>`);
var root_1456 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M11 18h2M5.875 3h12.25c.483 0 .875.448.875 1v16c0 .552-.392 1-.875 1H5.875C5.392 21 5 20.552 5 20V4c0-.552.392-1 .875-1Z"></path></svg>`);
var root_5456 = svg_template(`<title> </title>`);
var root_6456 = svg_template(`<desc> </desc>`);
var root_4456 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M11 18h2M5.875 3h12.25c.483 0 .875.448.875 1v16c0 .552-.392 1-.875 1H5.875C5.392 21 5 20.552 5 20V4c0-.552.392-1 .875-1Z"></path></svg>`);
function TabletOutline($$anchor, $$props) {
  if (new.target === TabletOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, TabletOutline);
  validate_prop_bindings($$props, [], [], TabletOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "tablet outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1456();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2456();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3456();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4456();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5456();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6456();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(TabletOutline);
  TabletOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var TabletOutline_default = TabletOutline;
TabletOutline.filename = ".../flowbite-svelte-icons/dist/TabletOutline.svelte";
mark_module_end(TabletOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/TabletSolid.svelte
mark_module_start();
var root_2457 = svg_template(`<title> </title>`);
var root_3457 = svg_template(`<desc> </desc>`);
var root_1457 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M4 4c0-.975.718-2 1.875-2h12.25C19.282 2 20 3.025 20 4v16c0 .975-.718 2-1.875 2H5.875C4.718 22 4 20.975 4 20V4Zm7 13a1 1 0 1 0 0 2h2a1 1 0 1 0 0-2h-2Z" clip-rule="evenodd"></path></svg>`);
var root_5457 = svg_template(`<title> </title>`);
var root_6457 = svg_template(`<desc> </desc>`);
var root_4457 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M4 4c0-.975.718-2 1.875-2h12.25C19.282 2 20 3.025 20 4v16c0 .975-.718 2-1.875 2H5.875C4.718 22 4 20.975 4 20V4Zm7 13a1 1 0 1 0 0 2h2a1 1 0 1 0 0-2h-2Z" clip-rule="evenodd"></path></svg>`);
function TabletSolid($$anchor, $$props) {
  if (new.target === TabletSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, TabletSolid);
  validate_prop_bindings($$props, [], [], TabletSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "tablet solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1457();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2457();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3457();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4457();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5457();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6457();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(TabletSolid);
  TabletSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var TabletSolid_default = TabletSolid;
TabletSolid.filename = ".../flowbite-svelte-icons/dist/TabletSolid.svelte";
mark_module_end(TabletSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/TagOutline.svelte
mark_module_start();
var root_2458 = svg_template(`<title> </title>`);
var root_3458 = svg_template(`<desc> </desc>`);
var root_1458 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M15.583 8.445h.01M10.86 19.71l-6.573-6.63a.993.993 0 0 1 0-1.4l7.329-7.394A.98.98 0 0 1 12.31 4l5.734.007A1.968 1.968 0 0 1 20 5.983v5.5a.992.992 0 0 1-.316.727l-7.44 7.5a.974.974 0 0 1-1.384.001Z"></path></svg>`);
var root_5458 = svg_template(`<title> </title>`);
var root_6458 = svg_template(`<desc> </desc>`);
var root_4458 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M15.583 8.445h.01M10.86 19.71l-6.573-6.63a.993.993 0 0 1 0-1.4l7.329-7.394A.98.98 0 0 1 12.31 4l5.734.007A1.968 1.968 0 0 1 20 5.983v5.5a.992.992 0 0 1-.316.727l-7.44 7.5a.974.974 0 0 1-1.384.001Z"></path></svg>`);
function TagOutline($$anchor, $$props) {
  if (new.target === TagOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, TagOutline);
  validate_prop_bindings($$props, [], [], TagOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "tag outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1458();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2458();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3458();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4458();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5458();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6458();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(TagOutline);
  TagOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var TagOutline_default = TagOutline;
TagOutline.filename = ".../flowbite-svelte-icons/dist/TagOutline.svelte";
mark_module_end(TagOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/TagSolid.svelte
mark_module_start();
var root_2459 = svg_template(`<title> </title>`);
var root_3459 = svg_template(`<desc> </desc>`);
var root_1459 = svg_template(`<svg><!><!><path d="M18.045 3.007 12.31 3a1.965 1.965 0 0 0-1.4.585l-7.33 7.394a2 2 0 0 0 0 2.805l6.573 6.631a1.957 1.957 0 0 0 1.4.585 1.965 1.965 0 0 0 1.4-.585l7.409-7.477A2 2 0 0 0 21 11.479v-5.5a2.972 2.972 0 0 0-2.955-2.972Zm-2.452 6.438a1 1 0 1 1 0-2 1 1 0 0 1 0 2Z"></path></svg>`);
var root_5459 = svg_template(`<title> </title>`);
var root_6459 = svg_template(`<desc> </desc>`);
var root_4459 = svg_template(`<svg><!><!><path d="M18.045 3.007 12.31 3a1.965 1.965 0 0 0-1.4.585l-7.33 7.394a2 2 0 0 0 0 2.805l6.573 6.631a1.957 1.957 0 0 0 1.4.585 1.965 1.965 0 0 0 1.4-.585l7.409-7.477A2 2 0 0 0 21 11.479v-5.5a2.972 2.972 0 0 0-2.955-2.972Zm-2.452 6.438a1 1 0 1 1 0-2 1 1 0 0 1 0 2Z"></path></svg>`);
function TagSolid($$anchor, $$props) {
  if (new.target === TagSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, TagSolid);
  validate_prop_bindings($$props, [], [], TagSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "tag solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1459();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2459();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3459();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4459();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5459();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6459();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(TagSolid);
  TagSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var TagSolid_default = TagSolid;
TagSolid.filename = ".../flowbite-svelte-icons/dist/TagSolid.svelte";
mark_module_end(TagSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/TailwindSolid.svelte
mark_module_start();
var root_2460 = svg_template(`<title> </title>`);
var root_3460 = svg_template(`<desc> </desc>`);
var root_1460 = svg_template(`<svg><!><!><path d="M11.782 5.72a4.773 4.773 0 0 0-4.8 4.173 3.43 3.43 0 0 1 2.741-1.687c1.689 0 2.974 1.972 3.758 2.587a5.733 5.733 0 0 0 5.382.935c2-.638 2.934-2.865 3.137-3.921-.969 1.379-2.44 2.207-4.259 1.231-1.253-.673-2.19-3.438-5.959-3.318ZM6.8 11.979A4.772 4.772 0 0 0 2 16.151a3.431 3.431 0 0 1 2.745-1.687c1.689 0 2.974 1.972 3.758 2.587a5.733 5.733 0 0 0 5.382.935c2-.638 2.933-2.865 3.137-3.921-.97 1.379-2.44 2.208-4.259 1.231-1.253-.673-2.19-3.443-5.963-3.317Z"></path></svg>`);
var root_5460 = svg_template(`<title> </title>`);
var root_6460 = svg_template(`<desc> </desc>`);
var root_4460 = svg_template(`<svg><!><!><path d="M11.782 5.72a4.773 4.773 0 0 0-4.8 4.173 3.43 3.43 0 0 1 2.741-1.687c1.689 0 2.974 1.972 3.758 2.587a5.733 5.733 0 0 0 5.382.935c2-.638 2.934-2.865 3.137-3.921-.969 1.379-2.44 2.207-4.259 1.231-1.253-.673-2.19-3.438-5.959-3.318ZM6.8 11.979A4.772 4.772 0 0 0 2 16.151a3.431 3.431 0 0 1 2.745-1.687c1.689 0 2.974 1.972 3.758 2.587a5.733 5.733 0 0 0 5.382.935c2-.638 2.933-2.865 3.137-3.921-.97 1.379-2.44 2.208-4.259 1.231-1.253-.673-2.19-3.443-5.963-3.317Z"></path></svg>`);
function TailwindSolid($$anchor, $$props) {
  if (new.target === TailwindSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, TailwindSolid);
  validate_prop_bindings($$props, [], [], TailwindSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "tailwind solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1460();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2460();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3460();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4460();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5460();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6460();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(TailwindSolid);
  TailwindSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var TailwindSolid_default = TailwindSolid;
TailwindSolid.filename = ".../flowbite-svelte-icons/dist/TailwindSolid.svelte";
mark_module_end(TailwindSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/TerminalOutline.svelte
mark_module_start();
var root_2461 = svg_template(`<title> </title>`);
var root_3461 = svg_template(`<desc> </desc>`);
var root_1461 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m8 9 3 3-3 3m5 0h3M4 19h16a1 1 0 0 0 1-1V6a1 1 0 0 0-1-1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1Z"></path></svg>`);
var root_5461 = svg_template(`<title> </title>`);
var root_6461 = svg_template(`<desc> </desc>`);
var root_4461 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m8 9 3 3-3 3m5 0h3M4 19h16a1 1 0 0 0 1-1V6a1 1 0 0 0-1-1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1Z"></path></svg>`);
function TerminalOutline($$anchor, $$props) {
  if (new.target === TerminalOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, TerminalOutline);
  validate_prop_bindings($$props, [], [], TerminalOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "terminal outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1461();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2461();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3461();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4461();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5461();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6461();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(TerminalOutline);
  TerminalOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var TerminalOutline_default = TerminalOutline;
TerminalOutline.filename = ".../flowbite-svelte-icons/dist/TerminalOutline.svelte";
mark_module_end(TerminalOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/TerminalSolid.svelte
mark_module_start();
var root_2462 = svg_template(`<title> </title>`);
var root_3462 = svg_template(`<desc> </desc>`);
var root_1462 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M3 4a1 1 0 0 0-1 1v14a1 1 0 0 0 1 1h18a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1H3Zm4.293 5.707a1 1 0 0 1 1.414-1.414l3 3a1 1 0 0 1 0 1.414l-3 3a1 1 0 0 1-1.414-1.414L9.586 12 7.293 9.707ZM13 14a1 1 0 1 0 0 2h3a1 1 0 1 0 0-2h-3Z" clip-rule="evenodd"></path></svg>`);
var root_5462 = svg_template(`<title> </title>`);
var root_6462 = svg_template(`<desc> </desc>`);
var root_4462 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M3 4a1 1 0 0 0-1 1v14a1 1 0 0 0 1 1h18a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1H3Zm4.293 5.707a1 1 0 0 1 1.414-1.414l3 3a1 1 0 0 1 0 1.414l-3 3a1 1 0 0 1-1.414-1.414L9.586 12 7.293 9.707ZM13 14a1 1 0 1 0 0 2h3a1 1 0 1 0 0-2h-3Z" clip-rule="evenodd"></path></svg>`);
function TerminalSolid($$anchor, $$props) {
  if (new.target === TerminalSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, TerminalSolid);
  validate_prop_bindings($$props, [], [], TerminalSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "terminal solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1462();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2462();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3462();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4462();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5462();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6462();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(TerminalSolid);
  TerminalSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var TerminalSolid_default = TerminalSolid;
TerminalSolid.filename = ".../flowbite-svelte-icons/dist/TerminalSolid.svelte";
mark_module_end(TerminalSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/TextSizeOutline.svelte
mark_module_start();
var root_2463 = svg_template(`<title> </title>`);
var root_3463 = svg_template(`<desc> </desc>`);
var root_1463 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M3 6.2V5h11v1.2M8 5v14m-3 0h6m2-6.8V11h8v1.2M17 11v8m-1.5 0h3"></path></svg>`);
var root_5463 = svg_template(`<title> </title>`);
var root_6463 = svg_template(`<desc> </desc>`);
var root_4463 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M3 6.2V5h11v1.2M8 5v14m-3 0h6m2-6.8V11h8v1.2M17 11v8m-1.5 0h3"></path></svg>`);
function TextSizeOutline($$anchor, $$props) {
  if (new.target === TextSizeOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, TextSizeOutline);
  validate_prop_bindings($$props, [], [], TextSizeOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "text size outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1463();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2463();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3463();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4463();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5463();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6463();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(TextSizeOutline);
  TextSizeOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var TextSizeOutline_default = TextSizeOutline;
TextSizeOutline.filename = ".../flowbite-svelte-icons/dist/TextSizeOutline.svelte";
mark_module_end(TextSizeOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/TextSlashOutline.svelte
mark_module_start();
var root_2464 = svg_template(`<title> </title>`);
var root_3464 = svg_template(`<desc> </desc>`);
var root_1464 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M7 6.2V5h12v1.2M7 19h6m.2-14-1.677 6.523M9.6 19l1.029-4M5 5l6.523 6.523M19 19l-7.477-7.477"></path></svg>`);
var root_5464 = svg_template(`<title> </title>`);
var root_6464 = svg_template(`<desc> </desc>`);
var root_4464 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M7 6.2V5h12v1.2M7 19h6m.2-14-1.677 6.523M9.6 19l1.029-4M5 5l6.523 6.523M19 19l-7.477-7.477"></path></svg>`);
function TextSlashOutline($$anchor, $$props) {
  if (new.target === TextSlashOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, TextSlashOutline);
  validate_prop_bindings($$props, [], [], TextSlashOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "text slash outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1464();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2464();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3464();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4464();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5464();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6464();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(TextSlashOutline);
  TextSlashOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var TextSlashOutline_default = TextSlashOutline;
TextSlashOutline.filename = ".../flowbite-svelte-icons/dist/TextSlashOutline.svelte";
mark_module_end(TextSlashOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ThumbsDownOutline.svelte
mark_module_start();
var root_2465 = svg_template(`<title> </title>`);
var root_3465 = svg_template(`<desc> </desc>`);
var root_1465 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M17 13c-.889.086-1.416.543-2.156 1.057a22.322 22.322 0 0 0-3.958 5.084 1.6 1.6 0 0 1-.582.628 1.549 1.549 0 0 1-1.466.087 1.587 1.587 0 0 1-.537-.406 1.666 1.666 0 0 1-.384-1.279l1.389-4.114M17 13h3V6.5A1.5 1.5 0 0 0 18.5 5v0A1.5 1.5 0 0 0 17 6.5V13Zm-6.5 1H5.585c-.286 0-.372-.014-.626-.15a1.797 1.797 0 0 1-.637-.572 1.873 1.873 0 0 1-.215-1.673l2.098-6.4C6.462 4.48 6.632 4 7.88 4c2.302 0 4.79.943 6.67 1.475"></path></svg>`);
var root_5465 = svg_template(`<title> </title>`);
var root_6465 = svg_template(`<desc> </desc>`);
var root_4465 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M17 13c-.889.086-1.416.543-2.156 1.057a22.322 22.322 0 0 0-3.958 5.084 1.6 1.6 0 0 1-.582.628 1.549 1.549 0 0 1-1.466.087 1.587 1.587 0 0 1-.537-.406 1.666 1.666 0 0 1-.384-1.279l1.389-4.114M17 13h3V6.5A1.5 1.5 0 0 0 18.5 5v0A1.5 1.5 0 0 0 17 6.5V13Zm-6.5 1H5.585c-.286 0-.372-.014-.626-.15a1.797 1.797 0 0 1-.637-.572 1.873 1.873 0 0 1-.215-1.673l2.098-6.4C6.462 4.48 6.632 4 7.88 4c2.302 0 4.79.943 6.67 1.475"></path></svg>`);
function ThumbsDownOutline($$anchor, $$props) {
  if (new.target === ThumbsDownOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ThumbsDownOutline);
  validate_prop_bindings($$props, [], [], ThumbsDownOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "thumbs down outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1465();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2465();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3465();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4465();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5465();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6465();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ThumbsDownOutline);
  ThumbsDownOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ThumbsDownOutline_default = ThumbsDownOutline;
ThumbsDownOutline.filename = ".../flowbite-svelte-icons/dist/ThumbsDownOutline.svelte";
mark_module_end(ThumbsDownOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ThumbsDownSolid.svelte
mark_module_start();
var root_2466 = svg_template(`<title> </title>`);
var root_3466 = svg_template(`<desc> </desc>`);
var root_1466 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M8.97 14.316H5.004c-.322 0-.64-.08-.925-.232a2.022 2.022 0 0 1-.717-.645 2.108 2.108 0 0 1-.242-1.883l2.36-7.201C5.769 3.54 5.96 3 7.365 3c2.072 0 4.276.678 6.156 1.256.473.145.925.284 1.35.404h.114v9.862a25.485 25.485 0 0 0-4.238 5.514c-.197.376-.516.67-.901.83a1.74 1.74 0 0 1-1.21.048 1.79 1.79 0 0 1-.96-.757 1.867 1.867 0 0 1-.269-1.211l1.562-4.63ZM19.822 14H17V6a2 2 0 1 1 4 0v6.823c0 .65-.527 1.177-1.177 1.177Z" clip-rule="evenodd"></path></svg>`);
var root_5466 = svg_template(`<title> </title>`);
var root_6466 = svg_template(`<desc> </desc>`);
var root_4466 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M8.97 14.316H5.004c-.322 0-.64-.08-.925-.232a2.022 2.022 0 0 1-.717-.645 2.108 2.108 0 0 1-.242-1.883l2.36-7.201C5.769 3.54 5.96 3 7.365 3c2.072 0 4.276.678 6.156 1.256.473.145.925.284 1.35.404h.114v9.862a25.485 25.485 0 0 0-4.238 5.514c-.197.376-.516.67-.901.83a1.74 1.74 0 0 1-1.21.048 1.79 1.79 0 0 1-.96-.757 1.867 1.867 0 0 1-.269-1.211l1.562-4.63ZM19.822 14H17V6a2 2 0 1 1 4 0v6.823c0 .65-.527 1.177-1.177 1.177Z" clip-rule="evenodd"></path></svg>`);
function ThumbsDownSolid($$anchor, $$props) {
  if (new.target === ThumbsDownSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ThumbsDownSolid);
  validate_prop_bindings($$props, [], [], ThumbsDownSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "thumbs down solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1466();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2466();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3466();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4466();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5466();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6466();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ThumbsDownSolid);
  ThumbsDownSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ThumbsDownSolid_default = ThumbsDownSolid;
ThumbsDownSolid.filename = ".../flowbite-svelte-icons/dist/ThumbsDownSolid.svelte";
mark_module_end(ThumbsDownSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ThumbsUpOutline.svelte
mark_module_start();
var root_2467 = svg_template(`<title> </title>`);
var root_3467 = svg_template(`<desc> </desc>`);
var root_1467 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M7 11c.889-.086 1.416-.543 2.156-1.057a22.323 22.323 0 0 0 3.958-5.084 1.6 1.6 0 0 1 .582-.628 1.549 1.549 0 0 1 1.466-.087c.205.095.388.233.537.406a1.64 1.64 0 0 1 .384 1.279l-1.388 4.114M7 11H4v6.5A1.5 1.5 0 0 0 5.5 19v0A1.5 1.5 0 0 0 7 17.5V11Zm6.5-1h4.915c.286 0 .372.014.626.15.254.135.472.332.637.572a1.874 1.874 0 0 1 .215 1.673l-2.098 6.4C17.538 19.52 17.368 20 16.12 20c-2.303 0-4.79-.943-6.67-1.475"></path></svg>`);
var root_5467 = svg_template(`<title> </title>`);
var root_6467 = svg_template(`<desc> </desc>`);
var root_4467 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M7 11c.889-.086 1.416-.543 2.156-1.057a22.323 22.323 0 0 0 3.958-5.084 1.6 1.6 0 0 1 .582-.628 1.549 1.549 0 0 1 1.466-.087c.205.095.388.233.537.406a1.64 1.64 0 0 1 .384 1.279l-1.388 4.114M7 11H4v6.5A1.5 1.5 0 0 0 5.5 19v0A1.5 1.5 0 0 0 7 17.5V11Zm6.5-1h4.915c.286 0 .372.014.626.15.254.135.472.332.637.572a1.874 1.874 0 0 1 .215 1.673l-2.098 6.4C17.538 19.52 17.368 20 16.12 20c-2.303 0-4.79-.943-6.67-1.475"></path></svg>`);
function ThumbsUpOutline($$anchor, $$props) {
  if (new.target === ThumbsUpOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ThumbsUpOutline);
  validate_prop_bindings($$props, [], [], ThumbsUpOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "thumbs up outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1467();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2467();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3467();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4467();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5467();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6467();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ThumbsUpOutline);
  ThumbsUpOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ThumbsUpOutline_default = ThumbsUpOutline;
ThumbsUpOutline.filename = ".../flowbite-svelte-icons/dist/ThumbsUpOutline.svelte";
mark_module_end(ThumbsUpOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ThumbsUpSolid.svelte
mark_module_start();
var root_2468 = svg_template(`<title> </title>`);
var root_3468 = svg_template(`<desc> </desc>`);
var root_1468 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M15.03 9.684h3.965c.322 0 .64.08.925.232.286.153.532.374.717.645a2.109 2.109 0 0 1 .242 1.883l-2.36 7.201c-.288.814-.48 1.355-1.884 1.355-2.072 0-4.276-.677-6.157-1.256-.472-.145-.924-.284-1.348-.404h-.115V9.478a25.485 25.485 0 0 0 4.238-5.514 1.8 1.8 0 0 1 .901-.83 1.74 1.74 0 0 1 1.21-.048c.396.13.736.397.96.757.225.36.32.788.269 1.211l-1.562 4.63ZM4.177 10H7v8a2 2 0 1 1-4 0v-6.823C3 10.527 3.527 10 4.176 10Z" clip-rule="evenodd"></path></svg>`);
var root_5468 = svg_template(`<title> </title>`);
var root_6468 = svg_template(`<desc> </desc>`);
var root_4468 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M15.03 9.684h3.965c.322 0 .64.08.925.232.286.153.532.374.717.645a2.109 2.109 0 0 1 .242 1.883l-2.36 7.201c-.288.814-.48 1.355-1.884 1.355-2.072 0-4.276-.677-6.157-1.256-.472-.145-.924-.284-1.348-.404h-.115V9.478a25.485 25.485 0 0 0 4.238-5.514 1.8 1.8 0 0 1 .901-.83 1.74 1.74 0 0 1 1.21-.048c.396.13.736.397.96.757.225.36.32.788.269 1.211l-1.562 4.63ZM4.177 10H7v8a2 2 0 1 1-4 0v-6.823C3 10.527 3.527 10 4.176 10Z" clip-rule="evenodd"></path></svg>`);
function ThumbsUpSolid($$anchor, $$props) {
  if (new.target === ThumbsUpSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ThumbsUpSolid);
  validate_prop_bindings($$props, [], [], ThumbsUpSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "thumbs up solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1468();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2468();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3468();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4468();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5468();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6468();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ThumbsUpSolid);
  ThumbsUpSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ThumbsUpSolid_default = ThumbsUpSolid;
ThumbsUpSolid.filename = ".../flowbite-svelte-icons/dist/ThumbsUpSolid.svelte";
mark_module_end(ThumbsUpSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/TicketOutline.svelte
mark_module_start();
var root_2469 = svg_template(`<title> </title>`);
var root_3469 = svg_template(`<desc> </desc>`);
var root_1469 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M18.5 12A2.5 2.5 0 0 1 21 9.5V7a1 1 0 0 0-1-1H4a1 1 0 0 0-1 1v2.5a2.5 2.5 0 0 1 0 5V17a1 1 0 0 0 1 1h16a1 1 0 0 0 1-1v-2.5a2.5 2.5 0 0 1-2.5-2.5Z"></path></svg>`);
var root_5469 = svg_template(`<title> </title>`);
var root_6469 = svg_template(`<desc> </desc>`);
var root_4469 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M18.5 12A2.5 2.5 0 0 1 21 9.5V7a1 1 0 0 0-1-1H4a1 1 0 0 0-1 1v2.5a2.5 2.5 0 0 1 0 5V17a1 1 0 0 0 1 1h16a1 1 0 0 0 1-1v-2.5a2.5 2.5 0 0 1-2.5-2.5Z"></path></svg>`);
function TicketOutline($$anchor, $$props) {
  if (new.target === TicketOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, TicketOutline);
  validate_prop_bindings($$props, [], [], TicketOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "ticket outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1469();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2469();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3469();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4469();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5469();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6469();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(TicketOutline);
  TicketOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var TicketOutline_default = TicketOutline;
TicketOutline.filename = ".../flowbite-svelte-icons/dist/TicketOutline.svelte";
mark_module_end(TicketOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/TicketSolid.svelte
mark_module_start();
var root_2470 = svg_template(`<title> </title>`);
var root_3470 = svg_template(`<desc> </desc>`);
var root_1470 = svg_template(`<svg><!><!><path d="M4 5a2 2 0 0 0-2 2v2.5a1 1 0 0 0 1 1 1.5 1.5 0 1 1 0 3 1 1 0 0 0-1 1V17a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-2.5a1 1 0 0 0-1-1 1.5 1.5 0 1 1 0-3 1 1 0 0 0 1-1V7a2 2 0 0 0-2-2H4Z"></path></svg>`);
var root_5470 = svg_template(`<title> </title>`);
var root_6470 = svg_template(`<desc> </desc>`);
var root_4470 = svg_template(`<svg><!><!><path d="M4 5a2 2 0 0 0-2 2v2.5a1 1 0 0 0 1 1 1.5 1.5 0 1 1 0 3 1 1 0 0 0-1 1V17a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-2.5a1 1 0 0 0-1-1 1.5 1.5 0 1 1 0-3 1 1 0 0 0 1-1V7a2 2 0 0 0-2-2H4Z"></path></svg>`);
function TicketSolid($$anchor, $$props) {
  if (new.target === TicketSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, TicketSolid);
  validate_prop_bindings($$props, [], [], TicketSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "ticket solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1470();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2470();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3470();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4470();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5470();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6470();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(TicketSolid);
  TicketSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var TicketSolid_default = TicketSolid;
TicketSolid.filename = ".../flowbite-svelte-icons/dist/TicketSolid.svelte";
mark_module_end(TicketSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/TrashBinOutline.svelte
mark_module_start();
var root_2471 = svg_template(`<title> </title>`);
var root_3471 = svg_template(`<desc> </desc>`);
var root_1471 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M5 7h14m-9 3v8m4-8v8M10 3h4a1 1 0 0 1 1 1v3H9V4a1 1 0 0 1 1-1ZM6 7h12v13a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V7Z"></path></svg>`);
var root_5471 = svg_template(`<title> </title>`);
var root_6471 = svg_template(`<desc> </desc>`);
var root_4471 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M5 7h14m-9 3v8m4-8v8M10 3h4a1 1 0 0 1 1 1v3H9V4a1 1 0 0 1 1-1ZM6 7h12v13a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V7Z"></path></svg>`);
function TrashBinOutline($$anchor, $$props) {
  if (new.target === TrashBinOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, TrashBinOutline);
  validate_prop_bindings($$props, [], [], TrashBinOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "trash bin outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1471();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2471();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3471();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4471();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5471();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6471();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(TrashBinOutline);
  TrashBinOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var TrashBinOutline_default = TrashBinOutline;
TrashBinOutline.filename = ".../flowbite-svelte-icons/dist/TrashBinOutline.svelte";
mark_module_end(TrashBinOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/TrashBinSolid.svelte
mark_module_start();
var root_2472 = svg_template(`<title> </title>`);
var root_3472 = svg_template(`<desc> </desc>`);
var root_1472 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M8.586 2.586A2 2 0 0 1 10 2h4a2 2 0 0 1 2 2v2h3a1 1 0 1 1 0 2v12a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V8a1 1 0 0 1 0-2h3V4a2 2 0 0 1 .586-1.414ZM10 6h4V4h-4v2Zm1 4a1 1 0 1 0-2 0v8a1 1 0 1 0 2 0v-8Zm4 0a1 1 0 1 0-2 0v8a1 1 0 1 0 2 0v-8Z" clip-rule="evenodd"></path></svg>`);
var root_5472 = svg_template(`<title> </title>`);
var root_6472 = svg_template(`<desc> </desc>`);
var root_4472 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M8.586 2.586A2 2 0 0 1 10 2h4a2 2 0 0 1 2 2v2h3a1 1 0 1 1 0 2v12a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V8a1 1 0 0 1 0-2h3V4a2 2 0 0 1 .586-1.414ZM10 6h4V4h-4v2Zm1 4a1 1 0 1 0-2 0v8a1 1 0 1 0 2 0v-8Zm4 0a1 1 0 1 0-2 0v8a1 1 0 1 0 2 0v-8Z" clip-rule="evenodd"></path></svg>`);
function TrashBinSolid($$anchor, $$props) {
  if (new.target === TrashBinSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, TrashBinSolid);
  validate_prop_bindings($$props, [], [], TrashBinSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "trash bin solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1472();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2472();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3472();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4472();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5472();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6472();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(TrashBinSolid);
  TrashBinSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var TrashBinSolid_default = TrashBinSolid;
TrashBinSolid.filename = ".../flowbite-svelte-icons/dist/TrashBinSolid.svelte";
mark_module_end(TrashBinSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/TruckOutline.svelte
mark_module_start();
var root_2473 = svg_template(`<title> </title>`);
var root_3473 = svg_template(`<desc> </desc>`);
var root_1473 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M13 7h6l2 4m-8-4v8m0-8V6a1 1 0 0 0-1-1H4a1 1 0 0 0-1 1v9h2m8 0H9m4 0h2m4 0h2v-4m0 0h-5m3.5 5.5a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0Zm-10 0a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0Z"></path></svg>`);
var root_5473 = svg_template(`<title> </title>`);
var root_6473 = svg_template(`<desc> </desc>`);
var root_4473 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M13 7h6l2 4m-8-4v8m0-8V6a1 1 0 0 0-1-1H4a1 1 0 0 0-1 1v9h2m8 0H9m4 0h2m4 0h2v-4m0 0h-5m3.5 5.5a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0Zm-10 0a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0Z"></path></svg>`);
function TruckOutline($$anchor, $$props) {
  if (new.target === TruckOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, TruckOutline);
  validate_prop_bindings($$props, [], [], TruckOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "truck outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1473();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2473();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3473();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4473();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5473();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6473();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(TruckOutline);
  TruckOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var TruckOutline_default = TruckOutline;
TruckOutline.filename = ".../flowbite-svelte-icons/dist/TruckOutline.svelte";
mark_module_end(TruckOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/TruckSolid.svelte
mark_module_start();
var root_2474 = svg_template(`<title> </title>`);
var root_3474 = svg_template(`<desc> </desc>`);
var root_1474 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M4 4a2 2 0 0 0-2 2v9a1 1 0 0 0 1 1h.535a3.5 3.5 0 1 0 6.93 0h3.07a3.5 3.5 0 1 0 6.93 0H21a1 1 0 0 0 1-1v-4a.999.999 0 0 0-.106-.447l-2-4A1 1 0 0 0 19 6h-5a2 2 0 0 0-2-2H4Zm14.192 11.59.016.02a1.5 1.5 0 1 1-.016-.021Zm-10 0 .016.02a1.5 1.5 0 1 1-.016-.021Zm5.806-5.572v-2.02h4.396l1 2.02h-5.396Z" clip-rule="evenodd"></path></svg>`);
var root_5474 = svg_template(`<title> </title>`);
var root_6474 = svg_template(`<desc> </desc>`);
var root_4474 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M4 4a2 2 0 0 0-2 2v9a1 1 0 0 0 1 1h.535a3.5 3.5 0 1 0 6.93 0h3.07a3.5 3.5 0 1 0 6.93 0H21a1 1 0 0 0 1-1v-4a.999.999 0 0 0-.106-.447l-2-4A1 1 0 0 0 19 6h-5a2 2 0 0 0-2-2H4Zm14.192 11.59.016.02a1.5 1.5 0 1 1-.016-.021Zm-10 0 .016.02a1.5 1.5 0 1 1-.016-.021Zm5.806-5.572v-2.02h4.396l1 2.02h-5.396Z" clip-rule="evenodd"></path></svg>`);
function TruckSolid($$anchor, $$props) {
  if (new.target === TruckSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, TruckSolid);
  validate_prop_bindings($$props, [], [], TruckSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "truck solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1474();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2474();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3474();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4474();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5474();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6474();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(TruckSolid);
  TruckSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var TruckSolid_default = TruckSolid;
TruckSolid.filename = ".../flowbite-svelte-icons/dist/TruckSolid.svelte";
mark_module_end(TruckSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/TwitterSolid.svelte
mark_module_start();
var root_2475 = svg_template(`<title> </title>`);
var root_3475 = svg_template(`<desc> </desc>`);
var root_1475 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M22 5.892a8.178 8.178 0 0 1-2.355.635 4.074 4.074 0 0 0 1.8-2.235 8.343 8.343 0 0 1-2.605.981A4.13 4.13 0 0 0 15.85 4a4.068 4.068 0 0 0-4.1 4.038c0 .31.035.618.105.919A11.705 11.705 0 0 1 3.4 4.734a4.006 4.006 0 0 0 1.268 5.392 4.165 4.165 0 0 1-1.859-.5v.05A4.057 4.057 0 0 0 6.1 13.635a4.192 4.192 0 0 1-1.856.07 4.108 4.108 0 0 0 3.831 2.807A8.36 8.36 0 0 1 2 18.184 11.732 11.732 0 0 0 8.291 20 11.502 11.502 0 0 0 19.964 8.5c0-.177 0-.349-.012-.523A8.143 8.143 0 0 0 22 5.892Z" clip-rule="evenodd"></path></svg>`);
var root_5475 = svg_template(`<title> </title>`);
var root_6475 = svg_template(`<desc> </desc>`);
var root_4475 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M22 5.892a8.178 8.178 0 0 1-2.355.635 4.074 4.074 0 0 0 1.8-2.235 8.343 8.343 0 0 1-2.605.981A4.13 4.13 0 0 0 15.85 4a4.068 4.068 0 0 0-4.1 4.038c0 .31.035.618.105.919A11.705 11.705 0 0 1 3.4 4.734a4.006 4.006 0 0 0 1.268 5.392 4.165 4.165 0 0 1-1.859-.5v.05A4.057 4.057 0 0 0 6.1 13.635a4.192 4.192 0 0 1-1.856.07 4.108 4.108 0 0 0 3.831 2.807A8.36 8.36 0 0 1 2 18.184 11.732 11.732 0 0 0 8.291 20 11.502 11.502 0 0 0 19.964 8.5c0-.177 0-.349-.012-.523A8.143 8.143 0 0 0 22 5.892Z" clip-rule="evenodd"></path></svg>`);
function TwitterSolid($$anchor, $$props) {
  if (new.target === TwitterSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, TwitterSolid);
  validate_prop_bindings($$props, [], [], TwitterSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "twitter solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1475();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2475();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3475();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4475();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5475();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6475();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(TwitterSolid);
  TwitterSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var TwitterSolid_default = TwitterSolid;
TwitterSolid.filename = ".../flowbite-svelte-icons/dist/TwitterSolid.svelte";
mark_module_end(TwitterSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/UndoOutline.svelte
mark_module_start();
var root_2476 = svg_template(`<title> </title>`);
var root_3476 = svg_template(`<desc> </desc>`);
var root_1476 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M3 9h13a5 5 0 0 1 0 10H7M3 9l4-4M3 9l4 4"></path></svg>`);
var root_5476 = svg_template(`<title> </title>`);
var root_6476 = svg_template(`<desc> </desc>`);
var root_4476 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M3 9h13a5 5 0 0 1 0 10H7M3 9l4-4M3 9l4 4"></path></svg>`);
function UndoOutline($$anchor, $$props) {
  if (new.target === UndoOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, UndoOutline);
  validate_prop_bindings($$props, [], [], UndoOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "undo outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1476();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2476();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3476();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4476();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5476();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6476();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(UndoOutline);
  UndoOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var UndoOutline_default = UndoOutline;
UndoOutline.filename = ".../flowbite-svelte-icons/dist/UndoOutline.svelte";
mark_module_end(UndoOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/UploadOutline.svelte
mark_module_start();
var root_2477 = svg_template(`<title> </title>`);
var root_3477 = svg_template(`<desc> </desc>`);
var root_1477 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12 5v9m-5 0H5a1 1 0 0 0-1 1v4a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1v-4a1 1 0 0 0-1-1h-2M8 9l4-5 4 5m1 8h.01"></path></svg>`);
var root_5477 = svg_template(`<title> </title>`);
var root_6477 = svg_template(`<desc> </desc>`);
var root_4477 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12 5v9m-5 0H5a1 1 0 0 0-1 1v4a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1v-4a1 1 0 0 0-1-1h-2M8 9l4-5 4 5m1 8h.01"></path></svg>`);
function UploadOutline($$anchor, $$props) {
  if (new.target === UploadOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, UploadOutline);
  validate_prop_bindings($$props, [], [], UploadOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "upload outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1477();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2477();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3477();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4477();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5477();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6477();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(UploadOutline);
  UploadOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var UploadOutline_default = UploadOutline;
UploadOutline.filename = ".../flowbite-svelte-icons/dist/UploadOutline.svelte";
mark_module_end(UploadOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/UploadSolid.svelte
mark_module_start();
var root_2478 = svg_template(`<title> </title>`);
var root_3478 = svg_template(`<desc> </desc>`);
var root_1478 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M12 3a1 1 0 0 1 .78.375l4 5a1 1 0 1 1-1.56 1.25L13 6.85V14a1 1 0 1 1-2 0V6.85L8.78 9.626a1 1 0 1 1-1.56-1.25l4-5A1 1 0 0 1 12 3ZM9 14v-1H5a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-4a2 2 0 0 0-2-2h-4v1a3 3 0 1 1-6 0Zm8 2a1 1 0 1 0 0 2h.01a1 1 0 1 0 0-2H17Z" clip-rule="evenodd"></path></svg>`);
var root_5478 = svg_template(`<title> </title>`);
var root_6478 = svg_template(`<desc> </desc>`);
var root_4478 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M12 3a1 1 0 0 1 .78.375l4 5a1 1 0 1 1-1.56 1.25L13 6.85V14a1 1 0 1 1-2 0V6.85L8.78 9.626a1 1 0 1 1-1.56-1.25l4-5A1 1 0 0 1 12 3ZM9 14v-1H5a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-4a2 2 0 0 0-2-2h-4v1a3 3 0 1 1-6 0Zm8 2a1 1 0 1 0 0 2h.01a1 1 0 1 0 0-2H17Z" clip-rule="evenodd"></path></svg>`);
function UploadSolid($$anchor, $$props) {
  if (new.target === UploadSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, UploadSolid);
  validate_prop_bindings($$props, [], [], UploadSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "upload solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1478();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2478();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3478();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4478();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5478();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6478();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(UploadSolid);
  UploadSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var UploadSolid_default = UploadSolid;
UploadSolid.filename = ".../flowbite-svelte-icons/dist/UploadSolid.svelte";
mark_module_end(UploadSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/UserAddOutline.svelte
mark_module_start();
var root_2479 = svg_template(`<title> </title>`);
var root_3479 = svg_template(`<desc> </desc>`);
var root_1479 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M16 12h4m-2 2v-4M4 18v-1a3 3 0 0 1 3-3h4a3 3 0 0 1 3 3v1a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1Zm8-10a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"></path></svg>`);
var root_5479 = svg_template(`<title> </title>`);
var root_6479 = svg_template(`<desc> </desc>`);
var root_4479 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M16 12h4m-2 2v-4M4 18v-1a3 3 0 0 1 3-3h4a3 3 0 0 1 3 3v1a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1Zm8-10a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"></path></svg>`);
function UserAddOutline($$anchor, $$props) {
  if (new.target === UserAddOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, UserAddOutline);
  validate_prop_bindings($$props, [], [], UserAddOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "user add outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1479();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2479();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3479();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4479();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5479();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6479();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(UserAddOutline);
  UserAddOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var UserAddOutline_default = UserAddOutline;
UserAddOutline.filename = ".../flowbite-svelte-icons/dist/UserAddOutline.svelte";
mark_module_end(UserAddOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/UserAddSolid.svelte
mark_module_start();
var root_2480 = svg_template(`<title> </title>`);
var root_3480 = svg_template(`<desc> </desc>`);
var root_1480 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M9 4a4 4 0 1 0 0 8 4 4 0 0 0 0-8Zm-2 9a4 4 0 0 0-4 4v1a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2v-1a4 4 0 0 0-4-4H7Zm8-1a1 1 0 0 1 1-1h1v-1a1 1 0 1 1 2 0v1h1a1 1 0 1 1 0 2h-1v1a1 1 0 1 1-2 0v-1h-1a1 1 0 0 1-1-1Z" clip-rule="evenodd"></path></svg>`);
var root_5480 = svg_template(`<title> </title>`);
var root_6480 = svg_template(`<desc> </desc>`);
var root_4480 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M9 4a4 4 0 1 0 0 8 4 4 0 0 0 0-8Zm-2 9a4 4 0 0 0-4 4v1a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2v-1a4 4 0 0 0-4-4H7Zm8-1a1 1 0 0 1 1-1h1v-1a1 1 0 1 1 2 0v1h1a1 1 0 1 1 0 2h-1v1a1 1 0 1 1-2 0v-1h-1a1 1 0 0 1-1-1Z" clip-rule="evenodd"></path></svg>`);
function UserAddSolid($$anchor, $$props) {
  if (new.target === UserAddSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, UserAddSolid);
  validate_prop_bindings($$props, [], [], UserAddSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "user add solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1480();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2480();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3480();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4480();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5480();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6480();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(UserAddSolid);
  UserAddSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var UserAddSolid_default = UserAddSolid;
UserAddSolid.filename = ".../flowbite-svelte-icons/dist/UserAddSolid.svelte";
mark_module_end(UserAddSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/UserCircleOutline.svelte
mark_module_start();
var root_2481 = svg_template(`<title> </title>`);
var root_3481 = svg_template(`<desc> </desc>`);
var root_1481 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12 21a9 9 0 1 0 0-18 9 9 0 0 0 0 18Zm0 0a8.949 8.949 0 0 0 4.951-1.488A3.987 3.987 0 0 0 13 16h-2a3.987 3.987 0 0 0-3.951 3.512A8.948 8.948 0 0 0 12 21Zm3-11a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"></path></svg>`);
var root_5481 = svg_template(`<title> </title>`);
var root_6481 = svg_template(`<desc> </desc>`);
var root_4481 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M12 21a9 9 0 1 0 0-18 9 9 0 0 0 0 18Zm0 0a8.949 8.949 0 0 0 4.951-1.488A3.987 3.987 0 0 0 13 16h-2a3.987 3.987 0 0 0-3.951 3.512A8.948 8.948 0 0 0 12 21Zm3-11a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"></path></svg>`);
function UserCircleOutline($$anchor, $$props) {
  if (new.target === UserCircleOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, UserCircleOutline);
  validate_prop_bindings($$props, [], [], UserCircleOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "user circle outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1481();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2481();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3481();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4481();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5481();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6481();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(UserCircleOutline);
  UserCircleOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var UserCircleOutline_default = UserCircleOutline;
UserCircleOutline.filename = ".../flowbite-svelte-icons/dist/UserCircleOutline.svelte";
mark_module_end(UserCircleOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/UserCircleSolid.svelte
mark_module_start();
var root_2482 = svg_template(`<title> </title>`);
var root_3482 = svg_template(`<desc> </desc>`);
var root_1482 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M12 20a7.966 7.966 0 0 1-5.002-1.756l.002.001v-.683c0-1.794 1.492-3.25 3.333-3.25h3.334c1.84 0 3.333 1.456 3.333 3.25v.683A7.966 7.966 0 0 1 12 20ZM2 12C2 6.477 6.477 2 12 2s10 4.477 10 10c0 5.5-4.44 9.963-9.932 10h-.138C6.438 21.962 2 17.5 2 12Zm10-5c-1.84 0-3.333 1.455-3.333 3.25S10.159 13.5 12 13.5c1.84 0 3.333-1.455 3.333-3.25S13.841 7 12 7Z" clip-rule="evenodd"></path></svg>`);
var root_5482 = svg_template(`<title> </title>`);
var root_6482 = svg_template(`<desc> </desc>`);
var root_4482 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M12 20a7.966 7.966 0 0 1-5.002-1.756l.002.001v-.683c0-1.794 1.492-3.25 3.333-3.25h3.334c1.84 0 3.333 1.456 3.333 3.25v.683A7.966 7.966 0 0 1 12 20ZM2 12C2 6.477 6.477 2 12 2s10 4.477 10 10c0 5.5-4.44 9.963-9.932 10h-.138C6.438 21.962 2 17.5 2 12Zm10-5c-1.84 0-3.333 1.455-3.333 3.25S10.159 13.5 12 13.5c1.84 0 3.333-1.455 3.333-3.25S13.841 7 12 7Z" clip-rule="evenodd"></path></svg>`);
function UserCircleSolid($$anchor, $$props) {
  if (new.target === UserCircleSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, UserCircleSolid);
  validate_prop_bindings($$props, [], [], UserCircleSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "user circle solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1482();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2482();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3482();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4482();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5482();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6482();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(UserCircleSolid);
  UserCircleSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var UserCircleSolid_default = UserCircleSolid;
UserCircleSolid.filename = ".../flowbite-svelte-icons/dist/UserCircleSolid.svelte";
mark_module_end(UserCircleSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/UserEditOutline.svelte
mark_module_start();
var root_2483 = svg_template(`<title> </title>`);
var root_3483 = svg_template(`<desc> </desc>`);
var root_1483 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="square" stroke-linejoin="round" d="M7 19H5a1 1 0 0 1-1-1v-1a3 3 0 0 1 3-3h1m4-6a3 3 0 1 1-6 0 3 3 0 0 1 6 0Zm7.441 1.559a1.907 1.907 0 0 1 0 2.698l-6.069 6.069L10 19l.674-3.372 6.07-6.07a1.907 1.907 0 0 1 2.697 0Z"></path></svg>`);
var root_5483 = svg_template(`<title> </title>`);
var root_6483 = svg_template(`<desc> </desc>`);
var root_4483 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="square" stroke-linejoin="round" d="M7 19H5a1 1 0 0 1-1-1v-1a3 3 0 0 1 3-3h1m4-6a3 3 0 1 1-6 0 3 3 0 0 1 6 0Zm7.441 1.559a1.907 1.907 0 0 1 0 2.698l-6.069 6.069L10 19l.674-3.372 6.07-6.07a1.907 1.907 0 0 1 2.697 0Z"></path></svg>`);
function UserEditOutline($$anchor, $$props) {
  if (new.target === UserEditOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, UserEditOutline);
  validate_prop_bindings($$props, [], [], UserEditOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "user edit outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1483();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2483();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3483();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4483();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5483();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6483();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(UserEditOutline);
  UserEditOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var UserEditOutline_default = UserEditOutline;
UserEditOutline.filename = ".../flowbite-svelte-icons/dist/UserEditOutline.svelte";
mark_module_end(UserEditOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/UserEditSolid.svelte
mark_module_start();
var root_2484 = svg_template(`<title> </title>`);
var root_3484 = svg_template(`<desc> </desc>`);
var root_1484 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M5 8a4 4 0 1 1 7.796 1.263l-2.533 2.534A4 4 0 0 1 5 8Zm4.06 5H7a4 4 0 0 0-4 4v1a2 2 0 0 0 2 2h2.172a2.999 2.999 0 0 1-.114-1.588l.674-3.372a3 3 0 0 1 .82-1.533L9.06 13Zm9.032-5a2.907 2.907 0 0 0-2.056.852L9.967 14.92a1 1 0 0 0-.273.51l-.675 3.373a1 1 0 0 0 1.177 1.177l3.372-.675a1 1 0 0 0 .511-.273l6.07-6.07a2.91 2.91 0 0 0-.944-4.742A2.907 2.907 0 0 0 18.092 8Z" clip-rule="evenodd"></path></svg>`);
var root_5484 = svg_template(`<title> </title>`);
var root_6484 = svg_template(`<desc> </desc>`);
var root_4484 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M5 8a4 4 0 1 1 7.796 1.263l-2.533 2.534A4 4 0 0 1 5 8Zm4.06 5H7a4 4 0 0 0-4 4v1a2 2 0 0 0 2 2h2.172a2.999 2.999 0 0 1-.114-1.588l.674-3.372a3 3 0 0 1 .82-1.533L9.06 13Zm9.032-5a2.907 2.907 0 0 0-2.056.852L9.967 14.92a1 1 0 0 0-.273.51l-.675 3.373a1 1 0 0 0 1.177 1.177l3.372-.675a1 1 0 0 0 .511-.273l6.07-6.07a2.91 2.91 0 0 0-.944-4.742A2.907 2.907 0 0 0 18.092 8Z" clip-rule="evenodd"></path></svg>`);
function UserEditSolid($$anchor, $$props) {
  if (new.target === UserEditSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, UserEditSolid);
  validate_prop_bindings($$props, [], [], UserEditSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "user edit solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1484();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2484();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3484();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4484();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5484();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6484();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(UserEditSolid);
  UserEditSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var UserEditSolid_default = UserEditSolid;
UserEditSolid.filename = ".../flowbite-svelte-icons/dist/UserEditSolid.svelte";
mark_module_end(UserEditSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/UserHeadsetOutline.svelte
mark_module_start();
var root_2485 = svg_template(`<title> </title>`);
var root_3485 = svg_template(`<desc> </desc>`);
var root_1485 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M14.079 6.839a3 3 0 0 0-4.255.1M13 20h1.083A3.916 3.916 0 0 0 18 16.083V9A6 6 0 1 0 6 9v7m7 4v-1a1 1 0 0 0-1-1h-1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1h1a1 1 0 0 0 1-1Zm-7-4v-6H5a2 2 0 0 0-2 2v2a2 2 0 0 0 2 2h1Zm12-6h1a2 2 0 0 1 2 2v2a2 2 0 0 1-2 2h-1v-6Z"></path></svg>`);
var root_5485 = svg_template(`<title> </title>`);
var root_6485 = svg_template(`<desc> </desc>`);
var root_4485 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M14.079 6.839a3 3 0 0 0-4.255.1M13 20h1.083A3.916 3.916 0 0 0 18 16.083V9A6 6 0 1 0 6 9v7m7 4v-1a1 1 0 0 0-1-1h-1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1h1a1 1 0 0 0 1-1Zm-7-4v-6H5a2 2 0 0 0-2 2v2a2 2 0 0 0 2 2h1Zm12-6h1a2 2 0 0 1 2 2v2a2 2 0 0 1-2 2h-1v-6Z"></path></svg>`);
function UserHeadsetOutline($$anchor, $$props) {
  if (new.target === UserHeadsetOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, UserHeadsetOutline);
  validate_prop_bindings($$props, [], [], UserHeadsetOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "user headset outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1485();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2485();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3485();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4485();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5485();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6485();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(UserHeadsetOutline);
  UserHeadsetOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var UserHeadsetOutline_default = UserHeadsetOutline;
UserHeadsetOutline.filename = ".../flowbite-svelte-icons/dist/UserHeadsetOutline.svelte";
mark_module_end(UserHeadsetOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/UserHeadsetSolid.svelte
mark_module_start();
var root_2486 = svg_template(`<title> </title>`);
var root_3486 = svg_template(`<desc> </desc>`);
var root_1486 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M12 2a7 7 0 0 0-7 7 3 3 0 0 0-3 3v2a3 3 0 0 0 3 3h1a1 1 0 0 0 1-1V9a5 5 0 1 1 10 0v7.083A2.919 2.919 0 0 1 14.083 19H14a2 2 0 0 0-2-2h-1a2 2 0 0 0-2 2v1a2 2 0 0 0 2 2h1a2 2 0 0 0 1.732-1h.351a4.917 4.917 0 0 0 4.83-4H19a3 3 0 0 0 3-3v-2a3 3 0 0 0-3-3 7 7 0 0 0-7-7Zm1.45 3.275a4 4 0 0 0-4.352.976 1 1 0 0 0 1.452 1.376 2.001 2.001 0 0 1 2.836-.067 1 1 0 1 0 1.386-1.442 4 4 0 0 0-1.321-.843Z" clip-rule="evenodd"></path></svg>`);
var root_5486 = svg_template(`<title> </title>`);
var root_6486 = svg_template(`<desc> </desc>`);
var root_4486 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M12 2a7 7 0 0 0-7 7 3 3 0 0 0-3 3v2a3 3 0 0 0 3 3h1a1 1 0 0 0 1-1V9a5 5 0 1 1 10 0v7.083A2.919 2.919 0 0 1 14.083 19H14a2 2 0 0 0-2-2h-1a2 2 0 0 0-2 2v1a2 2 0 0 0 2 2h1a2 2 0 0 0 1.732-1h.351a4.917 4.917 0 0 0 4.83-4H19a3 3 0 0 0 3-3v-2a3 3 0 0 0-3-3 7 7 0 0 0-7-7Zm1.45 3.275a4 4 0 0 0-4.352.976 1 1 0 0 0 1.452 1.376 2.001 2.001 0 0 1 2.836-.067 1 1 0 1 0 1.386-1.442 4 4 0 0 0-1.321-.843Z" clip-rule="evenodd"></path></svg>`);
function UserHeadsetSolid($$anchor, $$props) {
  if (new.target === UserHeadsetSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, UserHeadsetSolid);
  validate_prop_bindings($$props, [], [], UserHeadsetSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "user headset solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1486();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2486();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3486();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4486();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5486();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6486();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(UserHeadsetSolid);
  UserHeadsetSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var UserHeadsetSolid_default = UserHeadsetSolid;
UserHeadsetSolid.filename = ".../flowbite-svelte-icons/dist/UserHeadsetSolid.svelte";
mark_module_end(UserHeadsetSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/UserOutline.svelte
mark_module_start();
var root_2487 = svg_template(`<title> </title>`);
var root_3487 = svg_template(`<desc> </desc>`);
var root_1487 = svg_template(`<svg><!><!><path stroke="currentColor" d="M7 17v1a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1v-1a3 3 0 0 0-3-3h-4a3 3 0 0 0-3 3Zm8-9a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"></path></svg>`);
var root_5487 = svg_template(`<title> </title>`);
var root_6487 = svg_template(`<desc> </desc>`);
var root_4487 = svg_template(`<svg><!><!><path stroke="currentColor" d="M7 17v1a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1v-1a3 3 0 0 0-3-3h-4a3 3 0 0 0-3 3Zm8-9a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"></path></svg>`);
function UserOutline($$anchor, $$props) {
  if (new.target === UserOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, UserOutline);
  validate_prop_bindings($$props, [], [], UserOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "user outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1487();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2487();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3487();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4487();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5487();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6487();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(UserOutline);
  UserOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var UserOutline_default = UserOutline;
UserOutline.filename = ".../flowbite-svelte-icons/dist/UserOutline.svelte";
mark_module_end(UserOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/UserRemoveOutline.svelte
mark_module_start();
var root_2488 = svg_template(`<title> </title>`);
var root_3488 = svg_template(`<desc> </desc>`);
var root_1488 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M16 12h4M4 18v-1a3 3 0 0 1 3-3h4a3 3 0 0 1 3 3v1a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1Zm8-10a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"></path></svg>`);
var root_5488 = svg_template(`<title> </title>`);
var root_6488 = svg_template(`<desc> </desc>`);
var root_4488 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M16 12h4M4 18v-1a3 3 0 0 1 3-3h4a3 3 0 0 1 3 3v1a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1Zm8-10a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"></path></svg>`);
function UserRemoveOutline($$anchor, $$props) {
  if (new.target === UserRemoveOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, UserRemoveOutline);
  validate_prop_bindings($$props, [], [], UserRemoveOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "user remove outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1488();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2488();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3488();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4488();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5488();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6488();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(UserRemoveOutline);
  UserRemoveOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var UserRemoveOutline_default = UserRemoveOutline;
UserRemoveOutline.filename = ".../flowbite-svelte-icons/dist/UserRemoveOutline.svelte";
mark_module_end(UserRemoveOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/UserRemoveSolid.svelte
mark_module_start();
var root_2489 = svg_template(`<title> </title>`);
var root_3489 = svg_template(`<desc> </desc>`);
var root_1489 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M5 8a4 4 0 1 1 8 0 4 4 0 0 1-8 0Zm-2 9a4 4 0 0 1 4-4h4a4 4 0 0 1 4 4v1a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-1Zm13-6a1 1 0 1 0 0 2h4a1 1 0 1 0 0-2h-4Z" clip-rule="evenodd"></path></svg>`);
var root_5489 = svg_template(`<title> </title>`);
var root_6489 = svg_template(`<desc> </desc>`);
var root_4489 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M5 8a4 4 0 1 1 8 0 4 4 0 0 1-8 0Zm-2 9a4 4 0 0 1 4-4h4a4 4 0 0 1 4 4v1a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-1Zm13-6a1 1 0 1 0 0 2h4a1 1 0 1 0 0-2h-4Z" clip-rule="evenodd"></path></svg>`);
function UserRemoveSolid($$anchor, $$props) {
  if (new.target === UserRemoveSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, UserRemoveSolid);
  validate_prop_bindings($$props, [], [], UserRemoveSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "user remove solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1489();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2489();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3489();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4489();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5489();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6489();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(UserRemoveSolid);
  UserRemoveSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var UserRemoveSolid_default = UserRemoveSolid;
UserRemoveSolid.filename = ".../flowbite-svelte-icons/dist/UserRemoveSolid.svelte";
mark_module_end(UserRemoveSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/UserSettingsOutline.svelte
mark_module_start();
var root_2490 = svg_template(`<title> </title>`);
var root_3490 = svg_template(`<desc> </desc>`);
var root_1490 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="square" stroke-linejoin="round" d="M10 19H5a1 1 0 0 1-1-1v-1a3 3 0 0 1 3-3h2m10 1a3 3 0 0 1-3 3m3-3a3 3 0 0 0-3-3m3 3h1m-4 3a3 3 0 0 1-3-3m3 3v1m-3-4a3 3 0 0 1 3-3m-3 3h-1m4-3v-1m-2.121 1.879-.707-.707m5.656 5.656-.707-.707m-4.242 0-.707.707m5.656-5.656-.707.707M12 8a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"></path></svg>`);
var root_5490 = svg_template(`<title> </title>`);
var root_6490 = svg_template(`<desc> </desc>`);
var root_4490 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="square" stroke-linejoin="round" d="M10 19H5a1 1 0 0 1-1-1v-1a3 3 0 0 1 3-3h2m10 1a3 3 0 0 1-3 3m3-3a3 3 0 0 0-3-3m3 3h1m-4 3a3 3 0 0 1-3-3m3 3v1m-3-4a3 3 0 0 1 3-3m-3 3h-1m4-3v-1m-2.121 1.879-.707-.707m5.656 5.656-.707-.707m-4.242 0-.707.707m5.656-5.656-.707.707M12 8a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"></path></svg>`);
function UserSettingsOutline($$anchor, $$props) {
  if (new.target === UserSettingsOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, UserSettingsOutline);
  validate_prop_bindings($$props, [], [], UserSettingsOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "user settings outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1490();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2490();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3490();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4490();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5490();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6490();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(UserSettingsOutline);
  UserSettingsOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var UserSettingsOutline_default = UserSettingsOutline;
UserSettingsOutline.filename = ".../flowbite-svelte-icons/dist/UserSettingsOutline.svelte";
mark_module_end(UserSettingsOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/UserSettingsSolid.svelte
mark_module_start();
var root_2491 = svg_template(`<title> </title>`);
var root_3491 = svg_template(`<desc> </desc>`);
var root_1491 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M17 10v1.126c.367.095.714.24 1.032.428l.796-.797 1.415 1.415-.797.796c.188.318.333.665.428 1.032H21v2h-1.126c-.095.367-.24.714-.428 1.032l.797.796-1.415 1.415-.796-.797a3.979 3.979 0 0 1-1.032.428V20h-2v-1.126a3.977 3.977 0 0 1-1.032-.428l-.796.797-1.415-1.415.797-.796A3.975 3.975 0 0 1 12.126 16H11v-2h1.126c.095-.367.24-.714.428-1.032l-.797-.796 1.415-1.415.796.797A3.977 3.977 0 0 1 15 11.126V10h2Zm.406 3.578.016.016c.354.358.574.85.578 1.392v.028a2 2 0 0 1-3.409 1.406l-.01-.012a2 2 0 0 1 2.826-2.83ZM5 8a4 4 0 1 1 7.938.703 7.029 7.029 0 0 0-3.235 3.235A4 4 0 0 1 5 8Zm4.29 5H7a4 4 0 0 0-4 4v1a2 2 0 0 0 2 2h6.101A6.979 6.979 0 0 1 9 15c0-.695.101-1.366.29-2Z" clip-rule="evenodd"></path></svg>`);
var root_5491 = svg_template(`<title> </title>`);
var root_6491 = svg_template(`<desc> </desc>`);
var root_4491 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M17 10v1.126c.367.095.714.24 1.032.428l.796-.797 1.415 1.415-.797.796c.188.318.333.665.428 1.032H21v2h-1.126c-.095.367-.24.714-.428 1.032l.797.796-1.415 1.415-.796-.797a3.979 3.979 0 0 1-1.032.428V20h-2v-1.126a3.977 3.977 0 0 1-1.032-.428l-.796.797-1.415-1.415.797-.796A3.975 3.975 0 0 1 12.126 16H11v-2h1.126c.095-.367.24-.714.428-1.032l-.797-.796 1.415-1.415.796.797A3.977 3.977 0 0 1 15 11.126V10h2Zm.406 3.578.016.016c.354.358.574.85.578 1.392v.028a2 2 0 0 1-3.409 1.406l-.01-.012a2 2 0 0 1 2.826-2.83ZM5 8a4 4 0 1 1 7.938.703 7.029 7.029 0 0 0-3.235 3.235A4 4 0 0 1 5 8Zm4.29 5H7a4 4 0 0 0-4 4v1a2 2 0 0 0 2 2h6.101A6.979 6.979 0 0 1 9 15c0-.695.101-1.366.29-2Z" clip-rule="evenodd"></path></svg>`);
function UserSettingsSolid($$anchor, $$props) {
  if (new.target === UserSettingsSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, UserSettingsSolid);
  validate_prop_bindings($$props, [], [], UserSettingsSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "user settings solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1491();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2491();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3491();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4491();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5491();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6491();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(UserSettingsSolid);
  UserSettingsSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var UserSettingsSolid_default = UserSettingsSolid;
UserSettingsSolid.filename = ".../flowbite-svelte-icons/dist/UserSettingsSolid.svelte";
mark_module_end(UserSettingsSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/UserSolid.svelte
mark_module_start();
var root_2492 = svg_template(`<title> </title>`);
var root_3492 = svg_template(`<desc> </desc>`);
var root_1492 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M12 4a4 4 0 1 0 0 8 4 4 0 0 0 0-8Zm-2 9a4 4 0 0 0-4 4v1a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2v-1a4 4 0 0 0-4-4h-4Z" clip-rule="evenodd"></path></svg>`);
var root_5492 = svg_template(`<title> </title>`);
var root_6492 = svg_template(`<desc> </desc>`);
var root_4492 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M12 4a4 4 0 1 0 0 8 4 4 0 0 0 0-8Zm-2 9a4 4 0 0 0-4 4v1a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2v-1a4 4 0 0 0-4-4h-4Z" clip-rule="evenodd"></path></svg>`);
function UserSolid($$anchor, $$props) {
  if (new.target === UserSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, UserSolid);
  validate_prop_bindings($$props, [], [], UserSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "user solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1492();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2492();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3492();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4492();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5492();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6492();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(UserSolid);
  UserSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var UserSolid_default = UserSolid;
UserSolid.filename = ".../flowbite-svelte-icons/dist/UserSolid.svelte";
mark_module_end(UserSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/UsersGroupOutline.svelte
mark_module_start();
var root_2493 = svg_template(`<title> </title>`);
var root_3493 = svg_template(`<desc> </desc>`);
var root_1493 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" d="M4.5 17H4a1 1 0 0 1-1-1 3 3 0 0 1 3-3h1m0-3.05A2.5 2.5 0 1 1 9 5.5M19.5 17h.5a1 1 0 0 0 1-1 3 3 0 0 0-3-3h-1m0-3.05a2.5 2.5 0 1 0-2-4.45m.5 13.5h-7a1 1 0 0 1-1-1 3 3 0 0 1 3-3h3a3 3 0 0 1 3 3 1 1 0 0 1-1 1Zm-1-9.5a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0Z"></path></svg>`);
var root_5493 = svg_template(`<title> </title>`);
var root_6493 = svg_template(`<desc> </desc>`);
var root_4493 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" d="M4.5 17H4a1 1 0 0 1-1-1 3 3 0 0 1 3-3h1m0-3.05A2.5 2.5 0 1 1 9 5.5M19.5 17h.5a1 1 0 0 0 1-1 3 3 0 0 0-3-3h-1m0-3.05a2.5 2.5 0 1 0-2-4.45m.5 13.5h-7a1 1 0 0 1-1-1 3 3 0 0 1 3-3h3a3 3 0 0 1 3 3 1 1 0 0 1-1 1Zm-1-9.5a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0Z"></path></svg>`);
function UsersGroupOutline($$anchor, $$props) {
  if (new.target === UsersGroupOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, UsersGroupOutline);
  validate_prop_bindings($$props, [], [], UsersGroupOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "users group outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1493();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2493();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3493();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4493();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5493();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6493();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(UsersGroupOutline);
  UsersGroupOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var UsersGroupOutline_default = UsersGroupOutline;
UsersGroupOutline.filename = ".../flowbite-svelte-icons/dist/UsersGroupOutline.svelte";
mark_module_end(UsersGroupOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/UsersGroupSolid.svelte
mark_module_start();
var root_2494 = svg_template(`<title> </title>`);
var root_3494 = svg_template(`<desc> </desc>`);
var root_1494 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M12 6a3.5 3.5 0 1 0 0 7 3.5 3.5 0 0 0 0-7Zm-1.5 8a4 4 0 0 0-4 4 2 2 0 0 0 2 2h7a2 2 0 0 0 2-2 4 4 0 0 0-4-4h-3Zm6.82-3.096a5.51 5.51 0 0 0-2.797-6.293 3.5 3.5 0 1 1 2.796 6.292ZM19.5 18h.5a2 2 0 0 0 2-2 4 4 0 0 0-4-4h-1.1a5.503 5.503 0 0 1-.471.762A5.998 5.998 0 0 1 19.5 18ZM4 7.5a3.5 3.5 0 0 1 5.477-2.889 5.5 5.5 0 0 0-2.796 6.293A3.501 3.501 0 0 1 4 7.5ZM7.1 12H6a4 4 0 0 0-4 4 2 2 0 0 0 2 2h.5a5.998 5.998 0 0 1 3.071-5.238A5.505 5.505 0 0 1 7.1 12Z" clip-rule="evenodd"></path></svg>`);
var root_5494 = svg_template(`<title> </title>`);
var root_6494 = svg_template(`<desc> </desc>`);
var root_4494 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M12 6a3.5 3.5 0 1 0 0 7 3.5 3.5 0 0 0 0-7Zm-1.5 8a4 4 0 0 0-4 4 2 2 0 0 0 2 2h7a2 2 0 0 0 2-2 4 4 0 0 0-4-4h-3Zm6.82-3.096a5.51 5.51 0 0 0-2.797-6.293 3.5 3.5 0 1 1 2.796 6.292ZM19.5 18h.5a2 2 0 0 0 2-2 4 4 0 0 0-4-4h-1.1a5.503 5.503 0 0 1-.471.762A5.998 5.998 0 0 1 19.5 18ZM4 7.5a3.5 3.5 0 0 1 5.477-2.889 5.5 5.5 0 0 0-2.796 6.293A3.501 3.501 0 0 1 4 7.5ZM7.1 12H6a4 4 0 0 0-4 4 2 2 0 0 0 2 2h.5a5.998 5.998 0 0 1 3.071-5.238A5.505 5.505 0 0 1 7.1 12Z" clip-rule="evenodd"></path></svg>`);
function UsersGroupSolid($$anchor, $$props) {
  if (new.target === UsersGroupSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, UsersGroupSolid);
  validate_prop_bindings($$props, [], [], UsersGroupSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "users group solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1494();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2494();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3494();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4494();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5494();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6494();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(UsersGroupSolid);
  UsersGroupSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var UsersGroupSolid_default = UsersGroupSolid;
UsersGroupSolid.filename = ".../flowbite-svelte-icons/dist/UsersGroupSolid.svelte";
mark_module_end(UsersGroupSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/UsersOutline.svelte
mark_module_start();
var root_2495 = svg_template(`<title> </title>`);
var root_3495 = svg_template(`<desc> </desc>`);
var root_1495 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" d="M16 19h4a1 1 0 0 0 1-1v-1a3 3 0 0 0-3-3h-2m-2.236-4a3 3 0 1 0 0-4M3 18v-1a3 3 0 0 1 3-3h4a3 3 0 0 1 3 3v1a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1Zm8-10a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"></path></svg>`);
var root_5495 = svg_template(`<title> </title>`);
var root_6495 = svg_template(`<desc> </desc>`);
var root_4495 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" d="M16 19h4a1 1 0 0 0 1-1v-1a3 3 0 0 0-3-3h-2m-2.236-4a3 3 0 1 0 0-4M3 18v-1a3 3 0 0 1 3-3h4a3 3 0 0 1 3 3v1a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1Zm8-10a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"></path></svg>`);
function UsersOutline($$anchor, $$props) {
  if (new.target === UsersOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, UsersOutline);
  validate_prop_bindings($$props, [], [], UsersOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "users outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1495();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2495();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3495();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4495();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5495();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6495();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(UsersOutline);
  UsersOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var UsersOutline_default = UsersOutline;
UsersOutline.filename = ".../flowbite-svelte-icons/dist/UsersOutline.svelte";
mark_module_end(UsersOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/UsersSolid.svelte
mark_module_start();
var root_2496 = svg_template(`<title> </title>`);
var root_3496 = svg_template(`<desc> </desc>`);
var root_1496 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M8 4a4 4 0 1 0 0 8 4 4 0 0 0 0-8Zm-2 9a4 4 0 0 0-4 4v1a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2v-1a4 4 0 0 0-4-4H6Zm7.25-2.095c.478-.86.75-1.85.75-2.905a5.973 5.973 0 0 0-.75-2.906 4 4 0 1 1 0 5.811ZM15.466 20c.34-.588.535-1.271.535-2v-1a5.978 5.978 0 0 0-1.528-4H18a4 4 0 0 1 4 4v1a2 2 0 0 1-2 2h-4.535Z" clip-rule="evenodd"></path></svg>`);
var root_5496 = svg_template(`<title> </title>`);
var root_6496 = svg_template(`<desc> </desc>`);
var root_4496 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M8 4a4 4 0 1 0 0 8 4 4 0 0 0 0-8Zm-2 9a4 4 0 0 0-4 4v1a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2v-1a4 4 0 0 0-4-4H6Zm7.25-2.095c.478-.86.75-1.85.75-2.905a5.973 5.973 0 0 0-.75-2.906 4 4 0 1 1 0 5.811ZM15.466 20c.34-.588.535-1.271.535-2v-1a5.978 5.978 0 0 0-1.528-4H18a4 4 0 0 1 4 4v1a2 2 0 0 1-2 2h-4.535Z" clip-rule="evenodd"></path></svg>`);
function UsersSolid($$anchor, $$props) {
  if (new.target === UsersSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, UsersSolid);
  validate_prop_bindings($$props, [], [], UsersSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "users solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1496();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2496();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3496();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4496();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5496();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6496();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(UsersSolid);
  UsersSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var UsersSolid_default = UsersSolid;
UsersSolid.filename = ".../flowbite-svelte-icons/dist/UsersSolid.svelte";
mark_module_end(UsersSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/VideoCameraOutline.svelte
mark_module_start();
var root_2497 = svg_template(`<title> </title>`);
var root_3497 = svg_template(`<desc> </desc>`);
var root_1497 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M14 6H4a1 1 0 0 0-1 1v10a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1V7a1 1 0 0 0-1-1Zm7 11-6-2V9l6-2v10Z"></path></svg>`);
var root_5497 = svg_template(`<title> </title>`);
var root_6497 = svg_template(`<desc> </desc>`);
var root_4497 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M14 6H4a1 1 0 0 0-1 1v10a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1V7a1 1 0 0 0-1-1Zm7 11-6-2V9l6-2v10Z"></path></svg>`);
function VideoCameraOutline($$anchor, $$props) {
  if (new.target === VideoCameraOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, VideoCameraOutline);
  validate_prop_bindings($$props, [], [], VideoCameraOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "video camera outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1497();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2497();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3497();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4497();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5497();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6497();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(VideoCameraOutline);
  VideoCameraOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var VideoCameraOutline_default = VideoCameraOutline;
VideoCameraOutline.filename = ".../flowbite-svelte-icons/dist/VideoCameraOutline.svelte";
mark_module_end(VideoCameraOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/VideoCameraSolid.svelte
mark_module_start();
var root_2498 = svg_template(`<title> </title>`);
var root_3498 = svg_template(`<desc> </desc>`);
var root_1498 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M14 7a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V7Zm2 9.387 4.684 1.562A1 1 0 0 0 22 17V7a1 1 0 0 0-1.316-.949L16 7.613v8.774Z" clip-rule="evenodd"></path></svg>`);
var root_5498 = svg_template(`<title> </title>`);
var root_6498 = svg_template(`<desc> </desc>`);
var root_4498 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M14 7a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V7Zm2 9.387 4.684 1.562A1 1 0 0 0 22 17V7a1 1 0 0 0-1.316-.949L16 7.613v8.774Z" clip-rule="evenodd"></path></svg>`);
function VideoCameraSolid($$anchor, $$props) {
  if (new.target === VideoCameraSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, VideoCameraSolid);
  validate_prop_bindings($$props, [], [], VideoCameraSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "video camera solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1498();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2498();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3498();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4498();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5498();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6498();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(VideoCameraSolid);
  VideoCameraSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var VideoCameraSolid_default = VideoCameraSolid;
VideoCameraSolid.filename = ".../flowbite-svelte-icons/dist/VideoCameraSolid.svelte";
mark_module_end(VideoCameraSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/VisaSolid.svelte
mark_module_start();
var root_2499 = svg_template(`<title> </title>`);
var root_3499 = svg_template(`<desc> </desc>`);
var root_1499 = svg_template(`<svg><!><!><path fill="currentColor" d="M4 4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2H4Z"></path><path fill="#ffffff" d="M15.643 9.382a3.314 3.314 0 0 0-1.158-.2c-1.276 0-2.177.643-2.184 1.566-.008.678.64 1.06 1.131 1.286.504.233.672.38.67.588-.003.317-.402.46-.772.46-.51 0-.789-.07-1.217-.248l-.159-.075-.18 1.063c.31.13.869.24 1.446.25 1.357 0 2.244-.64 2.255-1.621.01-.542-.34-.951-1.079-1.29-.449-.219-.727-.365-.727-.588 0-.197.238-.408.737-.408.332-.008.661.055.967.183l.12.053.181-1.026-.031.007Zm3.312-.114h-.997c-.31 0-.544.085-.68.393l-1.917 4.345h1.356l.272-.713 1.656.002c.039.166.158.71.158.71H20l-1.045-4.737Zm-8.49-.04h1.294l-.809 4.74H9.659l.807-4.742v.002Zm-3.282 2.613.134.658 1.264-3.231h1.37l-2.035 4.731H6.549L5.432 9.993a.27.27 0 0 0-.119-.159 5.543 5.543 0 0 0-1.27-.47l.018-.1h2.081c.283.012.51.1.586.402l.454 2.177.001-.002Zm10.177.483.515-1.326c-.006.014.106-.273.171-.451l.089.409.3 1.367h-1.076Z"></path></svg>`);
var root_5499 = svg_template(`<title> </title>`);
var root_6499 = svg_template(`<desc> </desc>`);
var root_4499 = svg_template(`<svg><!><!><path fill="currentColor" d="M4 4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2H4Z"></path><path fill="#ffffff" d="M15.643 9.382a3.314 3.314 0 0 0-1.158-.2c-1.276 0-2.177.643-2.184 1.566-.008.678.64 1.06 1.131 1.286.504.233.672.38.67.588-.003.317-.402.46-.772.46-.51 0-.789-.07-1.217-.248l-.159-.075-.18 1.063c.31.13.869.24 1.446.25 1.357 0 2.244-.64 2.255-1.621.01-.542-.34-.951-1.079-1.29-.449-.219-.727-.365-.727-.588 0-.197.238-.408.737-.408.332-.008.661.055.967.183l.12.053.181-1.026-.031.007Zm3.312-.114h-.997c-.31 0-.544.085-.68.393l-1.917 4.345h1.356l.272-.713 1.656.002c.039.166.158.71.158.71H20l-1.045-4.737Zm-8.49-.04h1.294l-.809 4.74H9.659l.807-4.742v.002Zm-3.282 2.613.134.658 1.264-3.231h1.37l-2.035 4.731H6.549L5.432 9.993a.27.27 0 0 0-.119-.159 5.543 5.543 0 0 0-1.27-.47l.018-.1h2.081c.283.012.51.1.586.402l.454 2.177.001-.002Zm10.177.483.515-1.326c-.006.014.106-.273.171-.451l.089.409.3 1.367h-1.076Z"></path></svg>`);
function VisaSolid($$anchor, $$props) {
  if (new.target === VisaSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, VisaSolid);
  validate_prop_bindings($$props, [], [], VisaSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "visa solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1499();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2499();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3499();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4499();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5499();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6499();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_2 = sibling(node_4);
      var path_3 = sibling(path_2);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(VisaSolid);
  VisaSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var VisaSolid_default = VisaSolid;
VisaSolid.filename = ".../flowbite-svelte-icons/dist/VisaSolid.svelte";
mark_module_end(VisaSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/VolumeDownOutline.svelte
mark_module_start();
var root_2500 = svg_template(`<title> </title>`);
var root_3500 = svg_template(`<desc> </desc>`);
var root_1500 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M17.5 8.43A4.985 4.985 0 0 1 19 12a4.984 4.984 0 0 1-1.43 3.5M14 6.135v11.73a1 1 0 0 1-1.64.768L8 15H6a1 1 0 0 1-1-1v-4a1 1 0 0 1 1-1h2l4.36-3.633a1 1 0 0 1 1.64.768Z"></path></svg>`);
var root_5500 = svg_template(`<title> </title>`);
var root_6500 = svg_template(`<desc> </desc>`);
var root_4500 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M17.5 8.43A4.985 4.985 0 0 1 19 12a4.984 4.984 0 0 1-1.43 3.5M14 6.135v11.73a1 1 0 0 1-1.64.768L8 15H6a1 1 0 0 1-1-1v-4a1 1 0 0 1 1-1h2l4.36-3.633a1 1 0 0 1 1.64.768Z"></path></svg>`);
function VolumeDownOutline($$anchor, $$props) {
  if (new.target === VolumeDownOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, VolumeDownOutline);
  validate_prop_bindings($$props, [], [], VolumeDownOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "volume down outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1500();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2500();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3500();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4500();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5500();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6500();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(VolumeDownOutline);
  VolumeDownOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var VolumeDownOutline_default = VolumeDownOutline;
VolumeDownOutline.filename = ".../flowbite-svelte-icons/dist/VolumeDownOutline.svelte";
mark_module_end(VolumeDownOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/VolumeDownSolid.svelte
mark_module_start();
var root_2501 = svg_template(`<title> </title>`);
var root_3501 = svg_template(`<desc> </desc>`);
var root_1501 = svg_template(`<svg><!><!><path d="M15 6.037c0-1.724-1.978-2.665-3.28-1.562L7.638 7.933H6c-1.105 0-2 .91-2 2.034v4.066c0 1.123.895 2.034 2 2.034h1.638l4.082 3.458c1.302 1.104 3.28.162 3.28-1.562V6.037Z"></path><path fill-rule="evenodd" d="M16.786 7.658a.988.988 0 0 1 1.414-.014A6.135 6.135 0 0 1 20 12c0 1.662-.655 3.17-1.715 4.27a.989.989 0 0 1-1.414.014 1.029 1.029 0 0 1-.014-1.437A4.085 4.085 0 0 0 18 12a4.085 4.085 0 0 0-1.2-2.904 1.029 1.029 0 0 1-.014-1.438Z" clip-rule="evenodd"></path></svg>`);
var root_5501 = svg_template(`<title> </title>`);
var root_6501 = svg_template(`<desc> </desc>`);
var root_4501 = svg_template(`<svg><!><!><path d="M15 6.037c0-1.724-1.978-2.665-3.28-1.562L7.638 7.933H6c-1.105 0-2 .91-2 2.034v4.066c0 1.123.895 2.034 2 2.034h1.638l4.082 3.458c1.302 1.104 3.28.162 3.28-1.562V6.037Z"></path><path fill-rule="evenodd" d="M16.786 7.658a.988.988 0 0 1 1.414-.014A6.135 6.135 0 0 1 20 12c0 1.662-.655 3.17-1.715 4.27a.989.989 0 0 1-1.414.014 1.029 1.029 0 0 1-.014-1.437A4.085 4.085 0 0 0 18 12a4.085 4.085 0 0 0-1.2-2.904 1.029 1.029 0 0 1-.014-1.438Z" clip-rule="evenodd"></path></svg>`);
function VolumeDownSolid($$anchor, $$props) {
  if (new.target === VolumeDownSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, VolumeDownSolid);
  validate_prop_bindings($$props, [], [], VolumeDownSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "volume down solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1501();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2501();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3501();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4501();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5501();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6501();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_2 = sibling(node_4);
      var path_3 = sibling(path_2);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(VolumeDownSolid);
  VolumeDownSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var VolumeDownSolid_default = VolumeDownSolid;
VolumeDownSolid.filename = ".../flowbite-svelte-icons/dist/VolumeDownSolid.svelte";
mark_module_end(VolumeDownSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/VolumeMuteOutline.svelte
mark_module_start();
var root_2502 = svg_template(`<title> </title>`);
var root_3502 = svg_template(`<desc> </desc>`);
var root_1502 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M15.5 8.43A4.985 4.985 0 0 1 17 12c0 1.126-.5 2.5-1.5 3.5m2.864-9.864A8.972 8.972 0 0 1 21 12c0 2.023-.5 4.5-2.5 6M7.8 7.5l2.56-2.133a1 1 0 0 1 1.64.768V12m0 4.5v1.365a1 1 0 0 1-1.64.768L6 15H4a1 1 0 0 1-1-1v-4a1 1 0 0 1 1-1m1-4 14 14"></path></svg>`);
var root_5502 = svg_template(`<title> </title>`);
var root_6502 = svg_template(`<desc> </desc>`);
var root_4502 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M15.5 8.43A4.985 4.985 0 0 1 17 12c0 1.126-.5 2.5-1.5 3.5m2.864-9.864A8.972 8.972 0 0 1 21 12c0 2.023-.5 4.5-2.5 6M7.8 7.5l2.56-2.133a1 1 0 0 1 1.64.768V12m0 4.5v1.365a1 1 0 0 1-1.64.768L6 15H4a1 1 0 0 1-1-1v-4a1 1 0 0 1 1-1m1-4 14 14"></path></svg>`);
function VolumeMuteOutline($$anchor, $$props) {
  if (new.target === VolumeMuteOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, VolumeMuteOutline);
  validate_prop_bindings($$props, [], [], VolumeMuteOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "volume mute outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1502();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2502();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3502();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4502();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5502();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6502();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(VolumeMuteOutline);
  VolumeMuteOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var VolumeMuteOutline_default = VolumeMuteOutline;
VolumeMuteOutline.filename = ".../flowbite-svelte-icons/dist/VolumeMuteOutline.svelte";
mark_module_end(VolumeMuteOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/VolumeMuteSolid.svelte
mark_module_start();
var root_2503 = svg_template(`<title> </title>`);
var root_3503 = svg_template(`<desc> </desc>`);
var root_1503 = svg_template(`<svg><!><!><path d="M5.707 4.293a1 1 0 0 0-1.414 1.414l14 14a1 1 0 0 0 1.414-1.414l-.004-.005C21.57 16.498 22 13.938 22 12a9.972 9.972 0 0 0-2.929-7.071 1 1 0 1 0-1.414 1.414A7.972 7.972 0 0 1 20 12c0 1.752-.403 3.636-1.712 4.873l-1.433-1.433C17.616 14.37 18 13.107 18 12c0-1.678-.69-3.197-1.8-4.285a1 1 0 1 0-1.4 1.428A3.985 3.985 0 0 1 16 12c0 .606-.195 1.335-.59 1.996L13 11.586V6.135c0-1.696-1.978-2.622-3.28-1.536L7.698 6.284l-1.99-1.991ZM4 8h.586L13 16.414v1.451c0 1.696-1.978 2.622-3.28 1.536L5.638 16H4a2 2 0 0 1-2-2v-4a2 2 0 0 1 2-2Z"></path></svg>`);
var root_5503 = svg_template(`<title> </title>`);
var root_6503 = svg_template(`<desc> </desc>`);
var root_4503 = svg_template(`<svg><!><!><path d="M5.707 4.293a1 1 0 0 0-1.414 1.414l14 14a1 1 0 0 0 1.414-1.414l-.004-.005C21.57 16.498 22 13.938 22 12a9.972 9.972 0 0 0-2.929-7.071 1 1 0 1 0-1.414 1.414A7.972 7.972 0 0 1 20 12c0 1.752-.403 3.636-1.712 4.873l-1.433-1.433C17.616 14.37 18 13.107 18 12c0-1.678-.69-3.197-1.8-4.285a1 1 0 1 0-1.4 1.428A3.985 3.985 0 0 1 16 12c0 .606-.195 1.335-.59 1.996L13 11.586V6.135c0-1.696-1.978-2.622-3.28-1.536L7.698 6.284l-1.99-1.991ZM4 8h.586L13 16.414v1.451c0 1.696-1.978 2.622-3.28 1.536L5.638 16H4a2 2 0 0 1-2-2v-4a2 2 0 0 1 2-2Z"></path></svg>`);
function VolumeMuteSolid($$anchor, $$props) {
  if (new.target === VolumeMuteSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, VolumeMuteSolid);
  validate_prop_bindings($$props, [], [], VolumeMuteSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "volume mute solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1503();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2503();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3503();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4503();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5503();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6503();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(VolumeMuteSolid);
  VolumeMuteSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var VolumeMuteSolid_default = VolumeMuteSolid;
VolumeMuteSolid.filename = ".../flowbite-svelte-icons/dist/VolumeMuteSolid.svelte";
mark_module_end(VolumeMuteSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/VolumeUpOutline.svelte
mark_module_start();
var root_2504 = svg_template(`<title> </title>`);
var root_3504 = svg_template(`<desc> </desc>`);
var root_1504 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M15.5 8.43A4.985 4.985 0 0 1 17 12a4.984 4.984 0 0 1-1.43 3.5m2.794 2.864A8.972 8.972 0 0 0 21 12a8.972 8.972 0 0 0-2.636-6.364M12 6.135v11.73a1 1 0 0 1-1.64.768L6 15H4a1 1 0 0 1-1-1v-4a1 1 0 0 1 1-1h2l4.36-3.633a1 1 0 0 1 1.64.768Z"></path></svg>`);
var root_5504 = svg_template(`<title> </title>`);
var root_6504 = svg_template(`<desc> </desc>`);
var root_4504 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M15.5 8.43A4.985 4.985 0 0 1 17 12a4.984 4.984 0 0 1-1.43 3.5m2.794 2.864A8.972 8.972 0 0 0 21 12a8.972 8.972 0 0 0-2.636-6.364M12 6.135v11.73a1 1 0 0 1-1.64.768L6 15H4a1 1 0 0 1-1-1v-4a1 1 0 0 1 1-1h2l4.36-3.633a1 1 0 0 1 1.64.768Z"></path></svg>`);
function VolumeUpOutline($$anchor, $$props) {
  if (new.target === VolumeUpOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, VolumeUpOutline);
  validate_prop_bindings($$props, [], [], VolumeUpOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "volume up outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1504();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2504();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3504();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4504();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5504();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6504();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(VolumeUpOutline);
  VolumeUpOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var VolumeUpOutline_default = VolumeUpOutline;
VolumeUpOutline.filename = ".../flowbite-svelte-icons/dist/VolumeUpOutline.svelte";
mark_module_end(VolumeUpOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/VolumeUpSolid.svelte
mark_module_start();
var root_2505 = svg_template(`<title> </title>`);
var root_3505 = svg_template(`<desc> </desc>`);
var root_1505 = svg_template(`<svg><!><!><path d="M13 6.037c0-1.724-1.978-2.665-3.28-1.562L5.638 7.933H4c-1.105 0-2 .91-2 2.034v4.066c0 1.123.895 2.034 2 2.034h1.638l4.082 3.458c1.302 1.104 3.28.162 3.28-1.562V6.037Z"></path><path fill-rule="evenodd" d="M14.786 7.658a.988.988 0 0 1 1.414-.014A6.135 6.135 0 0 1 18 12c0 1.662-.655 3.17-1.715 4.27a.989.989 0 0 1-1.414.014 1.029 1.029 0 0 1-.014-1.437A4.085 4.085 0 0 0 16 12a4.085 4.085 0 0 0-1.2-2.904 1.029 1.029 0 0 1-.014-1.438Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M17.657 4.811a.988.988 0 0 1 1.414 0A10.224 10.224 0 0 1 22 12c0 2.807-1.12 5.35-2.929 7.189a.988.988 0 0 1-1.414 0 1.029 1.029 0 0 1 0-1.438A8.173 8.173 0 0 0 20 12a8.173 8.173 0 0 0-2.343-5.751 1.029 1.029 0 0 1 0-1.438Z" clip-rule="evenodd"></path></svg>`);
var root_5505 = svg_template(`<title> </title>`);
var root_6505 = svg_template(`<desc> </desc>`);
var root_4505 = svg_template(`<svg><!><!><path d="M13 6.037c0-1.724-1.978-2.665-3.28-1.562L5.638 7.933H4c-1.105 0-2 .91-2 2.034v4.066c0 1.123.895 2.034 2 2.034h1.638l4.082 3.458c1.302 1.104 3.28.162 3.28-1.562V6.037Z"></path><path fill-rule="evenodd" d="M14.786 7.658a.988.988 0 0 1 1.414-.014A6.135 6.135 0 0 1 18 12c0 1.662-.655 3.17-1.715 4.27a.989.989 0 0 1-1.414.014 1.029 1.029 0 0 1-.014-1.437A4.085 4.085 0 0 0 16 12a4.085 4.085 0 0 0-1.2-2.904 1.029 1.029 0 0 1-.014-1.438Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M17.657 4.811a.988.988 0 0 1 1.414 0A10.224 10.224 0 0 1 22 12c0 2.807-1.12 5.35-2.929 7.189a.988.988 0 0 1-1.414 0 1.029 1.029 0 0 1 0-1.438A8.173 8.173 0 0 0 20 12a8.173 8.173 0 0 0-2.343-5.751 1.029 1.029 0 0 1 0-1.438Z" clip-rule="evenodd"></path></svg>`);
function VolumeUpSolid($$anchor, $$props) {
  if (new.target === VolumeUpSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, VolumeUpSolid);
  validate_prop_bindings($$props, [], [], VolumeUpSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "volume up solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1505();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2505();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3505();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      var path_2 = sibling(path_1);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4505();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5505();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6505();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_3 = sibling(node_4);
      var path_4 = sibling(path_3);
      var path_5 = sibling(path_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(VolumeUpSolid);
  VolumeUpSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var VolumeUpSolid_default = VolumeUpSolid;
VolumeUpSolid.filename = ".../flowbite-svelte-icons/dist/VolumeUpSolid.svelte";
mark_module_end(VolumeUpSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/VueSolid.svelte
mark_module_start();
var root_2506 = svg_template(`<title> </title>`);
var root_3506 = svg_template(`<desc> </desc>`);
var root_1506 = svg_template(`<svg><!><!><path d="M14.5 3 12 7.156 9.857 3H2l10 18L22 3h-7.5ZM4.486 4.5h2.4L12 13.8l5.107-9.3h2.4L12 18.021 4.486 4.5Z"></path></svg>`);
var root_5506 = svg_template(`<title> </title>`);
var root_6506 = svg_template(`<desc> </desc>`);
var root_4506 = svg_template(`<svg><!><!><path d="M14.5 3 12 7.156 9.857 3H2l10 18L22 3h-7.5ZM4.486 4.5h2.4L12 13.8l5.107-9.3h2.4L12 18.021 4.486 4.5Z"></path></svg>`);
function VueSolid($$anchor, $$props) {
  if (new.target === VueSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, VueSolid);
  validate_prop_bindings($$props, [], [], VueSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "vue solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1506();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2506();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3506();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4506();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5506();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6506();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(VueSolid);
  VueSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var VueSolid_default = VueSolid;
VueSolid.filename = ".../flowbite-svelte-icons/dist/VueSolid.svelte";
mark_module_end(VueSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/WalletOutline.svelte
mark_module_start();
var root_2507 = svg_template(`<title> </title>`);
var root_3507 = svg_template(`<desc> </desc>`);
var root_1507 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M17 8H5m12 0a1 1 0 0 1 1 1v2.6M17 8l-4-4M5 8a1 1 0 0 0-1 1v10a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2.6M5 8l4-4 4 4m6 4h-4a2 2 0 1 0 0 4h4a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1Z"></path></svg>`);
var root_5507 = svg_template(`<title> </title>`);
var root_6507 = svg_template(`<desc> </desc>`);
var root_4507 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M17 8H5m12 0a1 1 0 0 1 1 1v2.6M17 8l-4-4M5 8a1 1 0 0 0-1 1v10a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2.6M5 8l4-4 4 4m6 4h-4a2 2 0 1 0 0 4h4a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1Z"></path></svg>`);
function WalletOutline($$anchor, $$props) {
  if (new.target === WalletOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, WalletOutline);
  validate_prop_bindings($$props, [], [], WalletOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "wallet outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1507();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2507();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3507();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4507();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5507();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6507();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(WalletOutline);
  WalletOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var WalletOutline_default = WalletOutline;
WalletOutline.filename = ".../flowbite-svelte-icons/dist/WalletOutline.svelte";
mark_module_end(WalletOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/WalletSolid.svelte
mark_module_start();
var root_2508 = svg_template(`<title> </title>`);
var root_3508 = svg_template(`<desc> </desc>`);
var root_1508 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M12 14a3 3 0 0 1 3-3h4a2 2 0 0 1 2 2v2a2 2 0 0 1-2 2h-4a3 3 0 0 1-3-3Zm3-1a1 1 0 1 0 0 2h4v-2h-4Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M12.293 3.293a1 1 0 0 1 1.414 0L16.414 6h-2.828l-1.293-1.293a1 1 0 0 1 0-1.414ZM12.414 6 9.707 3.293a1 1 0 0 0-1.414 0L5.586 6h6.828ZM4.586 7l-.056.055A2 2 0 0 0 3 9v10a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2h-4a5 5 0 0 1 0-10h4a2 2 0 0 0-1.53-1.945L17.414 7H4.586Z" clip-rule="evenodd"></path></svg>`);
var root_5508 = svg_template(`<title> </title>`);
var root_6508 = svg_template(`<desc> </desc>`);
var root_4508 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M12 14a3 3 0 0 1 3-3h4a2 2 0 0 1 2 2v2a2 2 0 0 1-2 2h-4a3 3 0 0 1-3-3Zm3-1a1 1 0 1 0 0 2h4v-2h-4Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M12.293 3.293a1 1 0 0 1 1.414 0L16.414 6h-2.828l-1.293-1.293a1 1 0 0 1 0-1.414ZM12.414 6 9.707 3.293a1 1 0 0 0-1.414 0L5.586 6h6.828ZM4.586 7l-.056.055A2 2 0 0 0 3 9v10a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2h-4a5 5 0 0 1 0-10h4a2 2 0 0 0-1.53-1.945L17.414 7H4.586Z" clip-rule="evenodd"></path></svg>`);
function WalletSolid($$anchor, $$props) {
  if (new.target === WalletSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, WalletSolid);
  validate_prop_bindings($$props, [], [], WalletSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "wallet solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1508();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2508();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3508();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4508();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5508();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6508();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_2 = sibling(node_4);
      var path_3 = sibling(path_2);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(WalletSolid);
  WalletSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var WalletSolid_default = WalletSolid;
WalletSolid.filename = ".../flowbite-svelte-icons/dist/WalletSolid.svelte";
mark_module_end(WalletSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/WandMagicSparklesOutline.svelte
mark_module_start();
var root_2509 = svg_template(`<title> </title>`);
var root_3509 = svg_template(`<desc> </desc>`);
var root_1509 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M16.872 9.687 20 6.56 17.44 4 4 17.44 6.56 20 16.873 9.687Zm0 0-2.56-2.56M6 7v2m0 0v2m0-2H4m2 0h2m7 7v2m0 0v2m0-2h-2m2 0h2M8 4h.01v.01H8V4Zm2 2h.01v.01H10V6Zm2-2h.01v.01H12V4Zm8 8h.01v.01H20V12Zm-2 2h.01v.01H18V14Zm2 2h.01v.01H20V16Z"></path></svg>`);
var root_5509 = svg_template(`<title> </title>`);
var root_6509 = svg_template(`<desc> </desc>`);
var root_4509 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M16.872 9.687 20 6.56 17.44 4 4 17.44 6.56 20 16.873 9.687Zm0 0-2.56-2.56M6 7v2m0 0v2m0-2H4m2 0h2m7 7v2m0 0v2m0-2h-2m2 0h2M8 4h.01v.01H8V4Zm2 2h.01v.01H10V6Zm2-2h.01v.01H12V4Zm8 8h.01v.01H20V12Zm-2 2h.01v.01H18V14Zm2 2h.01v.01H20V16Z"></path></svg>`);
function WandMagicSparklesOutline($$anchor, $$props) {
  if (new.target === WandMagicSparklesOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, WandMagicSparklesOutline);
  validate_prop_bindings($$props, [], [], WandMagicSparklesOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "wand magic sparkles outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1509();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2509();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3509();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4509();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5509();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6509();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(WandMagicSparklesOutline);
  WandMagicSparklesOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var WandMagicSparklesOutline_default = WandMagicSparklesOutline;
WandMagicSparklesOutline.filename = ".../flowbite-svelte-icons/dist/WandMagicSparklesOutline.svelte";
mark_module_end(WandMagicSparklesOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/WandMagicSparklesSolid.svelte
mark_module_start();
var root_2510 = svg_template(`<title> </title>`);
var root_3510 = svg_template(`<desc> </desc>`);
var root_1510 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M17.44 3a1 1 0 0 1 .707.293l2.56 2.56a1 1 0 0 1 0 1.414L18.194 9.78 14.22 5.806l2.513-2.513A1 1 0 0 1 17.44 3Zm-4.634 4.22-9.513 9.513a1 1 0 0 0 0 1.414l2.56 2.56a1 1 0 0 0 1.414 0l9.513-9.513-3.974-3.974ZM6 6a1 1 0 0 1 1 1v1h1a1 1 0 0 1 0 2H7v1a1 1 0 1 1-2 0v-1H4a1 1 0 0 1 0-2h1V7a1 1 0 0 1 1-1Zm9 9a1 1 0 0 1 1 1v1h1a1 1 0 1 1 0 2h-1v1a1 1 0 1 1-2 0v-1h-1a1 1 0 1 1 0-2h1v-1a1 1 0 0 1 1-1Z" clip-rule="evenodd"></path><path d="M19 13h-2v2h2v-2ZM13 3h-2v2h2V3Zm-2 2H9v2h2V5ZM9 3H7v2h2V3Zm12 8h-2v2h2v-2Zm0 4h-2v2h2v-2Z"></path></svg>`);
var root_5510 = svg_template(`<title> </title>`);
var root_6510 = svg_template(`<desc> </desc>`);
var root_4510 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M17.44 3a1 1 0 0 1 .707.293l2.56 2.56a1 1 0 0 1 0 1.414L18.194 9.78 14.22 5.806l2.513-2.513A1 1 0 0 1 17.44 3Zm-4.634 4.22-9.513 9.513a1 1 0 0 0 0 1.414l2.56 2.56a1 1 0 0 0 1.414 0l9.513-9.513-3.974-3.974ZM6 6a1 1 0 0 1 1 1v1h1a1 1 0 0 1 0 2H7v1a1 1 0 1 1-2 0v-1H4a1 1 0 0 1 0-2h1V7a1 1 0 0 1 1-1Zm9 9a1 1 0 0 1 1 1v1h1a1 1 0 1 1 0 2h-1v1a1 1 0 1 1-2 0v-1h-1a1 1 0 1 1 0-2h1v-1a1 1 0 0 1 1-1Z" clip-rule="evenodd"></path><path d="M19 13h-2v2h2v-2ZM13 3h-2v2h2V3Zm-2 2H9v2h2V5ZM9 3H7v2h2V3Zm12 8h-2v2h2v-2Zm0 4h-2v2h2v-2Z"></path></svg>`);
function WandMagicSparklesSolid($$anchor, $$props) {
  if (new.target === WandMagicSparklesSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, WandMagicSparklesSolid);
  validate_prop_bindings($$props, [], [], WandMagicSparklesSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "wand magic sparkles solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1510();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2510();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3510();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4510();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5510();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6510();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_2 = sibling(node_4);
      var path_3 = sibling(path_2);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(WandMagicSparklesSolid);
  WandMagicSparklesSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var WandMagicSparklesSolid_default = WandMagicSparklesSolid;
WandMagicSparklesSolid.filename = ".../flowbite-svelte-icons/dist/WandMagicSparklesSolid.svelte";
mark_module_end(WandMagicSparklesSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/WhatsappSolid.svelte
mark_module_start();
var root_2511 = svg_template(`<title> </title>`);
var root_3511 = svg_template(`<desc> </desc>`);
var root_1511 = svg_template(`<svg><!><!><path fill="currentColor" fill-rule="evenodd" d="M12 4a8 8 0 0 0-6.895 12.06l.569.718-.697 2.359 2.32-.648.379.243A8 8 0 1 0 12 4ZM2 12C2 6.477 6.477 2 12 2s10 4.477 10 10-4.477 10-10 10a9.96 9.96 0 0 1-5.016-1.347l-4.948 1.382 1.426-4.829-.006-.007-.033-.055A9.958 9.958 0 0 1 2 12Z" clip-rule="evenodd"></path><path fill="currentColor" d="M16.735 13.492c-.038-.018-1.497-.736-1.756-.83a1.008 1.008 0 0 0-.34-.075c-.196 0-.362.098-.49.291-.146.217-.587.732-.723.886-.018.02-.042.045-.057.045-.013 0-.239-.093-.307-.123-1.564-.68-2.751-2.313-2.914-2.589-.023-.04-.024-.057-.024-.057.005-.021.058-.074.085-.101.08-.079.166-.182.249-.283l.117-.14c.121-.14.175-.25.237-.375l.033-.066a.68.68 0 0 0-.02-.64c-.034-.069-.65-1.555-.715-1.711-.158-.377-.366-.552-.655-.552-.027 0 0 0-.112.005-.137.005-.883.104-1.213.311-.35.22-.94.924-.94 2.16 0 1.112.705 2.162 1.008 2.561l.041.06c1.161 1.695 2.608 2.951 4.074 3.537 1.412.564 2.081.63 2.461.63.16 0 .288-.013.4-.024l.072-.007c.488-.043 1.56-.599 1.804-1.276.192-.534.243-1.117.115-1.329-.088-.144-.239-.216-.43-.308Z"></path></svg>`);
var root_5511 = svg_template(`<title> </title>`);
var root_6511 = svg_template(`<desc> </desc>`);
var root_4511 = svg_template(`<svg><!><!><path fill="currentColor" fill-rule="evenodd" d="M12 4a8 8 0 0 0-6.895 12.06l.569.718-.697 2.359 2.32-.648.379.243A8 8 0 1 0 12 4ZM2 12C2 6.477 6.477 2 12 2s10 4.477 10 10-4.477 10-10 10a9.96 9.96 0 0 1-5.016-1.347l-4.948 1.382 1.426-4.829-.006-.007-.033-.055A9.958 9.958 0 0 1 2 12Z" clip-rule="evenodd"></path><path fill="currentColor" d="M16.735 13.492c-.038-.018-1.497-.736-1.756-.83a1.008 1.008 0 0 0-.34-.075c-.196 0-.362.098-.49.291-.146.217-.587.732-.723.886-.018.02-.042.045-.057.045-.013 0-.239-.093-.307-.123-1.564-.68-2.751-2.313-2.914-2.589-.023-.04-.024-.057-.024-.057.005-.021.058-.074.085-.101.08-.079.166-.182.249-.283l.117-.14c.121-.14.175-.25.237-.375l.033-.066a.68.68 0 0 0-.02-.64c-.034-.069-.65-1.555-.715-1.711-.158-.377-.366-.552-.655-.552-.027 0 0 0-.112.005-.137.005-.883.104-1.213.311-.35.22-.94.924-.94 2.16 0 1.112.705 2.162 1.008 2.561l.041.06c1.161 1.695 2.608 2.951 4.074 3.537 1.412.564 2.081.63 2.461.63.16 0 .288-.013.4-.024l.072-.007c.488-.043 1.56-.599 1.804-1.276.192-.534.243-1.117.115-1.329-.088-.144-.239-.216-.43-.308Z"></path></svg>`);
function WhatsappSolid($$anchor, $$props) {
  if (new.target === WhatsappSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, WhatsappSolid);
  validate_prop_bindings($$props, [], [], WhatsappSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "whatsapp solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1511();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2511();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3511();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4511();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5511();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6511();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_2 = sibling(node_4);
      var path_3 = sibling(path_2);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(WhatsappSolid);
  WhatsappSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var WhatsappSolid_default = WhatsappSolid;
WhatsappSolid.filename = ".../flowbite-svelte-icons/dist/WhatsappSolid.svelte";
mark_module_end(WhatsappSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/WindowOutline.svelte
mark_module_start();
var root_2512 = svg_template(`<title> </title>`);
var root_3512 = svg_template(`<desc> </desc>`);
var root_1512 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M6 8h.01M9 8h.01M12 8h.01M4 11h16M4 19h16a1 1 0 0 0 1-1V6a1 1 0 0 0-1-1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1Z"></path></svg>`);
var root_5512 = svg_template(`<title> </title>`);
var root_6512 = svg_template(`<desc> </desc>`);
var root_4512 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M6 8h.01M9 8h.01M12 8h.01M4 11h16M4 19h16a1 1 0 0 0 1-1V6a1 1 0 0 0-1-1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1Z"></path></svg>`);
function WindowOutline($$anchor, $$props) {
  if (new.target === WindowOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, WindowOutline);
  validate_prop_bindings($$props, [], [], WindowOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "window outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1512();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2512();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3512();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4512();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5512();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6512();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(WindowOutline);
  WindowOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var WindowOutline_default = WindowOutline;
WindowOutline.filename = ".../flowbite-svelte-icons/dist/WindowOutline.svelte";
mark_module_end(WindowOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/WindowRestoreSolid.svelte
mark_module_start();
var root_2513 = svg_template(`<title> </title>`);
var root_3513 = svg_template(`<desc> </desc>`);
var root_1513 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M8 5a1 1 0 0 1 1-1h11a2 2 0 0 1 2 2v9a2 2 0 0 1-2 2h-1a1 1 0 1 1 0-2h1V6H9a1 1 0 0 1-1-1Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M4 7a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2h11a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2H4Zm0 11v-5.5h11V18H4Z" clip-rule="evenodd"></path></svg>`);
var root_5513 = svg_template(`<title> </title>`);
var root_6513 = svg_template(`<desc> </desc>`);
var root_4513 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M8 5a1 1 0 0 1 1-1h11a2 2 0 0 1 2 2v9a2 2 0 0 1-2 2h-1a1 1 0 1 1 0-2h1V6H9a1 1 0 0 1-1-1Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M4 7a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2h11a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2H4Zm0 11v-5.5h11V18H4Z" clip-rule="evenodd"></path></svg>`);
function WindowRestoreSolid($$anchor, $$props) {
  if (new.target === WindowRestoreSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, WindowRestoreSolid);
  validate_prop_bindings($$props, [], [], WindowRestoreSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "window restore solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1513();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2513();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3513();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      var path_1 = sibling(path);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4513();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5513();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6513();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_2 = sibling(node_4);
      var path_3 = sibling(path_2);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(WindowRestoreSolid);
  WindowRestoreSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var WindowRestoreSolid_default = WindowRestoreSolid;
WindowRestoreSolid.filename = ".../flowbite-svelte-icons/dist/WindowRestoreSolid.svelte";
mark_module_end(WindowRestoreSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/WindowSolid.svelte
mark_module_start();
var root_2514 = svg_template(`<title> </title>`);
var root_3514 = svg_template(`<desc> </desc>`);
var root_1514 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M4 4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2H4Zm16 7H4v7h16v-7ZM5 8a1 1 0 0 1 1-1h.01a1 1 0 0 1 0 2H6a1 1 0 0 1-1-1Zm4-1a1 1 0 0 0 0 2h.01a1 1 0 0 0 0-2H9Zm2 1a1 1 0 0 1 1-1h.01a1 1 0 1 1 0 2H12a1 1 0 0 1-1-1Z" clip-rule="evenodd"></path></svg>`);
var root_5514 = svg_template(`<title> </title>`);
var root_6514 = svg_template(`<desc> </desc>`);
var root_4514 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M4 4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2H4Zm16 7H4v7h16v-7ZM5 8a1 1 0 0 1 1-1h.01a1 1 0 0 1 0 2H6a1 1 0 0 1-1-1Zm4-1a1 1 0 0 0 0 2h.01a1 1 0 0 0 0-2H9Zm2 1a1 1 0 0 1 1-1h.01a1 1 0 1 1 0 2H12a1 1 0 0 1-1-1Z" clip-rule="evenodd"></path></svg>`);
function WindowSolid($$anchor, $$props) {
  if (new.target === WindowSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, WindowSolid);
  validate_prop_bindings($$props, [], [], WindowSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "window solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1514();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2514();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3514();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4514();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5514();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6514();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(WindowSolid);
  WindowSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var WindowSolid_default = WindowSolid;
WindowSolid.filename = ".../flowbite-svelte-icons/dist/WindowSolid.svelte";
mark_module_end(WindowSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/WindowsSolid.svelte
mark_module_start();
var root_2515 = svg_template(`<title> </title>`);
var root_3515 = svg_template(`<desc> </desc>`);
var root_1515 = svg_template(`<svg><!><!><path fill="currentColor" fill-rule="evenodd" d="M3.005 12 3 6.408l6.8-.923v6.517H3.005ZM11 5.32 19.997 4v8H11V5.32ZM20.067 13l-.069 8-9.065-1.275L11 13h9.067ZM9.8 19.58l-6.795-.931V13H9.8v6.58Z" clip-rule="evenodd"></path></svg>`);
var root_5515 = svg_template(`<title> </title>`);
var root_6515 = svg_template(`<desc> </desc>`);
var root_4515 = svg_template(`<svg><!><!><path fill="currentColor" fill-rule="evenodd" d="M3.005 12 3 6.408l6.8-.923v6.517H3.005ZM11 5.32 19.997 4v8H11V5.32ZM20.067 13l-.069 8-9.065-1.275L11 13h9.067ZM9.8 19.58l-6.795-.931V13H9.8v6.58Z" clip-rule="evenodd"></path></svg>`);
function WindowsSolid($$anchor, $$props) {
  if (new.target === WindowsSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, WindowsSolid);
  validate_prop_bindings($$props, [], [], WindowsSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "windows solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1515();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2515();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3515();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4515();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5515();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6515();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(WindowsSolid);
  WindowsSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var WindowsSolid_default = WindowsSolid;
WindowsSolid.filename = ".../flowbite-svelte-icons/dist/WindowsSolid.svelte";
mark_module_end(WindowsSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/XSolid.svelte
mark_module_start();
var root_2516 = svg_template(`<title> </title>`);
var root_3516 = svg_template(`<desc> </desc>`);
var root_1516 = svg_template(`<svg><!><!><path d="M13.795 10.533 20.68 2h-3.073l-5.255 6.517L7.69 2H1l7.806 10.91L1.47 22h3.074l5.705-7.07L15.31 22H22l-8.205-11.467Zm-2.38 2.95L9.97 11.464 4.36 3.627h2.31l4.528 6.317 1.443 2.02 6.018 8.409h-2.31l-4.934-6.89Z"></path></svg>`);
var root_5516 = svg_template(`<title> </title>`);
var root_6516 = svg_template(`<desc> </desc>`);
var root_4516 = svg_template(`<svg><!><!><path d="M13.795 10.533 20.68 2h-3.073l-5.255 6.517L7.69 2H1l7.806 10.91L1.47 22h3.074l5.705-7.07L15.31 22H22l-8.205-11.467Zm-2.38 2.95L9.97 11.464 4.36 3.627h2.31l4.528 6.317 1.443 2.02 6.018 8.409h-2.31l-4.934-6.89Z"></path></svg>`);
function XSolid($$anchor, $$props) {
  if (new.target === XSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, XSolid);
  validate_prop_bindings($$props, [], [], XSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "X solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1516();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2516();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3516();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4516();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5516();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6516();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(XSolid);
  XSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var XSolid_default = XSolid;
XSolid.filename = ".../flowbite-svelte-icons/dist/XSolid.svelte";
mark_module_end(XSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/YoutubeSolid.svelte
mark_module_start();
var root_2517 = svg_template(`<title> </title>`);
var root_3517 = svg_template(`<desc> </desc>`);
var root_1517 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M21.7 8.037a4.26 4.26 0 0 0-.789-1.964 2.84 2.84 0 0 0-1.984-.839c-2.767-.2-6.926-.2-6.926-.2s-4.157 0-6.928.2a2.836 2.836 0 0 0-1.983.839 4.225 4.225 0 0 0-.79 1.965 30.146 30.146 0 0 0-.2 3.206v1.5a30.12 30.12 0 0 0 .2 3.206c.094.712.364 1.39.784 1.972.604.536 1.38.837 2.187.848 1.583.151 6.731.2 6.731.2s4.161 0 6.928-.2a2.844 2.844 0 0 0 1.985-.84 4.27 4.27 0 0 0 .787-1.965 30.12 30.12 0 0 0 .2-3.206v-1.516a30.672 30.672 0 0 0-.202-3.206Zm-11.692 6.554v-5.62l5.4 2.819-5.4 2.801Z" clip-rule="evenodd"></path></svg>`);
var root_5517 = svg_template(`<title> </title>`);
var root_6517 = svg_template(`<desc> </desc>`);
var root_4517 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M21.7 8.037a4.26 4.26 0 0 0-.789-1.964 2.84 2.84 0 0 0-1.984-.839c-2.767-.2-6.926-.2-6.926-.2s-4.157 0-6.928.2a2.836 2.836 0 0 0-1.983.839 4.225 4.225 0 0 0-.79 1.965 30.146 30.146 0 0 0-.2 3.206v1.5a30.12 30.12 0 0 0 .2 3.206c.094.712.364 1.39.784 1.972.604.536 1.38.837 2.187.848 1.583.151 6.731.2 6.731.2s4.161 0 6.928-.2a2.844 2.844 0 0 0 1.985-.84 4.27 4.27 0 0 0 .787-1.965 30.12 30.12 0 0 0 .2-3.206v-1.516a30.672 30.672 0 0 0-.202-3.206Zm-11.692 6.554v-5.62l5.4 2.819-5.4 2.801Z" clip-rule="evenodd"></path></svg>`);
function YoutubeSolid($$anchor, $$props) {
  if (new.target === YoutubeSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, YoutubeSolid);
  validate_prop_bindings($$props, [], [], YoutubeSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "youtube solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1517();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2517();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3517();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4517();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5517();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6517();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(YoutubeSolid);
  YoutubeSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var YoutubeSolid_default = YoutubeSolid;
YoutubeSolid.filename = ".../flowbite-svelte-icons/dist/YoutubeSolid.svelte";
mark_module_end(YoutubeSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ZoomInOutline.svelte
mark_module_start();
var root_2518 = svg_template(`<title> </title>`);
var root_3518 = svg_template(`<desc> </desc>`);
var root_1518 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" d="m21 21-3.5-3.5M10 7v6m-3-3h6m4 0a7 7 0 1 1-14 0 7 7 0 0 1 14 0Z"></path></svg>`);
var root_5518 = svg_template(`<title> </title>`);
var root_6518 = svg_template(`<desc> </desc>`);
var root_4518 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" d="m21 21-3.5-3.5M10 7v6m-3-3h6m4 0a7 7 0 1 1-14 0 7 7 0 0 1 14 0Z"></path></svg>`);
function ZoomInOutline($$anchor, $$props) {
  if (new.target === ZoomInOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ZoomInOutline);
  validate_prop_bindings($$props, [], [], ZoomInOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "zoom in outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1518();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2518();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3518();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4518();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5518();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6518();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ZoomInOutline);
  ZoomInOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ZoomInOutline_default = ZoomInOutline;
ZoomInOutline.filename = ".../flowbite-svelte-icons/dist/ZoomInOutline.svelte";
mark_module_end(ZoomInOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ZoomInSolid.svelte
mark_module_start();
var root_2519 = svg_template(`<title> </title>`);
var root_3519 = svg_template(`<desc> </desc>`);
var root_1519 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M21.707 21.707a1 1 0 0 1-1.414 0l-3.5-3.5a1 1 0 0 1 1.414-1.414l3.5 3.5a1 1 0 0 1 0 1.414ZM2 10a8 8 0 1 1 16 0 8 8 0 0 1-16 0Zm9-3a1 1 0 1 0-2 0v2H7a1 1 0 0 0 0 2h2v2a1 1 0 1 0 2 0v-2h2a1 1 0 1 0 0-2h-2V7Z" clip-rule="evenodd"></path></svg>`);
var root_5519 = svg_template(`<title> </title>`);
var root_6519 = svg_template(`<desc> </desc>`);
var root_4519 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M21.707 21.707a1 1 0 0 1-1.414 0l-3.5-3.5a1 1 0 0 1 1.414-1.414l3.5 3.5a1 1 0 0 1 0 1.414ZM2 10a8 8 0 1 1 16 0 8 8 0 0 1-16 0Zm9-3a1 1 0 1 0-2 0v2H7a1 1 0 0 0 0 2h2v2a1 1 0 1 0 2 0v-2h2a1 1 0 1 0 0-2h-2V7Z" clip-rule="evenodd"></path></svg>`);
function ZoomInSolid($$anchor, $$props) {
  if (new.target === ZoomInSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ZoomInSolid);
  validate_prop_bindings($$props, [], [], ZoomInSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "zoom in solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1519();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2519();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3519();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4519();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5519();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6519();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ZoomInSolid);
  ZoomInSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ZoomInSolid_default = ZoomInSolid;
ZoomInSolid.filename = ".../flowbite-svelte-icons/dist/ZoomInSolid.svelte";
mark_module_end(ZoomInSolid);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ZoomOutOutline.svelte
mark_module_start();
var root_2520 = svg_template(`<title> </title>`);
var root_3520 = svg_template(`<desc> </desc>`);
var root_1520 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" d="m21 21-3.5-3.5M7 10h6m4 0a7 7 0 1 1-14 0 7 7 0 0 1 14 0Z"></path></svg>`);
var root_5520 = svg_template(`<title> </title>`);
var root_6520 = svg_template(`<desc> </desc>`);
var root_4520 = svg_template(`<svg><!><!><path stroke="currentColor" stroke-linecap="round" d="m21 21-3.5-3.5M7 10h6m4 0a7 7 0 1 1-14 0 7 7 0 0 1 14 0Z"></path></svg>`);
function ZoomOutOutline($$anchor, $$props) {
  if (new.target === ZoomOutOutline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ZoomOutOutline);
  validate_prop_bindings($$props, [], [], ZoomOutOutline);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), strokeWidth = prop($$props, "strokeWidth", 11, () => ctx.strokeWidth || "2"), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "zoom out outline"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "strokeWidth",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1520();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2520();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3520();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => {
        attributes = set_attributes(
          svg,
          attributes,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24",
            onclick: $$props.onclick,
            onkeydown: $$props.onkeydown,
            onkeyup: $$props.onkeyup
          },
          false,
          ""
        );
        set_attribute(path, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4520();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5520();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6520();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => {
        attributes_1 = set_attributes(
          svg_1,
          attributes_1,
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            color: color(),
            ...restProps,
            class: twMerge("shrink-0", sizes[size()], $$props.class),
            role: $$props.role,
            "aria-label": ariaLabel(),
            "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
            viewBox: "0 0 24 24"
          },
          false,
          ""
        );
        set_attribute(path_1, "stroke-width", strokeWidth());
      });
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ZoomOutOutline);
  ZoomOutOutline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ZoomOutOutline_default = ZoomOutOutline;
ZoomOutOutline.filename = ".../flowbite-svelte-icons/dist/ZoomOutOutline.svelte";
mark_module_end(ZoomOutOutline);

// node_modules/.pnpm/flowbite-svelte-icons@2.0.0-next.7_svelte@5.0.0-next.123_tailwind-merge@2.3.0_tailwindcss@3.4.3/node_modules/flowbite-svelte-icons/dist/ZoomOutSolid.svelte
mark_module_start();
var root_2521 = svg_template(`<title> </title>`);
var root_3521 = svg_template(`<desc> </desc>`);
var root_1521 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M21.707 21.707a1 1 0 0 1-1.414 0l-3.5-3.5a1 1 0 0 1 1.414-1.414l3.5 3.5a1 1 0 0 1 0 1.414ZM2 10a8 8 0 1 1 16 0 8 8 0 0 1-16 0Zm4 0a1 1 0 0 0 1 1h6a1 1 0 1 0 0-2H7a1 1 0 0 0-1 1Z" clip-rule="evenodd"></path></svg>`);
var root_5521 = svg_template(`<title> </title>`);
var root_6521 = svg_template(`<desc> </desc>`);
var root_4521 = svg_template(`<svg><!><!><path fill-rule="evenodd" d="M21.707 21.707a1 1 0 0 1-1.414 0l-3.5-3.5a1 1 0 0 1 1.414-1.414l3.5 3.5a1 1 0 0 1 0 1.414ZM2 10a8 8 0 1 1 16 0 8 8 0 0 1-16 0Zm4 0a1 1 0 0 0 1 1h6a1 1 0 1 0 0-2H7a1 1 0 0 0-1 1Z" clip-rule="evenodd"></path></svg>`);
function ZoomOutSolid($$anchor, $$props) {
  if (new.target === ZoomOutSolid)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, true, ZoomOutSolid);
  validate_prop_bindings($$props, [], [], ZoomOutSolid);
  const ctx = getContext("iconCtx") ?? {};
  const sizes = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  let size = prop($$props, "size", 11, () => ctx.size || "md"), color = prop($$props, "color", 11, () => ctx.color || "currentColor"), withEvents = prop($$props, "withEvents", 11, () => ctx.withEvents || false), title = prop($$props, "title", 11, () => ({})), desc = prop($$props, "desc", 11, () => ({})), ariaLabel = prop($$props, "ariaLabel", 3, "zoom out solid"), restProps = rest_props(
    $$props,
    [
      "size",
      "role",
      "color",
      "withEvents",
      "title",
      "desc",
      "class",
      "ariaLabel",
      "onclick",
      "onkeydown",
      "onkeyup"
    ],
    "restProps"
  );
  let ariaDescribedby = `${title().id || ""} ${desc().id || ""}`;
  let hasDescription = source(false);
  function updateHasDescription() {
    set(hasDescription, !!(title().id || desc().id));
  }
  updateHasDescription();
  user_effect(() => {
    updateHasDescription();
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1521();
      let attributes;
      var node_1 = child(svg);
      if_block(node_1, () => title().id && title().title, ($$anchor3) => {
        var title_1 = root_2521();
        var text = child(title_1);
        render_effect(() => {
          set_attribute(title_1, "id", title().id);
          set_text(text, title().title);
        });
        append($$anchor3, title_1);
      });
      var node_2 = sibling(node_1);
      if_block(node_2, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_1 = root_3521();
        var text_1 = child(desc_1);
        render_effect(() => {
          set_attribute(desc_1, "id", desc().id);
          set_text(text_1, desc().desc);
        });
        append($$anchor3, desc_1);
      });
      var path = sibling(node_2);
      render_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24",
          onclick: $$props.onclick,
          onkeydown: $$props.onkeydown,
          onkeyup: $$props.onkeyup
        },
        false,
        ""
      ));
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_4521();
      let attributes_1;
      var node_3 = child(svg_1);
      if_block(node_3, () => title().id && title().title, ($$anchor3) => {
        var title_2 = root_5521();
        var text_2 = child(title_2);
        render_effect(() => {
          set_attribute(title_2, "id", title().id);
          set_text(text_2, title().title);
        });
        append($$anchor3, title_2);
      });
      var node_4 = sibling(node_3);
      if_block(node_4, () => desc().id && desc().desc, ($$anchor3) => {
        var desc_2 = root_6521();
        var text_3 = child(desc_2);
        render_effect(() => {
          set_attribute(desc_2, "id", desc().id);
          set_text(text_3, desc().desc);
        });
        append($$anchor3, desc_2);
      });
      var path_1 = sibling(node_4);
      render_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          xmlns: "http://www.w3.org/2000/svg",
          fill: color(),
          ...restProps,
          class: twMerge("shrink-0", sizes[size()], $$props.class),
          role: $$props.role,
          "aria-label": ariaLabel(),
          "aria-describedby": get(hasDescription) ? ariaDescribedby : void 0,
          viewBox: "0 0 24 24"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ZoomOutSolid);
  ZoomOutSolid = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ZoomOutSolid_default = ZoomOutSolid;
ZoomOutSolid.filename = ".../flowbite-svelte-icons/dist/ZoomOutSolid.svelte";
mark_module_end(ZoomOutSolid);
export {
  AddressBookOutline_default as AddressBookOutline,
  AddressBookSolid_default as AddressBookSolid,
  AdjustmentsHorizontalOutline_default as AdjustmentsHorizontalOutline,
  AdjustmentsHorizontalSolid_default as AdjustmentsHorizontalSolid,
  AdjustmentsVerticalOutline_default as AdjustmentsVerticalOutline,
  AdjustmentsVerticalSolid_default as AdjustmentsVerticalSolid,
  AlignCenterOutline_default as AlignCenterOutline,
  AngleDownOutline_default as AngleDownOutline,
  AngleLeftOutline_default as AngleLeftOutline,
  AngleRightOutline_default as AngleRightOutline,
  AngleUpOutline_default as AngleUpOutline,
  AnnotationOutline_default as AnnotationOutline,
  AnnotationSolid_default as AnnotationSolid,
  AppleSolid_default as AppleSolid,
  ArchiveArrowDownOutline_default as ArchiveArrowDownOutline,
  ArchiveArrowDownSolid_default as ArchiveArrowDownSolid,
  ArchiveOutline_default as ArchiveOutline,
  ArchiveSolid_default as ArchiveSolid,
  ArrowDownOutline_default as ArrowDownOutline,
  ArrowDownToBracketOutline_default as ArrowDownToBracketOutline,
  ArrowLeftOutline_default as ArrowLeftOutline,
  ArrowLeftToBracketOutline_default as ArrowLeftToBracketOutline,
  ArrowRightAltOutline_default as ArrowRightAltOutline,
  ArrowRightAltSolid_default as ArrowRightAltSolid,
  ArrowRightOutline_default as ArrowRightOutline,
  ArrowRightToBracketOutline_default as ArrowRightToBracketOutline,
  ArrowSortLettersOutline_default as ArrowSortLettersOutline,
  ArrowUpDownOutline_default as ArrowUpDownOutline,
  ArrowUpFromBracketOutline_default as ArrowUpFromBracketOutline,
  ArrowUpOutline_default as ArrowUpOutline,
  ArrowUpRightDownLeftOutline_default as ArrowUpRightDownLeftOutline,
  ArrowUpRightFromSquareOutline_default as ArrowUpRightFromSquareOutline,
  ArrowUpRightFromSquareSolid_default as ArrowUpRightFromSquareSolid,
  ArrowsRepeatCountOutline_default as ArrowsRepeatCountOutline,
  ArrowsRepeatOutline_default as ArrowsRepeatOutline,
  AtomOutline_default as AtomOutline,
  AwardOutline_default as AwardOutline,
  AwardSolid_default as AwardSolid,
  BackwardStepOutline_default as BackwardStepOutline,
  BackwardStepSolid_default as BackwardStepSolid,
  BadgeCheckOutline_default as BadgeCheckOutline,
  BadgeCheckSolid_default as BadgeCheckSolid,
  BanOutline_default as BanOutline,
  BarsFromLeftOutline_default as BarsFromLeftOutline,
  BarsOutline_default as BarsOutline,
  BellActiveAltOutline_default as BellActiveAltOutline,
  BellActiveAltSolid_default as BellActiveAltSolid,
  BellActiveOutline_default as BellActiveOutline,
  BellActiveSolid_default as BellActiveSolid,
  BellOutline_default as BellOutline,
  BellRingOutline_default as BellRingOutline,
  BellRingSolid_default as BellRingSolid,
  BellSolid_default as BellSolid,
  BlenderPhoneOutline_default as BlenderPhoneOutline,
  BlenderPhoneSolid_default as BlenderPhoneSolid,
  BookOpenOutline_default as BookOpenOutline,
  BookOpenSolid_default as BookOpenSolid,
  BookOutline_default as BookOutline,
  BookSolid_default as BookSolid,
  BookmarkOutline_default as BookmarkOutline,
  BookmarkSolid_default as BookmarkSolid,
  BrainOutline_default as BrainOutline,
  BrainSolid_default as BrainSolid,
  BriefcaseOutline_default as BriefcaseOutline,
  BriefcaseSolid_default as BriefcaseSolid,
  BugOutline_default as BugOutline,
  BugSolid_default as BugSolid,
  BuildingOutline_default as BuildingOutline,
  BuildingSolid_default as BuildingSolid,
  BullhornOutline_default as BullhornOutline,
  BullhornSolid_default as BullhornSolid,
  CalendarEditOutline_default as CalendarEditOutline,
  CalendarEditSolid_default as CalendarEditSolid,
  CalendarMonthOutline_default as CalendarMonthOutline,
  CalendarMonthSolid_default as CalendarMonthSolid,
  CalendarPlusOutline_default as CalendarPlusOutline,
  CalendarPlusSolid_default as CalendarPlusSolid,
  CalendarWeekOutline_default as CalendarWeekOutline,
  CalendarWeekSolid_default as CalendarWeekSolid,
  CameraPhotoOutline_default as CameraPhotoOutline,
  CameraPhotoSolid_default as CameraPhotoSolid,
  CaptionOutline_default as CaptionOutline,
  CaptionSolid_default as CaptionSolid,
  CaretDownOutline_default as CaretDownOutline,
  CaretDownSolid_default as CaretDownSolid,
  CaretLeftOutline_default as CaretLeftOutline,
  CaretLeftSolid_default as CaretLeftSolid,
  CaretRightOutline_default as CaretRightOutline,
  CaretRightSolid_default as CaretRightSolid,
  CaretSortOutline_default as CaretSortOutline,
  CaretSortSolid_default as CaretSortSolid,
  CaretUpOutline_default as CaretUpOutline,
  CaretUpSolid_default as CaretUpSolid,
  CartOutline_default as CartOutline,
  CartPlusAltOutline_default as CartPlusAltOutline,
  CartPlusAltSolid_default as CartPlusAltSolid,
  CartPlusOutline_default as CartPlusOutline,
  CartPlusSolid_default as CartPlusSolid,
  CartSolid_default as CartSolid,
  CashOutline_default as CashOutline,
  CashSolid_default as CashSolid,
  ChartLineDownOutline_default as ChartLineDownOutline,
  ChartLineUpOutline_default as ChartLineUpOutline,
  ChartMixedDollarOutline_default as ChartMixedDollarOutline,
  ChartMixedDollarSolid_default as ChartMixedDollarSolid,
  ChartMixedOutline_default as ChartMixedOutline,
  ChartOutline_default as ChartOutline,
  ChartPieOutline_default as ChartPieOutline,
  ChartPieSolid_default as ChartPieSolid,
  CheckCircleOutline_default as CheckCircleOutline,
  CheckCircleSolid_default as CheckCircleSolid,
  CheckOutline_default as CheckOutline,
  CheckPlusCircleOutline_default as CheckPlusCircleOutline,
  CheckPlusCircleSolid_default as CheckPlusCircleSolid,
  ChevronDoubleDownOutline_default as ChevronDoubleDownOutline,
  ChevronDoubleLeftOutline_default as ChevronDoubleLeftOutline,
  ChevronDoubleRightOutline_default as ChevronDoubleRightOutline,
  ChevronDoubleUpOutline_default as ChevronDoubleUpOutline,
  ChevronDownOutline_default as ChevronDownOutline,
  ChevronLeftOutline_default as ChevronLeftOutline,
  ChevronRightOutline_default as ChevronRightOutline,
  ChevronSortOutline_default as ChevronSortOutline,
  ChevronUpOutline_default as ChevronUpOutline,
  CircleMinusOutline_default as CircleMinusOutline,
  CircleMinusSolid_default as CircleMinusSolid,
  CirclePauseOutline_default as CirclePauseOutline,
  CirclePauseSolid_default as CirclePauseSolid,
  CirclePlusOutline_default as CirclePlusOutline,
  CirclePlusSolid_default as CirclePlusSolid,
  ClapperboardPlayOutline_default as ClapperboardPlayOutline,
  ClapperboardPlaySolid_default as ClapperboardPlaySolid,
  ClipboardCheckOutline_default as ClipboardCheckOutline,
  ClipboardCheckSolid_default as ClipboardCheckSolid,
  ClipboardCleanOutline_default as ClipboardCleanOutline,
  ClipboardCleanSolid_default as ClipboardCleanSolid,
  ClipboardListOutline_default as ClipboardListOutline,
  ClipboardListSolid_default as ClipboardListSolid,
  ClipboardOutline_default as ClipboardOutline,
  ClipboardSolid_default as ClipboardSolid,
  ClockOutline_default as ClockOutline,
  ClockSolid_default as ClockSolid,
  CloseCircleOutline_default as CloseCircleOutline,
  CloseCircleSolid_default as CloseCircleSolid,
  CloseOutline_default as CloseOutline,
  CloudArrowUpOutline_default as CloudArrowUpOutline,
  CloudArrowUpSolid_default as CloudArrowUpSolid,
  CodeBranchOutline_default as CodeBranchOutline,
  CodeBranchSolid_default as CodeBranchSolid,
  CodeForkOutline_default as CodeForkOutline,
  CodeForkSolid_default as CodeForkSolid,
  CodeMergeOutline_default as CodeMergeOutline,
  CodeMergeSolid_default as CodeMergeSolid,
  CodeOutline_default as CodeOutline,
  CodePullRequestOutline_default as CodePullRequestOutline,
  CodePullRequestSolid_default as CodePullRequestSolid,
  CogOutline_default as CogOutline,
  CogSolid_default as CogSolid,
  ColumnOutline_default as ColumnOutline,
  ColumnSolid_default as ColumnSolid,
  CommandOutline_default as CommandOutline,
  CompressOutline_default as CompressOutline,
  ComputerSpeakerOutline_default as ComputerSpeakerOutline,
  ComputerSpeakerSolid_default as ComputerSpeakerSolid,
  CreditCardOutline_default as CreditCardOutline,
  CreditCardPlusOutline_default as CreditCardPlusOutline,
  CreditCardPlusSolid_default as CreditCardPlusSolid,
  CreditCardSolid_default as CreditCardSolid,
  CssSolid_default as CssSolid,
  DatabaseOutline_default as DatabaseOutline,
  DatabaseSolid_default as DatabaseSolid,
  DesktopPcOutline_default as DesktopPcOutline,
  DesktopPcSolid_default as DesktopPcSolid,
  DiscordSolid_default as DiscordSolid,
  DnaOutline_default as DnaOutline,
  DollarOutline_default as DollarOutline,
  DotsHorizontalOutline_default as DotsHorizontalOutline,
  DotsVerticalOutline_default as DotsVerticalOutline,
  DownloadOutline_default as DownloadOutline,
  DownloadSolid_default as DownloadSolid,
  DrawSquareOutline_default as DrawSquareOutline,
  DrawSquareSolid_default as DrawSquareSolid,
  DribbbleSolid_default as DribbbleSolid,
  DropboxSolid_default as DropboxSolid,
  EditOutline_default as EditOutline,
  EditSolid_default as EditSolid,
  EnvelopeOpenOutline_default as EnvelopeOpenOutline,
  EnvelopeOpenSolid_default as EnvelopeOpenSolid,
  EnvelopeOutline_default as EnvelopeOutline,
  EnvelopeSolid_default as EnvelopeSolid,
  EuroOutline_default as EuroOutline,
  ExclamationCircleOutline_default as ExclamationCircleOutline,
  ExclamationCircleSolid_default as ExclamationCircleSolid,
  ExpandOutline_default as ExpandOutline,
  EyeOutline_default as EyeOutline,
  EyeSlashOutline_default as EyeSlashOutline,
  EyeSlashSolid_default as EyeSlashSolid,
  EyeSolid_default as EyeSolid,
  FaceExplodeOutline_default as FaceExplodeOutline,
  FaceExplodeSolid_default as FaceExplodeSolid,
  FaceGrinOutline_default as FaceGrinOutline,
  FaceGrinSolid_default as FaceGrinSolid,
  FaceGrinStarsOutline_default as FaceGrinStarsOutline,
  FaceGrinStarsSolid_default as FaceGrinStarsSolid,
  FaceLaughOutline_default as FaceLaughOutline,
  FaceLaughSolid_default as FaceLaughSolid,
  FacebookSolid_default as FacebookSolid,
  FileChartBarOutline_default as FileChartBarOutline,
  FileChartBarSolid_default as FileChartBarSolid,
  FileCheckOutline_default as FileCheckOutline,
  FileCheckSolid_default as FileCheckSolid,
  FileCirclePlusOutline_default as FileCirclePlusOutline,
  FileCirclePlusSolid_default as FileCirclePlusSolid,
  FileCloneOutline_default as FileCloneOutline,
  FileCloneSolid_default as FileCloneSolid,
  FileCodeOutline_default as FileCodeOutline,
  FileCodeSolid_default as FileCodeSolid,
  FileCopyAltOutline_default as FileCopyAltOutline,
  FileCopyAltSolid_default as FileCopyAltSolid,
  FileCopyOutline_default as FileCopyOutline,
  FileCopySolid_default as FileCopySolid,
  FileCsvOutline_default as FileCsvOutline,
  FileCsvSolid_default as FileCsvSolid,
  FileDocOutline_default as FileDocOutline,
  FileDocSolid_default as FileDocSolid,
  FileExportOutline_default as FileExportOutline,
  FileExportSolid_default as FileExportSolid,
  FileImageOutline_default as FileImageOutline,
  FileImageSolid_default as FileImageSolid,
  FileImportOutline_default as FileImportOutline,
  FileImportSolid_default as FileImportSolid,
  FileInvoiceOutline_default as FileInvoiceOutline,
  FileInvoiceSolid_default as FileInvoiceSolid,
  FileLinesOutline_default as FileLinesOutline,
  FileLinesSolid_default as FileLinesSolid,
  FileMusicOutline_default as FileMusicOutline,
  FileMusicSolid_default as FileMusicSolid,
  FileOutline_default as FileOutline,
  FilePasteOutline_default as FilePasteOutline,
  FilePasteSolid_default as FilePasteSolid,
  FilePdfOutline_default as FilePdfOutline,
  FilePdfSolid_default as FilePdfSolid,
  FilePenOutline_default as FilePenOutline,
  FilePenSolid_default as FilePenSolid,
  FilePptOutline_default as FilePptOutline,
  FilePptSolid_default as FilePptSolid,
  FileSearchOutline_default as FileSearchOutline,
  FileSearchSolid_default as FileSearchSolid,
  FileShieldOutline_default as FileShieldOutline,
  FileShieldSolid_default as FileShieldSolid,
  FileSolid_default as FileSolid,
  FileVideoOutline_default as FileVideoOutline,
  FileVideoSolid_default as FileVideoSolid,
  FileWordOutline_default as FileWordOutline,
  FileWordSolid_default as FileWordSolid,
  FileZipOutline_default as FileZipOutline,
  FileZipSolid_default as FileZipSolid,
  FilterOutline_default as FilterOutline,
  FilterSolid_default as FilterSolid,
  FingerprintOutline_default as FingerprintOutline,
  FireOutline_default as FireOutline,
  FireSolid_default as FireSolid,
  FlagOutline_default as FlagOutline,
  FlagSolid_default as FlagSolid,
  FloppyDiskAltOutline_default as FloppyDiskAltOutline,
  FloppyDiskAltSolid_default as FloppyDiskAltSolid,
  FloppyDiskOutline_default as FloppyDiskOutline,
  FloppyDiskSolid_default as FloppyDiskSolid,
  FlowbiteSolid_default as FlowbiteSolid,
  FolderArrowRightOutline_default as FolderArrowRightOutline,
  FolderArrowRightSolid_default as FolderArrowRightSolid,
  FolderDuplicateOutline_default as FolderDuplicateOutline,
  FolderDuplicateSolid_default as FolderDuplicateSolid,
  FolderOpenOutline_default as FolderOpenOutline,
  FolderOpenSolid_default as FolderOpenSolid,
  FolderOutline_default as FolderOutline,
  FolderPlusOutline_default as FolderPlusOutline,
  FolderPlusSolid_default as FolderPlusSolid,
  FolderSolid_default as FolderSolid,
  ForwardOutline_default as ForwardOutline,
  ForwardSolid_default as ForwardSolid,
  ForwardStepOutline_default as ForwardStepOutline,
  ForwardStepSolid_default as ForwardStepSolid,
  GiftBoxOutline_default as GiftBoxOutline,
  GiftBoxSolid_default as GiftBoxSolid,
  GithubSolid_default as GithubSolid,
  GlobeOutline_default as GlobeOutline,
  GlobeSolid_default as GlobeSolid,
  GoogleSolid_default as GoogleSolid,
  GridOutline_default as GridOutline,
  GridPlusOutline_default as GridPlusOutline,
  GridPlusSolid_default as GridPlusSolid,
  GridSolid_default as GridSolid,
  HeadphonesOutline_default as HeadphonesOutline,
  HeadphonesSolid_default as HeadphonesSolid,
  HeartOutline_default as HeartOutline,
  HeartSolid_default as HeartSolid,
  HomeOutline_default as HomeOutline,
  HomeSolid_default as HomeSolid,
  HourglassOutline_default as HourglassOutline,
  HourglassSolid_default as HourglassSolid,
  HtmlSolid_default as HtmlSolid,
  IconOutline_default as IconOutline,
  IconSolid_default as IconSolid,
  ImageOutline_default as ImageOutline,
  ImageSolid_default as ImageSolid,
  InboxFullOutline_default as InboxFullOutline,
  InboxFullSolid_default as InboxFullSolid,
  InboxOutline_default as InboxOutline,
  InboxSolid_default as InboxSolid,
  IndentOutline_default as IndentOutline,
  IndentSolid_default as IndentSolid,
  InfoCircleOutline_default as InfoCircleOutline,
  InfoCircleSolid_default as InfoCircleSolid,
  InstagramSolid_default as InstagramSolid,
  KeyboardOutline_default as KeyboardOutline,
  KeyboardSolid_default as KeyboardSolid,
  LabelOutline_default as LabelOutline,
  LabelSolid_default as LabelSolid,
  LandmarkOutline_default as LandmarkOutline,
  LandmarkSolid_default as LandmarkSolid,
  LanguageOutline_default as LanguageOutline,
  LayersOutline_default as LayersOutline,
  LayersSolid_default as LayersSolid,
  LetterBoldOutline_default as LetterBoldOutline,
  LetterItalicOutline_default as LetterItalicOutline,
  LetterUnderlineOutline_default as LetterUnderlineOutline,
  LifeSaverOutline_default as LifeSaverOutline,
  LifeSaverSolid_default as LifeSaverSolid,
  LightbulbOutline_default as LightbulbOutline,
  LightbulbSolid_default as LightbulbSolid,
  LinkOutline_default as LinkOutline,
  LinkedinSolid_default as LinkedinSolid,
  ListMusicOutline_default as ListMusicOutline,
  ListMusicSolid_default as ListMusicSolid,
  ListOutline_default as ListOutline,
  LockOpenOutline_default as LockOpenOutline,
  LockOpenSolid_default as LockOpenSolid,
  LockOutline_default as LockOutline,
  LockSolid_default as LockSolid,
  LockTimeOutline_default as LockTimeOutline,
  LockTimeSolid_default as LockTimeSolid,
  MailBoxOutline_default as MailBoxOutline,
  MailBoxSolid_default as MailBoxSolid,
  MapPinAltOutline_default as MapPinAltOutline,
  MapPinAltSolid_default as MapPinAltSolid,
  MapPinOutline_default as MapPinOutline,
  MapPinSolid_default as MapPinSolid,
  MastercardSolid_default as MastercardSolid,
  MessageCaptionOutline_default as MessageCaptionOutline,
  MessageCaptionSolid_default as MessageCaptionSolid,
  MessageDotsOutline_default as MessageDotsOutline,
  MessageDotsSolid_default as MessageDotsSolid,
  MessagesOutline_default as MessagesOutline,
  MessagesSolid_default as MessagesSolid,
  MicrophoneOutline_default as MicrophoneOutline,
  MicrophoneSlashOutline_default as MicrophoneSlashOutline,
  MicrophoneSlashSolid_default as MicrophoneSlashSolid,
  MicrophoneSolid_default as MicrophoneSolid,
  MinimizeOutline_default as MinimizeOutline,
  MinusOutline_default as MinusOutline,
  MobilePhoneOutline_default as MobilePhoneOutline,
  MobilePhoneSolid_default as MobilePhoneSolid,
  MoonOutline_default as MoonOutline,
  MoonSolid_default as MoonSolid,
  NewspaperOutline_default as NewspaperOutline,
  NewspaperSolid_default as NewspaperSolid,
  NpmSolid_default as NpmSolid,
  ObjectsColumnOutline_default as ObjectsColumnOutline,
  ObjectsColumnSolid_default as ObjectsColumnSolid,
  OrderedListOutline_default as OrderedListOutline,
  OutdentOutline_default as OutdentOutline,
  OutdentSolid_default as OutdentSolid,
  PaletteOutline_default as PaletteOutline,
  PaletteSolid_default as PaletteSolid,
  PaperClipOutline_default as PaperClipOutline,
  PaperPlaneOutline_default as PaperPlaneOutline,
  PaperPlaneSolid_default as PaperPlaneSolid,
  ParagraphOutline_default as ParagraphOutline,
  ParagraphSolid_default as ParagraphSolid,
  PauseOutline_default as PauseOutline,
  PauseSolid_default as PauseSolid,
  PenNibOutline_default as PenNibOutline,
  PenNibSolid_default as PenNibSolid,
  PenOutline_default as PenOutline,
  PenSolid_default as PenSolid,
  PhoneHangupOutline_default as PhoneHangupOutline,
  PhoneHangupSolid_default as PhoneHangupSolid,
  PhoneOutline_default as PhoneOutline,
  PhoneSolid_default as PhoneSolid,
  PlayOutline_default as PlayOutline,
  PlaySolid_default as PlaySolid,
  PlusOutline_default as PlusOutline,
  PrinterOutline_default as PrinterOutline,
  PrinterSolid_default as PrinterSolid,
  ProfileCardOutline_default as ProfileCardOutline,
  ProfileCardSolid_default as ProfileCardSolid,
  QrCodeOutline_default as QrCodeOutline,
  QuestionCircleOutline_default as QuestionCircleOutline,
  QuestionCircleSolid_default as QuestionCircleSolid,
  QuoteOutline_default as QuoteOutline,
  QuoteSolid_default as QuoteSolid,
  ReactSolid_default as ReactSolid,
  ReceiptOutline_default as ReceiptOutline,
  ReceiptSolid_default as ReceiptSolid,
  RectangleListOutline_default as RectangleListOutline,
  RectangleListSolid_default as RectangleListSolid,
  RedditSolid_default as RedditSolid,
  RedoOutline_default as RedoOutline,
  RefreshOutline_default as RefreshOutline,
  ReplyAllOutline_default as ReplyAllOutline,
  ReplyAllSolid_default as ReplyAllSolid,
  ReplyOutline_default as ReplyOutline,
  ReplySolid_default as ReplySolid,
  RestoreWindowOutline_default as RestoreWindowOutline,
  RocketOutline_default as RocketOutline,
  RocketSolid_default as RocketSolid,
  RulerCombinedOutline_default as RulerCombinedOutline,
  SalePercentOutline_default as SalePercentOutline,
  SalePercentSolid_default as SalePercentSolid,
  ScaleBalancedOutline_default as ScaleBalancedOutline,
  ScaleBalancedSolid_default as ScaleBalancedSolid,
  SearchOutline_default as SearchOutline,
  SearchSolid_default as SearchSolid,
  ServerOutline_default as ServerOutline,
  ServerSolid_default as ServerSolid,
  ShareAllOutline_default as ShareAllOutline,
  ShareAllSolid_default as ShareAllSolid,
  ShareNodesOutline_default as ShareNodesOutline,
  ShareNodesSolid_default as ShareNodesSolid,
  ShieldCheckOutline_default as ShieldCheckOutline,
  ShieldCheckSolid_default as ShieldCheckSolid,
  ShieldOutline_default as ShieldOutline,
  ShieldSolid_default as ShieldSolid,
  ShoppingBagOutline_default as ShoppingBagOutline,
  ShoppingBagSolid_default as ShoppingBagSolid,
  ShuffleOutline_default as ShuffleOutline,
  SortHorizontalOutline_default as SortHorizontalOutline,
  SortOutline_default as SortOutline,
  StackoverflowSolid_default as StackoverflowSolid,
  StarHalfOutline_default as StarHalfOutline,
  StarHalfSolid_default as StarHalfSolid,
  StarHalfStrokeOutline_default as StarHalfStrokeOutline,
  StarHalfStrokeSolid_default as StarHalfStrokeSolid,
  StarOutline_default as StarOutline,
  StarSolid_default as StarSolid,
  StopOutline_default as StopOutline,
  StopSolid_default as StopSolid,
  StoreOutline_default as StoreOutline,
  StoreSolid_default as StoreSolid,
  SunOutline_default as SunOutline,
  SunSolid_default as SunSolid,
  SwatchbookOutline_default as SwatchbookOutline,
  SwatchbookSolid_default as SwatchbookSolid,
  TableColumnOutline_default as TableColumnOutline,
  TableColumnSolid_default as TableColumnSolid,
  TableRowOutline_default as TableRowOutline,
  TableRowSolid_default as TableRowSolid,
  TabletOutline_default as TabletOutline,
  TabletSolid_default as TabletSolid,
  TagOutline_default as TagOutline,
  TagSolid_default as TagSolid,
  TailwindSolid_default as TailwindSolid,
  TerminalOutline_default as TerminalOutline,
  TerminalSolid_default as TerminalSolid,
  TextSizeOutline_default as TextSizeOutline,
  TextSlashOutline_default as TextSlashOutline,
  ThumbsDownOutline_default as ThumbsDownOutline,
  ThumbsDownSolid_default as ThumbsDownSolid,
  ThumbsUpOutline_default as ThumbsUpOutline,
  ThumbsUpSolid_default as ThumbsUpSolid,
  TicketOutline_default as TicketOutline,
  TicketSolid_default as TicketSolid,
  TrashBinOutline_default as TrashBinOutline,
  TrashBinSolid_default as TrashBinSolid,
  TruckOutline_default as TruckOutline,
  TruckSolid_default as TruckSolid,
  TwitterSolid_default as TwitterSolid,
  UndoOutline_default as UndoOutline,
  UploadOutline_default as UploadOutline,
  UploadSolid_default as UploadSolid,
  UserAddOutline_default as UserAddOutline,
  UserAddSolid_default as UserAddSolid,
  UserCircleOutline_default as UserCircleOutline,
  UserCircleSolid_default as UserCircleSolid,
  UserEditOutline_default as UserEditOutline,
  UserEditSolid_default as UserEditSolid,
  UserHeadsetOutline_default as UserHeadsetOutline,
  UserHeadsetSolid_default as UserHeadsetSolid,
  UserOutline_default as UserOutline,
  UserRemoveOutline_default as UserRemoveOutline,
  UserRemoveSolid_default as UserRemoveSolid,
  UserSettingsOutline_default as UserSettingsOutline,
  UserSettingsSolid_default as UserSettingsSolid,
  UserSolid_default as UserSolid,
  UsersGroupOutline_default as UsersGroupOutline,
  UsersGroupSolid_default as UsersGroupSolid,
  UsersOutline_default as UsersOutline,
  UsersSolid_default as UsersSolid,
  VideoCameraOutline_default as VideoCameraOutline,
  VideoCameraSolid_default as VideoCameraSolid,
  VisaSolid_default as VisaSolid,
  VolumeDownOutline_default as VolumeDownOutline,
  VolumeDownSolid_default as VolumeDownSolid,
  VolumeMuteOutline_default as VolumeMuteOutline,
  VolumeMuteSolid_default as VolumeMuteSolid,
  VolumeUpOutline_default as VolumeUpOutline,
  VolumeUpSolid_default as VolumeUpSolid,
  VueSolid_default as VueSolid,
  WalletOutline_default as WalletOutline,
  WalletSolid_default as WalletSolid,
  WandMagicSparklesOutline_default as WandMagicSparklesOutline,
  WandMagicSparklesSolid_default as WandMagicSparklesSolid,
  WhatsappSolid_default as WhatsappSolid,
  WindowOutline_default as WindowOutline,
  WindowRestoreSolid_default as WindowRestoreSolid,
  WindowSolid_default as WindowSolid,
  WindowsSolid_default as WindowsSolid,
  XSolid_default as XSolid,
  YoutubeSolid_default as YoutubeSolid,
  ZoomInOutline_default as ZoomInOutline,
  ZoomInSolid_default as ZoomInSolid,
  ZoomOutOutline_default as ZoomOutOutline,
  ZoomOutSolid_default as ZoomOutSolid
};
//# sourceMappingURL=flowbite-svelte-icons.js.map
