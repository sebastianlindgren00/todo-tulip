import {
  blur,
  fade,
  fly,
  slide
} from "./chunk-K23DSKDU.js";
import {
  twJoin,
  twMerge
} from "./chunk-LMQFHTUN.js";
import {
  createEventDispatcher,
  onMount
} from "./chunk-YV2YLO3I.js";
import {
  action,
  append,
  bind_checked,
  bind_files,
  bind_group,
  bind_select_value,
  bind_this,
  bind_value,
  bubble_event,
  comment,
  component,
  each,
  element,
  hmr,
  html,
  if_block,
  index,
  init,
  init_select,
  key_block,
  legacy_rest_props,
  mutate_store,
  preventDefault,
  prop,
  remove_input_attr_defaults,
  remove_textarea_child,
  select_option,
  set_attribute,
  set_attributes,
  set_class,
  set_dynamic_element_attributes,
  set_svg_class,
  spread_props,
  stopPropagation,
  store_get,
  store_set,
  svg_template,
  template,
  template_with_script,
  text,
  transition,
  unsubscribe_on_destroy,
  validate_dynamic_component,
  validate_each_keys,
  wrap_snippet
} from "./chunk-KWW3PK7Z.js";
import {
  $document,
  add_owner_effect,
  child,
  deep_read_state,
  derived,
  derived_safe_equal,
  event,
  first_child,
  get,
  getContext,
  head,
  invalidate_inner_signals,
  legacy_pre_effect,
  legacy_pre_effect_reset,
  mark_module_end,
  mark_module_start,
  mutable_source,
  mutate,
  pop,
  push,
  render_effect,
  sanitize_slots,
  set,
  setContext,
  set_text,
  sibling,
  slot,
  source,
  stringify,
  untrack,
  unwrap
} from "./chunk-FSMH6D6K.js";
import {
  tweened
} from "./chunk-DZ7NT5WR.js";
import {
  writable
} from "./chunk-YSAPHKZN.js";
import {
  cubicOut,
  quintOut
} from "./chunk-KU3WLYKD.js";
import "./chunk-FCK544W4.js";
import "./chunk-ZIHMLYFO.js";
import {
  validate_component,
  validate_dynamic_element_tag,
  validate_store,
  validate_void_dynamic_element
} from "./chunk-76O4YZNF.js";
import "./chunk-PLGELRID.js";
import "./chunk-DT6VC44C.js";
import "./chunk-JEIFYAHZ.js";
import "./chunk-HLATIPCS.js";

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/utils/Frame.svelte
mark_module_start();
function Frame($$anchor, $$props) {
  if (new.target === Frame)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "tag",
    "color",
    "rounded",
    "border",
    "shadow",
    "node",
    "use",
    "options",
    "role",
    "transition",
    "params",
    "open"
  ]);
  push($$props, false, Frame);
  const noop = () => {
  };
  setContext("background", true);
  let tag = prop($$props, "tag", 8, () => $$restProps.href ? "a" : "div");
  let color = prop($$props, "color", 4, "default");
  let rounded = prop($$props, "rounded", 0, false);
  let border = prop($$props, "border", 0, false);
  let shadow = prop($$props, "shadow", 0, false);
  let node = prop($$props, "node", 4, void 0);
  let use = prop($$props, "use", 0, noop);
  let options = prop($$props, "options", 8, () => ({}));
  let role = prop($$props, "role", 0, void 0);
  let transition2 = prop($$props, "transition", 0, void 0);
  let params = prop($$props, "params", 8, () => ({}));
  let open = prop($$props, "open", 0, true);
  const dispatch = createEventDispatcher();
  const bgColors = {
    gray: "bg-gray-50 dark:bg-gray-800",
    red: "bg-red-50 dark:bg-gray-800",
    yellow: "bg-yellow-50 dark:bg-gray-800 ",
    green: "bg-green-50 dark:bg-gray-800 ",
    indigo: "bg-indigo-50 dark:bg-gray-800 ",
    purple: "bg-purple-50 dark:bg-gray-800 ",
    pink: "bg-pink-50 dark:bg-gray-800 ",
    blue: "bg-blue-50 dark:bg-gray-800 ",
    light: "bg-gray-50 dark:bg-gray-700",
    dark: "bg-gray-50 dark:bg-gray-800",
    default: "bg-white dark:bg-gray-800",
    dropdown: "bg-white dark:bg-gray-700",
    navbar: "bg-white dark:bg-gray-900",
    navbarUl: "bg-gray-50 dark:bg-gray-800",
    form: "bg-gray-50 dark:bg-gray-700",
    primary: "bg-primary-50 dark:bg-gray-800 ",
    orange: "bg-orange-50 dark:bg-orange-800",
    none: ""
  };
  const textColors = {
    gray: "text-gray-800 dark:text-gray-300",
    red: "text-red-800 dark:text-red-400",
    yellow: "text-yellow-800 dark:text-yellow-300",
    green: "text-green-800 dark:text-green-400",
    indigo: "text-indigo-800 dark:text-indigo-400",
    purple: "text-purple-800 dark:text-purple-400",
    pink: "text-pink-800 dark:text-pink-400",
    blue: "text-blue-800 dark:text-blue-400",
    light: "text-gray-700 dark:text-gray-300",
    dark: "text-gray-700 dark:text-gray-300",
    default: "text-gray-500 dark:text-gray-400",
    dropdown: "text-gray-700 dark:text-gray-200",
    navbar: "text-gray-700 dark:text-gray-200",
    navbarUl: "text-gray-700 dark:text-gray-400",
    form: "text-gray-900 dark:text-white",
    primary: "text-primary-800 dark:text-primary-400",
    orange: "text-orange-800 dark:text-orange-400",
    none: ""
  };
  const borderColors = {
    gray: "border-gray-300 dark:border-gray-800 divide-gray-300 dark:divide-gray-800",
    red: "border-red-300 dark:border-red-800 divide-red-300 dark:divide-red-800",
    yellow: "border-yellow-300 dark:border-yellow-800 divide-yellow-300 dark:divide-yellow-800",
    green: "border-green-300 dark:border-green-800 divide-green-300 dark:divide-green-800",
    indigo: "border-indigo-300 dark:border-indigo-800 divide-indigo-300 dark:divide-indigo-800",
    purple: "border-purple-300 dark:border-purple-800 divide-purple-300 dark:divide-purple-800",
    pink: "border-pink-300 dark:border-pink-800 divide-pink-300 dark:divide-pink-800",
    blue: "border-blue-300 dark:border-blue-800 divide-blue-300 dark:divide-blue-800",
    light: "border-gray-500 divide-gray-500",
    dark: "border-gray-500 divide-gray-500",
    default: "border-gray-200 dark:border-gray-700 divide-gray-200 dark:divide-gray-700",
    dropdown: "border-gray-100 dark:border-gray-600 divide-gray-100 dark:divide-gray-600",
    navbar: "border-gray-100 dark:border-gray-700 divide-gray-100 dark:divide-gray-700",
    navbarUl: "border-gray-100 dark:border-gray-700 divide-gray-100 dark:divide-gray-700",
    form: "border-gray-300 dark:border-gray-700 divide-gray-300 dark:divide-gray-700",
    primary: "border-primary-500 dark:border-primary-200  divide-primary-500 dark:divide-primary-200 ",
    orange: "border-orange-300 dark:border-orange-800 divide-orange-300 dark:divide-orange-800",
    none: ""
  };
  let divClass = mutable_source();
  legacy_pre_effect(() => deep_read_state(open()), () => {
    dispatch(open() ? "open" : "close");
  });
  legacy_pre_effect(() => deep_read_state(open()), () => {
    dispatch("show", open());
  });
  legacy_pre_effect(() => deep_read_state(color()), () => {
    color(color() ?? "default");
  });
  legacy_pre_effect(() => deep_read_state(color()), () => {
    setContext("color", color());
  });
  legacy_pre_effect(
    () => (deep_read_state(color()), deep_read_state(rounded()), deep_read_state(border()), deep_read_state(shadow()), deep_read_state($$sanitized_props)),
    () => {
      set(divClass, twMerge(bgColors[color()], textColors[color()], rounded() && "rounded-lg", border() && "border", borderColors[color()], shadow() && "shadow-md", $$sanitized_props.class));
    }
  );
  legacy_pre_effect_reset();
  init();
  var fragment = comment();
  var node_1 = first_child(fragment);
  if_block(
    node_1,
    () => transition2() && open(),
    ($$anchor2) => {
      var fragment_1 = comment();
      var node_2 = first_child(fragment_1);
      validate_void_dynamic_element(tag);
      validate_dynamic_element_tag(tag);
      element(node_2, tag, false, ($$element, $$anchor3) => {
        transition(3, $$element, transition2, params);
        bind_this($$element, ($$value) => node($$value), () => node());
        let attributes;
        render_effect(() => attributes = set_dynamic_element_attributes(
          $$element,
          attributes,
          {
            role: role(),
            ...$$restProps,
            class: get(divClass)
          },
          ""
        ));
        action($$element, ($$node, $$action_arg) => use()($$node, $$action_arg), options);
        event("click", $$element, function($$arg) {
          bubble_event.call(this, $$props, $$arg);
        });
        event("mouseenter", $$element, function($$arg) {
          bubble_event.call(this, $$props, $$arg);
        });
        event("mouseleave", $$element, function($$arg) {
          bubble_event.call(this, $$props, $$arg);
        });
        event("focusin", $$element, function($$arg) {
          bubble_event.call(this, $$props, $$arg);
        });
        event("focusout", $$element, function($$arg) {
          bubble_event.call(this, $$props, $$arg);
        });
        var fragment_2 = comment();
        var node_3 = first_child(fragment_2);
        slot(node_3, $$props.children, {}, null);
        append($$anchor3, fragment_2);
      });
      append($$anchor2, fragment_1);
    },
    ($$anchor2) => {
      var fragment_3 = comment();
      var node_4 = first_child(fragment_3);
      if_block(
        node_4,
        open,
        ($$anchor3) => {
          var fragment_4 = comment();
          var node_5 = first_child(fragment_4);
          validate_void_dynamic_element(tag);
          validate_dynamic_element_tag(tag);
          element(node_5, tag, false, ($$element_1, $$anchor4) => {
            bind_this($$element_1, ($$value) => node($$value), () => node());
            let attributes_1;
            render_effect(() => attributes_1 = set_dynamic_element_attributes(
              $$element_1,
              attributes_1,
              {
                role: role(),
                ...$$restProps,
                class: get(divClass)
              },
              ""
            ));
            action($$element_1, ($$node, $$action_arg) => use()($$node, $$action_arg), options);
            event("click", $$element_1, function($$arg) {
              bubble_event.call(this, $$props, $$arg);
            });
            event("mouseenter", $$element_1, function($$arg) {
              bubble_event.call(this, $$props, $$arg);
            });
            event("mouseleave", $$element_1, function($$arg) {
              bubble_event.call(this, $$props, $$arg);
            });
            event("focusin", $$element_1, function($$arg) {
              bubble_event.call(this, $$props, $$arg);
            });
            event("focusout", $$element_1, function($$arg) {
              bubble_event.call(this, $$props, $$arg);
            });
            var fragment_5 = comment();
            var node_6 = first_child(fragment_5);
            slot(node_6, $$props.children, {}, null);
            append($$anchor4, fragment_5);
          });
          append($$anchor3, fragment_4);
        },
        null,
        true
      );
      append($$anchor2, fragment_3);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Frame);
  Frame = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Frame_default = Frame;
Frame.filename = ".../dist/utils/Frame.svelte";
mark_module_end(Frame);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/accordion/Accordion.svelte
mark_module_start();
function Accordion($$anchor, $$props) {
  if (new.target === Accordion)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "multiple",
    "flush",
    "activeClass",
    "inactiveClass",
    "defaultClass"
  ]);
  push($$props, false, Accordion);
  let multiple = prop($$props, "multiple", 0, false);
  let flush = prop($$props, "flush", 0, false);
  let activeClass = prop($$props, "activeClass", 0, "bg-gray-100 dark:bg-gray-800 text-gray-900 dark:text-white focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-800");
  let inactiveClass = prop($$props, "inactiveClass", 0, "text-gray-500 dark:text-gray-400 hover:bg-gray-100 hover:dark:bg-gray-800");
  let defaultClass = prop($$props, "defaultClass", 0, "text-gray-500 dark:text-gray-400");
  const ctx = {
    flush: flush(),
    activeClass: twMerge(activeClass(), $$sanitized_props.classActive),
    inactiveClass: twMerge(inactiveClass(), $$sanitized_props.classInactive),
    selected: multiple() ? void 0 : writable()
  };
  setContext("ctx", ctx);
  let frameClass = mutable_source();
  legacy_pre_effect(
    () => (deep_read_state(defaultClass()), deep_read_state($$sanitized_props)),
    () => {
      set(frameClass, twMerge(defaultClass(), $$sanitized_props.class));
    }
  );
  legacy_pre_effect_reset();
  init();
  var fragment = comment();
  var node = first_child(fragment);
  validate_component(Frame_default)(node, spread_props(() => $$restProps, {
    get class() {
      return get(frameClass);
    },
    color: "none",
    children: wrap_snippet(($$anchor2, $$slotProps) => {
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      slot(node_1, $$props.children, {}, null);
      append($$anchor2, fragment_1);
    })
  }));
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Accordion);
  Accordion = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Accordion_default = Accordion;
Accordion.filename = ".../dist/accordion/Accordion.svelte";
mark_module_end(Accordion);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/accordion/AccordionItem.svelte
mark_module_start();
var fallback = template(`<svg class="w-3 h-3 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5 5 1 1 5"></path></svg>`);
var fallback_1 = template(`<svg class="w-3 h-3 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 4 4 4-4"></path></svg>`);
var root_3 = template(`<div><div><!></div></div>`);
var root_4 = template(`<div class="hidden"><div><!></div></div>`);
var root = template(`<h2 class="group"><button type="button"><!> <!></button></h2> <!>`, 1);
function AccordionItem($$anchor, $$props) {
  var _a;
  if (new.target === AccordionItem)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  push($$props, false, AccordionItem);
  const $$subscriptions = {};
  unsubscribe_on_destroy($$subscriptions);
  const $selected = () => (validate_store(selected, "selected"), store_get(selected, "$selected", $$subscriptions));
  const contentClass = mutable_source();
  let open = prop($$props, "open", 4, false);
  let activeClass = prop($$props, "activeClass", 0, void 0);
  let inactiveClass = prop($$props, "inactiveClass", 0, void 0);
  let defaultClass = prop($$props, "defaultClass", 0, "flex items-center justify-between w-full font-medium text-left group-first:rounded-t-xl border-gray-200 dark:border-gray-700");
  let transitionType = prop($$props, "transitionType", 0, "slide");
  let transitionParams = prop($$props, "transitionParams", 8, () => ({}));
  let paddingFlush = prop($$props, "paddingFlush", 0, "py-5");
  let paddingDefault = prop($$props, "paddingDefault", 0, "p-5");
  let textFlushOpen = prop($$props, "textFlushOpen", 0, "text-gray-900 dark:text-white");
  let textFlushDefault = prop($$props, "textFlushDefault", 0, "text-gray-500 dark:text-gray-400");
  let borderClass = prop($$props, "borderClass", 0, "border-s border-e group-first:border-t");
  let borderOpenClass = prop($$props, "borderOpenClass", 0, "border-s border-e");
  let borderBottomClass = prop($$props, "borderBottomClass", 0, "border-b");
  let borderSharedClass = prop($$props, "borderSharedClass", 0, "border-gray-200 dark:border-gray-700");
  let classActive = prop($$props, "classActive", 0, void 0);
  let classInactive = prop($$props, "classInactive", 0, void 0);
  let activeCls = twMerge(activeClass(), classActive());
  let inactiveCls = twMerge(inactiveClass(), classInactive());
  const multiple = (node, params) => {
    switch (transitionType()) {
      case "blur":
        return blur(node, params);
      case "fly":
        return fly(node, params);
      case "fade":
        return fade(node, params);
      default:
        return slide(node, params);
    }
  };
  const ctx = getContext("ctx") ?? {};
  const self = {};
  const selected = ctx.selected ?? writable();
  let _open = open();
  open(false);
  onMount(() => {
    if (_open)
      store_set(selected, self);
    return selected.subscribe((x) => open(x === self));
  });
  const handleToggle = (_) => selected.set(open() ? {} : self);
  let buttonClass = mutable_source();
  legacy_pre_effect(
    () => (deep_read_state(defaultClass()), deep_read_state(borderClass()), deep_read_state(borderBottomClass()), deep_read_state(borderSharedClass()), deep_read_state(paddingFlush()), deep_read_state(paddingDefault()), deep_read_state(open()), deep_read_state(textFlushOpen()), deep_read_state(textFlushDefault()), deep_read_state($$sanitized_props)),
    () => {
      set(buttonClass, twMerge([
        defaultClass(),
        ctx.flush || borderClass(),
        borderBottomClass(),
        borderSharedClass(),
        ctx.flush ? paddingFlush() : paddingDefault(),
        open() && (ctx.flush ? textFlushOpen() : activeCls || ctx.activeClass),
        !open() && (ctx.flush ? textFlushDefault() : inactiveCls || ctx.inactiveClass),
        $$sanitized_props.class
      ]));
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(paddingFlush()), deep_read_state(paddingDefault()), deep_read_state(borderOpenClass()), deep_read_state(borderBottomClass()), deep_read_state(borderSharedClass())),
    () => {
      set(contentClass, twMerge([
        ctx.flush ? paddingFlush() : paddingDefault(),
        ctx.flush ? "" : borderOpenClass(),
        borderBottomClass(),
        borderSharedClass()
      ]));
    }
  );
  legacy_pre_effect_reset();
  init();
  var fragment = root();
  var h2 = first_child(fragment);
  var button = child(h2);
  var node_1 = child(button);
  slot(node_1, (_a = $$props.$$slots) == null ? void 0 : _a["header"], {}, null);
  var node_2 = sibling(sibling(node_1, true));
  if_block(
    node_2,
    open,
    ($$anchor2) => {
      var _a2;
      var fragment_1 = comment();
      var node_3 = first_child(fragment_1);
      slot(node_3, (_a2 = $$props.$$slots) == null ? void 0 : _a2["arrowup"], {}, ($$anchor3) => {
        var svg = fallback();
        var path = child(svg);
        append($$anchor3, svg);
      });
      append($$anchor2, fragment_1);
    },
    ($$anchor2) => {
      var _a2;
      var fragment_2 = comment();
      var node_4 = first_child(fragment_2);
      slot(node_4, (_a2 = $$props.$$slots) == null ? void 0 : _a2["arrowdown"], {}, ($$anchor3) => {
        var svg_1 = fallback_1();
        var path_1 = child(svg_1);
        append($$anchor3, svg_1);
      });
      append($$anchor2, fragment_2);
    }
  );
  var node_5 = sibling(sibling(h2, true));
  if_block(
    node_5,
    open,
    ($$anchor2) => {
      var div = root_3();
      transition(3, div, () => multiple, transitionParams);
      var div_1 = child(div);
      var node_6 = child(div_1);
      slot(node_6, $$props.children, {}, null);
      render_effect(() => set_class(div_1, get(contentClass)));
      append($$anchor2, div);
    },
    ($$anchor2) => {
      var div_2 = root_4();
      var div_3 = child(div_2);
      var node_7 = child(div_3);
      slot(node_7, $$props.children, {}, null);
      render_effect(() => set_class(div_3, get(contentClass)));
      append($$anchor2, div_2);
    }
  );
  render_effect(() => {
    set_class(button, get(buttonClass));
    set_attribute(button, "aria-expanded", open());
  });
  event("click", button, handleToggle, false);
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(AccordionItem);
  AccordionItem = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var AccordionItem_default = AccordionItem;
AccordionItem.filename = ".../dist/accordion/AccordionItem.svelte";
mark_module_end(AccordionItem);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/utils/TransitionFrame.svelte
mark_module_start();
function TransitionFrame($$anchor, $$props) {
  if (new.target === TransitionFrame)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["transition", "params", "open"]);
  push($$props, false, TransitionFrame);
  let transition2 = prop($$props, "transition", 0, fade);
  let params = prop($$props, "params", 8, () => ({}));
  let open = prop($$props, "open", 4, true);
  function close(ev) {
    if (ev == null ? void 0 : ev.stopPropagation)
      ev.stopPropagation();
    open(false);
  }
  var fragment = comment();
  var node = first_child(fragment);
  {
    add_owner_effect(open, Frame_default);
    validate_component(Frame_default)(node, spread_props(
      {
        get open() {
          return open();
        },
        set open($$value) {
          open($$value);
        },
        get transition() {
          return transition2();
        },
        get params() {
          return params();
        }
      },
      () => $$restProps,
      {
        $$events: {
          show($$arg) {
            bubble_event.call(this, $$props, $$arg);
          }
        },
        children: wrap_snippet(($$anchor2, $$slotProps) => {
          var fragment_1 = comment();
          var node_1 = first_child(fragment_1);
          slot(node_1, $$props.children, { close }, null);
          append($$anchor2, fragment_1);
        })
      }
    ));
  }
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(TransitionFrame);
  TransitionFrame = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var TransitionFrame_default = TransitionFrame;
TransitionFrame.filename = ".../dist/utils/TransitionFrame.svelte";
mark_module_end(TransitionFrame);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/toolbar/ToolbarButton.svelte
mark_module_start();
var root_2 = template(`<span class="sr-only"> </span>`);
var root_1 = template(`<a><!> <!></a>`);
var root_42 = template(`<span class="sr-only"> </span>`);
var root_32 = template(`<button><!> <!></button>`);
function ToolbarButton($$anchor, $$props) {
  if (new.target === ToolbarButton)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "color",
    "name",
    "ariaLabel",
    "size",
    "href"
  ]);
  push($$props, false, ToolbarButton);
  const background = getContext("background");
  let color = prop($$props, "color", 0, "default");
  let name = prop($$props, "name", 0, void 0);
  let ariaLabel = prop($$props, "ariaLabel", 0, void 0);
  let size2 = prop($$props, "size", 0, "md");
  let href = prop($$props, "href", 0, void 0);
  const colors = {
    dark: "text-gray-500 hover:text-gray-900 hover:bg-gray-200 dark:text-gray-400 dark:hover:text-white dark:hover:bg-gray-600",
    gray: "text-gray-500 focus:ring-gray-400 hover:bg-gray-200 dark:hover:bg-gray-800 dark:hover:text-gray-300",
    red: "text-red-500 focus:ring-red-400 hover:bg-red-200 dark:hover:bg-red-800 dark:hover:text-red-300",
    yellow: "text-yellow-500 focus:ring-yellow-400 hover:bg-yellow-200 dark:hover:bg-yellow-800 dark:hover:text-yellow-300",
    green: "text-green-500 focus:ring-green-400 hover:bg-green-200 dark:hover:bg-green-800 dark:hover:text-green-300",
    indigo: "text-indigo-500 focus:ring-indigo-400 hover:bg-indigo-200 dark:hover:bg-indigo-800 dark:hover:text-indigo-300",
    purple: "text-purple-500 focus:ring-purple-400 hover:bg-purple-200 dark:hover:bg-purple-800 dark:hover:text-purple-300",
    pink: "text-pink-500 focus:ring-pink-400 hover:bg-pink-200 dark:hover:bg-pink-800 dark:hover:text-pink-300",
    blue: "text-blue-500 focus:ring-blue-400 hover:bg-blue-200 dark:hover:bg-blue-800 dark:hover:text-blue-300",
    primary: "text-primary-500 focus:ring-primary-400 hover:bg-primary-200 dark:hover:bg-primary-800 dark:hover:text-primary-300",
    default: "focus:ring-gray-400 hover:bg-gray-100"
  };
  const sizing = {
    xs: "m-0.5 rounded-sm focus:ring-1 p-0.5",
    sm: "m-0.5 rounded focus:ring-1 p-0.5",
    md: "m-0.5 rounded-lg focus:ring-2 p-1.5",
    lg: "m-0.5 rounded-lg focus:ring-2 p-2.5"
  };
  let buttonClass = mutable_source();
  const svgSizes = {
    xs: "w-3 h-3",
    sm: "w-3.5 h-3.5",
    md: "w-5 h-5",
    lg: "w-5 h-5"
  };
  legacy_pre_effect(
    () => (deep_read_state(size2()), deep_read_state(color()), deep_read_state($$sanitized_props)),
    () => {
      set(buttonClass, twMerge("focus:outline-none whitespace-normal", sizing[size2()], colors[color()], color() === "default" && (background ? "dark:hover:bg-gray-600" : "dark:hover:bg-gray-700"), $$sanitized_props.class));
    }
  );
  legacy_pre_effect_reset();
  init();
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    href,
    ($$anchor2) => {
      var a = root_1();
      let attributes;
      var node_1 = child(a);
      if_block(node_1, name, ($$anchor3) => {
        var span = root_2();
        var text2 = child(span);
        render_effect(() => set_text(text2, name()));
        append($$anchor3, span);
      });
      var node_2 = sibling(sibling(node_1, true));
      slot(
        node_2,
        $$props.children,
        {
          get svgSize() {
            return svgSizes[size2()];
          }
        },
        null
      );
      render_effect(() => attributes = set_attributes(
        a,
        attributes,
        {
          href: href(),
          ...$$restProps,
          class: get(buttonClass),
          "aria-label": ariaLabel() ?? name()
        },
        true,
        ""
      ));
      append($$anchor2, a);
    },
    ($$anchor2) => {
      var button = root_32();
      let attributes_1;
      var node_3 = child(button);
      if_block(node_3, name, ($$anchor3) => {
        var span_1 = root_42();
        var text_1 = child(span_1);
        render_effect(() => set_text(text_1, name()));
        append($$anchor3, span_1);
      });
      var node_4 = sibling(sibling(node_3, true));
      slot(
        node_4,
        $$props.children,
        {
          get svgSize() {
            return svgSizes[size2()];
          }
        },
        null
      );
      render_effect(() => attributes_1 = set_attributes(
        button,
        attributes_1,
        {
          type: "button",
          ...$$restProps,
          class: get(buttonClass),
          "aria-label": ariaLabel() ?? name()
        },
        true,
        ""
      ));
      event("click", button, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      append($$anchor2, button);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ToolbarButton);
  ToolbarButton = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ToolbarButton_default = ToolbarButton;
ToolbarButton.filename = ".../dist/toolbar/ToolbarButton.svelte";
mark_module_end(ToolbarButton);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/utils/CloseButton.svelte
mark_module_start();
var ToolbarButton_default2 = svg_template(`<svg fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path></svg>`);
function CloseButton($$anchor, $$props) {
  if (new.target === CloseButton)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["name"]);
  push($$props, false, CloseButton);
  let name = prop($$props, "name", 0, "Close");
  init();
  var fragment = comment();
  var node = first_child(fragment);
  var class_1 = derived(() => twMerge("ms-auto", $$sanitized_props.class));
  validate_component(ToolbarButton_default)(node, spread_props(
    {
      get name() {
        return name();
      }
    },
    () => $$restProps,
    {
      get class() {
        return get(class_1);
      },
      $$events: {
        click($$arg) {
          bubble_event.call(this, $$props, $$arg);
        }
      },
      children: wrap_snippet(($$anchor2, $$slotProps) => {
        const svgSize = derived_safe_equal(() => $$slotProps.svgSize);
        var svg = ToolbarButton_default2();
        var path = child(svg);
        render_effect(() => set_svg_class(svg, get(svgSize)));
        append($$anchor2, svg);
      })
    }
  ));
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CloseButton);
  CloseButton = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CloseButton_default = CloseButton;
CloseButton.filename = ".../dist/utils/CloseButton.svelte";
mark_module_end(CloseButton);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/alert/Alert.svelte
mark_module_start();
var root_22 = template(`<div><!></div>`);
var TransitionFrame_default2 = template(`<!> <!> <!>`, 1);
function Alert($$anchor, $$props) {
  if (new.target === Alert)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["dismissable", "defaultClass"]);
  push($$props, false, Alert);
  let dismissable = prop($$props, "dismissable", 0, false);
  let defaultClass = prop($$props, "defaultClass", 0, "p-4 gap-3 text-sm");
  let divClass = mutable_source();
  legacy_pre_effect(
    () => (deep_read_state(defaultClass()), deep_read_state(dismissable()), deep_read_state($$sanitized_props)),
    () => {
      set(divClass, twMerge(defaultClass(), ($$slots.icon || dismissable()) && "flex items-center", $$sanitized_props.class));
    }
  );
  legacy_pre_effect_reset();
  init();
  var fragment = comment();
  var node = first_child(fragment);
  validate_component(TransitionFrame_default)(node, spread_props(
    {
      get dismissable() {
        return dismissable();
      },
      color: "primary",
      role: "alert",
      rounded: true
    },
    () => $$restProps,
    {
      get class() {
        return get(divClass);
      },
      $$events: {
        close($$arg) {
          bubble_event.call(this, $$props, $$arg);
        }
      },
      children: wrap_snippet(($$anchor2, $$slotProps) => {
        const close = derived_safe_equal(() => $$slotProps.close);
        var fragment_1 = TransitionFrame_default2();
        var node_1 = first_child(fragment_1);
        if_block(node_1, () => $$slots.icon, ($$anchor3) => {
          var _a;
          var fragment_2 = comment();
          var node_2 = first_child(fragment_2);
          slot(node_2, (_a = $$props.$$slots) == null ? void 0 : _a["icon"], {}, null);
          append($$anchor3, fragment_2);
        });
        var node_3 = sibling(sibling(node_1, true));
        if_block(
          node_3,
          () => $$slots.icon || dismissable(),
          ($$anchor3) => {
            var div = root_22();
            var node_4 = child(div);
            slot(node_4, $$props.children, {}, null);
            append($$anchor3, div);
          },
          ($$anchor3) => {
            var fragment_3 = comment();
            var node_5 = first_child(fragment_3);
            slot(node_5, $$props.children, {}, null);
            append($$anchor3, fragment_3);
          }
        );
        var node_6 = sibling(sibling(node_3, true));
        if_block(node_6, dismissable, ($$anchor3) => {
          var _a;
          var fragment_4 = comment();
          var node_7 = first_child(fragment_4);
          slot(
            node_7,
            (_a = $$props.$$slots) == null ? void 0 : _a["close-button"],
            {
              get close() {
                return get(close);
              }
            },
            ($$anchor4) => {
              var fragment_5 = comment();
              var node_8 = first_child(fragment_5);
              validate_component(CloseButton_default)(node_8, {
                class: "ms-auto -me-1.5 -my-1.5 dark:hover:bg-gray-700",
                get color() {
                  return $$restProps.color;
                },
                $$events: {
                  click: [
                    function(...$$args) {
                      const $$callback = get(close);
                      return $$callback == null ? void 0 : $$callback.apply(this, $$args);
                    },
                    function($$arg) {
                      bubble_event.call(this, $$props, $$arg);
                    }
                  ],
                  change($$arg) {
                    bubble_event.call(this, $$props, $$arg);
                  },
                  keydown($$arg) {
                    bubble_event.call(this, $$props, $$arg);
                  },
                  keyup($$arg) {
                    bubble_event.call(this, $$props, $$arg);
                  },
                  focus($$arg) {
                    bubble_event.call(this, $$props, $$arg);
                  },
                  blur($$arg) {
                    bubble_event.call(this, $$props, $$arg);
                  },
                  mouseenter($$arg) {
                    bubble_event.call(this, $$props, $$arg);
                  },
                  mouseleave($$arg) {
                    bubble_event.call(this, $$props, $$arg);
                  }
                }
              });
              append($$anchor4, fragment_5);
            }
          );
          append($$anchor3, fragment_4);
        });
        append($$anchor2, fragment_1);
      })
    }
  ));
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Alert);
  Alert = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Alert_default = Alert;
Alert.filename = ".../dist/alert/Alert.svelte";
mark_module_end(Alert);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/indicators/Indicator.svelte
mark_module_start();
var root2 = template(`<div><!></div>`);
function Indicator($$anchor, $$props) {
  if (new.target === Indicator)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  push($$props, false, Indicator);
  let color = prop($$props, "color", 0, "gray");
  let rounded = prop($$props, "rounded", 0, false);
  let size2 = prop($$props, "size", 0, "md");
  let border = prop($$props, "border", 0, false);
  let placement = prop($$props, "placement", 0, void 0);
  let offset3 = prop($$props, "offset", 0, true);
  const colors = {
    gray: "bg-gray-200",
    dark: "bg-gray-900 dark:bg-gray-700",
    blue: "bg-blue-600",
    orange: "bg-orange-600",
    green: "bg-green-500",
    red: "bg-red-500",
    purple: "bg-purple-500",
    indigo: "bg-indigo-500",
    yellow: "bg-yellow-300",
    teal: "bg-teal-500",
    none: ""
  };
  const sizes = {
    xs: "w-2 h-2",
    sm: "w-2.5 h-2.5",
    md: "w-3 h-3",
    lg: "w-3.5 h-3.5",
    xl: "w-6 h-6"
  };
  const placements2 = {
    // top
    "top-left": "top-0 start-0",
    "top-center": "top-0 start-1/2 -translate-x-1/2 rtl:translate-x-1/2 rtl:translate-x-1/2",
    "top-right": "top-0 end-0",
    // center
    "center-left": "top-1/2 -translate-y-1/2 start-0",
    center: "top-1/2 -translate-y-1/2 start-1/2 -translate-x-1/2 rtl:translate-x-1/2 rtl:translate-x-1/2",
    "center-right": "top-1/2 -translate-y-1/2 end-0",
    // bottom
    "bottom-left": "bottom-0 start-0",
    "bottom-center": "bottom-0 start-1/2 -translate-x-1/2 rtl:translate-x-1/2 rtl:translate-x-1/2",
    "bottom-right": "bottom-0 end-0"
  };
  const offsets = {
    // top
    "top-left": "-translate-x-1/3 rtl:translate-x-1/3 -translate-y-1/3",
    "top-center": "-translate-y-1/3",
    "top-right": "translate-x-1/3 rtl:-translate-x-1/3 -translate-y-1/3",
    // center
    "center-left": "-translate-x-1/3 rtl:translate-x-1/3",
    center: "",
    "center-right": "translate-x-1/3 rtl:-translate-x-1/3",
    // bottom
    "bottom-left": "-translate-x-1/3 rtl:translate-x-1/3 translate-y-1/3",
    "bottom-center": "translate-y-1/3",
    "bottom-right": "translate-x-1/3 rtl:-translate-x-1/3 translate-y-1/3"
  };
  let dotClass = mutable_source();
  legacy_pre_effect(
    () => (deep_read_state(rounded()), deep_read_state(border()), deep_read_state(size2()), deep_read_state(color()), deep_read_state(placement()), deep_read_state(offset3()), deep_read_state($$sanitized_props)),
    () => {
      set(dotClass, twMerge("flex-shrink-0", rounded() ? "rounded" : "rounded-full", border() && "border-2 border-white dark:border-gray-800", sizes[size2()], colors[color()], $$slots.default && "inline-flex items-center justify-center", placement() && "absolute " + placements2[placement()], placement() && offset3() && offsets[placement()], $$sanitized_props.class));
    }
  );
  legacy_pre_effect_reset();
  init();
  var div = root2();
  var node = child(div);
  slot(node, $$props.children, {}, null);
  render_effect(() => set_class(div, get(dotClass)));
  append($$anchor, div);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Indicator);
  Indicator = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Indicator_default = Indicator;
Indicator.filename = ".../dist/indicators/Indicator.svelte";
mark_module_end(Indicator);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/avatar/Avatar.svelte
mark_module_start();
var root_23 = template(`<img>`);
var fallback2 = template(`<svg fill="currentColor" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M8 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd"></path></svg>`);
var dynamic_element = template(`<!> <!>`, 1);
var root_5 = template(`<img>`);
function Avatar($$anchor, $$props) {
  if (new.target === Avatar)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "src",
    "href",
    "rounded",
    "border",
    "stacked",
    "dot",
    "alt",
    "size"
  ]);
  push($$props, false, Avatar);
  let src = prop($$props, "src", 0, "");
  let href = prop($$props, "href", 0, void 0);
  let rounded = prop($$props, "rounded", 0, false);
  let border = prop($$props, "border", 0, false);
  let stacked = prop($$props, "stacked", 0, false);
  let dot = prop($$props, "dot", 4, void 0);
  let alt = prop($$props, "alt", 0, "");
  let size2 = prop($$props, "size", 0, "md");
  const sizes = {
    xs: "w-6 h-6",
    sm: "w-8 h-8",
    md: "w-10 h-10",
    lg: "w-20 h-20",
    xl: "w-36 h-36",
    none: ""
  };
  let avatarClass = mutable_source();
  legacy_pre_effect(() => deep_read_state(dot()), () => {
    dot(dot() && {
      placement: "top-right",
      color: "gray",
      size: "lg",
      ...dot()
    });
  });
  legacy_pre_effect(
    () => (deep_read_state(rounded()), deep_read_state(border()), deep_read_state(size2()), deep_read_state(stacked()), deep_read_state($$sanitized_props)),
    () => {
      set(avatarClass, twMerge(rounded() ? "rounded" : "rounded-full", border() && "p-1 ring-2 ring-gray-300 dark:ring-gray-500", sizes[size2()], stacked() && "border-2 -ms-4 border-white dark:border-gray-800", "bg-gray-100 dark:bg-gray-600 text-gray-600 dark:text-gray-300", $$sanitized_props.class));
    }
  );
  legacy_pre_effect_reset();
  init();
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    () => !src() || !!href() || $$slots.default || dot(),
    ($$anchor2) => {
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      validate_void_dynamic_element(() => href() ? "a" : "div");
      validate_dynamic_element_tag(() => href() ? "a" : "div");
      element(node_1, () => href() ? "a" : "div", false, ($$element, $$anchor3) => {
        let attributes;
        render_effect(() => attributes = set_dynamic_element_attributes(
          $$element,
          attributes,
          {
            href: href(),
            ...$$restProps,
            class: `relative flex justify-center items-center ${stringify(get(avatarClass))}`
          },
          ""
        ));
        var fragment_2 = dynamic_element();
        var node_2 = first_child(fragment_2);
        if_block(
          node_2,
          src,
          ($$anchor4) => {
            var img = root_23();
            render_effect(() => {
              set_attribute(img, "alt", alt());
              set_attribute(img, "src", src());
              set_class(img, rounded() ? "rounded" : "rounded-full");
            });
            append($$anchor4, img);
          },
          ($$anchor4) => {
            var fragment_3 = comment();
            var node_3 = first_child(fragment_3);
            slot(node_3, $$props.children, {}, ($$anchor5) => {
              var svg = fallback2();
              var path = child(svg);
              render_effect(() => set_class(svg, `w-full h-full ${stringify(rounded() ? "rounded" : "rounded-full")}`));
              append($$anchor5, svg);
            });
            append($$anchor4, fragment_3);
          }
        );
        var node_4 = sibling(sibling(node_2, true));
        if_block(node_4, dot, ($$anchor4) => {
          var fragment_4 = comment();
          var node_5 = first_child(fragment_4);
          validate_component(Indicator_default)(node_5, spread_props(
            {
              border: true,
              get offset() {
                return rounded();
              }
            },
            dot
          ));
          append($$anchor4, fragment_4);
        });
        append($$anchor3, fragment_2);
      });
      append($$anchor2, fragment_1);
    },
    ($$anchor2) => {
      var img_1 = root_5();
      let attributes_1;
      render_effect(() => attributes_1 = set_attributes(
        img_1,
        attributes_1,
        {
          alt: alt(),
          src: src(),
          ...$$restProps,
          class: get(avatarClass)
        },
        true,
        ""
      ));
      append($$anchor2, img_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Avatar);
  Avatar = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Avatar_default = Avatar;
Avatar.filename = ".../dist/avatar/Avatar.svelte";
mark_module_end(Avatar);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/badge/Badge.svelte
mark_module_start();
var TransitionFrame_default3 = template(`<!> <!>`, 1);
function Badge($$anchor, $$props) {
  if (new.target === Badge)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["color", "large", "dismissable"]);
  push($$props, false, Badge);
  let color = prop($$props, "color", 0, "primary");
  let large = prop($$props, "large", 0, false);
  let dismissable = prop($$props, "dismissable", 0, false);
  const dispatcher = createEventDispatcher();
  const colors = {
    primary: "bg-primary-100 text-primary-800 dark:bg-primary-900 dark:text-primary-300",
    blue: "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300",
    dark: "bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300",
    gray: "bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300",
    red: "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300",
    green: "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300",
    yellow: "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300",
    indigo: "bg-indigo-100 text-indigo-800 dark:bg-indigo-900 dark:text-indigo-300",
    purple: "bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300",
    pink: "bg-pink-100 text-pink-800 dark:bg-pink-900 dark:text-pink-300",
    none: ""
  };
  const borderedColors = {
    primary: "bg-primary-100 text-primary-800 dark:bg-gray-700 dark:text-primary-400 border-primary-400 dark:border-primary-400",
    blue: "bg-blue-100 text-blue-800 dark:bg-gray-700 dark:text-blue-400 border-blue-400 dark:border-blue-400",
    dark: "bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-400 border-gray-500 dark:border-gray-500",
    red: "bg-red-100 text-red-800 dark:bg-gray-700 dark:text-red-400 border-red-400 dark:border-red-400",
    green: "bg-green-100 text-green-800 dark:bg-gray-700 dark:text-green-400 border-green-400 dark:border-green-400",
    yellow: "bg-yellow-100 text-yellow-800 dark:bg-gray-700 dark:text-yellow-300 border-yellow-300 dark:border-yellow-300",
    indigo: "bg-indigo-100 text-indigo-800 dark:bg-gray-700 dark:text-indigo-400 border-indigo-400 dark:border-indigo-400",
    purple: "bg-purple-100 text-purple-800 dark:bg-gray-700 dark:text-purple-400 border-purple-400 dark:border-purple-400",
    pink: "bg-pink-100 text-pink-800 dark:bg-gray-700 dark:text-pink-400 border-pink-400 dark:border-pink-400",
    none: ""
  };
  const hoverColors = {
    primary: "hover:bg-primary-200",
    blue: "hover:bg-blue-200",
    dark: "hover:bg-gray-200",
    red: "hover:bg-red-200",
    green: "hover:bg-green-200",
    yellow: "hover:bg-yellow-200",
    indigo: "hover:bg-indigo-200",
    purple: "hover:bg-purple-200",
    pink: "hover:bg-pink-200",
    none: ""
  };
  const baseClass = "font-medium inline-flex items-center justify-center px-2.5 py-0.5";
  let badgeClass = mutable_source();
  const closeBtnColors = {
    primary: "text-primary-400 hover:text-primary-900 dark:hover:bg-primary-800 dark:hover:text-primary-300",
    blue: "text-blue-400 hover:text-blue-900 dark:hover:bg-blue-800 dark:hover:text-blue-300",
    dark: "text-gray-400 hover:text-gray-400 hover:bg-gray-600 dark:hover:text-gray-300",
    red: "text-red-400 hover:text-red-900 dark:hover:bg-red-800 dark:hover:text-red-300",
    green: "text-green-400 hover:text-green-900 dark:hover:bg-green-800 dark:hover:text-green-300",
    yellow: "text-yellow-400 hover:text-yellow-900 dark:hover:bg-yellow-800 dark:hover:text-yellow-300",
    indigo: "text-indigo-400 hover:text-indigo-900 dark:hover:bg-indigo-800 dark:hover:text-indigo-300",
    purple: "text-purple-400 hover:text-purple-900 dark:hover:bg-purple-800 dark:hover:text-purple-300",
    pink: "text-pink-400 hover:text-pink-900 dark:hover:bg-pink-800 dark:hover:text-pink-300",
    none: ""
  };
  legacy_pre_effect(
    () => (deep_read_state(large()), deep_read_state($$restProps), deep_read_state(color()), deep_read_state($$sanitized_props)),
    () => {
      set(badgeClass, twMerge(baseClass, large() ? "text-sm" : "text-xs", $$restProps.border ? `border ${borderedColors[color()]}` : colors[color()], $$restProps.href && hoverColors[color()], $$restProps.rounded ? "rounded-full" : "rounded", $$sanitized_props.class));
    }
  );
  legacy_pre_effect_reset();
  init();
  var fragment = comment();
  var node = first_child(fragment);
  validate_component(TransitionFrame_default)(node, spread_props(
    {
      get dismissable() {
        return dismissable();
      }
    },
    () => $$restProps,
    {
      get class() {
        return get(badgeClass);
      },
      $$events: {
        close($$arg) {
          bubble_event.call(this, $$props, $$arg);
        }
      },
      children: wrap_snippet(($$anchor2, $$slotProps) => {
        const close = derived_safe_equal(() => $$slotProps.close);
        var fragment_1 = TransitionFrame_default3();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props.children, {}, null);
        var node_2 = sibling(sibling(node_1, true));
        if_block(node_2, dismissable, ($$anchor3) => {
          var _a;
          var fragment_2 = comment();
          var node_3 = first_child(fragment_2);
          slot(
            node_3,
            (_a = $$props.$$slots) == null ? void 0 : _a["close-button"],
            {
              get close() {
                return get(close);
              }
            },
            ($$anchor4) => {
              var fragment_3 = comment();
              var node_4 = first_child(fragment_3);
              var size2 = derived(() => large() ? "sm" : "xs");
              validate_component(CloseButton_default)(node_4, {
                get color() {
                  return color();
                },
                get size() {
                  return get(size2);
                },
                name: "Remove badge",
                class: "ms-1.5 -me-1.5",
                $$events: {
                  click: () => {
                    get(close)(void 0);
                    dispatcher("close");
                  }
                }
              });
              append($$anchor4, fragment_3);
            }
          );
          append($$anchor3, fragment_2);
        });
        append($$anchor2, fragment_1);
      })
    }
  ));
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Badge);
  Badge = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Badge_default = Badge;
Badge.filename = ".../dist/badge/Badge.svelte";
mark_module_end(Badge);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/banner/Banner.svelte
mark_module_start();
var root_24 = template(`<div class="flex items-center"><!></div>`);
var root_12 = template(`<div><!> <div><!></div> <!></div>`);
function Banner($$anchor, $$props) {
  if (new.target === Banner)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "position",
    "dismissable",
    "bannerType",
    "divClass",
    "innerClass"
  ]);
  push($$props, false, Banner);
  const div2Class = mutable_source();
  let position = prop($$props, "position", 0, "sticky");
  let dismissable = prop($$props, "dismissable", 0, true);
  let bannerType = prop($$props, "bannerType", 0, "default");
  let divClass = prop($$props, "divClass", 4, "z-10 flex justify-between p-4 dark:bg-gray-700 dark:border-gray-600");
  let innerClass = prop($$props, "innerClass", 0, "flex");
  let open = mutable_source(true);
  const dispatch = createEventDispatcher();
  const divClasses = {
    default: "top-0 start-0 w-full border-b border-gray-200 bg-gray-50",
    bottom: "bottom-0 start-0 w-full border-t border-gray-200 bg-gray-50",
    cta: "flex-col md:flex-row  w-[calc(100%-2rem)] -translate-x-1/2 rtl:translate-x-1/2 bg-white border border-gray-100 rounded-lg shadow-sm lg:max-w-7xl start-1/2 top-6",
    signup: "top-0 start-0 w-full border-b border-gray-200 bg-gray-50",
    info: "top-0 start-0 flex-col w-full border-b border-gray-200 md:flex-row bg-gray-50"
  };
  const insideDivClasses = {
    default: "items-center mx-auto",
    bottom: "items-center mx-auto",
    cta: "flex-col items-start mb-3 me-4 md:items-center md:flex-row md:mb-0",
    signup: "items-center flex-shrink-0 w-full mx-auto sm:w-auto",
    info: "items-center flex-shrink-0"
  };
  function close(e) {
    e.preventDefault();
    set(open, false);
  }
  legacy_pre_effect(() => get(open), () => {
    dispatch(get(open) ? "open" : "close");
  });
  legacy_pre_effect(
    () => (deep_read_state(divClass()), deep_read_state(position()), deep_read_state(bannerType()), deep_read_state($$sanitized_props)),
    () => {
      divClass(twMerge(position(), divClass(), divClasses[bannerType()], $$sanitized_props.classDiv));
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(innerClass()), deep_read_state(bannerType()), deep_read_state($$sanitized_props)),
    () => {
      set(div2Class, twMerge(innerClass(), insideDivClasses[bannerType()], $$sanitized_props.classInner));
    }
  );
  legacy_pre_effect_reset();
  init();
  var fragment = comment();
  var node = first_child(fragment);
  if_block(node, () => get(open), ($$anchor2) => {
    var _a;
    var div = root_12();
    let attributes;
    var node_1 = child(div);
    slot(node_1, (_a = $$props.$$slots) == null ? void 0 : _a["header"], {}, null);
    var div_1 = sibling(sibling(node_1, true));
    var node_2 = child(div_1);
    slot(node_2, $$props.children, {}, null);
    var node_3 = sibling(sibling(div_1, true));
    if_block(node_3, dismissable, ($$anchor3) => {
      var div_2 = root_24();
      var node_4 = child(div_2);
      validate_component(CloseButton_default)(node_4, {
        class: "-mx-1.5 -my-1.5",
        get color() {
          return $$restProps.color;
        },
        $$events: {
          click: [
            close,
            function($$arg) {
              bubble_event.call(this, $$props, $$arg);
            }
          ],
          change($$arg) {
            bubble_event.call(this, $$props, $$arg);
          },
          keydown($$arg) {
            bubble_event.call(this, $$props, $$arg);
          },
          keyup($$arg) {
            bubble_event.call(this, $$props, $$arg);
          },
          focus($$arg) {
            bubble_event.call(this, $$props, $$arg);
          },
          blur($$arg) {
            bubble_event.call(this, $$props, $$arg);
          },
          mouseenter($$arg) {
            bubble_event.call(this, $$props, $$arg);
          },
          mouseleave($$arg) {
            bubble_event.call(this, $$props, $$arg);
          }
        }
      });
      append($$anchor3, div_2);
    });
    render_effect(() => {
      attributes = set_attributes(
        div,
        attributes,
        {
          tabindex: "-1",
          class: divClass(),
          ...$$restProps
        },
        true,
        ""
      );
      set_class(div_1, get(div2Class));
    });
    append($$anchor2, div);
  });
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Banner);
  Banner = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Banner_default = Banner;
Banner.filename = ".../dist/banner/Banner.svelte";
mark_module_end(Banner);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/bottom-navigation/BottomNav.svelte
mark_module_start();
var root3 = template(`<div><!> <div><!></div></div>`);
function BottomNav($$anchor, $$props) {
  var _a;
  if (new.target === BottomNav)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "activeUrl",
    "position",
    "navType",
    "outerClass",
    "innerClass",
    "activeClass"
  ]);
  push($$props, false, BottomNav);
  const outerCls = mutable_source();
  const innerCls = mutable_source();
  let activeUrl = prop($$props, "activeUrl", 0, "");
  let position = prop($$props, "position", 0, "fixed");
  let navType = prop($$props, "navType", 0, "default");
  let outerClass = prop($$props, "outerClass", 0, "w-full z-50 border-gray-200 dark:bg-gray-700 dark:border-gray-600");
  let innerClass = prop($$props, "innerClass", 0, "grid h-full max-w-lg mx-auto");
  let activeClass = prop($$props, "activeClass", 0, "text-primary-700 dark:text-primary-700 hover:text-primary-900 dark:hover:text-primary-900");
  let activeCls = "";
  const activeUrlStore = writable("");
  activeCls = twMerge(activeClass(), $$sanitized_props.classActive);
  setContext("navType", navType());
  setContext("bottomNavType", { activeClass: activeCls });
  setContext("activeUrl", activeUrlStore);
  const outerDivClasses = {
    default: "bottom-0 start-0 h-16 bg-white border-t",
    border: "bottom-0 start-0 h-16 bg-white border-t",
    application: "h-16 max-w-lg -translate-x-1/2 rtl:translate-x-1/2 bg-white border rounded-full bottom-4 start-1/2",
    pagination: "bottom-0 h-16 -translate-x-1/2 rtl:translate-x-1/2 bg-white border-t start-1/2",
    group: "bottom-0 -translate-x-1/2 rtl:translate-x-1/2 bg-white border-t start-1/2",
    card: "bottom-0 start-0 h-16 bg-white border-t",
    meeting: "bottom-0 start-0 grid h-16 grid-cols-1 px-8 bg-white border-t md:grid-cols-3",
    video: "bottom-0 start-0 grid h-24 grid-cols-1 px-8 bg-white border-t md:grid-cols-3"
  };
  const innerDivClasses = {
    default: "",
    border: "",
    application: "",
    pagination: "",
    group: "",
    card: "",
    meeting: "flex items-center justify-center mx-auto",
    video: "flex items-center w-full"
  };
  legacy_pre_effect(() => deep_read_state(activeUrl()), () => {
    activeUrlStore.set(activeUrl());
  });
  legacy_pre_effect(
    () => (deep_read_state(position()), deep_read_state(outerClass()), deep_read_state(navType()), deep_read_state($$sanitized_props)),
    () => {
      set(outerCls, twMerge(position(), outerClass(), outerDivClasses[navType()], $$sanitized_props.classOuter));
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(innerClass()), deep_read_state(navType()), deep_read_state($$sanitized_props)),
    () => {
      set(innerCls, twMerge(innerClass(), innerDivClasses[navType()], $$sanitized_props.classInner));
    }
  );
  legacy_pre_effect_reset();
  init();
  var div = root3();
  let attributes;
  var node = child(div);
  slot(node, (_a = $$props.$$slots) == null ? void 0 : _a["header"], {}, null);
  var div_1 = sibling(sibling(node, true));
  var node_1 = child(div_1);
  slot(node_1, $$props.children, {}, null);
  render_effect(() => {
    attributes = set_attributes(div, attributes, { ...$$restProps, class: get(outerCls) }, true, "");
    set_class(div_1, get(innerCls));
  });
  append($$anchor, div);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(BottomNav);
  BottomNav = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var BottomNav_default = BottomNav;
BottomNav.filename = ".../dist/bottom-navigation/BottomNav.svelte";
mark_module_end(BottomNav);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/bottom-navigation/BottomNavItem.svelte
mark_module_start();
var dynamic_element2 = template(`<!> <span> </span>`, 1);
function BottomNavItem($$anchor, $$props) {
  if (new.target === BottomNavItem)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "btnName",
    "appBtnPosition",
    "activeClass",
    "href",
    "exact"
  ]);
  push($$props, false, BottomNavItem);
  const active = mutable_source();
  let btnName = prop($$props, "btnName", 0, "");
  let appBtnPosition = prop($$props, "appBtnPosition", 0, "middle");
  let activeClass = prop($$props, "activeClass", 0, void 0);
  let href = prop($$props, "href", 0, "");
  let exact = prop($$props, "exact", 0, true);
  const navType = getContext("navType");
  const context = getContext("bottomNavType") ?? {};
  const activeUrlStore = getContext("activeUrl");
  let navUrl = mutable_source("");
  activeUrlStore.subscribe((value) => {
    set(navUrl, value);
  });
  const btnClasses = {
    default: "inline-flex flex-col items-center justify-center px-5 hover:bg-gray-50 dark:hover:bg-gray-800 group",
    border: "inline-flex flex-col items-center justify-center px-5 border-gray-200 border-x hover:bg-gray-50 dark:hover:bg-gray-800 group dark:border-gray-600",
    application: "",
    pagination: "inline-flex flex-col items-center justify-center px-5 hover:bg-gray-50 dark:hover:bg-gray-800 group",
    group: "inline-flex flex-col items-center justify-center p-4 hover:bg-gray-50 dark:hover:bg-gray-800 group",
    card: "inline-flex flex-col items-center justify-center px-5 hover:bg-gray-50 dark:hover:bg-gray-800 group",
    meeting: "",
    video: ""
  };
  const spanClasses = {
    default: "text-sm text-gray-500 dark:text-gray-400 group-hover:text-primary-600 dark:group-hover:text-primary-500",
    border: "text-sm text-gray-500 dark:text-gray-400 group-hover:text-primary-600 dark:group-hover:text-primary-500",
    application: "sr-only",
    pagination: "sr-only",
    group: "sr-only",
    card: "text-sm text-gray-500 dark:text-gray-400 group-hover:text-primary-600 dark:group-hover:text-primary-500",
    meeting: "",
    video: ""
  };
  const appBtnClasses = {
    left: "inline-flex flex-col items-center justify-center px-5 rounded-s-full hover:bg-gray-50 dark:hover:bg-gray-800 group",
    middle: "inline-flex flex-col items-center justify-center px-5 hover:bg-gray-50 dark:hover:bg-gray-800 group",
    right: "inline-flex flex-col items-center justify-center px-5 rounded-e-full hover:bg-gray-50 dark:hover:bg-gray-800 group"
  };
  let btnClass = mutable_source();
  let spanClass = mutable_source();
  legacy_pre_effect(
    () => (get(navUrl), deep_read_state(exact()), deep_read_state(href())),
    () => {
      set(active, get(navUrl) && exact() ? href() === get(navUrl) : get(navUrl) ? get(navUrl).startsWith(href()) : false);
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(appBtnPosition()), get(active), deep_read_state(activeClass()), deep_read_state($$sanitized_props)),
    () => {
      set(btnClass, twMerge(btnClasses[navType], appBtnClasses[appBtnPosition()], get(active) && (activeClass() ?? context.activeClass), $$sanitized_props.btnClass));
    }
  );
  legacy_pre_effect(
    () => (get(active), deep_read_state(activeClass()), deep_read_state($$sanitized_props)),
    () => {
      set(spanClass, twMerge(spanClasses[navType], get(active) && (activeClass() ?? context.activeClass), $$sanitized_props.spanClass));
    }
  );
  legacy_pre_effect_reset();
  init();
  var fragment = comment();
  var node = first_child(fragment);
  validate_void_dynamic_element(() => href() ? "a" : "button");
  validate_dynamic_element_tag(() => href() ? "a" : "button");
  element(node, () => href() ? "a" : "button", false, ($$element, $$anchor2) => {
    let attributes;
    render_effect(() => attributes = set_dynamic_element_attributes(
      $$element,
      attributes,
      {
        "aria-label": btnName(),
        href: href(),
        role: href() ? "link" : "button",
        ...$$restProps,
        class: get(btnClass)
      },
      ""
    ));
    event("click", $$element, function($$arg) {
      bubble_event.call(this, $$props, $$arg);
    });
    event("change", $$element, function($$arg) {
      bubble_event.call(this, $$props, $$arg);
    });
    event("keydown", $$element, function($$arg) {
      bubble_event.call(this, $$props, $$arg);
    });
    event("keyup", $$element, function($$arg) {
      bubble_event.call(this, $$props, $$arg);
    });
    event("focus", $$element, function($$arg) {
      bubble_event.call(this, $$props, $$arg);
    });
    event("blur", $$element, function($$arg) {
      bubble_event.call(this, $$props, $$arg);
    });
    event("mouseenter", $$element, function($$arg) {
      bubble_event.call(this, $$props, $$arg);
    });
    event("mouseleave", $$element, function($$arg) {
      bubble_event.call(this, $$props, $$arg);
    });
    var fragment_1 = dynamic_element2();
    var node_1 = first_child(fragment_1);
    slot(node_1, $$props.children, {}, null);
    var span = sibling(sibling(node_1, true));
    var text2 = child(span);
    render_effect(() => {
      set_class(span, get(spanClass));
      set_text(text2, btnName());
    });
    append($$anchor2, fragment_1);
  });
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(BottomNavItem);
  BottomNavItem = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var BottomNavItem_default = BottomNavItem;
BottomNavItem.filename = ".../dist/bottom-navigation/BottomNavItem.svelte";
mark_module_end(BottomNavItem);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/bottom-navigation/BottomNavHeader.svelte
mark_module_start();
var root4 = template(`<div><div role="group"><!></div></div>`);
function BottomNavHeader($$anchor, $$props) {
  if (new.target === BottomNavHeader)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["outerClass", "innerClass"]);
  push($$props, false, BottomNavHeader);
  let outerClass = prop($$props, "outerClass", 0, "w-full");
  let innerClass = prop($$props, "innerClass", 0, "grid max-w-xs grid-cols-3 gap-1 p-1 mx-auto my-2 bg-gray-100 rounded-lg dark:bg-gray-600");
  init();
  var div = root4();
  let attributes;
  var div_1 = child(div);
  render_effect(() => set_class(div_1, twMerge(innerClass(), $$sanitized_props.classInner)));
  var node = child(div_1);
  slot(node, $$props.children, {}, null);
  render_effect(() => attributes = set_attributes(
    div,
    attributes,
    {
      class: twMerge(outerClass(), $$sanitized_props.classOuter),
      ...$$restProps
    },
    true,
    ""
  ));
  append($$anchor, div);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(BottomNavHeader);
  BottomNavHeader = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var BottomNavHeader_default = BottomNavHeader;
BottomNavHeader.filename = ".../dist/bottom-navigation/BottomNavHeader.svelte";
mark_module_end(BottomNavHeader);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/bottom-navigation/BottomNavHeaderItem.svelte
mark_module_start();
var root5 = template(`<button> </button>`);
function BottomNavHeaderItem($$anchor, $$props) {
  if (new.target === BottomNavHeaderItem)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "itemName",
    "active",
    "defaultClass",
    "activeClass"
  ]);
  push($$props, false, BottomNavHeaderItem);
  const btnClass = mutable_source();
  let itemName = prop($$props, "itemName", 0, "");
  let active = prop($$props, "active", 0, false);
  let defaultClass = prop($$props, "defaultClass", 0, "px-5 py-1.5 text-xs font-medium text-gray-900 hover:bg-gray-200 dark:text-white dark:hover:bg-gray-700 rounded-lg");
  let activeClass = prop($$props, "activeClass", 0, "px-5 py-1.5 text-xs font-medium text-white bg-gray-900 dark:bg-gray-300 dark:text-gray-900 rounded-lg");
  legacy_pre_effect(
    () => (deep_read_state(active()), deep_read_state(activeClass()), deep_read_state(defaultClass())),
    () => {
      set(btnClass, active() ? activeClass() : defaultClass());
    }
  );
  legacy_pre_effect_reset();
  init();
  var button = root5();
  let attributes;
  var text2 = child(button);
  render_effect(() => {
    attributes = set_attributes(
      button,
      attributes,
      {
        class: twMerge(get(btnClass), $$sanitized_props.class),
        ...$$restProps
      },
      true,
      ""
    );
    set_text(text2, itemName());
  });
  event("click", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("change", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keydown", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keyup", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("focus", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("blur", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("mouseenter", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("mouseleave", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  append($$anchor, button);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(BottomNavHeaderItem);
  BottomNavHeaderItem = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var BottomNavHeaderItem_default = BottomNavHeaderItem;
BottomNavHeaderItem.filename = ".../dist/bottom-navigation/BottomNavHeaderItem.svelte";
mark_module_end(BottomNavHeaderItem);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/breadcrumb/Breadcrumb.svelte
mark_module_start();
var root6 = template(`<nav><ol><!></ol></nav>`);
function Breadcrumb($$anchor, $$props) {
  if (new.target === Breadcrumb)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "solid",
    "navClass",
    "solidClass",
    "olClass",
    "ariaLabel"
  ]);
  push($$props, false, Breadcrumb);
  let solid = prop($$props, "solid", 0, false);
  let navClass = prop($$props, "navClass", 0, "flex");
  let solidClass = prop($$props, "solidClass", 0, "flex px-5 py-3 text-gray-700 border border-gray-200 rounded-lg bg-gray-50 dark:bg-gray-800 dark:border-gray-700");
  let olClass = prop($$props, "olClass", 0, "inline-flex items-center space-x-1 rtl:space-x-reverse md:space-x-3 rtl:space-x-reverse");
  let ariaLabel = prop($$props, "ariaLabel", 0, "Breadcrumb");
  let classNav = solid() ? solidClass() : navClass();
  init();
  var nav = root6();
  let attributes;
  var ol = child(nav);
  render_effect(() => set_class(ol, twMerge(olClass(), $$sanitized_props.classOl)));
  var node = child(ol);
  slot(node, $$props.children, {}, null);
  render_effect(() => attributes = set_attributes(
    nav,
    attributes,
    {
      "aria-label": ariaLabel(),
      ...$$restProps,
      class: twMerge(classNav, $$sanitized_props.class)
    },
    true,
    ""
  ));
  append($$anchor, nav);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Breadcrumb);
  Breadcrumb = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Breadcrumb_default = Breadcrumb;
Breadcrumb.filename = ".../dist/breadcrumb/Breadcrumb.svelte";
mark_module_end(Breadcrumb);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/breadcrumb/BreadcrumbItem.svelte
mark_module_start();
var root_33 = template(`<svg class="w-4 h-4 me-2" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z"></path></svg>`);
var root_13 = template(`<a><!> <!></a>`);
var root_6 = template(`<svg class="w-6 h-6 text-gray-400 rtl:-scale-x-100" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path></svg>`);
var root_7 = template(`<a><!></a>`);
var root_8 = template(`<span><!></span>`);
var root_43 = template(`<!> <!>`, 1);
var root7 = template(`<li><!></li>`);
function BreadcrumbItem($$anchor, $$props) {
  if (new.target === BreadcrumbItem)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "home",
    "href",
    "linkClass",
    "spanClass",
    "homeClass"
  ]);
  push($$props, false, BreadcrumbItem);
  let home = prop($$props, "home", 0, false);
  let href = prop($$props, "href", 0, void 0);
  let linkClass = prop($$props, "linkClass", 0, "ms-1 text-sm font-medium text-gray-700 hover:text-gray-900 md:ms-2 dark:text-gray-400 dark:hover:text-white");
  let spanClass = prop($$props, "spanClass", 0, "ms-1 text-sm font-medium text-gray-500 md:ms-2 dark:text-gray-400");
  let homeClass = prop($$props, "homeClass", 0, "inline-flex items-center text-sm font-medium text-gray-700 hover:text-gray-900 dark:text-gray-400 dark:hover:text-white");
  init();
  var li = root7();
  let attributes;
  var node = child(li);
  if_block(
    node,
    home,
    ($$anchor2) => {
      var a = root_13();
      render_effect(() => set_class(a, twMerge(homeClass(), $$sanitized_props.classHome)));
      var node_1 = child(a);
      if_block(
        node_1,
        () => $$slots.icon,
        ($$anchor3) => {
          var _a;
          var fragment = comment();
          var node_2 = first_child(fragment);
          slot(node_2, (_a = $$props.$$slots) == null ? void 0 : _a["icon"], {}, null);
          append($$anchor3, fragment);
        },
        ($$anchor3) => {
          var svg = root_33();
          var path = child(svg);
          append($$anchor3, svg);
        }
      );
      var node_3 = sibling(sibling(node_1, true));
      slot(node_3, $$props.children, {}, null);
      render_effect(() => set_attribute(a, "href", href()));
      append($$anchor2, a);
    },
    ($$anchor2) => {
      var fragment_1 = root_43();
      var node_4 = first_child(fragment_1);
      if_block(
        node_4,
        () => $$slots.icon,
        ($$anchor3) => {
          var _a;
          var fragment_2 = comment();
          var node_5 = first_child(fragment_2);
          slot(node_5, (_a = $$props.$$slots) == null ? void 0 : _a["icon"], {}, null);
          append($$anchor3, fragment_2);
        },
        ($$anchor3) => {
          var svg_1 = root_6();
          var path_1 = child(svg_1);
          append($$anchor3, svg_1);
        }
      );
      var node_6 = sibling(sibling(node_4, true));
      if_block(
        node_6,
        href,
        ($$anchor3) => {
          var a_1 = root_7();
          render_effect(() => set_class(a_1, twMerge(linkClass(), $$sanitized_props.classLink)));
          var node_7 = child(a_1);
          slot(node_7, $$props.children, {}, null);
          render_effect(() => set_attribute(a_1, "href", href()));
          append($$anchor3, a_1);
        },
        ($$anchor3) => {
          var span = root_8();
          render_effect(() => set_class(span, twMerge(spanClass(), $$sanitized_props.classSpan)));
          var node_8 = child(span);
          slot(node_8, $$props.children, {}, null);
          append($$anchor3, span);
        }
      );
      append($$anchor2, fragment_1);
    }
  );
  render_effect(() => attributes = set_attributes(
    li,
    attributes,
    {
      class: twMerge("inline-flex items-center", $$sanitized_props.class),
      ...$$restProps
    },
    true,
    ""
  ));
  append($$anchor, li);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(BreadcrumbItem);
  BreadcrumbItem = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var BreadcrumbItem_default = BreadcrumbItem;
BreadcrumbItem.filename = ".../dist/breadcrumb/BreadcrumbItem.svelte";
mark_module_end(BreadcrumbItem);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/buttons/Button.svelte
mark_module_start();
var root_14 = template(`<a><!></a>`);
var root_34 = template(`<button><!></button>`);
function Button($$anchor, $$props) {
  if (new.target === Button)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "pill",
    "outline",
    "size",
    "href",
    "type",
    "color",
    "shadow",
    "tag",
    "checked"
  ]);
  push($$props, false, Button);
  const group = getContext("group");
  let pill = prop($$props, "pill", 0, false);
  let outline = prop($$props, "outline", 0, false);
  let size2 = prop($$props, "size", 0, group ? "sm" : "md");
  let href = prop($$props, "href", 0, void 0);
  let type = prop($$props, "type", 0, "button");
  let color = prop($$props, "color", 8, () => group ? outline() ? "dark" : "alternative" : "primary");
  let shadow = prop($$props, "shadow", 0, false);
  let tag = prop($$props, "tag", 0, "button");
  let checked = prop($$props, "checked", 0, void 0);
  const colorClasses2 = {
    alternative: "text-gray-900 bg-white border border-gray-200 hover:bg-gray-100 dark:bg-gray-800 dark:text-gray-400 hover:text-primary-700 focus-within:text-primary-700 dark:focus-within:text-white dark:hover:text-white dark:hover:bg-gray-700",
    blue: "text-white bg-blue-700 hover:bg-blue-800 dark:bg-blue-600 dark:hover:bg-blue-700",
    dark: "text-white bg-gray-800 hover:bg-gray-900 dark:bg-gray-800 dark:hover:bg-gray-700",
    green: "text-white bg-green-700 hover:bg-green-800 dark:bg-green-600 dark:hover:bg-green-700",
    light: "text-gray-900 bg-white border border-gray-300 hover:bg-gray-100 dark:bg-gray-800 dark:text-white dark:border-gray-600 dark:hover:bg-gray-700 dark:hover:border-gray-600",
    primary: "text-white bg-primary-700 hover:bg-primary-800 dark:bg-primary-600 dark:hover:bg-primary-700",
    purple: "text-white bg-purple-700 hover:bg-purple-800 dark:bg-purple-600 dark:hover:bg-purple-700",
    red: "text-white bg-red-700 hover:bg-red-800 dark:bg-red-600 dark:hover:bg-red-700",
    yellow: "text-white bg-yellow-400 hover:bg-yellow-500 ",
    none: ""
  };
  const colorCheckedClasses = {
    alternative: "text-primary-700 border dark:text-primary-500 bg-gray-100 dark:bg-gray-700 border-gray-300 shadow-gray-300 dark:shadow-gray-800 shadow-inner",
    blue: "text-blue-900 bg-blue-400 dark:bg-blue-500 shadow-blue-700 dark:shadow-blue-800 shadow-inner",
    dark: "text-white bg-gray-500 dark:bg-gray-600 shadow-gray-800 dark:shadow-gray-900 shadow-inner",
    green: "text-green-900 bg-green-400 dark:bg-green-500 shadow-green-700 dark:shadow-green-800 shadow-inner",
    light: "text-gray-900 bg-gray-100 border border-gray-300 dark:bg-gray-500 dark:text-gray-900 dark:border-gray-700 shadow-gray-300 dark:shadow-gray-700 shadow-inner",
    primary: "text-primary-900 bg-primary-400 dark:bg-primary-500 shadow-primary-700 dark:shadow-primary-800 shadow-inner",
    purple: "text-purple-900 bg-purple-400 dark:bg-purple-500 shadow-purple-700 dark:shadow-purple-800 shadow-inner",
    red: "text-red-900 bg-red-400 dark:bg-red-500 shadow-red-700 dark:shadow-red-800 shadow-inner",
    yellow: "text-yellow-900 bg-yellow-300 dark:bg-yellow-400 shadow-yellow-500 dark:shadow-yellow-700 shadow-inner",
    none: ""
  };
  const coloredFocusClasses = {
    alternative: "focus-within:ring-gray-200 dark:focus-within:ring-gray-700",
    blue: "focus-within:ring-blue-300 dark:focus-within:ring-blue-800",
    dark: "focus-within:ring-gray-300 dark:focus-within:ring-gray-700",
    green: "focus-within:ring-green-300 dark:focus-within:ring-green-800",
    light: "focus-within:ring-gray-200 dark:focus-within:ring-gray-700",
    primary: "focus-within:ring-primary-300 dark:focus-within:ring-primary-800",
    purple: "focus-within:ring-purple-300 dark:focus-within:ring-purple-900",
    red: "focus-within:ring-red-300 dark:focus-within:ring-red-900",
    yellow: "focus-within:ring-yellow-300 dark:focus-within:ring-yellow-900",
    none: ""
  };
  const coloredShadowClasses = {
    alternative: "shadow-gray-500/50 dark:shadow-gray-800/80",
    blue: "shadow-blue-500/50 dark:shadow-blue-800/80",
    dark: "shadow-gray-500/50 dark:shadow-gray-800/80",
    green: "shadow-green-500/50 dark:shadow-green-800/80",
    light: "shadow-gray-500/50 dark:shadow-gray-800/80",
    primary: "shadow-primary-500/50 dark:shadow-primary-800/80",
    purple: "shadow-purple-500/50 dark:shadow-purple-800/80",
    red: "shadow-red-500/50 dark:shadow-red-800/80 ",
    yellow: "shadow-yellow-500/50 dark:shadow-yellow-800/80 ",
    none: ""
  };
  const outlineClasses = {
    alternative: "text-gray-900 dark:text-gray-400 hover:text-white border border-gray-800 hover:bg-gray-900 focus-within:bg-gray-900 focus-within:text-white focus-within:ring-gray-300 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-600 dark:focus-within:ring-gray-800",
    blue: "text-blue-700 hover:text-white border border-blue-700 hover:bg-blue-800 dark:border-blue-500 dark:text-blue-500 dark:hover:text-white dark:hover:bg-blue-600",
    dark: "text-gray-900 hover:text-white border border-gray-800 hover:bg-gray-900 focus-within:bg-gray-900 focus-within:text-white dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-600",
    green: "text-green-700 hover:text-white border border-green-700 hover:bg-green-800 dark:border-green-500 dark:text-green-500 dark:hover:text-white dark:hover:bg-green-600",
    light: "text-gray-500 hover:text-gray-900 bg-white border border-gray-200 dark:border-gray-600 dark:hover:text-white dark:text-gray-400 hover:bg-gray-50 dark:bg-gray-700 dark:hover:bg-gray-600",
    primary: "text-primary-700 hover:text-white border border-primary-700 hover:bg-primary-700 dark:border-primary-500 dark:text-primary-500 dark:hover:text-white dark:hover:bg-primary-600",
    purple: "text-purple-700 hover:text-white border border-purple-700 hover:bg-purple-800 dark:border-purple-400 dark:text-purple-400 dark:hover:text-white dark:hover:bg-purple-500",
    red: "text-red-700 hover:text-white border border-red-700 hover:bg-red-800 dark:border-red-500 dark:text-red-500 dark:hover:text-white dark:hover:bg-red-600",
    yellow: "text-yellow-400 hover:text-white border border-yellow-400 hover:bg-yellow-500 dark:border-yellow-300 dark:text-yellow-300 dark:hover:text-white dark:hover:bg-yellow-400",
    none: ""
  };
  const sizeClasses = {
    xs: "px-3 py-2 text-xs",
    sm: "px-4 py-2 text-sm",
    md: "px-5 py-2.5 text-sm",
    lg: "px-5 py-3 text-base",
    xl: "px-6 py-3.5 text-base"
  };
  const hasBorder = () => outline() || color() === "alternative" || color() === "light";
  let buttonClass = mutable_source();
  legacy_pre_effect(
    () => (deep_read_state(size2()), deep_read_state(outline()), deep_read_state(checked()), deep_read_state(color()), deep_read_state(pill()), deep_read_state(shadow()), deep_read_state($$restProps), deep_read_state($$sanitized_props)),
    () => {
      set(buttonClass, twMerge("text-center font-medium", group ? "focus-within:ring-2" : "focus-within:ring-4", group && "focus-within:z-10", group || "focus-within:outline-none", "inline-flex items-center justify-center " + sizeClasses[size2()], outline() && checked() && "border dark:border-gray-900", outline() && checked() && colorCheckedClasses[color()], outline() && !checked() && outlineClasses[color()], !outline() && checked() && colorCheckedClasses[color()], !outline() && !checked() && colorClasses2[color()], color() === "alternative" && (group && !checked() ? "dark:bg-gray-700 dark:text-white dark:border-gray-700 dark:hover:border-gray-600 dark:hover:bg-gray-600" : "dark:bg-transparent dark:border-gray-600 dark:hover:border-gray-600"), outline() && color() === "dark" && (group ? checked() ? "bg-gray-900 border-gray-800 dark:border-white dark:bg-gray-600" : "dark:text-white border-gray-800 dark:border-white" : "dark:text-gray-400 dark:border-gray-700"), coloredFocusClasses[color()], hasBorder() && group && "border-s-0 first:border-s", group ? pill() && "first:rounded-s-full last:rounded-e-full" || "first:rounded-s-lg last:rounded-e-lg" : pill() && "rounded-full" || "rounded-lg", shadow() && "shadow-lg", shadow() && coloredShadowClasses[color()], $$restProps.disabled && "cursor-not-allowed opacity-50", $$sanitized_props.class));
    }
  );
  legacy_pre_effect_reset();
  init();
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    () => href() && !$$restProps.disabled,
    ($$anchor2) => {
      var a = root_14();
      let attributes;
      var node_1 = child(a);
      slot(node_1, $$props.children, {}, null);
      render_effect(() => attributes = set_attributes(
        a,
        attributes,
        {
          href: href(),
          ...$$restProps,
          class: get(buttonClass),
          role: "button"
        },
        true,
        ""
      ));
      event("click", a, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("change", a, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("keydown", a, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("keyup", a, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("touchstart", a, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("touchend", a, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("touchcancel", a, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("mouseenter", a, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("mouseleave", a, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      append($$anchor2, a);
    },
    ($$anchor2) => {
      var fragment_1 = comment();
      var node_2 = first_child(fragment_1);
      if_block(
        node_2,
        () => tag() === "button" && !$$restProps.disabled,
        ($$anchor3) => {
          var button = root_34();
          let attributes_1;
          var node_3 = child(button);
          slot(node_3, $$props.children, {}, null);
          render_effect(() => attributes_1 = set_attributes(
            button,
            attributes_1,
            {
              type: type(),
              ...$$restProps,
              class: get(buttonClass)
            },
            true,
            ""
          ));
          event("click", button, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("change", button, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("keydown", button, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("keyup", button, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("touchstart", button, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("touchend", button, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("touchcancel", button, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("mouseenter", button, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("mouseleave", button, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          append($$anchor3, button);
        },
        ($$anchor3) => {
          var fragment_2 = comment();
          var node_4 = first_child(fragment_2);
          validate_void_dynamic_element(tag);
          validate_dynamic_element_tag(tag);
          element(node_4, tag, false, ($$element, $$anchor4) => {
            let attributes_2;
            render_effect(() => attributes_2 = set_dynamic_element_attributes($$element, attributes_2, { class: get(buttonClass) }, ""));
            var fragment_3 = comment();
            var node_5 = first_child(fragment_3);
            slot(node_5, $$props.children, {}, null);
            append($$anchor4, fragment_3);
          });
          append($$anchor3, fragment_2);
        },
        true
      );
      append($$anchor2, fragment_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Button);
  Button = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Button_default = Button;
Button.filename = ".../dist/buttons/Button.svelte";
mark_module_end(Button);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/buttons/GradientButton.svelte
mark_module_start();
var root_15 = template(`<div><!></div>`);
function GradientButton($$anchor, $$props) {
  if (new.target === GradientButton)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["color", "shadow"]);
  push($$props, false, GradientButton);
  const group = getContext("group");
  let color = prop($$props, "color", 0, "blue");
  let shadow = prop($$props, "shadow", 0, false);
  const gradientClasses = {
    blue: "text-white bg-gradient-to-r from-blue-500 via-blue-600 to-blue-700 hover:bg-gradient-to-br focus:ring-blue-300 dark:focus:ring-blue-800 ",
    green: "text-white bg-gradient-to-r from-green-400 via-green-500 to-green-600 hover:bg-gradient-to-br focus:ring-green-300 dark:focus:ring-green-800",
    cyan: "text-white bg-gradient-to-r from-cyan-400 via-cyan-500 to-cyan-600 hover:bg-gradient-to-br focus:ring-cyan-300 dark:focus:ring-cyan-800",
    teal: "text-white bg-gradient-to-r from-teal-400 via-teal-500 to-teal-600 hover:bg-gradient-to-br focus:ring-teal-300 dark:focus:ring-teal-800",
    lime: "text-gray-900 bg-gradient-to-r from-lime-200 via-lime-400 to-lime-500 hover:bg-gradient-to-br focus:ring-lime-300 dark:focus:ring-lime-800",
    red: "text-white bg-gradient-to-r from-red-400 via-red-500 to-red-600 hover:bg-gradient-to-br focus:ring-red-300 dark:focus:ring-red-800",
    pink: "text-white bg-gradient-to-r from-pink-400 via-pink-500 to-pink-600 hover:bg-gradient-to-br focus:ring-pink-300 dark:focus:ring-pink-800",
    purple: "text-white bg-gradient-to-r from-purple-500 via-purple-600 to-purple-700 hover:bg-gradient-to-br focus:ring-purple-300 dark:focus:ring-purple-800",
    purpleToBlue: "text-white bg-gradient-to-br from-purple-600 to-blue-500 hover:bg-gradient-to-bl focus:ring-blue-300 dark:focus:ring-blue-800",
    cyanToBlue: "text-white bg-gradient-to-r from-cyan-500 to-blue-500 hover:bg-gradient-to-bl focus:ring-cyan-300 dark:focus:ring-cyan-800",
    greenToBlue: "text-white bg-gradient-to-br from-green-400 to-blue-600 hover:bg-gradient-to-bl focus:ring-green-200 dark:focus:ring-green-800",
    purpleToPink: "text-white bg-gradient-to-r from-purple-500 to-pink-500 hover:bg-gradient-to-l focus:ring-purple-200 dark:focus:ring-purple-800",
    pinkToOrange: "text-white bg-gradient-to-br from-pink-500 to-orange-400 hover:bg-gradient-to-bl focus:ring-pink-200 dark:focus:ring-pink-800",
    tealToLime: "text-gray-900 bg-gradient-to-r from-teal-200 to-lime-200 hover:bg-gradient-to-l focus:ring-lime-200 dark:focus:ring-teal-700",
    redToYellow: "text-gray-900 bg-gradient-to-r from-red-200 via-red-300 to-yellow-200 hover:bg-gradient-to-bl focus:ring-red-100 dark:focus:ring-red-400"
  };
  const coloredShadowClasses = {
    blue: "shadow-blue-500/50 dark:shadow-blue-800/80",
    green: "shadow-green-500/50 dark:shadow-green-800/80",
    cyan: "shadow-cyan-500/50 dark:shadow-cyan-800/80",
    teal: "shadow-teal-500/50 dark:shadow-teal-800/80 ",
    lime: "shadow-lime-500/50 dark:shadow-lime-800/80",
    red: "shadow-red-500/50 dark:shadow-red-800/80 ",
    pink: "shadow-pink-500/50 dark:shadow-pink-800/80",
    purple: "shadow-purple-500/50 dark:shadow-purple-800/80",
    purpleToBlue: "shadow-blue-500/50 dark:shadow-blue-800/80",
    cyanToBlue: "shadow-cyan-500/50 dark:shadow-cyan-800/80",
    greenToBlue: "shadow-green-500/50 dark:shadow-green-800/80",
    purpleToPink: "shadow-purple-500/50 dark:shadow-purple-800/80",
    pinkToOrange: "shadow-pink-500/50 dark:shadow-pink-800/80",
    tealToLime: "shadow-lime-500/50 dark:shadow-teal-800/80",
    redToYellow: "shadow-red-500/50 dark:shadow-red-800/80"
  };
  let gradientOutlineClass = mutable_source();
  let divClass = mutable_source();
  legacy_pre_effect(() => deep_read_state($$sanitized_props), () => {
    set(gradientOutlineClass, twMerge(
      "inline-flex items-center justify-center w-full  !border-0",
      $$sanitized_props.pill || "!rounded-md",
      "bg-white !text-gray-900 dark:bg-gray-900 dark:!text-white",
      // this is limitation - no transparency
      "hover:bg-transparent hover:!text-inherit",
      "transition-all duration-75 ease-in group-hover:!bg-opacity-0 group-hover:!text-inherit"
    ));
  });
  legacy_pre_effect(
    () => (deep_read_state($$sanitized_props), deep_read_state(color()), deep_read_state(shadow())),
    () => {
      set(divClass, twMerge($$sanitized_props.outline && "p-0.5", gradientClasses[color()], shadow() && "shadow-lg", shadow() && coloredShadowClasses[color()], group ? $$sanitized_props.pill && "first:rounded-s-full last:rounded-e-full" || "first:rounded-s-lg last:rounded-e-lg" : $$sanitized_props.pill && "rounded-full" || "rounded-lg", $$sanitized_props.class));
    }
  );
  legacy_pre_effect_reset();
  init();
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    () => $$sanitized_props.outline,
    ($$anchor2) => {
      var div = root_15();
      var node_1 = child(div);
      validate_component(Button_default)(node_1, spread_props(() => $$restProps, {
        color: "none",
        get class() {
          return get(gradientOutlineClass);
        },
        $$events: {
          click($$arg) {
            bubble_event.call(this, $$props, $$arg);
          },
          change($$arg) {
            bubble_event.call(this, $$props, $$arg);
          },
          keydown($$arg) {
            bubble_event.call(this, $$props, $$arg);
          },
          keyup($$arg) {
            bubble_event.call(this, $$props, $$arg);
          },
          mouseenter($$arg) {
            bubble_event.call(this, $$props, $$arg);
          },
          mouseleave($$arg) {
            bubble_event.call(this, $$props, $$arg);
          }
        },
        children: wrap_snippet(($$anchor3, $$slotProps) => {
          var fragment_1 = comment();
          var node_2 = first_child(fragment_1);
          slot(node_2, $$props.children, {}, null);
          append($$anchor3, fragment_1);
        })
      }));
      render_effect(() => set_class(div, get(divClass)));
      append($$anchor2, div);
    },
    ($$anchor2) => {
      var fragment_2 = comment();
      var node_3 = first_child(fragment_2);
      validate_component(Button_default)(node_3, spread_props(() => $$restProps, {
        color: "none",
        get class() {
          return get(divClass);
        },
        $$events: {
          click($$arg) {
            bubble_event.call(this, $$props, $$arg);
          },
          change($$arg) {
            bubble_event.call(this, $$props, $$arg);
          },
          keydown($$arg) {
            bubble_event.call(this, $$props, $$arg);
          },
          keyup($$arg) {
            bubble_event.call(this, $$props, $$arg);
          },
          touchstart($$arg) {
            bubble_event.call(this, $$props, $$arg);
          },
          touchend($$arg) {
            bubble_event.call(this, $$props, $$arg);
          },
          touchcancel($$arg) {
            bubble_event.call(this, $$props, $$arg);
          },
          mouseenter($$arg) {
            bubble_event.call(this, $$props, $$arg);
          },
          mouseleave($$arg) {
            bubble_event.call(this, $$props, $$arg);
          }
        },
        children: wrap_snippet(($$anchor3, $$slotProps) => {
          var fragment_3 = comment();
          var node_4 = first_child(fragment_3);
          slot(node_4, $$props.children, {}, null);
          append($$anchor3, fragment_3);
        })
      }));
      append($$anchor2, fragment_2);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(GradientButton);
  GradientButton = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var GradientButton_default = GradientButton;
GradientButton.filename = ".../dist/buttons/GradientButton.svelte";
mark_module_end(GradientButton);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/button-group/ButtonGroup.svelte
mark_module_start();
var root8 = template(`<div><!></div>`);
function ButtonGroup($$anchor, $$props) {
  if (new.target === ButtonGroup)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["size", "divClass"]);
  push($$props, false, ButtonGroup);
  let size2 = prop($$props, "size", 0, "md");
  let divClass = prop($$props, "divClass", 0, "inline-flex rounded-lg shadow-sm");
  setContext("group", { size: size2() });
  init();
  var div = root8();
  let attributes;
  var node = child(div);
  slot(node, $$props.children, {}, null);
  render_effect(() => attributes = set_attributes(
    div,
    attributes,
    {
      ...$$restProps,
      class: twMerge(divClass(), $$sanitized_props.class),
      role: "group"
    },
    true,
    ""
  ));
  append($$anchor, div);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ButtonGroup);
  ButtonGroup = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ButtonGroup_default = ButtonGroup;
ButtonGroup.filename = ".../dist/button-group/ButtonGroup.svelte";
mark_module_end(ButtonGroup);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/cards/Card.svelte
mark_module_start();
var root_16 = template(`<img alt=""> <div><!></div>`, 1);
function Card($$anchor, $$props) {
  if (new.target === Card)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "href",
    "horizontal",
    "reverse",
    "img",
    "padding",
    "size"
  ]);
  push($$props, false, Card);
  let href = prop($$props, "href", 0, void 0);
  let horizontal = prop($$props, "horizontal", 0, false);
  let reverse = prop($$props, "reverse", 0, false);
  let img = prop($$props, "img", 0, void 0);
  let padding = prop($$props, "padding", 0, "lg");
  let size2 = prop($$props, "size", 0, "sm");
  const paddings = {
    none: "",
    xs: "p-2",
    sm: "p-4",
    md: "p-4 sm:p-5",
    lg: "p-4 sm:p-6",
    xl: "p-4 sm:p-8"
  };
  const sizes = {
    none: "",
    xs: "max-w-xs",
    sm: "max-w-sm",
    md: "max-w-xl",
    lg: "max-w-2xl",
    xl: "max-w-screen-xl"
  };
  let innerPadding = mutable_source();
  let cardClass = mutable_source();
  let imgClass = mutable_source();
  legacy_pre_effect(() => deep_read_state(padding()), () => {
    set(innerPadding, paddings[padding()]);
  });
  legacy_pre_effect(
    () => (deep_read_state(size2()), deep_read_state(reverse()), deep_read_state(horizontal()), deep_read_state(href()), deep_read_state(img()), get(innerPadding), deep_read_state($$sanitized_props)),
    () => {
      set(cardClass, twMerge("flex w-full", sizes[size2()], reverse() ? "flex-col-reverse" : "flex-col", horizontal() && (reverse() ? "md:flex-row-reverse" : "md:flex-row"), href() && "hover:bg-gray-100 dark:hover:bg-gray-700", !img() && get(innerPadding), $$sanitized_props.class));
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(reverse()), deep_read_state(horizontal())),
    () => {
      set(imgClass, twMerge(reverse() ? "rounded-b-lg" : "rounded-t-lg", horizontal() && "object-cover w-full h-96 md:h-auto md:w-48 md:rounded-none", horizontal() && (reverse() ? "md:rounded-e-lg" : "md:rounded-s-lg")));
    }
  );
  legacy_pre_effect_reset();
  init();
  var fragment = comment();
  var node = first_child(fragment);
  var tag = derived(() => href() ? "a" : "div");
  validate_component(Frame_default)(node, spread_props(
    {
      get tag() {
        return get(tag);
      },
      rounded: true,
      shadow: true,
      border: true,
      get href() {
        return href();
      }
    },
    () => $$restProps,
    {
      get class() {
        return get(cardClass);
      },
      $$events: {
        click($$arg) {
          bubble_event.call(this, $$props, $$arg);
        },
        focusin($$arg) {
          bubble_event.call(this, $$props, $$arg);
        },
        focusout($$arg) {
          bubble_event.call(this, $$props, $$arg);
        },
        mouseenter($$arg) {
          bubble_event.call(this, $$props, $$arg);
        },
        mouseleave($$arg) {
          bubble_event.call(this, $$props, $$arg);
        }
      },
      children: wrap_snippet(($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        if_block(
          node_1,
          img,
          ($$anchor3) => {
            var fragment_2 = root_16();
            var img_1 = first_child(fragment_2);
            var div = sibling(sibling(img_1, true));
            var node_2 = child(div);
            slot(node_2, $$props.children, {}, null);
            render_effect(() => {
              set_class(img_1, get(imgClass));
              set_attribute(img_1, "src", img());
              set_class(div, get(innerPadding));
            });
            append($$anchor3, fragment_2);
          },
          ($$anchor3) => {
            var fragment_3 = comment();
            var node_3 = first_child(fragment_3);
            slot(node_3, $$props.children, {}, null);
            append($$anchor3, fragment_3);
          }
        );
        append($$anchor2, fragment_1);
      })
    }
  ));
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Card);
  Card = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Card_default = Card;
Card.filename = ".../dist/cards/Card.svelte";
mark_module_end(Card);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/carousel/ControlButton.svelte
mark_module_start();
var root_17 = template(`<svg aria-hidden="true" class="w-5 h-5 sm:w-6 sm:h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path></svg>`);
var root_25 = template(`<svg aria-hidden="true" class="w-5 h-5 sm:w-6 sm:h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path></svg>`);
var fallback3 = template(`<span class="inline-flex justify-center items-center w-8 h-8 rounded-full sm:w-10 sm:h-10 bg-white/30 dark:bg-gray-800/30 group-hover:bg-white/50 dark:group-hover:bg-gray-800/60 group-focus:ring-4 group-focus:ring-white dark:group-focus:ring-gray-800/70 group-focus:outline-none"><!> <span class="sr-only"> </span></span>`);
var root9 = template(`<button type="button"><!></button>`);
function ControlButton($$anchor, $$props) {
  if (new.target === ControlButton)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  push($$props, false, ControlButton);
  let buttonCls = mutable_source();
  legacy_pre_effect(
    () => (deep_read_state($$props.forward), deep_read_state($$sanitized_props)),
    () => {
      set(buttonCls, twMerge("flex absolute top-0 z-30 justify-center items-center px-4 h-full group focus:outline-none text-white dark:text-gray-300", $$props.forward ? "end-0" : "start-0", $$sanitized_props.class));
    }
  );
  legacy_pre_effect_reset();
  init();
  var button = root9();
  var node = child(button);
  slot(node, $$props.children, {}, ($$anchor2) => {
    var span = fallback3();
    var node_1 = child(span);
    if_block(
      node_1,
      () => $$props.forward,
      ($$anchor3) => {
        var svg = root_17();
        var path = child(svg);
        append($$anchor3, svg);
      },
      ($$anchor3) => {
        var svg_1 = root_25();
        var path_1 = child(svg_1);
        append($$anchor3, svg_1);
      }
    );
    var span_1 = sibling(sibling(node_1, true));
    var text2 = child(span_1);
    render_effect(() => set_text(text2, $$props.name));
    append($$anchor2, span);
  });
  render_effect(() => set_class(button, get(buttonCls)));
  event("click", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  append($$anchor, button);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ControlButton);
  ControlButton = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ControlButton_default = ControlButton;
ControlButton.filename = ".../dist/carousel/ControlButton.svelte";
mark_module_end(ControlButton);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/carousel/CarouselSlide.js
var canChangeSlide = ({ lastSlideChange, slideDuration, slideDurationRatio = 1 }) => {
  if (lastSlideChange && (/* @__PURE__ */ new Date()).getTime() - lastSlideChange.getTime() < slideDuration * slideDurationRatio) {
    console.warn("Can't change slide yet, too soon");
    return false;
  }
  return true;
};

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/carousel/Controls.svelte
mark_module_start();
var fallback4 = template(`<!> <!>`, 1);
function Controls($$anchor, $$props) {
  if (new.target === Controls)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  push($$props, false, Controls);
  const $$subscriptions = {};
  unsubscribe_on_destroy($$subscriptions);
  const $state = () => (validate_store(state, "state"), store_get(state, "$state", $$subscriptions));
  const state = getContext("state");
  const { update } = state;
  function changeSlide(forward) {
    if (!canChangeSlide({
      lastSlideChange: $state().lastSlideChange,
      slideDuration: $state().slideDuration,
      slideDurationRatio: 0.75
    })) {
      return;
    }
    if (forward) {
      update((_state) => {
        _state.forward = true;
        _state.index = _state.index >= _state.images.length - 1 ? 0 : _state.index + 1;
        _state.lastSlideChange = /* @__PURE__ */ new Date();
        return { ..._state };
      });
    } else {
      update((_state) => {
        _state.forward = false;
        _state.index = _state.index <= 0 ? _state.images.length - 1 : _state.index - 1;
        _state.lastSlideChange = /* @__PURE__ */ new Date();
        return { ..._state };
      });
    }
  }
  init();
  var fragment = comment();
  var node = first_child(fragment);
  slot(node, $$props.children, { ControlButton: ControlButton_default, changeSlide }, ($$anchor2) => {
    var fragment_1 = fallback4();
    var node_1 = first_child(fragment_1);
    var class_1 = derived(() => twMerge($$sanitized_props.class));
    validate_component(ControlButton_default)(node_1, {
      name: "Previous",
      forward: false,
      get class() {
        return get(class_1);
      },
      $$events: { click: () => changeSlide(false) }
    });
    var node_2 = sibling(sibling(node_1, true));
    var class_2 = derived(() => twMerge($$sanitized_props.class));
    validate_component(ControlButton_default)(node_2, {
      name: "Next",
      forward: true,
      get class() {
        return get(class_2);
      },
      $$events: { click: () => changeSlide(true) }
    });
    append($$anchor2, fragment_1);
  });
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Controls);
  Controls = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Controls_default = Controls;
Controls.filename = ".../dist/carousel/Controls.svelte";
mark_module_end(Controls);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/carousel/Indicators.svelte
mark_module_start();
var each_block = template(`<button><!></button>`);
var root10 = template(`<div></div>`);
function Indicators($$anchor, $$props) {
  if (new.target === Indicators)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  push($$props, false, Indicators);
  const $$subscriptions = {};
  unsubscribe_on_destroy($$subscriptions);
  const $state = () => (validate_store(get(state), "state"), store_get(get(state), "$state", $$subscriptions));
  let activeClass = prop($$props, "activeClass", 0, "opacity-100");
  let inactiveClass = prop($$props, "inactiveClass", 0, "opacity-60");
  const state = mutable_source(getContext("state"));
  init();
  var div = root10();
  render_effect(() => set_class(div, twMerge("flex absolute bottom-5 start-1/2 z-30 space-x-3 rtl:space-x-reverse -translate-x-1/2 rtl:translate-x-1/2", $$sanitized_props.class)));
  each(div, 9, () => $state().images, index, ($$anchor2, _, idx) => {
    var button = each_block();
    const selected = derived_safe_equal(() => $state().index === unwrap(idx));
    get(selected);
    var node = child(button);
    slot(
      node,
      $$props.children,
      {
        Indicator: Indicator_default,
        get selected() {
          return get(selected);
        },
        index: unwrap(idx)
      },
      ($$anchor3) => {
        var fragment = comment();
        var node_1 = first_child(fragment);
        var class_1 = derived(() => twMerge("bg-gray-100 hover:bg-gray-300", get(selected) ? activeClass() : inactiveClass()));
        validate_component(Indicator_default)(node_1, {
          get class() {
            return get(class_1);
          }
        });
        append($$anchor3, fragment);
      }
    );
    event("click", button, () => mutate_store(get(state), untrack($state).index = unwrap(idx), untrack($state)), false);
    append($$anchor2, button);
  });
  append($$anchor, div);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Indicators);
  Indicators = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Indicators_default = Indicators;
Indicators.filename = ".../dist/carousel/Indicators.svelte";
mark_module_end(Indicators);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/carousel/Slide.svelte
mark_module_start();
var root_26 = template(`<img>`);
var root_44 = template(`<img>`);
function Slide($$anchor, $$props) {
  if (new.target === Slide)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["image", "transition"]);
  push($$props, false, Slide);
  const $$subscriptions = {};
  unsubscribe_on_destroy($$subscriptions);
  const $state = () => (validate_store(state, "state"), store_get(state, "$state", $$subscriptions));
  const transitionSlideIn = mutable_source();
  const transitionSlideOut = mutable_source();
  const imgClass = mutable_source();
  const state = getContext("state");
  let transition2 = prop($$props, "transition", 0, null);
  legacy_pre_effect(() => $state(), () => {
    set(transitionSlideIn, {
      x: $state().forward ? "100%" : "-100%",
      opacity: 1,
      width: "100%",
      height: "100%",
      duration: $state().slideDuration
    });
  });
  legacy_pre_effect(() => $state(), () => {
    set(transitionSlideOut, {
      x: $state().forward ? "-100%" : "100%",
      opacity: 0.9,
      width: "100%",
      height: "100%",
      duration: $state().slideDuration
    });
  });
  legacy_pre_effect(() => deep_read_state($$sanitized_props), () => {
    set(imgClass, twMerge("absolute block !w-full h-full object-cover", $$sanitized_props.class));
  });
  legacy_pre_effect_reset();
  init();
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    transition2,
    ($$anchor2) => {
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      key_block(node_1, () => $$props.image, ($$anchor3) => {
        var img = root_26();
        transition(3, img, transition2, () => ({}));
        let attributes;
        render_effect(() => attributes = set_attributes(
          img,
          attributes,
          {
            alt: "...",
            ...$$props.image,
            ...$$restProps,
            class: get(imgClass)
          },
          true,
          ""
        ));
        append($$anchor3, img);
      });
      append($$anchor2, fragment_1);
    },
    ($$anchor2) => {
      var fragment_2 = comment();
      var node_2 = first_child(fragment_2);
      key_block(node_2, () => $$props.image, ($$anchor3) => {
        var img_1 = root_44();
        transition(2, img_1, () => fly, () => get(transitionSlideOut));
        transition(1, img_1, () => fly, () => get(transitionSlideIn));
        let attributes_1;
        render_effect(() => attributes_1 = set_attributes(
          img_1,
          attributes_1,
          {
            alt: "...",
            ...$$props.image,
            ...$$restProps,
            class: get(imgClass)
          },
          true,
          ""
        ));
        append($$anchor3, img_1);
      });
      append($$anchor2, fragment_2);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Slide);
  Slide = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Slide_default = Slide;
Slide.filename = ".../dist/carousel/Slide.svelte";
mark_module_end(Slide);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/carousel/Carousel.svelte
mark_module_start();
var each_block2 = template(`<link rel="preload" as="image">`);
var root11 = template(`<div class="relative" role="button" tabindex="0"><div><!></div> <!></div>`);
function Carousel($$anchor, $$props) {
  var _a;
  if (new.target === Carousel)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "images",
    "index",
    "slideDuration",
    "transition",
    "duration",
    "ariaLabel",
    "imgClass"
  ]);
  push($$props, false, Carousel);
  const onDragMove = mutable_source();
  const onDragStop = mutable_source();
  const SLIDE_DURATION_RATIO = 0.25;
  let index2 = prop($$props, "index", 4, 0);
  let slideDuration = prop($$props, "slideDuration", 0, 1e3);
  let transition2 = prop($$props, "transition", 0, null);
  let duration = prop($$props, "duration", 0, 0);
  let ariaLabel = prop($$props, "ariaLabel", 0, "Draggable Carousel");
  let divClass = "grid overflow-hidden relative rounded-lg h-56 sm:h-64 xl:h-80 2xl:h-96";
  let imgClass = prop($$props, "imgClass", 0, "");
  const dispatch = createEventDispatcher();
  const { set: set2, subscribe, update } = writable({
    images: $$props.images,
    index: index2(),
    forward: true,
    slideDuration: slideDuration(),
    lastSlideChange: /* @__PURE__ */ new Date()
  });
  const state = {
    set: (_state) => set2({
      index: _state.index,
      images: _state.images,
      lastSlideChange: /* @__PURE__ */ new Date(),
      slideDuration: slideDuration(),
      forward
    }),
    subscribe,
    update
  };
  let forward = true;
  setContext("state", state);
  subscribe((_state) => {
    index2(_state.index);
    forward = _state.forward;
    dispatch("change", $$props.images[index2()]);
  });
  onMount(() => {
    dispatch("change", $$props.images[index2()]);
  });
  const nextSlide = () => {
    update((_state) => {
      if (!canChangeSlide({
        lastSlideChange: _state.lastSlideChange,
        slideDuration: slideDuration(),
        slideDurationRatio: SLIDE_DURATION_RATIO
      }))
        return _state;
      _state.index = _state.index >= $$props.images.length - 1 ? 0 : _state.index + 1;
      _state.lastSlideChange = /* @__PURE__ */ new Date();
      return { ..._state };
    });
  };
  const prevSlide = () => {
    update((_state) => {
      if (!canChangeSlide({
        lastSlideChange: _state.lastSlideChange,
        slideDuration: slideDuration(),
        slideDurationRatio: SLIDE_DURATION_RATIO
      }))
        return _state;
      _state.index = _state.index <= 0 ? $$props.images.length - 1 : _state.index - 1;
      _state.lastSlideChange = /* @__PURE__ */ new Date();
      return { ..._state };
    });
  };
  const loop = (node, duration2) => {
    set(carouselDiv, node);
    let intervalId;
    if (duration2 > 0)
      intervalId = setInterval(nextSlide, duration2);
    return {
      update: (duration3) => {
        clearInterval(intervalId);
        if (duration3 > 0)
          intervalId = setInterval(nextSlide, duration3);
      },
      destroy: () => clearInterval(intervalId)
    };
  };
  let activeDragGesture = mutable_source();
  let carouselDiv = mutable_source();
  let percentOffset = mutable_source(0);
  let touchEvent = mutable_source(null);
  const getPositionFromEvent = (evt) => {
    const mousePos = evt == null ? void 0 : evt.clientX;
    if (mousePos)
      return mousePos;
    let touchEvt = evt;
    if (/^touch/.test(touchEvt == null ? void 0 : touchEvt.type)) {
      return touchEvt.touches[0].clientX;
    }
  };
  const onDragStart = (evt) => {
    set(touchEvent, evt);
    evt.cancelable && evt.preventDefault();
    const start = getPositionFromEvent(evt);
    const width = get(carouselDiv).getBoundingClientRect().width;
    if (start === void 0 || width === void 0)
      return;
    set(activeDragGesture, {
      start,
      position: start,
      width,
      timestamp: Date.now()
    });
  };
  legacy_pre_effect(
    () => (get(activeDragGesture), get(percentOffset), get(touchEvent)),
    () => {
      set(onDragStop, get(activeDragGesture) === void 0 ? void 0 : (evt) => {
        var _a2, _b, _c;
        const SWIPE_MAX_DURATION = 250;
        const SWIPE_MIN_DISTANCE = 30;
        const DRAG_MIN_PERCENT = 50;
        if (get(activeDragGesture)) {
          const { timestamp, position, start } = get(activeDragGesture);
          const duration2 = Date.now() - timestamp;
          const distance = position - start;
          if (Math.abs(distance) >= SWIPE_MIN_DISTANCE && duration2 <= SWIPE_MAX_DURATION && duration2 > 0) {
            if (distance > 0)
              prevSlide();
            else
              nextSlide();
          } else if (get(percentOffset) > DRAG_MIN_PERCENT)
            prevSlide();
          else if (get(percentOffset) < -DRAG_MIN_PERCENT)
            nextSlide();
          else {
            if (((_a2 = get(touchEvent)) == null ? void 0 : _a2.constructor.name) === "TouchEvent") {
              (_c = (_b = get(touchEvent)) == null ? void 0 : _b.target) == null ? void 0 : _c.dispatchEvent(new Event("click", { bubbles: true }));
            }
          }
        }
        set(percentOffset, 0);
        set(activeDragGesture, void 0);
        set(touchEvent, null);
      });
    }
  );
  legacy_pre_effect(() => get(activeDragGesture), () => {
    set(onDragMove, get(activeDragGesture) === void 0 ? void 0 : (evt) => {
      const position = getPositionFromEvent(evt);
      if (!get(activeDragGesture) || position === void 0)
        return;
      const { start, width } = get(activeDragGesture);
      set(percentOffset, Math.min(100, Math.max(-100, (position - start) / width * 100)));
      mutate(activeDragGesture, get(activeDragGesture).position = position);
    });
  });
  legacy_pre_effect_reset();
  init();
  var div = root11();
  event(
    "mousemove",
    $document,
    function(...$$args) {
      const $$callback = get(onDragMove);
      return $$callback == null ? void 0 : $$callback.apply(this, $$args);
    },
    false
  );
  event(
    "mouseup",
    $document,
    function(...$$args) {
      const $$callback = get(onDragStop);
      return $$callback == null ? void 0 : $$callback.apply(this, $$args);
    },
    false
  );
  event(
    "touchmove",
    $document,
    function(...$$args) {
      const $$callback = get(onDragMove);
      return $$callback == null ? void 0 : $$callback.apply(this, $$args);
    },
    false,
    true
  );
  event(
    "touchend",
    $document,
    function(...$$args) {
      const $$callback = get(onDragStop);
      return $$callback == null ? void 0 : $$callback.apply(this, $$args);
    },
    false,
    true
  );
  head(($$anchor2) => {
    var fragment = comment();
    var node_1 = first_child(fragment);
    if_block(node_1, () => $$props.images.length > 0, ($$anchor3) => {
      var fragment_1 = comment();
      var node_2 = first_child(fragment_1);
      each(node_2, 1, () => $$props.images, index, ($$anchor4, image, $$index) => {
        var link = each_block2();
        render_effect(() => set_attribute(link, "href", unwrap(image).src));
        append($$anchor4, link);
      });
      append($$anchor3, fragment_1);
    });
    append($$anchor2, fragment);
  });
  bind_this(div, ($$value) => set(carouselDiv, $$value), () => get(carouselDiv));
  var div_1 = child(div);
  let attributes;
  var node_3 = child(div_1);
  slot(
    node_3,
    (_a = $$props.$$slots) == null ? void 0 : _a["slide"],
    {
      Slide: Slide_default,
      get index() {
        return index2();
      }
    },
    ($$anchor2) => {
      var fragment_2 = comment();
      var node_4 = first_child(fragment_2);
      validate_component(Slide_default)(node_4, {
        get image() {
          return $$props.images[index2()];
        },
        get class() {
          return imgClass();
        },
        get transition() {
          return transition2();
        }
      });
      append($$anchor2, fragment_2);
    }
  );
  var node_5 = sibling(sibling(div_1, true));
  slot(
    node_5,
    $$props.children,
    {
      get index() {
        return index2();
      },
      Controls: Controls_default,
      Indicators: Indicators_default
    },
    null
  );
  render_effect(() => {
    set_attribute(div, "aria-label", ariaLabel());
    attributes = set_attributes(
      div_1,
      attributes,
      {
        ...$$restProps,
        class: twMerge(divClass, get(activeDragGesture) === void 0 ? "transition-transform" : "", $$sanitized_props.class)
      },
      true,
      ""
    );
  });
  event("mousedown", div, onDragStart, false, false);
  event("touchstart", div, onDragStart, false, false);
  event(
    "mousemove",
    div,
    function(...$$args) {
      const $$callback = get(onDragMove);
      return $$callback == null ? void 0 : $$callback.apply(this, $$args);
    },
    false
  );
  event(
    "mouseup",
    div,
    function(...$$args) {
      const $$callback = get(onDragStop);
      return $$callback == null ? void 0 : $$callback.apply(this, $$args);
    },
    false
  );
  event(
    "touchmove",
    div,
    function(...$$args) {
      const $$callback = get(onDragMove);
      return $$callback == null ? void 0 : $$callback.apply(this, $$args);
    },
    false,
    true
  );
  event(
    "touchend",
    div,
    function(...$$args) {
      const $$callback = get(onDragStop);
      return $$callback == null ? void 0 : $$callback.apply(this, $$args);
    },
    false,
    true
  );
  action(div_1, ($$node, $$action_arg) => loop($$node, $$action_arg), duration);
  append($$anchor, div);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Carousel);
  Carousel = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Carousel_default = Carousel;
Carousel.filename = ".../dist/carousel/Carousel.svelte";
mark_module_end(Carousel);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/carousel/Thumbnail.svelte
mark_module_start();
var root12 = template(`<img>`);
function Thumbnail($$anchor, $$props) {
  if (new.target === Thumbnail)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["selected", "activeClass", "inactiveClass"]);
  push($$props, false, Thumbnail);
  let selected = prop($$props, "selected", 0, false);
  let activeClass = prop($$props, "activeClass", 0, "opacity-100");
  let inactiveClass = prop($$props, "inactiveClass", 0, "opacity-60");
  init();
  var img = root12();
  let attributes;
  render_effect(() => attributes = set_attributes(
    img,
    attributes,
    {
      alt: "...",
      ...$$restProps,
      class: twMerge(selected() ? activeClass() : inactiveClass(), $$sanitized_props.class)
    },
    true,
    ""
  ));
  append($$anchor, img);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Thumbnail);
  Thumbnail = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Thumbnail_default = Thumbnail;
Thumbnail.filename = ".../dist/carousel/Thumbnail.svelte";
mark_module_end(Thumbnail);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/carousel/Thumbnails.svelte
mark_module_start();
var each_block3 = template(`<button><!></button>`);
var root13 = template(`<div></div>`);
function Thumbnails($$anchor, $$props) {
  if (new.target === Thumbnails)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  push($$props, false, Thumbnails);
  let images = prop($$props, "images", 8, () => []);
  let index2 = prop($$props, "index", 4, 0);
  let ariaLabel = prop($$props, "ariaLabel", 0, "Click to view image");
  let imgClass = prop($$props, "imgClass", 0, "");
  let throttleDelay = prop($$props, "throttleDelay", 0, 650);
  let lastClickedAt = /* @__PURE__ */ new Date();
  const btnClick = (idx) => {
    if ((/* @__PURE__ */ new Date()).getTime() - lastClickedAt.getTime() < throttleDelay()) {
      console.warn("Thumbnail action throttled");
      return;
    }
    if (idx === index2()) {
      return;
    }
    index2(idx);
    lastClickedAt = /* @__PURE__ */ new Date();
  };
  legacy_pre_effect(
    () => (deep_read_state(index2()), deep_read_state(images())),
    () => {
      index2((index2() + images().length) % images().length);
    }
  );
  legacy_pre_effect_reset();
  init();
  var div = root13();
  render_effect(() => set_class(div, twMerge("flex flex-row justify-center bg-gray-100 w-full", $$sanitized_props.class)));
  each(div, 9, images, index, ($$anchor2, image, idx) => {
    var button = each_block3();
    const selected = derived_safe_equal(() => index2() === unwrap(idx));
    get(selected);
    var node = child(button);
    slot(
      node,
      $$props.children,
      {
        Thumbnail: Thumbnail_default,
        get image() {
          return unwrap(image);
        },
        get selected() {
          return get(selected);
        },
        get imgClass() {
          return imgClass();
        }
      },
      ($$anchor3) => {
        var fragment = comment();
        var node_1 = first_child(fragment);
        validate_component(Thumbnail_default)(node_1, spread_props(() => unwrap(image), {
          get selected() {
            return get(selected);
          },
          get class() {
            return imgClass();
          }
        }));
        append($$anchor3, fragment);
      }
    );
    render_effect(() => set_attribute(button, "aria-label", ariaLabel()));
    event("click", button, () => btnClick(unwrap(idx)), false);
    append($$anchor2, button);
  });
  append($$anchor, div);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Thumbnails);
  Thumbnails = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Thumbnails_default = Thumbnails;
Thumbnails.filename = ".../dist/carousel/Thumbnails.svelte";
mark_module_end(Thumbnails);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/charts/Chart.svelte
mark_module_start();
var root14 = template(`<div></div>`);
function Chart($$anchor, $$props) {
  if (new.target === Chart)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  push($$props, false, Chart);
  function initChart(node, options) {
    let chart;
    async function asyncInitChart() {
      const ApexCharts = (await import("./apexcharts.common-XS63FCTS.js")).default;
      chart = new ApexCharts(node, options);
      chart.render();
    }
    asyncInitChart();
    return {
      update(options2) {
        chart && chart.updateOptions(options2);
      },
      destroy() {
        chart && chart.destroy();
      }
    };
  }
  init();
  var div = root14();
  render_effect(() => set_class(div, $$sanitized_props.class));
  action(div, ($$node, $$action_arg) => initChart($$node, $$action_arg), () => $$props.options);
  append($$anchor, div);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Chart);
  Chart = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Chart_default = Chart;
Chart.filename = ".../dist/charts/Chart.svelte";
mark_module_end(Chart);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/darkmode/DarkMode.svelte
mark_module_start();
var head2 = template_with_script(`<script>
    if ('color-theme' in localStorage) {
      // explicit preference - overrides author's choice
      localStorage.getItem('color-theme') === 'dark' ? window.document.documentElement.classList.add('dark') : window.document.documentElement.classList.remove('dark');
    } else {
      // browser preference - does not overrides
      if (window.matchMedia('(prefers-color-scheme: dark)').matches) window.document.documentElement.classList.add('dark');
    }
  <\/script>`);
var fallback5 = template(`<svg fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1
  0 100-2H3a1 1 0 000 2h1z" fill-rule="evenodd" clip-rule="evenodd"></path></svg>`);
var fallback_12 = template(`<svg fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"></path></svg>`);
var root15 = template(`<button><span class="hidden dark:block"><!></span> <span class="block dark:hidden"><!></span></button>`);
function DarkMode($$anchor, $$props) {
  var _a, _b;
  if (new.target === DarkMode)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["btnClass", "size", "ariaLabel"]);
  push($$props, false, DarkMode);
  let btnClass = prop($$props, "btnClass", 0, "text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none rounded-lg text-sm p-2.5");
  let size2 = prop($$props, "size", 0, "md");
  let ariaLabel = prop($$props, "ariaLabel", 0, "Dark mode");
  const sizes = { sm: "w-4 h-4", md: "w-5 h-5", lg: "w-6 h-6" };
  const toggleTheme = (ev) => {
    const target = ev.target;
    const isDark = target.ownerDocument.documentElement.classList.toggle("dark");
    if (target.ownerDocument === document)
      localStorage.setItem("color-theme", isDark ? "dark" : "light");
  };
  init();
  var button = root15();
  head(($$anchor2) => {
    var script = head2();
    append($$anchor2, script);
  });
  let attributes;
  var span = child(button);
  var node = child(span);
  slot(node, (_a = $$props.$$slots) == null ? void 0 : _a["lightIcon"], {}, ($$anchor2) => {
    var svg = fallback5();
    var path = child(svg);
    render_effect(() => set_class(svg, sizes[size2()]));
    append($$anchor2, svg);
  });
  var span_1 = sibling(sibling(span, true));
  var node_1 = child(span_1);
  slot(node_1, (_b = $$props.$$slots) == null ? void 0 : _b["darkIcon"], {}, ($$anchor2) => {
    var svg_1 = fallback_12();
    var path_1 = child(svg_1);
    render_effect(() => set_class(svg_1, sizes[size2()]));
    append($$anchor2, svg_1);
  });
  render_effect(() => attributes = set_attributes(
    button,
    attributes,
    {
      "aria-label": ariaLabel(),
      type: "button",
      ...$$restProps,
      class: twMerge(btnClass(), $$sanitized_props.class)
    },
    true,
    ""
  ));
  event("click", button, toggleTheme, false);
  append($$anchor, button);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(DarkMode);
  DarkMode = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var DarkMode_default = DarkMode;
DarkMode.filename = ".../dist/darkmode/DarkMode.svelte";
mark_module_end(DarkMode);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/datepicker/Calender.svelte
mark_module_start();
var root16 = svg_template(`<svg aria-hidden="true" class="w-5 h-5 text-gray-500 dark:text-gray-400" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd"></path></svg>`);
function Calender($$anchor, $$props) {
  if (new.target === Calender)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, false, Calender);
  var svg = root16();
  var path = child(svg);
  append($$anchor, svg);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Calender);
  Calender = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Calender_default = Calender;
Calender.filename = ".../dist/datepicker/Calender.svelte";
mark_module_end(Calender);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/datepicker/Datepicker.svelte
mark_module_start();
var head3 = template_with_script(`<link rel="stylesheet" href="https://unpkg.com/flowbite@1.5.1/dist/flowbite.min.css"> <script src="https://unpkg.com/flowbite@1.5.1/dist/datepicker.js"><\/script>`, 1);
var root_18 = template(`<div date-rangepicker="" class="flex items-center"><div class="relative"><div class="flex absolute inset-y-0 start-0 items-center ps-3 pointer-events-none"><!></div> <input name="start" type="text" placeholder="Select date start"></div> <span class="mx-4 text-gray-500">to</span> <div class="relative"><div class="flex absolute inset-y-0 start-0 items-center ps-3 pointer-events-none"><!></div> <input name="end" type="text" placeholder="Select date end"></div></div>`);
var root_35 = template(`<input>`);
var root_45 = template(`<input>`);
var root_27 = template(`<div class="relative"><div class="flex absolute inset-y-0 start-0 items-center ps-3 pointer-events-none"><!></div> <!> <!></div>`);
function Datepicker($$anchor, $$props) {
  if (new.target === Datepicker)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "range",
    "datepickerButtons",
    "datepickerFormat",
    "datepickerOrientation",
    "datepickerTitle",
    "attribute",
    "inputClass"
  ]);
  push($$props, false, Datepicker);
  const setAttribute = mutable_source();
  let range = prop($$props, "range", 0, false);
  let datepickerButtons = prop($$props, "datepickerButtons", 0, false);
  let datepickerFormat = prop($$props, "datepickerFormat", 0, "mm/dd/yyyy");
  let datepickerOrientation = prop($$props, "datepickerOrientation", 0, "bottom");
  let datepickerTitle = prop($$props, "datepickerTitle", 0, "Flowbite datepicker");
  let attribute = prop($$props, "attribute", 0, "");
  let inputClass2 = prop($$props, "inputClass", 0, "bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full ps-10 p-2.5  dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500");
  legacy_pre_effect(() => {
  }, () => {
    set(setAttribute, (node, params) => {
      if (params) {
        node.setAttribute(params, "");
      }
    });
  });
  legacy_pre_effect_reset();
  var fragment_1 = comment();
  head(($$anchor2) => {
    var fragment = head3();
    var link = first_child(fragment);
    var script = sibling(sibling(link, true));
    append($$anchor2, fragment);
  });
  var node_1 = first_child(fragment_1);
  if_block(
    node_1,
    range,
    ($$anchor2) => {
      var div = root_18();
      var div_1 = child(div);
      var div_2 = child(div_1);
      var node_2 = child(div_2);
      validate_component(Calender_default)(node_2, {});
      var input = sibling(sibling(div_2, true));
      var span = sibling(sibling(div_1, true));
      var div_3 = sibling(sibling(span, true));
      var div_4 = child(div_3);
      var node_3 = child(div_4);
      validate_component(Calender_default)(node_3, {});
      var input_1 = sibling(sibling(div_4, true));
      render_effect(() => {
        set_class(input, inputClass2());
        set_class(input_1, inputClass2());
      });
      append($$anchor2, div);
    },
    ($$anchor2) => {
      var div_5 = root_27();
      var div_6 = child(div_5);
      var node_4 = child(div_6);
      validate_component(Calender_default)(node_4, {});
      var node_5 = sibling(sibling(div_6, true));
      if_block(
        node_5,
        datepickerButtons,
        ($$anchor3) => {
          var input_2 = root_35();
          remove_input_attr_defaults(input_2);
          let attributes;
          render_effect(() => attributes = set_attributes(
            input_2,
            attributes,
            {
              ...$$restProps,
              datepicker: true,
              "datepicker-buttons": true,
              "datepicker-format": datepickerFormat(),
              "datepicker-orientation": datepickerOrientation(),
              "datepicker-title": datepickerTitle(),
              type: "text",
              class: inputClass2(),
              placeholder: "Select date"
            },
            true,
            ""
          ));
          action(input_2, ($$node, $$action_arg) => get(setAttribute)($$node, $$action_arg), attribute);
          append($$anchor3, input_2);
        },
        ($$anchor3) => {
          var input_3 = root_45();
          remove_input_attr_defaults(input_3);
          let attributes_1;
          render_effect(() => attributes_1 = set_attributes(
            input_3,
            attributes_1,
            {
              ...$$restProps,
              datepicker: true,
              "datepicker-format": datepickerFormat(),
              "datepicker-orientation": datepickerOrientation(),
              "datepicker-title": datepickerTitle(),
              type: "text",
              class: inputClass2(),
              placeholder: "Select date"
            },
            true,
            ""
          ));
          action(input_3, ($$node, $$action_arg) => get(setAttribute)($$node, $$action_arg), attribute);
          append($$anchor3, input_3);
        }
      );
      var node_6 = sibling(sibling(node_5, true));
      slot(node_6, $$props.children, {}, null);
      append($$anchor2, div_5);
    }
  );
  append($$anchor, fragment_1);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Datepicker);
  Datepicker = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Datepicker_default = Datepicker;
Datepicker.filename = ".../dist/datepicker/Datepicker.svelte";
mark_module_end(Datepicker);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/device-mockups/Android.svelte
mark_module_start();
var root17 = template(`<div><div></div> <div></div> <div></div> <div></div> <div></div> <div><!></div></div>`);
function Android($$anchor, $$props) {
  if (new.target === Android)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  push($$props, false, Android);
  let div = prop($$props, "div", 0, "relative mx-auto border-gray-800 dark:border-gray-800 bg-gray-800 border-[14px] rounded-xl h-[600px] w-[300px] shadow-xl");
  let slot2 = prop($$props, "slot", 0, "rounded-xl overflow-hidden w-[272px] h-[572px] bg-white dark:bg-gray-800");
  let top = prop($$props, "top", 0, "w-[148px] h-[18px] bg-gray-800 top-0 rounded-b-[1rem] left-1/2 -translate-x-1/2 absolute");
  let leftTop = prop($$props, "leftTop", 0, "h-[32px] w-[3px] bg-gray-800 absolute -left-[17px] top-[72px] rounded-l-lg");
  let leftMid = prop($$props, "leftMid", 0, "h-[46px] w-[3px] bg-gray-800 absolute -left-[17px] top-[124px] rounded-l-lg");
  let leftBot = prop($$props, "leftBot", 0, "h-[46px] w-[3px] bg-gray-800 absolute -left-[17px] top-[178px] rounded-l-lg");
  let right = prop($$props, "right", 0, "h-[64px] w-[3px] bg-gray-800 absolute -right-[17px] top-[142px] rounded-r-lg");
  init();
  var div_1 = root17();
  render_effect(() => set_class(div_1, twMerge(div(), $$sanitized_props.class)));
  var div_2 = child(div_1);
  render_effect(() => set_class(div_2, twMerge(top(), $$sanitized_props.classTop)));
  var div_3 = sibling(sibling(div_2, true));
  render_effect(() => set_class(div_3, twMerge(leftTop(), $$sanitized_props.classLeftTop)));
  var div_4 = sibling(sibling(div_3, true));
  render_effect(() => set_class(div_4, twMerge(leftMid(), $$sanitized_props.classLeftMid)));
  var div_5 = sibling(sibling(div_4, true));
  render_effect(() => set_class(div_5, twMerge(leftBot(), $$sanitized_props.classLeftBot)));
  var div_6 = sibling(sibling(div_5, true));
  render_effect(() => set_class(div_6, twMerge(right(), $$sanitized_props.classRight)));
  var div_7 = sibling(sibling(div_6, true));
  render_effect(() => set_class(div_7, twMerge(slot2(), $$sanitized_props.classSlot)));
  var node = child(div_7);
  slot(node, $$props.children, {}, null);
  append($$anchor, div_1);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Android);
  Android = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Android_default = Android;
Android.filename = ".../dist/device-mockups/Android.svelte";
mark_module_end(Android);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/device-mockups/DefaultMockup.svelte
mark_module_start();
var root18 = template(`<div><div></div> <div></div> <div></div> <div></div> <div><!></div></div>`);
function DefaultMockup($$anchor, $$props) {
  if (new.target === DefaultMockup)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  push($$props, false, DefaultMockup);
  let div = prop($$props, "div", 0, "relative mx-auto border-gray-800 dark:border-gray-800 bg-gray-800 border-[14px] rounded-[2.5rem] h-[600px] w-[300px]");
  let slot2 = prop($$props, "slot", 0, "rounded-[2rem] overflow-hidden w-[272px] h-[572px] bg-white dark:bg-gray-800");
  let top = prop($$props, "top", 0, "h-[32px] w-[3px] bg-gray-800 dark:bg-gray-800 absolute -left-[17px] top-[72px] rounded-l-lg");
  let leftTop = prop($$props, "leftTop", 0, "h-[46px] w-[3px] bg-gray-800 dark:bg-gray-800 absolute -left-[17px] top-[124px] rounded-l-lg");
  let leftBot = prop($$props, "leftBot", 0, "h-[46px] w-[3px] bg-gray-800 dark:bg-gray-800 absolute -left-[17px] top-[178px] rounded-l-lg");
  let right = prop($$props, "right", 0, "h-[64px] w-[3px] bg-gray-800 dark:bg-gray-800 absolute -right-[17px] top-[142px] rounded-r-lg");
  init();
  var div_1 = root18();
  render_effect(() => set_class(div_1, twMerge(div(), $$sanitized_props.class)));
  var div_2 = child(div_1);
  render_effect(() => set_class(div_2, twMerge(top(), $$sanitized_props.classTop)));
  var div_3 = sibling(sibling(div_2, true));
  render_effect(() => set_class(div_3, twMerge(leftTop(), $$sanitized_props.classLeftTop)));
  var div_4 = sibling(sibling(div_3, true));
  render_effect(() => set_class(div_4, twMerge(leftBot(), $$sanitized_props.classLeftBot)));
  var div_5 = sibling(sibling(div_4, true));
  render_effect(() => set_class(div_5, twMerge(right(), $$sanitized_props.classRight)));
  var div_6 = sibling(sibling(div_5, true));
  render_effect(() => set_class(div_6, twMerge(slot2(), $$sanitized_props.classSlot)));
  var node = child(div_6);
  slot(node, $$props.children, {}, null);
  append($$anchor, div_1);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(DefaultMockup);
  DefaultMockup = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var DefaultMockup_default = DefaultMockup;
DefaultMockup.filename = ".../dist/device-mockups/DefaultMockup.svelte";
mark_module_end(DefaultMockup);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/device-mockups/Desktop.svelte
mark_module_start();
var root19 = template(`<div><div><!></div></div> <div></div> <div></div>`, 1);
function Desktop($$anchor, $$props) {
  if (new.target === Desktop)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  push($$props, false, Desktop);
  let inner = prop($$props, "inner", 0, "rounded-xl overflow-hidden h-[140px] md:h-[262px]");
  let bot = prop($$props, "bot", 0, "relative mx-auto bg-gray-900 dark:bg-gray-700 rounded-b-xl h-[24px] max-w-[301px] md:h-[42px] md:max-w-[512px]");
  let botUnder = prop($$props, "botUnder", 0, "relative mx-auto bg-gray-800 rounded-b-xl h-[55px] max-w-[83px] md:h-[95px] md:max-w-[142px]");
  let div = prop($$props, "div", 0, "relative mx-auto border-gray-800 dark:border-gray-800 bg-gray-800 border-[16px] rounded-t-xl h-[172px] max-w-[301px] md:h-[294px] md:max-w-[512px]");
  init();
  var fragment = root19();
  var div_1 = first_child(fragment);
  render_effect(() => set_class(div_1, twMerge(div(), $$sanitized_props.class)));
  var div_2 = child(div_1);
  render_effect(() => set_class(div_2, twMerge(inner(), $$sanitized_props.classInner)));
  var node = child(div_2);
  slot(node, $$props.children, {}, null);
  var div_3 = sibling(sibling(div_1, true));
  render_effect(() => set_class(div_3, twMerge(bot(), $$sanitized_props.classBot)));
  var div_4 = sibling(sibling(div_3, true));
  render_effect(() => set_class(div_4, twMerge(botUnder(), $$sanitized_props.classBotUnder)));
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Desktop);
  Desktop = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Desktop_default = Desktop;
Desktop.filename = ".../dist/device-mockups/Desktop.svelte";
mark_module_end(Desktop);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/device-mockups/Ios.svelte
mark_module_start();
var root20 = template(`<div><div></div> <div></div> <div></div> <div></div> <div><!></div></div>`);
function Ios($$anchor, $$props) {
  if (new.target === Ios)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  push($$props, false, Ios);
  let div = prop($$props, "div", 0, "relative mx-auto border-gray-800 dark:border-gray-800 bg-gray-800 border-[14px] rounded-[2.5rem] h-[600px] w-[300px] shadow-xl");
  let slot2 = prop($$props, "slot", 0, "rounded-[2rem] overflow-hidden w-[272px] h-[572px] bg-white dark:bg-gray-800");
  let top = prop($$props, "top", 0, "w-[148px] h-[18px] bg-gray-800 top-0 rounded-b-[1rem] left-1/2 -translate-x-1/2 absolute");
  let leftTop = prop($$props, "leftTop", 0, "h-[46px] w-[3px] bg-gray-800 absolute -left-[17px] top-[124px] rounded-l-lg");
  let leftBot = prop($$props, "leftBot", 0, "h-[46px] w-[3px] bg-gray-800 absolute -left-[17px] top-[178px] rounded-l-lg");
  let right = prop($$props, "right", 0, "h-[64px] w-[3px] bg-gray-800 absolute -right-[17px] top-[142px] rounded-r-lg");
  init();
  var div_1 = root20();
  render_effect(() => set_class(div_1, twMerge(div(), $$sanitized_props.class)));
  var div_2 = child(div_1);
  render_effect(() => set_class(div_2, twMerge(top(), $$sanitized_props.classTop)));
  var div_3 = sibling(sibling(div_2, true));
  render_effect(() => set_class(div_3, twMerge(leftTop(), $$sanitized_props.classLeftTop)));
  var div_4 = sibling(sibling(div_3, true));
  render_effect(() => set_class(div_4, twMerge(leftBot(), $$sanitized_props.classLeftBot)));
  var div_5 = sibling(sibling(div_4, true));
  render_effect(() => set_class(div_5, twMerge(right(), $$sanitized_props.classRight)));
  var div_6 = sibling(sibling(div_5, true));
  render_effect(() => set_class(div_6, twMerge(slot2(), $$sanitized_props.classSlot)));
  var node = child(div_6);
  slot(node, $$props.children, {}, null);
  append($$anchor, div_1);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Ios);
  Ios = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Ios_default = Ios;
Ios.filename = ".../dist/device-mockups/Ios.svelte";
mark_module_end(Ios);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/device-mockups/Laptop.svelte
mark_module_start();
var root21 = template(`<div><div><!></div></div> <div><div></div></div>`, 1);
function Laptop($$anchor, $$props) {
  if (new.target === Laptop)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  push($$props, false, Laptop);
  let div = prop($$props, "div", 0, "relative mx-auto border-gray-800 dark:border-gray-800 bg-gray-800 border-[8px] rounded-t-xl h-[172px] max-w-[301px] md:h-[294px] md:max-w-[512px]");
  let inner = prop($$props, "inner", 0, "rounded-lg overflow-hidden h-[156px] md:h-[278px] bg-white dark:bg-gray-800");
  let bot = prop($$props, "bot", 0, "relative mx-auto bg-gray-900 dark:bg-gray-700 rounded-b-xl rounded-t-sm h-[17px] max-w-[351px] md:h-[21px] md:max-w-[597px]");
  let botCen = prop($$props, "botCen", 0, "absolute left-1/2 top-0 -translate-x-1/2 rounded-b-xl w-[56px] h-[5px] md:w-[96px] md:h-[8px] bg-gray-800");
  init();
  var fragment = root21();
  var div_1 = first_child(fragment);
  render_effect(() => set_class(div_1, twMerge(div(), $$sanitized_props.class)));
  var div_2 = child(div_1);
  render_effect(() => set_class(div_2, twMerge(inner(), $$sanitized_props.classInner)));
  var node = child(div_2);
  slot(node, $$props.children, {}, null);
  var div_3 = sibling(sibling(div_1, true));
  render_effect(() => set_class(div_3, twMerge(bot(), $$sanitized_props.classBot)));
  var div_4 = child(div_3);
  render_effect(() => set_class(div_4, twMerge(botCen(), $$sanitized_props.classBotCen)));
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Laptop);
  Laptop = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Laptop_default = Laptop;
Laptop.filename = ".../dist/device-mockups/Laptop.svelte";
mark_module_end(Laptop);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/device-mockups/Smartwatch.svelte
mark_module_start();
var root22 = template(`<div></div> <div><div></div> <div></div> <div><!></div></div> <div></div>`, 1);
function Smartwatch($$anchor, $$props) {
  if (new.target === Smartwatch)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  push($$props, false, Smartwatch);
  let div = prop($$props, "div", 0, "relative mx-auto bg-gray-800 dark:bg-gray-700 rounded-t-[2.5rem] h-[63px] max-w-[133px]");
  let slot2 = prop($$props, "slot", 0, "rounded-[2rem] overflow-hidden h-[193px] w-[188px]");
  let rightTop = prop($$props, "rightTop", 0, "h-[41px] w-[6px] bg-gray-800 dark:bg-gray-800 absolute -right-[16px] top-[40px] rounded-r-lg");
  let rightBot = prop($$props, "rightBot", 0, "h-[32px] w-[6px] bg-gray-800 dark:bg-gray-800 absolute -right-[16px] top-[88px] rounded-r-lg");
  let top = prop($$props, "top", 0, "relative mx-auto border-gray-900 dark:bg-gray-800 dark:border-gray-800 border-[10px] rounded-[2.5rem] h-[213px] w-[208px]");
  let bot = prop($$props, "bot", 0, "relative mx-auto bg-gray-800 dark:bg-gray-700 rounded-b-[2.5rem] h-[63px] max-w-[133px]");
  init();
  var fragment = root22();
  var div_1 = first_child(fragment);
  render_effect(() => set_class(div_1, twMerge(div(), $$sanitized_props.class)));
  var div_2 = sibling(sibling(div_1, true));
  render_effect(() => set_class(div_2, twMerge(top(), $$sanitized_props.classTop)));
  var div_3 = child(div_2);
  render_effect(() => set_class(div_3, twMerge(rightTop(), $$sanitized_props.classRightTop)));
  var div_4 = sibling(sibling(div_3, true));
  render_effect(() => set_class(div_4, twMerge(rightBot(), $$sanitized_props.classRightBot)));
  var div_5 = sibling(sibling(div_4, true));
  render_effect(() => set_class(div_5, twMerge(slot2(), $$sanitized_props.classSlot)));
  var node = child(div_5);
  slot(node, $$props.children, {}, null);
  var div_6 = sibling(sibling(div_2, true));
  render_effect(() => set_class(div_6, twMerge(bot(), $$sanitized_props.classBot)));
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Smartwatch);
  Smartwatch = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Smartwatch_default = Smartwatch;
Smartwatch.filename = ".../dist/device-mockups/Smartwatch.svelte";
mark_module_end(Smartwatch);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/device-mockups/Tablet.svelte
mark_module_start();
var root23 = template(`<div><div></div> <div></div> <div></div> <div></div> <div><!></div></div>`);
function Tablet($$anchor, $$props) {
  if (new.target === Tablet)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  push($$props, false, Tablet);
  let div = prop($$props, "div", 0, "relative mx-auto border-gray-800 dark:border-gray-800 bg-gray-800 border-[14px] rounded-[2.5rem] h-[454px] max-w-[341px] md:h-[682px] md:max-w-[512px]");
  let slot2 = prop($$props, "slot", 0, "rounded-[2rem] overflow-hidden h-[426px] md:h-[654px] bg-white dark:bg-gray-800");
  let leftTop = prop($$props, "leftTop", 0, "h-[32px] w-[3px] bg-gray-800 dark:bg-gray-800 absolute -left-[17px] top-[72px] rounded-l-lg");
  let leftMid = prop($$props, "leftMid", 0, "h-[46px] w-[3px] bg-gray-800 dark:bg-gray-800 absolute -left-[17px] top-[124px] rounded-l-lg");
  let leftBot = prop($$props, "leftBot", 0, "h-[46px] w-[3px] bg-gray-800 dark:bg-gray-800 absolute -left-[17px] top-[178px] rounded-l-lg");
  let right = prop($$props, "right", 0, "h-[64px] w-[3px] bg-gray-800 dark:bg-gray-800 absolute -right-[17px] top-[142px] rounded-r-lg");
  init();
  var div_1 = root23();
  render_effect(() => set_class(div_1, twMerge(div(), $$sanitized_props.class)));
  var div_2 = child(div_1);
  render_effect(() => set_class(div_2, twMerge(leftTop(), $$sanitized_props.classLeftTop)));
  var div_3 = sibling(sibling(div_2, true));
  render_effect(() => set_class(div_3, twMerge(leftMid(), $$sanitized_props.classLeftMid)));
  var div_4 = sibling(sibling(div_3, true));
  render_effect(() => set_class(div_4, twMerge(leftBot(), $$sanitized_props.classLeftBot)));
  var div_5 = sibling(sibling(div_4, true));
  render_effect(() => set_class(div_5, twMerge(right(), $$sanitized_props.classRight)));
  var div_6 = sibling(sibling(div_5, true));
  render_effect(() => set_class(div_6, twMerge(slot2(), $$sanitized_props.classSlot)));
  var node = child(div_6);
  slot(node, $$props.children, {}, null);
  append($$anchor, div_1);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Tablet);
  Tablet = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Tablet_default = Tablet;
Tablet.filename = ".../dist/device-mockups/Tablet.svelte";
mark_module_end(Tablet);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/device-mockups/DeviceMockup.svelte
mark_module_start();
var root_28 = template(`<div class="border p-3 text-xl">Unknow device</div>`);
function DeviceMockup($$anchor, $$props) {
  if (new.target === DeviceMockup)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, false, DeviceMockup);
  let device = prop($$props, "device", 0, "default");
  const componets = {
    android: Android_default,
    ios: Ios_default,
    tablet: Tablet_default,
    default: DefaultMockup_default,
    smartwatch: Smartwatch_default,
    laptop: Laptop_default,
    desktop: Desktop_default
  };
  let component2 = mutable_source();
  legacy_pre_effect(() => deep_read_state(device()), () => {
    set(component2, componets[device()]);
  });
  legacy_pre_effect_reset();
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    () => get(component2),
    ($$anchor2) => {
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      component(node_1, () => get(component2), ($$component) => {
        validate_dynamic_component(() => {
          validate_component($$component)(node_1, {
            children: wrap_snippet(($$anchor3, $$slotProps) => {
              var fragment_2 = comment();
              var node_2 = first_child(fragment_2);
              slot(node_2, $$props.children, {}, null);
              append($$anchor3, fragment_2);
            })
          });
        });
      });
      append($$anchor2, fragment_1);
    },
    ($$anchor2) => {
      var div = root_28();
      append($$anchor2, div);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(DeviceMockup);
  DeviceMockup = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var DeviceMockup_default = DeviceMockup;
DeviceMockup.filename = ".../dist/device-mockups/DeviceMockup.svelte";
mark_module_end(DeviceMockup);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/utils/clickOutside.js
var clickOutside = (node, callback) => {
  const handleClick = (event2) => {
    if (!(event2 == null ? void 0 : event2.target))
      return;
    if (node && !node.contains(event2.target) && !event2.defaultPrevented) {
      callback();
    }
  };
  document.addEventListener("click", handleClick, true);
  return {
    destroy() {
      document.removeEventListener("click", handleClick, true);
    }
  };
};

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/drawer/Drawer.svelte
mark_module_start();
var root_29 = template(`<div role="presentation"></div>`);
var root_46 = template(`<div role="presentation"></div>`);
var root_19 = template(`<!> <div><!></div>`, 1);
function Drawer($$anchor, $$props) {
  if (new.target === Drawer)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "activateClickOutside",
    "hidden",
    "position",
    "leftOffset",
    "rightOffset",
    "topOffset",
    "bottomOffset",
    "width",
    "backdrop",
    "bgColor",
    "bgOpacity",
    "placement",
    "id",
    "divClass",
    "transitionParams",
    "transitionType"
  ]);
  push($$props, false, Drawer);
  let activateClickOutside = prop($$props, "activateClickOutside", 0, true);
  let hidden = prop($$props, "hidden", 4, true);
  let position = prop($$props, "position", 0, "fixed");
  let leftOffset = prop($$props, "leftOffset", 0, "inset-y-0 start-0");
  let rightOffset = prop($$props, "rightOffset", 0, "inset-y-0 end-0");
  let topOffset = prop($$props, "topOffset", 0, "inset-x-0 top-0");
  let bottomOffset = prop($$props, "bottomOffset", 0, "inset-x-0 bottom-0");
  let width = prop($$props, "width", 0, "w-80");
  let backdrop = prop($$props, "backdrop", 0, true);
  let bgColor = prop($$props, "bgColor", 0, "bg-gray-900");
  let bgOpacity = prop($$props, "bgOpacity", 0, "bg-opacity-75");
  let placement = prop($$props, "placement", 0, "left");
  let id = prop($$props, "id", 0, "drawer-example");
  let divClass = prop($$props, "divClass", 0, "overflow-y-auto z-50 p-4 bg-white dark:bg-gray-800");
  let transitionParams = prop($$props, "transitionParams", 8, () => ({}));
  let transitionType = prop($$props, "transitionType", 0, "fly");
  function multiple(node, params) {
    switch (transitionType()) {
      case "slide":
        return slide(node, params);
      case "blur":
        return blur(node, params);
      case "fade":
        return fade(node, params);
      default:
        return fly(node, params);
    }
  }
  const placements2 = {
    left: leftOffset(),
    right: rightOffset(),
    top: topOffset(),
    bottom: bottomOffset()
  };
  const handleDrawer = () => {
    hidden(!hidden());
  };
  const handleClickOutside = () => activateClickOutside() && !hidden() && handleDrawer();
  let backdropDivClass = twMerge("fixed top-0 start-0 z-50 w-full h-full", backdrop() && bgColor(), backdrop() && bgOpacity());
  function clickOutsideWrapper(node, callback) {
    return activateClickOutside() ? clickOutside(node, callback) : void 0;
  }
  init();
  var fragment = comment();
  var node_1 = first_child(fragment);
  if_block(node_1, () => !hidden(), ($$anchor2) => {
    var fragment_1 = root_19();
    var node_2 = first_child(fragment_1);
    if_block(
      node_2,
      () => backdrop() && activateClickOutside(),
      ($$anchor3) => {
        var div = root_29();
        set_class(div, backdropDivClass);
        event("click", div, () => !hidden() && handleDrawer(), false);
        append($$anchor3, div);
      },
      ($$anchor3) => {
        var fragment_2 = comment();
        var node_3 = first_child(fragment_2);
        if_block(
          node_3,
          () => backdrop() && !activateClickOutside(),
          ($$anchor4) => {
            var div_1 = root_46();
            set_class(div_1, backdropDivClass);
            append($$anchor4, div_1);
          },
          null,
          true
        );
        append($$anchor3, fragment_2);
      }
    );
    var div_2 = sibling(sibling(node_2, true));
    transition(3, div_2, () => multiple, transitionParams);
    let attributes;
    var node_4 = child(div_2);
    slot(
      node_4,
      $$props.children,
      {
        get hidden() {
          return hidden();
        }
      },
      null
    );
    render_effect(() => attributes = set_attributes(
      div_2,
      attributes,
      {
        id: id(),
        ...$$restProps,
        class: twMerge(divClass(), width(), position(), placements2[placement()], $$sanitized_props.class),
        tabindex: "-1",
        "aria-controls": id(),
        "aria-labelledby": id()
      },
      true,
      ""
    ));
    action(div_2, ($$node, $$action_arg) => clickOutsideWrapper($$node, $$action_arg), () => handleClickOutside);
    append($$anchor2, fragment_1);
  });
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Drawer);
  Drawer = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Drawer_default = Drawer;
Drawer.filename = ".../dist/drawer/Drawer.svelte";
mark_module_end(Drawer);

// node_modules/.pnpm/@floating-ui+utils@0.2.2/node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs
var sides = ["top", "right", "bottom", "left"];
var alignments = ["start", "end"];
var placements = sides.reduce((acc, side) => acc.concat(side, side + "-" + alignments[0], side + "-" + alignments[1]), []);
var min = Math.min;
var max = Math.max;
var round = Math.round;
var floor = Math.floor;
var createCoords = (v) => ({
  x: v,
  y: v
});
var oppositeSideMap = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
var oppositeAlignmentMap = {
  start: "end",
  end: "start"
};
function clamp(start, value, end) {
  return max(start, min(value, end));
}
function evaluate(value, param) {
  return typeof value === "function" ? value(param) : value;
}
function getSide(placement) {
  return placement.split("-")[0];
}
function getAlignment(placement) {
  return placement.split("-")[1];
}
function getOppositeAxis(axis) {
  return axis === "x" ? "y" : "x";
}
function getAxisLength(axis) {
  return axis === "y" ? "height" : "width";
}
function getSideAxis(placement) {
  return ["top", "bottom"].includes(getSide(placement)) ? "y" : "x";
}
function getAlignmentAxis(placement) {
  return getOppositeAxis(getSideAxis(placement));
}
function getAlignmentSides(placement, rects, rtl) {
  if (rtl === void 0) {
    rtl = false;
  }
  const alignment = getAlignment(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const length = getAxisLength(alignmentAxis);
  let mainAlignmentSide = alignmentAxis === "x" ? alignment === (rtl ? "end" : "start") ? "right" : "left" : alignment === "start" ? "bottom" : "top";
  if (rects.reference[length] > rects.floating[length]) {
    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);
  }
  return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];
}
function getExpandedPlacements(placement) {
  const oppositePlacement = getOppositePlacement(placement);
  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];
}
function getOppositeAlignmentPlacement(placement) {
  return placement.replace(/start|end/g, (alignment) => oppositeAlignmentMap[alignment]);
}
function getSideList(side, isStart, rtl) {
  const lr = ["left", "right"];
  const rl = ["right", "left"];
  const tb = ["top", "bottom"];
  const bt = ["bottom", "top"];
  switch (side) {
    case "top":
    case "bottom":
      if (rtl)
        return isStart ? rl : lr;
      return isStart ? lr : rl;
    case "left":
    case "right":
      return isStart ? tb : bt;
    default:
      return [];
  }
}
function getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {
  const alignment = getAlignment(placement);
  let list = getSideList(getSide(placement), direction === "start", rtl);
  if (alignment) {
    list = list.map((side) => side + "-" + alignment);
    if (flipAlignment) {
      list = list.concat(list.map(getOppositeAlignmentPlacement));
    }
  }
  return list;
}
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, (side) => oppositeSideMap[side]);
}
function expandPaddingObject(padding) {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    ...padding
  };
}
function getPaddingObject(padding) {
  return typeof padding !== "number" ? expandPaddingObject(padding) : {
    top: padding,
    right: padding,
    bottom: padding,
    left: padding
  };
}
function rectToClientRect(rect) {
  const {
    x,
    y,
    width,
    height
  } = rect;
  return {
    width,
    height,
    top: y,
    left: x,
    right: x + width,
    bottom: y + height,
    x,
    y
  };
}

// node_modules/.pnpm/@floating-ui+core@1.6.1/node_modules/@floating-ui/core/dist/floating-ui.core.mjs
function computeCoordsFromPlacement(_ref, placement, rtl) {
  let {
    reference,
    floating
  } = _ref;
  const sideAxis = getSideAxis(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const alignLength = getAxisLength(alignmentAxis);
  const side = getSide(placement);
  const isVertical = sideAxis === "y";
  const commonX = reference.x + reference.width / 2 - floating.width / 2;
  const commonY = reference.y + reference.height / 2 - floating.height / 2;
  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;
  let coords;
  switch (side) {
    case "top":
      coords = {
        x: commonX,
        y: reference.y - floating.height
      };
      break;
    case "bottom":
      coords = {
        x: commonX,
        y: reference.y + reference.height
      };
      break;
    case "right":
      coords = {
        x: reference.x + reference.width,
        y: commonY
      };
      break;
    case "left":
      coords = {
        x: reference.x - floating.width,
        y: commonY
      };
      break;
    default:
      coords = {
        x: reference.x,
        y: reference.y
      };
  }
  switch (getAlignment(placement)) {
    case "start":
      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
      break;
    case "end":
      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
      break;
  }
  return coords;
}
var computePosition = async (reference, floating, config) => {
  const {
    placement = "bottom",
    strategy = "absolute",
    middleware = [],
    platform: platform2
  } = config;
  const validMiddleware = middleware.filter(Boolean);
  const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(floating));
  let rects = await platform2.getElementRects({
    reference,
    floating,
    strategy
  });
  let {
    x,
    y
  } = computeCoordsFromPlacement(rects, placement, rtl);
  let statefulPlacement = placement;
  let middlewareData = {};
  let resetCount = 0;
  for (let i = 0; i < validMiddleware.length; i++) {
    const {
      name,
      fn
    } = validMiddleware[i];
    const {
      x: nextX,
      y: nextY,
      data,
      reset
    } = await fn({
      x,
      y,
      initialPlacement: placement,
      placement: statefulPlacement,
      strategy,
      middlewareData,
      rects,
      platform: platform2,
      elements: {
        reference,
        floating
      }
    });
    x = nextX != null ? nextX : x;
    y = nextY != null ? nextY : y;
    middlewareData = {
      ...middlewareData,
      [name]: {
        ...middlewareData[name],
        ...data
      }
    };
    if (reset && resetCount <= 50) {
      resetCount++;
      if (typeof reset === "object") {
        if (reset.placement) {
          statefulPlacement = reset.placement;
        }
        if (reset.rects) {
          rects = reset.rects === true ? await platform2.getElementRects({
            reference,
            floating,
            strategy
          }) : reset.rects;
        }
        ({
          x,
          y
        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));
      }
      i = -1;
    }
  }
  return {
    x,
    y,
    placement: statefulPlacement,
    strategy,
    middlewareData
  };
};
async function detectOverflow(state, options) {
  var _await$platform$isEle;
  if (options === void 0) {
    options = {};
  }
  const {
    x,
    y,
    platform: platform2,
    rects,
    elements,
    strategy
  } = state;
  const {
    boundary = "clippingAncestors",
    rootBoundary = "viewport",
    elementContext = "floating",
    altBoundary = false,
    padding = 0
  } = evaluate(options, state);
  const paddingObject = getPaddingObject(padding);
  const altContext = elementContext === "floating" ? "reference" : "floating";
  const element2 = elements[altBoundary ? altContext : elementContext];
  const clippingClientRect = rectToClientRect(await platform2.getClippingRect({
    element: ((_await$platform$isEle = await (platform2.isElement == null ? void 0 : platform2.isElement(element2))) != null ? _await$platform$isEle : true) ? element2 : element2.contextElement || await (platform2.getDocumentElement == null ? void 0 : platform2.getDocumentElement(elements.floating)),
    boundary,
    rootBoundary,
    strategy
  }));
  const rect = elementContext === "floating" ? {
    x,
    y,
    width: rects.floating.width,
    height: rects.floating.height
  } : rects.reference;
  const offsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(elements.floating));
  const offsetScale = await (platform2.isElement == null ? void 0 : platform2.isElement(offsetParent)) ? await (platform2.getScale == null ? void 0 : platform2.getScale(offsetParent)) || {
    x: 1,
    y: 1
  } : {
    x: 1,
    y: 1
  };
  const elementClientRect = rectToClientRect(platform2.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform2.convertOffsetParentRelativeRectToViewportRelativeRect({
    elements,
    rect,
    offsetParent,
    strategy
  }) : rect);
  return {
    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,
    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,
    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,
    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x
  };
}
var arrow = (options) => ({
  name: "arrow",
  options,
  async fn(state) {
    const {
      x,
      y,
      placement,
      rects,
      platform: platform2,
      elements,
      middlewareData
    } = state;
    const {
      element: element2,
      padding = 0
    } = evaluate(options, state) || {};
    if (element2 == null) {
      return {};
    }
    const paddingObject = getPaddingObject(padding);
    const coords = {
      x,
      y
    };
    const axis = getAlignmentAxis(placement);
    const length = getAxisLength(axis);
    const arrowDimensions = await platform2.getDimensions(element2);
    const isYAxis = axis === "y";
    const minProp = isYAxis ? "top" : "left";
    const maxProp = isYAxis ? "bottom" : "right";
    const clientProp = isYAxis ? "clientHeight" : "clientWidth";
    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];
    const startDiff = coords[axis] - rects.reference[axis];
    const arrowOffsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(element2));
    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;
    if (!clientSize || !await (platform2.isElement == null ? void 0 : platform2.isElement(arrowOffsetParent))) {
      clientSize = elements.floating[clientProp] || rects.floating[length];
    }
    const centerToReference = endDiff / 2 - startDiff / 2;
    const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;
    const minPadding = min(paddingObject[minProp], largestPossiblePadding);
    const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);
    const min$1 = minPadding;
    const max2 = clientSize - arrowDimensions[length] - maxPadding;
    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;
    const offset3 = clamp(min$1, center, max2);
    const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center !== offset3 && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;
    const alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max2 : 0;
    return {
      [axis]: coords[axis] + alignmentOffset,
      data: {
        [axis]: offset3,
        centerOffset: center - offset3 - alignmentOffset,
        ...shouldAddOffset && {
          alignmentOffset
        }
      },
      reset: shouldAddOffset
    };
  }
});
var flip = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "flip",
    options,
    async fn(state) {
      var _middlewareData$arrow, _middlewareData$flip;
      const {
        placement,
        middlewareData,
        rects,
        initialPlacement,
        platform: platform2,
        elements
      } = state;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = true,
        fallbackPlacements: specifiedFallbackPlacements,
        fallbackStrategy = "bestFit",
        fallbackAxisSideDirection = "none",
        flipAlignment = true,
        ...detectOverflowOptions
      } = evaluate(options, state);
      if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
        return {};
      }
      const side = getSide(placement);
      const isBasePlacement = getSide(initialPlacement) === initialPlacement;
      const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));
      if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== "none") {
        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));
      }
      const placements2 = [initialPlacement, ...fallbackPlacements];
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const overflows = [];
      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];
      if (checkMainAxis) {
        overflows.push(overflow[side]);
      }
      if (checkCrossAxis) {
        const sides2 = getAlignmentSides(placement, rects, rtl);
        overflows.push(overflow[sides2[0]], overflow[sides2[1]]);
      }
      overflowsData = [...overflowsData, {
        placement,
        overflows
      }];
      if (!overflows.every((side2) => side2 <= 0)) {
        var _middlewareData$flip2, _overflowsData$filter;
        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;
        const nextPlacement = placements2[nextIndex];
        if (nextPlacement) {
          return {
            data: {
              index: nextIndex,
              overflows: overflowsData
            },
            reset: {
              placement: nextPlacement
            }
          };
        }
        let resetPlacement = (_overflowsData$filter = overflowsData.filter((d) => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;
        if (!resetPlacement) {
          switch (fallbackStrategy) {
            case "bestFit": {
              var _overflowsData$map$so;
              const placement2 = (_overflowsData$map$so = overflowsData.map((d) => [d.placement, d.overflows.filter((overflow2) => overflow2 > 0).reduce((acc, overflow2) => acc + overflow2, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$map$so[0];
              if (placement2) {
                resetPlacement = placement2;
              }
              break;
            }
            case "initialPlacement":
              resetPlacement = initialPlacement;
              break;
          }
        }
        if (placement !== resetPlacement) {
          return {
            reset: {
              placement: resetPlacement
            }
          };
        }
      }
      return {};
    }
  };
};
async function convertValueToCoords(state, options) {
  const {
    placement,
    platform: platform2,
    elements
  } = state;
  const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
  const side = getSide(placement);
  const alignment = getAlignment(placement);
  const isVertical = getSideAxis(placement) === "y";
  const mainAxisMulti = ["left", "top"].includes(side) ? -1 : 1;
  const crossAxisMulti = rtl && isVertical ? -1 : 1;
  const rawValue = evaluate(options, state);
  let {
    mainAxis,
    crossAxis,
    alignmentAxis
  } = typeof rawValue === "number" ? {
    mainAxis: rawValue,
    crossAxis: 0,
    alignmentAxis: null
  } : {
    mainAxis: 0,
    crossAxis: 0,
    alignmentAxis: null,
    ...rawValue
  };
  if (alignment && typeof alignmentAxis === "number") {
    crossAxis = alignment === "end" ? alignmentAxis * -1 : alignmentAxis;
  }
  return isVertical ? {
    x: crossAxis * crossAxisMulti,
    y: mainAxis * mainAxisMulti
  } : {
    x: mainAxis * mainAxisMulti,
    y: crossAxis * crossAxisMulti
  };
}
var offset = function(options) {
  if (options === void 0) {
    options = 0;
  }
  return {
    name: "offset",
    options,
    async fn(state) {
      var _middlewareData$offse, _middlewareData$arrow;
      const {
        x,
        y,
        placement,
        middlewareData
      } = state;
      const diffCoords = await convertValueToCoords(state, options);
      if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
        return {};
      }
      return {
        x: x + diffCoords.x,
        y: y + diffCoords.y,
        data: {
          ...diffCoords,
          placement
        }
      };
    }
  };
};
var shift = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "shift",
    options,
    async fn(state) {
      const {
        x,
        y,
        placement
      } = state;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = false,
        limiter = {
          fn: (_ref) => {
            let {
              x: x2,
              y: y2
            } = _ref;
            return {
              x: x2,
              y: y2
            };
          }
        },
        ...detectOverflowOptions
      } = evaluate(options, state);
      const coords = {
        x,
        y
      };
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const crossAxis = getSideAxis(getSide(placement));
      const mainAxis = getOppositeAxis(crossAxis);
      let mainAxisCoord = coords[mainAxis];
      let crossAxisCoord = coords[crossAxis];
      if (checkMainAxis) {
        const minSide = mainAxis === "y" ? "top" : "left";
        const maxSide = mainAxis === "y" ? "bottom" : "right";
        const min2 = mainAxisCoord + overflow[minSide];
        const max2 = mainAxisCoord - overflow[maxSide];
        mainAxisCoord = clamp(min2, mainAxisCoord, max2);
      }
      if (checkCrossAxis) {
        const minSide = crossAxis === "y" ? "top" : "left";
        const maxSide = crossAxis === "y" ? "bottom" : "right";
        const min2 = crossAxisCoord + overflow[minSide];
        const max2 = crossAxisCoord - overflow[maxSide];
        crossAxisCoord = clamp(min2, crossAxisCoord, max2);
      }
      const limitedCoords = limiter.fn({
        ...state,
        [mainAxis]: mainAxisCoord,
        [crossAxis]: crossAxisCoord
      });
      return {
        ...limitedCoords,
        data: {
          x: limitedCoords.x - x,
          y: limitedCoords.y - y
        }
      };
    }
  };
};

// node_modules/.pnpm/@floating-ui+utils@0.2.2/node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs
function getNodeName(node) {
  if (isNode(node)) {
    return (node.nodeName || "").toLowerCase();
  }
  return "#document";
}
function getWindow(node) {
  var _node$ownerDocument;
  return (node == null || (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
}
function getDocumentElement(node) {
  var _ref;
  return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;
}
function isNode(value) {
  return value instanceof Node || value instanceof getWindow(value).Node;
}
function isElement(value) {
  return value instanceof Element || value instanceof getWindow(value).Element;
}
function isHTMLElement(value) {
  return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;
}
function isShadowRoot(value) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;
}
function isOverflowElement(element2) {
  const {
    overflow,
    overflowX,
    overflowY,
    display
  } = getComputedStyle2(element2);
  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !["inline", "contents"].includes(display);
}
function isTableElement(element2) {
  return ["table", "td", "th"].includes(getNodeName(element2));
}
function isContainingBlock(element2) {
  const webkit = isWebKit();
  const css = getComputedStyle2(element2);
  return css.transform !== "none" || css.perspective !== "none" || (css.containerType ? css.containerType !== "normal" : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== "none" : false) || !webkit && (css.filter ? css.filter !== "none" : false) || ["transform", "perspective", "filter"].some((value) => (css.willChange || "").includes(value)) || ["paint", "layout", "strict", "content"].some((value) => (css.contain || "").includes(value));
}
function getContainingBlock(element2) {
  let currentNode = getParentNode(element2);
  while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {
    if (isContainingBlock(currentNode)) {
      return currentNode;
    }
    currentNode = getParentNode(currentNode);
  }
  return null;
}
function isWebKit() {
  if (typeof CSS === "undefined" || !CSS.supports)
    return false;
  return CSS.supports("-webkit-backdrop-filter", "none");
}
function isLastTraversableNode(node) {
  return ["html", "body", "#document"].includes(getNodeName(node));
}
function getComputedStyle2(element2) {
  return getWindow(element2).getComputedStyle(element2);
}
function getNodeScroll(element2) {
  if (isElement(element2)) {
    return {
      scrollLeft: element2.scrollLeft,
      scrollTop: element2.scrollTop
    };
  }
  return {
    scrollLeft: element2.pageXOffset,
    scrollTop: element2.pageYOffset
  };
}
function getParentNode(node) {
  if (getNodeName(node) === "html") {
    return node;
  }
  const result = (
    // Step into the shadow DOM of the parent of a slotted node.
    node.assignedSlot || // DOM Element detected.
    node.parentNode || // ShadowRoot detected.
    isShadowRoot(node) && node.host || // Fallback.
    getDocumentElement(node)
  );
  return isShadowRoot(result) ? result.host : result;
}
function getNearestOverflowAncestor(node) {
  const parentNode = getParentNode(node);
  if (isLastTraversableNode(parentNode)) {
    return node.ownerDocument ? node.ownerDocument.body : node.body;
  }
  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {
    return parentNode;
  }
  return getNearestOverflowAncestor(parentNode);
}
function getOverflowAncestors(node, list, traverseIframes) {
  var _node$ownerDocument2;
  if (list === void 0) {
    list = [];
  }
  if (traverseIframes === void 0) {
    traverseIframes = true;
  }
  const scrollableAncestor = getNearestOverflowAncestor(node);
  const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);
  const win = getWindow(scrollableAncestor);
  if (isBody) {
    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], win.frameElement && traverseIframes ? getOverflowAncestors(win.frameElement) : []);
  }
  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));
}

// node_modules/.pnpm/@floating-ui+dom@1.6.5/node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs
function getCssDimensions(element2) {
  const css = getComputedStyle2(element2);
  let width = parseFloat(css.width) || 0;
  let height = parseFloat(css.height) || 0;
  const hasOffset = isHTMLElement(element2);
  const offsetWidth = hasOffset ? element2.offsetWidth : width;
  const offsetHeight = hasOffset ? element2.offsetHeight : height;
  const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;
  if (shouldFallback) {
    width = offsetWidth;
    height = offsetHeight;
  }
  return {
    width,
    height,
    $: shouldFallback
  };
}
function unwrapElement(element2) {
  return !isElement(element2) ? element2.contextElement : element2;
}
function getScale(element2) {
  const domElement = unwrapElement(element2);
  if (!isHTMLElement(domElement)) {
    return createCoords(1);
  }
  const rect = domElement.getBoundingClientRect();
  const {
    width,
    height,
    $
  } = getCssDimensions(domElement);
  let x = ($ ? round(rect.width) : rect.width) / width;
  let y = ($ ? round(rect.height) : rect.height) / height;
  if (!x || !Number.isFinite(x)) {
    x = 1;
  }
  if (!y || !Number.isFinite(y)) {
    y = 1;
  }
  return {
    x,
    y
  };
}
var noOffsets = createCoords(0);
function getVisualOffsets(element2) {
  const win = getWindow(element2);
  if (!isWebKit() || !win.visualViewport) {
    return noOffsets;
  }
  return {
    x: win.visualViewport.offsetLeft,
    y: win.visualViewport.offsetTop
  };
}
function shouldAddVisualOffsets(element2, isFixed, floatingOffsetParent) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element2)) {
    return false;
  }
  return isFixed;
}
function getBoundingClientRect(element2, includeScale, isFixedStrategy, offsetParent) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  const clientRect = element2.getBoundingClientRect();
  const domElement = unwrapElement(element2);
  let scale = createCoords(1);
  if (includeScale) {
    if (offsetParent) {
      if (isElement(offsetParent)) {
        scale = getScale(offsetParent);
      }
    } else {
      scale = getScale(element2);
    }
  }
  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);
  let x = (clientRect.left + visualOffsets.x) / scale.x;
  let y = (clientRect.top + visualOffsets.y) / scale.y;
  let width = clientRect.width / scale.x;
  let height = clientRect.height / scale.y;
  if (domElement) {
    const win = getWindow(domElement);
    const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;
    let currentWin = win;
    let currentIFrame = currentWin.frameElement;
    while (currentIFrame && offsetParent && offsetWin !== currentWin) {
      const iframeScale = getScale(currentIFrame);
      const iframeRect = currentIFrame.getBoundingClientRect();
      const css = getComputedStyle2(currentIFrame);
      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;
      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;
      x *= iframeScale.x;
      y *= iframeScale.y;
      width *= iframeScale.x;
      height *= iframeScale.y;
      x += left;
      y += top;
      currentWin = getWindow(currentIFrame);
      currentIFrame = currentWin.frameElement;
    }
  }
  return rectToClientRect({
    width,
    height,
    x,
    y
  });
}
var topLayerSelectors = [":popover-open", ":modal"];
function isTopLayer(element2) {
  return topLayerSelectors.some((selector) => {
    try {
      return element2.matches(selector);
    } catch (e) {
      return false;
    }
  });
}
function convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {
  let {
    elements,
    rect,
    offsetParent,
    strategy
  } = _ref;
  const isFixed = strategy === "fixed";
  const documentElement = getDocumentElement(offsetParent);
  const topLayer = elements ? isTopLayer(elements.floating) : false;
  if (offsetParent === documentElement || topLayer && isFixed) {
    return rect;
  }
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  let scale = createCoords(1);
  const offsets = createCoords(0);
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      const offsetRect = getBoundingClientRect(offsetParent);
      scale = getScale(offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    }
  }
  return {
    width: rect.width * scale.x,
    height: rect.height * scale.y,
    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x,
    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y
  };
}
function getClientRects(element2) {
  return Array.from(element2.getClientRects());
}
function getWindowScrollBarX(element2) {
  return getBoundingClientRect(getDocumentElement(element2)).left + getNodeScroll(element2).scrollLeft;
}
function getDocumentRect(element2) {
  const html2 = getDocumentElement(element2);
  const scroll = getNodeScroll(element2);
  const body = element2.ownerDocument.body;
  const width = max(html2.scrollWidth, html2.clientWidth, body.scrollWidth, body.clientWidth);
  const height = max(html2.scrollHeight, html2.clientHeight, body.scrollHeight, body.clientHeight);
  let x = -scroll.scrollLeft + getWindowScrollBarX(element2);
  const y = -scroll.scrollTop;
  if (getComputedStyle2(body).direction === "rtl") {
    x += max(html2.clientWidth, body.clientWidth) - width;
  }
  return {
    width,
    height,
    x,
    y
  };
}
function getViewportRect(element2, strategy) {
  const win = getWindow(element2);
  const html2 = getDocumentElement(element2);
  const visualViewport = win.visualViewport;
  let width = html2.clientWidth;
  let height = html2.clientHeight;
  let x = 0;
  let y = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    const visualViewportBased = isWebKit();
    if (!visualViewportBased || visualViewportBased && strategy === "fixed") {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x,
    y
  };
}
function getInnerBoundingClientRect(element2, strategy) {
  const clientRect = getBoundingClientRect(element2, true, strategy === "fixed");
  const top = clientRect.top + element2.clientTop;
  const left = clientRect.left + element2.clientLeft;
  const scale = isHTMLElement(element2) ? getScale(element2) : createCoords(1);
  const width = element2.clientWidth * scale.x;
  const height = element2.clientHeight * scale.y;
  const x = left * scale.x;
  const y = top * scale.y;
  return {
    width,
    height,
    x,
    y
  };
}
function getClientRectFromClippingAncestor(element2, clippingAncestor, strategy) {
  let rect;
  if (clippingAncestor === "viewport") {
    rect = getViewportRect(element2, strategy);
  } else if (clippingAncestor === "document") {
    rect = getDocumentRect(getDocumentElement(element2));
  } else if (isElement(clippingAncestor)) {
    rect = getInnerBoundingClientRect(clippingAncestor, strategy);
  } else {
    const visualOffsets = getVisualOffsets(element2);
    rect = {
      ...clippingAncestor,
      x: clippingAncestor.x - visualOffsets.x,
      y: clippingAncestor.y - visualOffsets.y
    };
  }
  return rectToClientRect(rect);
}
function hasFixedPositionAncestor(element2, stopNode) {
  const parentNode = getParentNode(element2);
  if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {
    return false;
  }
  return getComputedStyle2(parentNode).position === "fixed" || hasFixedPositionAncestor(parentNode, stopNode);
}
function getClippingElementAncestors(element2, cache) {
  const cachedResult = cache.get(element2);
  if (cachedResult) {
    return cachedResult;
  }
  let result = getOverflowAncestors(element2, [], false).filter((el) => isElement(el) && getNodeName(el) !== "body");
  let currentContainingBlockComputedStyle = null;
  const elementIsFixed = getComputedStyle2(element2).position === "fixed";
  let currentNode = elementIsFixed ? getParentNode(element2) : element2;
  while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {
    const computedStyle = getComputedStyle2(currentNode);
    const currentNodeIsContaining = isContainingBlock(currentNode);
    if (!currentNodeIsContaining && computedStyle.position === "fixed") {
      currentContainingBlockComputedStyle = null;
    }
    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === "static" && !!currentContainingBlockComputedStyle && ["absolute", "fixed"].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element2, currentNode);
    if (shouldDropCurrentNode) {
      result = result.filter((ancestor) => ancestor !== currentNode);
    } else {
      currentContainingBlockComputedStyle = computedStyle;
    }
    currentNode = getParentNode(currentNode);
  }
  cache.set(element2, result);
  return result;
}
function getClippingRect(_ref) {
  let {
    element: element2,
    boundary,
    rootBoundary,
    strategy
  } = _ref;
  const elementClippingAncestors = boundary === "clippingAncestors" ? isTopLayer(element2) ? [] : getClippingElementAncestors(element2, this._c) : [].concat(boundary);
  const clippingAncestors = [...elementClippingAncestors, rootBoundary];
  const firstClippingAncestor = clippingAncestors[0];
  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
    const rect = getClientRectFromClippingAncestor(element2, clippingAncestor, strategy);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromClippingAncestor(element2, firstClippingAncestor, strategy));
  return {
    width: clippingRect.right - clippingRect.left,
    height: clippingRect.bottom - clippingRect.top,
    x: clippingRect.left,
    y: clippingRect.top
  };
}
function getDimensions(element2) {
  const {
    width,
    height
  } = getCssDimensions(element2);
  return {
    width,
    height
  };
}
function getRectRelativeToOffsetParent(element2, offsetParent, strategy) {
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  const documentElement = getDocumentElement(offsetParent);
  const isFixed = strategy === "fixed";
  const rect = getBoundingClientRect(element2, true, isFixed, offsetParent);
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  const offsets = createCoords(0);
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isOffsetParentAnElement) {
      const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  const x = rect.left + scroll.scrollLeft - offsets.x;
  const y = rect.top + scroll.scrollTop - offsets.y;
  return {
    x,
    y,
    width: rect.width,
    height: rect.height
  };
}
function isStaticPositioned(element2) {
  return getComputedStyle2(element2).position === "static";
}
function getTrueOffsetParent(element2, polyfill) {
  if (!isHTMLElement(element2) || getComputedStyle2(element2).position === "fixed") {
    return null;
  }
  if (polyfill) {
    return polyfill(element2);
  }
  return element2.offsetParent;
}
function getOffsetParent(element2, polyfill) {
  const win = getWindow(element2);
  if (isTopLayer(element2)) {
    return win;
  }
  if (!isHTMLElement(element2)) {
    let svgOffsetParent = getParentNode(element2);
    while (svgOffsetParent && !isLastTraversableNode(svgOffsetParent)) {
      if (isElement(svgOffsetParent) && !isStaticPositioned(svgOffsetParent)) {
        return svgOffsetParent;
      }
      svgOffsetParent = getParentNode(svgOffsetParent);
    }
    return win;
  }
  let offsetParent = getTrueOffsetParent(element2, polyfill);
  while (offsetParent && isTableElement(offsetParent) && isStaticPositioned(offsetParent)) {
    offsetParent = getTrueOffsetParent(offsetParent, polyfill);
  }
  if (offsetParent && isLastTraversableNode(offsetParent) && isStaticPositioned(offsetParent) && !isContainingBlock(offsetParent)) {
    return win;
  }
  return offsetParent || getContainingBlock(element2) || win;
}
var getElementRects = async function(data) {
  const getOffsetParentFn = this.getOffsetParent || getOffsetParent;
  const getDimensionsFn = this.getDimensions;
  const floatingDimensions = await getDimensionsFn(data.floating);
  return {
    reference: getRectRelativeToOffsetParent(data.reference, await getOffsetParentFn(data.floating), data.strategy),
    floating: {
      x: 0,
      y: 0,
      width: floatingDimensions.width,
      height: floatingDimensions.height
    }
  };
};
function isRTL(element2) {
  return getComputedStyle2(element2).direction === "rtl";
}
var platform = {
  convertOffsetParentRelativeRectToViewportRelativeRect,
  getDocumentElement,
  getClippingRect,
  getOffsetParent,
  getElementRects,
  getClientRects,
  getDimensions,
  getScale,
  isElement,
  isRTL
};
function observeMove(element2, onMove) {
  let io = null;
  let timeoutId;
  const root101 = getDocumentElement(element2);
  function cleanup() {
    var _io;
    clearTimeout(timeoutId);
    (_io = io) == null || _io.disconnect();
    io = null;
  }
  function refresh(skip, threshold) {
    if (skip === void 0) {
      skip = false;
    }
    if (threshold === void 0) {
      threshold = 1;
    }
    cleanup();
    const {
      left,
      top,
      width,
      height
    } = element2.getBoundingClientRect();
    if (!skip) {
      onMove();
    }
    if (!width || !height) {
      return;
    }
    const insetTop = floor(top);
    const insetRight = floor(root101.clientWidth - (left + width));
    const insetBottom = floor(root101.clientHeight - (top + height));
    const insetLeft = floor(left);
    const rootMargin = -insetTop + "px " + -insetRight + "px " + -insetBottom + "px " + -insetLeft + "px";
    const options = {
      rootMargin,
      threshold: max(0, min(1, threshold)) || 1
    };
    let isFirstUpdate = true;
    function handleObserve(entries) {
      const ratio = entries[0].intersectionRatio;
      if (ratio !== threshold) {
        if (!isFirstUpdate) {
          return refresh();
        }
        if (!ratio) {
          timeoutId = setTimeout(() => {
            refresh(false, 1e-7);
          }, 1e3);
        } else {
          refresh(false, ratio);
        }
      }
      isFirstUpdate = false;
    }
    try {
      io = new IntersectionObserver(handleObserve, {
        ...options,
        // Handle <iframe>s
        root: root101.ownerDocument
      });
    } catch (e) {
      io = new IntersectionObserver(handleObserve, options);
    }
    io.observe(element2);
  }
  refresh(true);
  return cleanup;
}
function autoUpdate(reference, floating, update, options) {
  if (options === void 0) {
    options = {};
  }
  const {
    ancestorScroll = true,
    ancestorResize = true,
    elementResize = typeof ResizeObserver === "function",
    layoutShift = typeof IntersectionObserver === "function",
    animationFrame = false
  } = options;
  const referenceEl = unwrapElement(reference);
  const ancestors = ancestorScroll || ancestorResize ? [...referenceEl ? getOverflowAncestors(referenceEl) : [], ...getOverflowAncestors(floating)] : [];
  ancestors.forEach((ancestor) => {
    ancestorScroll && ancestor.addEventListener("scroll", update, {
      passive: true
    });
    ancestorResize && ancestor.addEventListener("resize", update);
  });
  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;
  let reobserveFrame = -1;
  let resizeObserver = null;
  if (elementResize) {
    resizeObserver = new ResizeObserver((_ref) => {
      let [firstEntry] = _ref;
      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {
        resizeObserver.unobserve(floating);
        cancelAnimationFrame(reobserveFrame);
        reobserveFrame = requestAnimationFrame(() => {
          var _resizeObserver;
          (_resizeObserver = resizeObserver) == null || _resizeObserver.observe(floating);
        });
      }
      update();
    });
    if (referenceEl && !animationFrame) {
      resizeObserver.observe(referenceEl);
    }
    resizeObserver.observe(floating);
  }
  let frameId;
  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;
  if (animationFrame) {
    frameLoop();
  }
  function frameLoop() {
    const nextRefRect = getBoundingClientRect(reference);
    if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {
      update();
    }
    prevRefRect = nextRefRect;
    frameId = requestAnimationFrame(frameLoop);
  }
  update();
  return () => {
    var _resizeObserver2;
    ancestors.forEach((ancestor) => {
      ancestorScroll && ancestor.removeEventListener("scroll", update);
      ancestorResize && ancestor.removeEventListener("resize", update);
    });
    cleanupIo == null || cleanupIo();
    (_resizeObserver2 = resizeObserver) == null || _resizeObserver2.disconnect();
    resizeObserver = null;
    if (animationFrame) {
      cancelAnimationFrame(frameId);
    }
  };
}
var offset2 = offset;
var shift2 = shift;
var flip2 = flip;
var arrow2 = arrow;
var computePosition2 = (reference, floating, options) => {
  const cache = /* @__PURE__ */ new Map();
  const mergedOptions = {
    platform,
    ...options
  };
  const platformWithCache = {
    ...mergedOptions.platform,
    _c: cache
  };
  return computePosition(reference, floating, {
    ...mergedOptions,
    platform: platformWithCache
  });
};

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/utils/Popper.svelte
mark_module_start();
var root_110 = template(`<div></div>`);
var root_36 = template(`<div></div>`);
var Frame_default2 = template(`<!> <!>`, 1);
var root24 = template(`<!> <!>`, 1);
function Popper($$anchor, $$props) {
  if (new.target === Popper)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "activeContent",
    "arrow",
    "offset",
    "placement",
    "trigger",
    "triggeredBy",
    "reference",
    "strategy",
    "open",
    "yOnly",
    "middlewares"
  ]);
  push($$props, false, Popper);
  const middleware = mutable_source();
  let activeContent = prop($$props, "activeContent", 0, false);
  let arrow3 = prop($$props, "arrow", 0, true);
  let offset3 = prop($$props, "offset", 0, 8);
  let placement = prop($$props, "placement", 0, "top");
  let trigger = prop($$props, "trigger", 0, "hover");
  let triggeredBy = prop($$props, "triggeredBy", 0, void 0);
  let reference = prop($$props, "reference", 0, void 0);
  let strategy = prop($$props, "strategy", 0, "absolute");
  let open = prop($$props, "open", 4, false);
  let yOnly = prop($$props, "yOnly", 0, false);
  let middlewares = prop($$props, "middlewares", 8, () => [flip2(), shift2()]);
  const dispatch = createEventDispatcher();
  let clickable = mutable_source();
  let hoverable = mutable_source();
  let referenceEl = mutable_source();
  let floatingEl;
  let arrowEl = mutable_source();
  let contentEl = mutable_source();
  let triggerEls = [];
  let _blocked = false;
  const block = () => (_blocked = true, setTimeout(() => _blocked = false, 250));
  const showHandler = (ev) => {
    if (get(referenceEl) === void 0)
      console.error("trigger undefined");
    if (!reference() && triggerEls.includes(ev.target) && get(referenceEl) !== ev.target) {
      set(referenceEl, ev.target);
      block();
    }
    if (get(clickable) && ev.type === "focusin" && !open())
      block();
    open(get(clickable) && ev.type === "click" && !_blocked ? !open() : true);
  };
  const hasHover = (el) => el.matches(":hover");
  const hasFocus = (el) => el.contains(document.activeElement);
  const px = (n2) => n2 != null ? `${n2}px` : "";
  const hideHandler = (ev) => {
    if (activeContent()) {
      setTimeout(
        () => {
          const elements = [
            get(referenceEl),
            floatingEl,
            ...triggerEls
          ].filter(Boolean);
          if (ev.type === "mouseleave" && elements.some(hasHover))
            return;
          if (ev.type === "focusout" && elements.some(hasFocus))
            return;
          open(false);
        },
        100
      );
    } else
      open(false);
  };
  let arrowSide = mutable_source();
  const oppositeSideMap2 = {
    left: "right",
    right: "left",
    bottom: "top",
    top: "bottom"
  };
  function updatePosition() {
    computePosition2(get(referenceEl), floatingEl, {
      placement: placement(),
      strategy: strategy(),
      middleware: get(middleware)
    }).then(({ x, y, middlewareData, placement: placement2, strategy: strategy2 }) => {
      floatingEl.style.position = strategy2;
      floatingEl.style.left = yOnly() ? "0" : px(x);
      floatingEl.style.top = px(y);
      if (middlewareData.arrow && get(arrowEl) instanceof HTMLDivElement) {
        mutate(arrowEl, get(arrowEl).style.left = px(middlewareData.arrow.x));
        mutate(arrowEl, get(arrowEl).style.top = px(middlewareData.arrow.y));
        set(arrowSide, oppositeSideMap2[placement2.split("-")[0]]);
        mutate(arrowEl, get(arrowEl).style[get(arrowSide)] = px(-get(arrowEl).offsetWidth / 2 - ($$sanitized_props.border ? 1 : 0)));
      }
    });
  }
  function init2(node, _referenceEl) {
    floatingEl = node;
    let cleanup = autoUpdate(_referenceEl, floatingEl, updatePosition);
    return {
      update(_referenceEl2) {
        cleanup();
        cleanup = autoUpdate(_referenceEl2, floatingEl, updatePosition);
      },
      destroy() {
        cleanup();
      }
    };
  }
  onMount(() => {
    const events = [
      ["focusin", showHandler, true],
      ["focusout", hideHandler, true],
      ["click", showHandler, get(clickable)],
      [
        "mouseenter",
        showHandler,
        get(hoverable)
      ],
      [
        "mouseleave",
        hideHandler,
        get(hoverable)
      ]
    ];
    if (triggeredBy())
      triggerEls = [
        ...document.querySelectorAll(triggeredBy())
      ];
    else
      triggerEls = get(contentEl).previousElementSibling ? [get(contentEl).previousElementSibling] : [];
    if (!triggerEls.length) {
      console.error("No triggers found.");
    }
    triggerEls.forEach((element2) => {
      if (element2.tabIndex < 0)
        element2.tabIndex = 0;
      for (const [name, handler, cond] of events)
        if (cond)
          element2.addEventListener(name, handler);
    });
    if (reference()) {
      set(referenceEl, document.querySelector(reference()) ?? document.body);
      if (get(referenceEl) === document.body) {
        console.error(`Popup reference not found: '${reference()}'`);
      } else {
        get(referenceEl).addEventListener("focusout", hideHandler);
        if (get(hoverable))
          get(referenceEl).addEventListener("mouseleave", hideHandler);
      }
    } else {
      set(referenceEl, triggerEls[0]);
    }
    return () => {
      triggerEls.forEach((element2) => {
        if (element2) {
          for (const [name, handler] of events)
            element2.removeEventListener(name, handler);
        }
      });
      if (get(referenceEl)) {
        get(referenceEl).removeEventListener("focusout", hideHandler);
        get(referenceEl).removeEventListener("mouseleave", hideHandler);
      }
    };
  });
  function optional(pred, func) {
    return pred ? func : () => void 0;
  }
  let arrowClass = mutable_source();
  function initArrow(node) {
    set(arrowEl, node);
    return {
      destroy() {
        set(arrowEl, null);
      }
    };
  }
  legacy_pre_effect(() => deep_read_state(trigger()), () => {
    set(clickable, trigger() === "click");
  });
  legacy_pre_effect(() => deep_read_state(trigger()), () => {
    set(hoverable, trigger() === "hover");
  });
  legacy_pre_effect(() => deep_read_state(open()), () => {
    dispatch("show", open());
  });
  legacy_pre_effect(
    () => (deep_read_state(placement()), get(referenceEl)),
    () => {
      placement() && set(referenceEl, get(referenceEl));
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(middlewares()), deep_read_state(offset3()), get(arrowEl)),
    () => {
      set(middleware, [
        ...middlewares(),
        offset2(+offset3()),
        get(arrowEl) && arrow2({ element: get(arrowEl), padding: 10 })
      ]);
    }
  );
  legacy_pre_effect(
    () => (deep_read_state($$sanitized_props), get(arrowSide)),
    () => {
      set(arrowClass, twJoin("absolute pointer-events-none block w-[10px] h-[10px] rotate-45 bg-inherit border-inherit", $$sanitized_props.border && get(arrowSide) === "bottom" && "border-b border-e", $$sanitized_props.border && get(arrowSide) === "top" && "border-t border-s ", $$sanitized_props.border && get(arrowSide) === "right" && "border-t border-e ", $$sanitized_props.border && get(arrowSide) === "left" && "border-b border-s "));
    }
  );
  legacy_pre_effect_reset();
  init();
  var fragment = root24();
  var node_1 = first_child(fragment);
  if_block(node_1, () => !get(referenceEl), ($$anchor2) => {
    var div = root_110();
    bind_this(div, ($$value) => set(contentEl, $$value), () => get(contentEl));
    append($$anchor2, div);
  });
  var node_2 = sibling(sibling(node_1, true));
  if_block(node_2, () => get(referenceEl), ($$anchor2) => {
    var fragment_1 = comment();
    var node_3 = first_child(fragment_1);
    var tabindex = derived(() => activeContent() ? -1 : void 0);
    {
      add_owner_effect(open, Frame_default);
      validate_component(Frame_default)(node_3, spread_props(
        {
          use: init2,
          get options() {
            return get(referenceEl);
          },
          get open() {
            return open();
          },
          set open($$value) {
            open($$value);
          },
          role: "tooltip",
          get tabindex() {
            return get(tabindex);
          }
        },
        () => $$restProps,
        {
          $$events: {
            focusin: optional(activeContent(), showHandler),
            focusout: optional(activeContent(), hideHandler),
            mouseenter: optional(activeContent() && get(hoverable), showHandler),
            mouseleave: optional(activeContent() && get(hoverable), hideHandler)
          },
          children: wrap_snippet(($$anchor3, $$slotProps) => {
            var fragment_2 = Frame_default2();
            var node_4 = first_child(fragment_2);
            slot(node_4, $$props.children, {}, null);
            var node_5 = sibling(sibling(node_4, true));
            if_block(node_5, arrow3, ($$anchor4) => {
              var div_1 = root_36();
              render_effect(() => set_class(div_1, get(arrowClass)));
              action(div_1, ($$node) => initArrow($$node));
              append($$anchor4, div_1);
            });
            append($$anchor3, fragment_2);
          })
        }
      ));
    }
    append($$anchor2, fragment_1);
  });
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Popper);
  Popper = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Popper_default = Popper;
Popper.filename = ".../dist/utils/Popper.svelte";
mark_module_end(Popper);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/dropdown/Dropdown.svelte
mark_module_start();
var root_111 = template(`<div><!></div>`);
var root_210 = template(`<div><!></div>`);
var Popper_default2 = template(`<!> <ul><!></ul> <!>`, 1);
function Dropdown($$anchor, $$props) {
  if (new.target === Dropdown)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "activeUrl",
    "open",
    "containerClass",
    "classContainer",
    "headerClass",
    "classHeader",
    "footerClass",
    "classFooter",
    "activeClass",
    "classActive"
  ]);
  push($$props, false, Dropdown);
  const containerCls = mutable_source();
  const headerCls = mutable_source();
  const ulCls = mutable_source();
  const footerCls = mutable_source();
  const activeUrlStore = writable("");
  let activeUrl = prop($$props, "activeUrl", 0, "");
  let open = prop($$props, "open", 4, false);
  let containerClass = prop($$props, "containerClass", 0, "divide-y z-50");
  let classContainer = prop($$props, "classContainer", 0, void 0);
  let headerClass = prop($$props, "headerClass", 0, "py-1 overflow-hidden rounded-t-lg");
  let classHeader = prop($$props, "classHeader", 0, void 0);
  let footerClass = prop($$props, "footerClass", 0, "py-1 overflow-hidden rounded-b-lg");
  let classFooter = prop($$props, "classFooter", 0, void 0);
  let activeClass = prop($$props, "activeClass", 0, "text-primary-700 dark:text-primary-700 hover:text-primary-900 dark:hover:text-primary-900");
  let classActive = prop($$props, "classActive", 0, void 0);
  let activeCls = twMerge(activeClass(), classActive());
  setContext("DropdownType", { activeClass: activeCls });
  setContext("activeUrl", activeUrlStore);
  legacy_pre_effect(() => deep_read_state(activeUrl()), () => {
    activeUrlStore.set(activeUrl());
  });
  legacy_pre_effect(
    () => (deep_read_state(containerClass()), deep_read_state(classContainer())),
    () => {
      set(containerCls, twMerge(containerClass(), classContainer()));
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(headerClass()), deep_read_state(classHeader())),
    () => {
      set(headerCls, twMerge(headerClass(), classHeader()));
    }
  );
  legacy_pre_effect(() => deep_read_state($$sanitized_props), () => {
    set(ulCls, twMerge("py-1", $$sanitized_props.class));
  });
  legacy_pre_effect(
    () => (deep_read_state(footerClass()), deep_read_state(classFooter())),
    () => {
      set(footerCls, twMerge(footerClass(), classFooter()));
    }
  );
  legacy_pre_effect(() => deep_read_state($$restProps), () => {
    $$restProps.arrow = $$restProps.arrow ?? false;
    $$restProps.trigger = $$restProps.trigger ?? "click";
    $$restProps.placement = $$restProps.placement ?? "bottom";
    $$restProps.color = $$restProps.color ?? "dropdown";
    $$restProps.shadow = $$restProps.shadow ?? true;
    $$restProps.rounded = $$restProps.rounded ?? true;
  });
  legacy_pre_effect_reset();
  init();
  var fragment = comment();
  var node = first_child(fragment);
  {
    add_owner_effect(open, Popper_default);
    validate_component(Popper_default)(node, spread_props({ activeContent: true }, () => $$restProps, {
      get class() {
        return get(containerCls);
      },
      get open() {
        return open();
      },
      set open($$value) {
        open($$value);
      },
      $$events: {
        show($$arg) {
          bubble_event.call(this, $$props, $$arg);
        }
      },
      children: wrap_snippet(($$anchor2, $$slotProps) => {
        var fragment_1 = Popper_default2();
        var node_1 = first_child(fragment_1);
        if_block(node_1, () => $$slots.header, ($$anchor3) => {
          var _a;
          var div = root_111();
          var node_2 = child(div);
          slot(node_2, (_a = $$props.$$slots) == null ? void 0 : _a["header"], {}, null);
          render_effect(() => set_class(div, get(headerCls)));
          append($$anchor3, div);
        });
        var ul = sibling(sibling(node_1, true));
        var node_3 = child(ul);
        slot(node_3, $$props.children, {}, null);
        var node_4 = sibling(sibling(ul, true));
        if_block(node_4, () => $$slots.footer, ($$anchor3) => {
          var _a;
          var div_1 = root_210();
          var node_5 = child(div_1);
          slot(node_5, (_a = $$props.$$slots) == null ? void 0 : _a["footer"], {}, null);
          render_effect(() => set_class(div_1, get(footerCls)));
          append($$anchor3, div_1);
        });
        render_effect(() => set_class(ul, get(ulCls)));
        append($$anchor2, fragment_1);
      })
    }));
  }
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Dropdown);
  Dropdown = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Dropdown_default = Dropdown;
Dropdown.filename = ".../dist/dropdown/Dropdown.svelte";
mark_module_end(Dropdown);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/dropdown/DropdownDivider.svelte
mark_module_start();
var root25 = template(`<div></div>`);
function DropdownDivider($$anchor, $$props) {
  if (new.target === DropdownDivider)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["divClass"]);
  push($$props, false, DropdownDivider);
  let divClass = prop($$props, "divClass", 0, "my-1 h-px bg-gray-100 dark:bg-gray-600");
  init();
  var div = root25();
  let attributes;
  render_effect(() => attributes = set_attributes(
    div,
    attributes,
    {
      ...$$restProps,
      class: twMerge(divClass(), $$sanitized_props.class)
    },
    true,
    ""
  ));
  append($$anchor, div);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(DropdownDivider);
  DropdownDivider = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var DropdownDivider_default = DropdownDivider;
DropdownDivider.filename = ".../dist/dropdown/DropdownDivider.svelte";
mark_module_end(DropdownDivider);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/dropdown/DropdownHeader.svelte
mark_module_start();
var root26 = template(`<div><!></div> <!>`, 1);
function DropdownHeader($$anchor, $$props) {
  if (new.target === DropdownHeader)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["divClass", "divider"]);
  push($$props, false, DropdownHeader);
  let divClass = prop($$props, "divClass", 0, "py-2 px-4 text-gray-700 dark:text-white");
  let divider = prop($$props, "divider", 0, true);
  init();
  var fragment = root26();
  var div = first_child(fragment);
  let attributes;
  var node = child(div);
  slot(node, $$props.children, {}, null);
  var node_1 = sibling(sibling(div, true));
  if_block(node_1, divider, ($$anchor2) => {
    var fragment_1 = comment();
    var node_2 = first_child(fragment_1);
    validate_component(DropdownDivider_default)(node_2, {});
    append($$anchor2, fragment_1);
  });
  render_effect(() => attributes = set_attributes(
    div,
    attributes,
    {
      ...$$restProps,
      class: twMerge(divClass(), $$sanitized_props.class)
    },
    true,
    ""
  ));
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(DropdownHeader);
  DropdownHeader = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var DropdownHeader_default = DropdownHeader;
DropdownHeader.filename = ".../dist/dropdown/DropdownHeader.svelte";
mark_module_end(DropdownHeader);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/utils/Wrapper.svelte
mark_module_start();
function Wrapper($$anchor, $$props) {
  if (new.target === Wrapper)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["tag", "show", "use"]);
  push($$props, false, Wrapper);
  let tag = prop($$props, "tag", 0, "div");
  let use = prop($$props, "use", 0, () => {
  });
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    () => $$props.show,
    ($$anchor2) => {
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      validate_void_dynamic_element(tag);
      validate_dynamic_element_tag(tag);
      element(node_1, tag, false, ($$element, $$anchor3) => {
        let attributes;
        render_effect(() => attributes = set_dynamic_element_attributes($$element, attributes, { ...$$restProps }, ""));
        action($$element, ($$node) => use()($$node));
        var fragment_2 = comment();
        var node_2 = first_child(fragment_2);
        slot(node_2, $$props.children, {}, null);
        append($$anchor3, fragment_2);
      });
      append($$anchor2, fragment_1);
    },
    ($$anchor2) => {
      var fragment_3 = comment();
      var node_3 = first_child(fragment_3);
      slot(node_3, $$props.children, {}, null);
      append($$anchor2, fragment_3);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Wrapper);
  Wrapper = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Wrapper_default = Wrapper;
Wrapper.filename = ".../dist/utils/Wrapper.svelte";
mark_module_end(Wrapper);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/dropdown/DropdownItem.svelte
mark_module_start();
function DropdownItem($$anchor, $$props) {
  if (new.target === DropdownItem)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["defaultClass", "href", "activeClass"]);
  push($$props, false, DropdownItem);
  const active = mutable_source();
  const liClass = mutable_source();
  let defaultClass = prop($$props, "defaultClass", 0, "font-medium py-2 px-4 text-sm hover:bg-gray-100 dark:hover:bg-gray-600");
  let href = prop($$props, "href", 0, void 0);
  let activeClass = prop($$props, "activeClass", 0, void 0);
  const context = getContext("DropdownType") ?? {};
  const activeUrlStore = getContext("activeUrl");
  let sidebarUrl = mutable_source("");
  activeUrlStore.subscribe((value) => {
    set(sidebarUrl, value);
  });
  let wrap = mutable_source(true);
  function init2(node) {
    var _a;
    set(wrap, ((_a = node.parentElement) == null ? void 0 : _a.tagName) === "UL");
  }
  legacy_pre_effect(
    () => (get(sidebarUrl), deep_read_state(href())),
    () => {
      set(active, get(sidebarUrl) ? href() === get(sidebarUrl) : false);
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(defaultClass()), deep_read_state(href()), get(active), deep_read_state(activeClass()), deep_read_state($$sanitized_props)),
    () => {
      set(liClass, twMerge(defaultClass(), href() ? "block" : "w-full text-left", get(active) && (activeClass() ?? context.activeClass), $$sanitized_props.class));
    }
  );
  legacy_pre_effect_reset();
  init();
  var fragment = comment();
  var node_1 = first_child(fragment);
  validate_component(Wrapper_default)(node_1, {
    tag: "li",
    get show() {
      return get(wrap);
    },
    use: init2,
    children: wrap_snippet(($$anchor2, $$slotProps) => {
      var fragment_1 = comment();
      var node_2 = first_child(fragment_1);
      validate_void_dynamic_element(() => href() ? "a" : "button");
      validate_dynamic_element_tag(() => href() ? "a" : "button");
      element(node_2, () => href() ? "a" : "button", false, ($$element, $$anchor3) => {
        let attributes;
        render_effect(() => attributes = set_dynamic_element_attributes(
          $$element,
          attributes,
          {
            href: href(),
            type: href() ? void 0 : "button",
            role: href() ? "link" : "button",
            ...$$restProps,
            class: get(liClass)
          },
          ""
        ));
        event("click", $$element, function($$arg) {
          bubble_event.call(this, $$props, $$arg);
        });
        event("change", $$element, function($$arg) {
          bubble_event.call(this, $$props, $$arg);
        });
        event("keydown", $$element, function($$arg) {
          bubble_event.call(this, $$props, $$arg);
        });
        event("keyup", $$element, function($$arg) {
          bubble_event.call(this, $$props, $$arg);
        });
        event("focus", $$element, function($$arg) {
          bubble_event.call(this, $$props, $$arg);
        });
        event("blur", $$element, function($$arg) {
          bubble_event.call(this, $$props, $$arg);
        });
        event("mouseenter", $$element, function($$arg) {
          bubble_event.call(this, $$props, $$arg);
        });
        event("mouseleave", $$element, function($$arg) {
          bubble_event.call(this, $$props, $$arg);
        });
        var fragment_2 = comment();
        var node_3 = first_child(fragment_2);
        slot(node_3, $$props.children, {}, null);
        append($$anchor3, fragment_2);
      });
      append($$anchor2, fragment_1);
    })
  });
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(DropdownItem);
  DropdownItem = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var DropdownItem_default = DropdownItem;
DropdownItem.filename = ".../dist/dropdown/DropdownItem.svelte";
mark_module_end(DropdownItem);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/footer/Footer.svelte
mark_module_start();
var root27 = template(`<footer><!></footer>`);
function Footer($$anchor, $$props) {
  if (new.target === Footer)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["footerType"]);
  push($$props, false, Footer);
  let footerType = prop($$props, "footerType", 0, void 0);
  let footerClass = twMerge(footerType() === "sitemap" && "bg-gray-800", footerType() === "socialmedia" && "p-4 bg-white sm:p-6 dark:bg-gray-800", footerType() === "logo" && "p-4 bg-white rounded-lg shadow md:px-6 md:py-8 dark:bg-gray-800", footerType() === "default" && "p-4 bg-white rounded-lg shadow md:flex md:items-center md:justify-between md:p-6 dark:bg-gray-800", $$sanitized_props.class);
  init();
  var footer = root27();
  let attributes;
  var node = child(footer);
  slot(node, $$props.children, {}, null);
  render_effect(() => attributes = set_attributes(footer, attributes, { ...$$restProps, class: footerClass }, true, ""));
  append($$anchor, footer);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Footer);
  Footer = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Footer_default = Footer;
Footer.filename = ".../dist/footer/Footer.svelte";
mark_module_end(Footer);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/footer/FooterBrand.svelte
mark_module_start();
var root_112 = template(`<a><img> <span> </span> <!></a>`);
var root_211 = template(`<img>`);
function FooterBrand($$anchor, $$props) {
  if (new.target === FooterBrand)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "aClass",
    "spanClass",
    "imgClass",
    "href",
    "src",
    "alt",
    "name",
    "target"
  ]);
  push($$props, false, FooterBrand);
  let aClass = prop($$props, "aClass", 0, "flex items-center");
  let spanClass = prop($$props, "spanClass", 0, "self-center text-2xl font-semibold whitespace-nowrap dark:text-white");
  let imgClass = prop($$props, "imgClass", 0, "me-3 h-8");
  let href = prop($$props, "href", 0, "");
  let src = prop($$props, "src", 0, "");
  let alt = prop($$props, "alt", 0, "");
  let name = prop($$props, "name", 0, "");
  let target = prop($$props, "target", 0, void 0);
  let aCls = twMerge(aClass(), $$sanitized_props.classA);
  let spanCls = twMerge(spanClass(), $$sanitized_props.classSpan);
  let imgCls = twMerge(imgClass(), $$sanitized_props.classImg);
  init();
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    href,
    ($$anchor2) => {
      var a = root_112();
      let attributes;
      var img = child(a);
      set_class(img, imgCls);
      var span = sibling(sibling(img, true));
      set_class(span, spanCls);
      var text2 = child(span);
      var node_1 = sibling(sibling(span, true));
      slot(node_1, $$props.children, {}, null);
      render_effect(() => {
        attributes = set_attributes(
          a,
          attributes,
          {
            ...$$restProps,
            href: href(),
            target: target(),
            class: aCls
          },
          true,
          ""
        );
        set_attribute(img, "src", src());
        set_attribute(img, "alt", alt());
        set_text(text2, name());
      });
      append($$anchor2, a);
    },
    ($$anchor2) => {
      var img_1 = root_211();
      let attributes_1;
      render_effect(() => attributes_1 = set_attributes(
        img_1,
        attributes_1,
        {
          ...$$restProps,
          src: src(),
          class: imgCls,
          alt: alt()
        },
        true,
        ""
      ));
      append($$anchor2, img_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FooterBrand);
  FooterBrand = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FooterBrand_default = FooterBrand;
FooterBrand.filename = ".../dist/footer/FooterBrand.svelte";
mark_module_end(FooterBrand);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/footer/FooterCopyright.svelte
mark_module_start();
var root_113 = template(`<a> </a>`);
var root_212 = template(`<span class="ms-1"> </span>`);
var root28 = template(`<span> <!> </span>`);
function FooterCopyright($$anchor, $$props) {
  if (new.target === FooterCopyright)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "spanClass",
    "aClass",
    "year",
    "href",
    "by",
    "target",
    "copyrightMessage"
  ]);
  push($$props, false, FooterCopyright);
  let spanClass = prop($$props, "spanClass", 0, "block text-sm text-gray-500 sm:text-center dark:text-gray-400");
  let aClass = prop($$props, "aClass", 0, "hover:underline");
  let year = prop($$props, "year", 8, () => (/* @__PURE__ */ new Date()).getFullYear());
  let href = prop($$props, "href", 0, "");
  let by = prop($$props, "by", 0, "");
  let target = prop($$props, "target", 0, void 0);
  let copyrightMessage = prop($$props, "copyrightMessage", 0, "All Rights Reserved.");
  let spanCls = twMerge(spanClass(), $$sanitized_props.classSpan);
  let aCls = twMerge(aClass(), $$sanitized_props.classA);
  init();
  var span = root28();
  set_class(span, spanCls);
  var text2 = child(span);
  var node = sibling(text2);
  if_block(
    node,
    href,
    ($$anchor2) => {
      var a = root_113();
      let attributes;
      var text_1 = child(a);
      render_effect(() => {
        attributes = set_attributes(
          a,
          attributes,
          {
            ...$$restProps,
            href: href(),
            target: target(),
            class: aCls
          },
          true,
          ""
        );
        set_text(text_1, by());
      });
      append($$anchor2, a);
    },
    ($$anchor2) => {
      var span_1 = root_212();
      var text_2 = child(span_1);
      render_effect(() => set_text(text_2, by()));
      append($$anchor2, span_1);
    }
  );
  var text_3 = sibling(node, true);
  render_effect(() => {
    set_text(text2, `© ${stringify(year())} `);
    set_text(text_3, ` ${stringify(copyrightMessage())}`);
  });
  append($$anchor, span);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FooterCopyright);
  FooterCopyright = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FooterCopyright_default = FooterCopyright;
FooterCopyright.filename = ".../dist/footer/FooterCopyright.svelte";
mark_module_end(FooterCopyright);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/footer/FooterIcon.svelte
mark_module_start();
var root_114 = template(`<a><!></a>`);
function FooterIcon($$anchor, $$props) {
  if (new.target === FooterIcon)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["href", "ariaLabel", "aClass", "target"]);
  push($$props, false, FooterIcon);
  let href = prop($$props, "href", 0, "");
  let ariaLabel = prop($$props, "ariaLabel", 0, "");
  let aClass = prop($$props, "aClass", 0, "text-gray-500 hover:text-gray-900 dark:hover:text-white");
  let target = prop($$props, "target", 0, void 0);
  init();
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    href,
    ($$anchor2) => {
      var a = root_114();
      let attributes;
      var node_1 = child(a);
      slot(node_1, $$props.children, {}, null);
      render_effect(() => attributes = set_attributes(
        a,
        attributes,
        {
          ...$$restProps,
          href: href(),
          target: target(),
          "aria-label": ariaLabel(),
          class: twMerge(aClass(), $$sanitized_props.class)
        },
        true,
        ""
      ));
      append($$anchor2, a);
    },
    ($$anchor2) => {
      var fragment_1 = comment();
      var node_2 = first_child(fragment_1);
      slot(node_2, $$props.children, {}, null);
      append($$anchor2, fragment_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FooterIcon);
  FooterIcon = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FooterIcon_default = FooterIcon;
FooterIcon.filename = ".../dist/footer/FooterIcon.svelte";
mark_module_end(FooterIcon);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/footer/FooterLink.svelte
mark_module_start();
var root29 = template(`<li><a><!></a></li>`);
function FooterLink($$anchor, $$props) {
  if (new.target === FooterLink)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["liClass", "aClass", "href", "target"]);
  push($$props, false, FooterLink);
  let liClass = prop($$props, "liClass", 0, "me-4 last:me-0 md:me-6");
  let aClass = prop($$props, "aClass", 0, "hover:underline");
  let href = prop($$props, "href", 0, "");
  let target = prop($$props, "target", 0, void 0);
  let liCls = twMerge(liClass(), $$sanitized_props.classLi);
  let aCls = twMerge(aClass(), $$sanitized_props.classA);
  init();
  var li = root29();
  set_class(li, liCls);
  var a = child(li);
  let attributes;
  var node = child(a);
  slot(node, $$props.children, {}, null);
  render_effect(() => attributes = set_attributes(
    a,
    attributes,
    {
      ...$$restProps,
      href: href(),
      class: aCls,
      target: target()
    },
    true,
    ""
  ));
  append($$anchor, li);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FooterLink);
  FooterLink = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FooterLink_default = FooterLink;
FooterLink.filename = ".../dist/footer/FooterLink.svelte";
mark_module_end(FooterLink);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/footer/FooterLinkGroup.svelte
mark_module_start();
var root30 = template(`<ul><!></ul>`);
function FooterLinkGroup($$anchor, $$props) {
  if (new.target === FooterLinkGroup)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  push($$props, false, FooterLinkGroup);
  let ulClass = prop($$props, "ulClass", 0, "text-gray-600 dark:text-gray-400");
  init();
  var ul = root30();
  render_effect(() => set_class(ul, twMerge(ulClass(), $$sanitized_props.class)));
  var node = child(ul);
  slot(node, $$props.children, {}, null);
  append($$anchor, ul);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FooterLinkGroup);
  FooterLinkGroup = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FooterLinkGroup_default = FooterLinkGroup;
FooterLinkGroup.filename = ".../dist/footer/FooterLinkGroup.svelte";
mark_module_end(FooterLinkGroup);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/forms/Label.svelte
mark_module_start();
var root_115 = template(`<label><!></label>`);
function Label($$anchor, $$props) {
  if (new.target === Label)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["color", "defaultClass", "show"]);
  push($$props, false, Label);
  const labelClass2 = mutable_source();
  let color = prop($$props, "color", 4, "gray");
  let defaultClass = prop($$props, "defaultClass", 0, "text-sm rtl:text-right font-medium block");
  let show = prop($$props, "show", 0, true);
  let node = mutable_source();
  const colorClasses2 = {
    gray: "text-gray-900 dark:text-gray-300",
    green: "text-green-700 dark:text-green-500",
    red: "text-red-700 dark:text-red-500",
    disabled: "text-gray-400 dark:text-gray-500"
  };
  legacy_pre_effect(
    () => (get(node), deep_read_state(color())),
    () => {
      var _a;
      const control = (_a = get(node)) == null ? void 0 : _a.control;
      color((control == null ? void 0 : control.disabled) ? "disabled" : color());
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(defaultClass()), deep_read_state(color()), deep_read_state($$sanitized_props)),
    () => {
      set(labelClass2, twMerge(defaultClass(), colorClasses2[color()], $$sanitized_props.class));
    }
  );
  legacy_pre_effect_reset();
  init();
  var fragment = comment();
  var node_1 = first_child(fragment);
  if_block(
    node_1,
    show,
    ($$anchor2) => {
      var label = root_115();
      bind_this(label, ($$value) => set(node, $$value), () => get(node));
      let attributes;
      var node_2 = child(label);
      slot(node_2, $$props.children, {}, null);
      render_effect(() => attributes = set_attributes(label, attributes, { ...$$restProps, class: get(labelClass2) }, true, ""));
      append($$anchor2, label);
    },
    ($$anchor2) => {
      var fragment_1 = comment();
      var node_3 = first_child(fragment_1);
      slot(node_3, $$props.children, {}, null);
      append($$anchor2, fragment_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Label);
  Label = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Label_default = Label;
Label.filename = ".../dist/forms/Label.svelte";
mark_module_end(Label);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/forms/Radio.svelte
mark_module_start();
var Label_default2 = template(`<input> <!>`, 1);
var colorClasses = {
  primary: "text-primary-600 focus:ring-primary-500 dark:focus:ring-primary-600",
  secondary: "text-secondary-600 focus:ring-secondary-500 dark:focus:ring-secondary-600",
  red: "text-red-600 focus:ring-red-500 dark:focus:ring-red-600",
  green: "text-green-600 focus:ring-green-500 dark:focus:ring-green-600",
  purple: "text-purple-600 focus:ring-purple-500 dark:focus:ring-purple-600",
  teal: "text-teal-600 focus:ring-teal-500 dark:focus:ring-teal-600",
  yellow: "text-yellow-400 focus:ring-yellow-500 dark:focus:ring-yellow-600",
  orange: "text-orange-500 focus:ring-orange-500 dark:focus:ring-orange-600",
  blue: "text-blue-600 focus:ring-blue-500 dark:focus:ring-blue-600"
};
var labelClass = (inline2, extraClass) => twMerge(inline2 ? "inline-flex" : "flex", "items-center", extraClass);
var inputClass = (custom, color, rounded, tinted, spacing, extraClass) => twMerge("w-4 h-4 bg-gray-100 border-gray-300 dark:ring-offset-gray-800 focus:ring-2", spacing, tinted ? "dark:bg-gray-600 dark:border-gray-500" : "dark:bg-gray-700 dark:border-gray-600", custom && "sr-only peer", rounded && "rounded", colorClasses[color], extraClass);
function Radio($$anchor, $$props) {
  if (new.target === Radio)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "color",
    "custom",
    "inline",
    "group",
    "value",
    "spacing"
  ]);
  push($$props, false, Radio);
  const binding_group = [];
  let color = prop($$props, "color", 0, "primary");
  let custom = prop($$props, "custom", 0, false);
  let inline2 = prop($$props, "inline", 0, false);
  let group = prop($$props, "group", 4, void 0);
  let value = prop($$props, "value", 0, "");
  let spacing = prop($$props, "spacing", 8, () => $$slots.default ? "me-2" : "");
  let background = getContext("background");
  init();
  var fragment = comment();
  var node = first_child(fragment);
  var class_1 = derived(() => labelClass(inline2(), $$sanitized_props.class));
  validate_component(Label_default)(node, {
    get class() {
      return get(class_1);
    },
    get show() {
      return $$slots.default;
    },
    children: wrap_snippet(($$anchor2, $$slotProps) => {
      var fragment_1 = Label_default2();
      var input = first_child(fragment_1);
      remove_input_attr_defaults(input);
      let attributes;
      var node_1 = sibling(sibling(input, true));
      slot(node_1, $$props.children, {}, null);
      render_effect(() => attributes = set_attributes(
        input,
        attributes,
        {
          type: "radio",
          value: value(),
          ...$$restProps,
          class: inputClass(custom(), color(), false, background, spacing(), $$slots.default || $$sanitized_props.class)
        },
        true,
        ""
      ));
      bind_group(
        binding_group,
        [],
        input,
        () => {
          value();
          return group();
        },
        ($$value) => group($$value)
      );
      event("blur", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("change", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("click", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("focus", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("keydown", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("keypress", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("keyup", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("mouseenter", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("mouseleave", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("mouseover", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("paste", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      append($$anchor2, fragment_1);
    })
  });
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Radio);
  Radio = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Radio_default = Radio;
Radio.filename = ".../dist/forms/Radio.svelte";
mark_module_end(Radio);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/forms/Checkbox.svelte
mark_module_start();
var Label_default3 = template(`<input> <!>`, 1);
function Checkbox($$anchor, $$props) {
  if (new.target === Checkbox)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "color",
    "custom",
    "inline",
    "group",
    "value",
    "checked",
    "spacing"
  ]);
  push($$props, false, Checkbox);
  let color = prop($$props, "color", 0, "primary");
  let custom = prop($$props, "custom", 0, false);
  let inline2 = prop($$props, "inline", 0, false);
  let group = prop($$props, "group", 12, () => []);
  let value = prop($$props, "value", 0, "on");
  let checked = prop($$props, "checked", 4, void 0);
  let spacing = prop($$props, "spacing", 8, () => $$slots.default ? "me-2" : "");
  let background = getContext("background");
  function init2(_, _group) {
    if (checked() === void 0)
      checked(_group.includes(value()));
    onChange();
    return {
      update(_group2) {
        checked(_group2.includes(value()));
      }
    };
  }
  function onChange() {
    const index2 = group().indexOf(value());
    if (checked() === void 0)
      checked(index2 >= 0);
    if (checked()) {
      if (index2 < 0) {
        group().push(value());
        group(group());
      }
    } else {
      if (index2 >= 0) {
        group().splice(index2, 1);
        group(group());
      }
    }
  }
  init();
  var fragment = comment();
  var node = first_child(fragment);
  var class_1 = derived(() => labelClass(inline2(), $$sanitized_props.class));
  validate_component(Label_default)(node, {
    get class() {
      return get(class_1);
    },
    get show() {
      return $$slots.default;
    },
    children: wrap_snippet(($$anchor2, $$slotProps) => {
      var fragment_1 = Label_default3();
      var input = first_child(fragment_1);
      remove_input_attr_defaults(input);
      let attributes;
      var node_1 = sibling(sibling(input, true));
      slot(node_1, $$props.children, {}, null);
      render_effect(() => attributes = set_attributes(
        input,
        attributes,
        {
          type: "checkbox",
          value: value(),
          ...$$restProps,
          class: inputClass(custom(), color(), true, background, spacing(), $$slots.default || $$sanitized_props.class)
        },
        true,
        ""
      ));
      action(input, ($$node, $$action_arg) => init2($$node, $$action_arg), group);
      bind_checked(input, checked, ($$value) => checked($$value));
      event("keyup", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("keydown", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("keypress", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("focus", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("blur", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("click", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("mouseover", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("mouseenter", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("mouseleave", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("paste", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("change", input, onChange, false);
      event("change", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      append($$anchor2, fragment_1);
    })
  });
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Checkbox);
  Checkbox = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Checkbox_default = Checkbox;
Checkbox.filename = ".../dist/forms/Checkbox.svelte";
mark_module_end(Checkbox);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/forms/CheckboxButton.svelte
mark_module_start();
var Button_default2 = template(`<input> <!>`, 1);
function CheckboxButton($$anchor, $$props) {
  if (new.target === CheckboxButton)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "group",
    "value",
    "checked",
    "inline",
    "pill",
    "outline",
    "size",
    "color",
    "shadow"
  ]);
  push($$props, false, CheckboxButton);
  let group = prop($$props, "group", 12, () => []);
  let value = prop($$props, "value", 0, "on");
  let checked = prop($$props, "checked", 4, void 0);
  let inline2 = prop($$props, "inline", 0, true);
  let pill = prop($$props, "pill", 0, false);
  let outline = prop($$props, "outline", 0, false);
  let size2 = prop($$props, "size", 0, void 0);
  let color = prop($$props, "color", 0, void 0);
  let shadow = prop($$props, "shadow", 0, false);
  function init2(_, _group) {
    if (checked() === void 0)
      checked(_group.includes(value()));
    onChange();
    return {
      update(_group2) {
        checked(_group2.includes(value()));
      }
    };
  }
  function onChange() {
    const index2 = group().indexOf(value());
    if (checked() === void 0)
      checked(index2 >= 0);
    if (checked()) {
      if (index2 < 0) {
        group().push(value());
        group(group());
      }
    } else {
      if (index2 >= 0) {
        group().splice(index2, 1);
        group(group());
      }
    }
  }
  let buttonClass = mutable_source();
  legacy_pre_effect(
    () => (deep_read_state(inline2()), deep_read_state($$sanitized_props)),
    () => {
      set(buttonClass, twMerge(inline2() ? "inline-flex" : "flex", $$sanitized_props.class));
    }
  );
  legacy_pre_effect_reset();
  init();
  var fragment = comment();
  var node = first_child(fragment);
  validate_component(Button_default)(node, {
    tag: "label",
    get checked() {
      return checked();
    },
    get pill() {
      return pill();
    },
    get outline() {
      return outline();
    },
    get size() {
      return size2();
    },
    get color() {
      return color();
    },
    get shadow() {
      return shadow();
    },
    get class() {
      return get(buttonClass);
    },
    children: wrap_snippet(($$anchor2, $$slotProps) => {
      var fragment_1 = Button_default2();
      var input = first_child(fragment_1);
      remove_input_attr_defaults(input);
      let attributes;
      var node_1 = sibling(sibling(input, true));
      slot(node_1, $$props.children, {}, null);
      render_effect(() => attributes = set_attributes(
        input,
        attributes,
        {
          type: "checkbox",
          value: value(),
          ...$$restProps,
          class: "sr-only"
        },
        true,
        ""
      ));
      action(input, ($$node, $$action_arg) => init2($$node, $$action_arg), group);
      bind_checked(input, checked, ($$value) => checked($$value));
      event("keyup", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("keydown", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("keypress", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("focus", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("blur", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("click", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("mouseover", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("mouseenter", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("mouseleave", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("paste", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("change", input, onChange, false);
      event("change", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      append($$anchor2, fragment_1);
    })
  });
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CheckboxButton);
  CheckboxButton = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CheckboxButton_default = CheckboxButton;
CheckboxButton.filename = ".../dist/forms/CheckboxButton.svelte";
mark_module_end(CheckboxButton);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/forms/Dropzone.svelte
mark_module_start();
var root31 = template(`<button type="button"><!></button> <label class="hidden"><input></label>`, 1);
function Dropzone($$anchor, $$props) {
  if (new.target === Dropzone)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["value", "files", "defaultClass"]);
  push($$props, false, Dropzone);
  let value = prop($$props, "value", 4, "");
  let files = prop($$props, "files", 4, void 0);
  let defaultClass = prop($$props, "defaultClass", 0, "flex flex-col justify-center items-center w-full h-64 bg-gray-50 rounded-lg border-2 border-gray-300 border-dashed cursor-pointer dark:hover:bg-bray-800 dark:bg-gray-700 hover:bg-gray-100 dark:border-gray-600 dark:hover:border-gray-500 dark:hover:bg-gray-600");
  let input = mutable_source();
  function keydown(ev) {
    if ([" ", "Enter"].includes(ev.key)) {
      ev.preventDefault();
      get(input).click();
    }
  }
  function onClick(event2) {
    event2.preventDefault();
    get(input).click();
  }
  init();
  var fragment = root31();
  var button = first_child(fragment);
  render_effect(() => set_class(button, twMerge(defaultClass(), $$sanitized_props.class)));
  var node = child(button);
  slot(node, $$props.children, {}, null);
  var label = sibling(sibling(button, true));
  var input_1 = child(label);
  bind_this(input_1, ($$value) => set(input, $$value), () => get(input));
  remove_input_attr_defaults(input_1);
  let attributes;
  render_effect(() => attributes = set_attributes(input_1, attributes, { ...$$restProps, type: "file" }, true, ""));
  event("keydown", button, keydown, false);
  event("click", button, onClick, false);
  event("focus", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("blur", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("mouseenter", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("mouseleave", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("mouseover", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("dragenter", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("dragleave", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("dragover", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("drop", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  bind_value(input_1, value, ($$value) => value($$value));
  bind_files(input_1, files, ($$value) => files($$value));
  event("change", input_1, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("click", input_1, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Dropzone);
  Dropzone = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Dropzone_default = Dropzone;
Dropzone.filename = ".../dist/forms/Dropzone.svelte";
mark_module_end(Dropzone);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/forms/Input.svelte
mark_module_start();
var root_116 = template(`<div><!></div>`);
var fallback6 = template(`<input>`);
var root_213 = template(`<div><!></div>`);
var Wrapper_default2 = template(`<!> <!> <!>`, 1);
function clampSize(s) {
  return s && s === "xs" ? "sm" : s === "xl" ? "lg" : s;
}
function Input($$anchor, $$props) {
  if (new.target === Input)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "type",
    "value",
    "size",
    "defaultClass",
    "color",
    "floatClass"
  ]);
  push($$props, false, Input);
  const _size = mutable_source();
  let type = prop($$props, "type", 0, "text");
  let value = prop($$props, "value", 4, void 0);
  let size2 = prop($$props, "size", 0, void 0);
  let defaultClass = prop($$props, "defaultClass", 0, "block w-full disabled:cursor-not-allowed disabled:opacity-50 rtl:text-right");
  let color = prop($$props, "color", 0, "base");
  let floatClass = prop($$props, "floatClass", 0, "flex absolute inset-y-0 items-center text-gray-500 dark:text-gray-400");
  const borderClasses = {
    base: "border-gray-300 dark:border-gray-600",
    tinted: "border-gray-300 dark:border-gray-500",
    green: "border-green-500 dark:border-green-400",
    red: "border-red-500 dark:border-red-400"
  };
  const ringClasses = {
    base: "focus:border-primary-500 focus:ring-primary-500 dark:focus:border-primary-500 dark:focus:ring-primary-500",
    green: "focus:ring-green-500 focus:border-green-500 dark:focus:border-green-500 dark:focus:ring-green-500",
    red: "focus:ring-red-500 focus:border-red-500 dark:focus:ring-red-500 dark:focus:border-red-500"
  };
  const colorClasses2 = {
    base: "bg-gray-50 text-gray-900 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400",
    tinted: "bg-gray-50 text-gray-900 dark:bg-gray-600 dark:text-white dark:placeholder-gray-400",
    green: "bg-green-50 text-green-900 placeholder-green-700 dark:text-green-400 dark:placeholder-green-500 dark:bg-gray-700",
    red: "bg-red-50 text-red-900 placeholder-red-700 dark:text-red-500 dark:placeholder-red-500 dark:bg-gray-700"
  };
  let background = getContext("background");
  let group = getContext("group");
  const textSizes = {
    sm: "sm:text-xs",
    md: "text-sm",
    lg: "sm:text-base"
  };
  const leftPadding = { sm: "ps-9", md: "ps-10", lg: "ps-11" };
  const rightPadding = { sm: "pe-9", md: "pe-10", lg: "pe-11" };
  const inputPadding = { sm: "p-2", md: "p-2.5", lg: "p-3" };
  let inputClass2 = mutable_source();
  legacy_pre_effect(() => deep_read_state(size2()), () => {
    set(_size, size2() || clampSize(group == null ? void 0 : group.size) || "md");
  });
  legacy_pre_effect(
    () => (deep_read_state(color()), deep_read_state(defaultClass()), get(_size), deep_read_state($$sanitized_props)),
    () => {
      const _color = color() === "base" && background ? "tinted" : color();
      set(inputClass2, twMerge([
        defaultClass(),
        inputPadding[get(_size)],
        $$slots.left && leftPadding[get(_size)] || $$slots.right && rightPadding[get(_size)],
        ringClasses[color()],
        colorClasses2[_color],
        borderClasses[_color],
        textSizes[get(_size)],
        group || "rounded-lg",
        group && "first:rounded-s-lg last:rounded-e-lg",
        group && "border-s-0 first:border-s last:border-e",
        $$sanitized_props.class
      ]));
    }
  );
  legacy_pre_effect_reset();
  init();
  var fragment = comment();
  var node = first_child(fragment);
  var show = derived(() => $$slots.left || $$slots.right);
  validate_component(Wrapper_default)(node, {
    class: "relative w-full",
    get show() {
      return get(show);
    },
    children: wrap_snippet(($$anchor2, $$slotProps) => {
      var fragment_1 = Wrapper_default2();
      var node_1 = first_child(fragment_1);
      if_block(node_1, () => $$slots.left, ($$anchor3) => {
        var _a;
        var div = root_116();
        render_effect(() => set_class(div, `${stringify(twMerge(floatClass(), $$sanitized_props.classLeft))} start-0 ps-2.5 pointer-events-none`));
        var node_2 = child(div);
        slot(node_2, (_a = $$props.$$slots) == null ? void 0 : _a["left"], {}, null);
        append($$anchor3, div);
      });
      var node_3 = sibling(sibling(node_1, true));
      slot(
        node_3,
        $$props.children,
        {
          get props() {
            return { ...$$restProps, class: get(inputClass2) };
          }
        },
        ($$anchor3) => {
          var input = fallback6();
          remove_input_attr_defaults(input);
          let attributes;
          render_effect(() => attributes = set_attributes(
            input,
            attributes,
            {
              ...$$restProps,
              ...{ type: type() },
              class: get(inputClass2)
            },
            true,
            ""
          ));
          bind_value(input, value, ($$value) => value($$value));
          event("blur", input, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("change", input, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("click", input, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("contextmenu", input, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("focus", input, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("keydown", input, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("keypress", input, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("keyup", input, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("mouseover", input, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("mouseenter", input, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("mouseleave", input, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("paste", input, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("input", input, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          append($$anchor3, input);
        }
      );
      var node_4 = sibling(sibling(node_3, true));
      if_block(node_4, () => $$slots.right, ($$anchor3) => {
        var _a;
        var div_1 = root_213();
        render_effect(() => set_class(div_1, `${stringify(twMerge(floatClass(), $$sanitized_props.classRight))} end-0 pe-2.5`));
        var node_5 = child(div_1);
        slot(node_5, (_a = $$props.$$slots) == null ? void 0 : _a["right"], {}, null);
        append($$anchor3, div_1);
      });
      append($$anchor2, fragment_1);
    })
  });
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Input);
  Input = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Input_default = Input;
Input.filename = ".../dist/forms/Input.svelte";
mark_module_end(Input);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/forms/Fileupload.svelte
mark_module_start();
var Input_default2 = template(`<input>`);
function Fileupload($$anchor, $$props) {
  if (new.target === Fileupload)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["value", "files", "inputClass"]);
  push($$props, false, Fileupload);
  let value = prop($$props, "value", 4, "");
  let files = prop($$props, "files", 4, void 0);
  let inputClass2 = prop($$props, "inputClass", 0, "border !p-0 dark:text-gray-400");
  init();
  var fragment = comment();
  var node = first_child(fragment);
  var class_1 = derived(() => twMerge(inputClass2(), $$sanitized_props.class));
  validate_component(Input_default)(node, spread_props(() => $$restProps, {
    get class() {
      return get(class_1);
    },
    children: wrap_snippet(($$anchor2, $$slotProps) => {
      const props = derived_safe_equal(() => $$slotProps.props);
      var input = Input_default2();
      remove_input_attr_defaults(input);
      let attributes;
      render_effect(() => attributes = set_attributes(input, attributes, { type: "file", ...get(props) }, true, ""));
      event("change", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("keyup", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("keydown", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("keypress", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("focus", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("blur", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("click", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("mouseover", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("mouseenter", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("mouseleave", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("paste", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      bind_value(input, value, ($$value) => value($$value));
      bind_files(input, files, ($$value) => files($$value));
      append($$anchor2, input);
    })
  }));
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Fileupload);
  Fileupload = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Fileupload_default = Fileupload;
Fileupload.filename = ".../dist/forms/Fileupload.svelte";
mark_module_end(Fileupload);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/utils/generateId.js
var n = Date.now();
function generateId_default() {
  return (++n).toString(36);
}

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/forms/FloatingLabelInput.svelte
mark_module_start();
var root32 = template(`<div><input> <label><!></label></div>`);
function FloatingLabelInput($$anchor, $$props) {
  if (new.target === FloatingLabelInput)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "id",
    "style",
    "type",
    "size",
    "color",
    "value"
  ]);
  push($$props, false, FloatingLabelInput);
  let id = prop($$props, "id", 8, generateId_default);
  let style = prop($$props, "style", 0, "standard");
  let type = prop($$props, "type", 0, "text");
  let size2 = prop($$props, "size", 0, "default");
  let color = prop($$props, "color", 0, "base");
  let value = prop($$props, "value", 4, void 0);
  const divClasses = {
    filled: "relative",
    outlined: "relative",
    standard: "relative z-0"
  };
  const inputSizes = {
    filled: {
      small: "px-2.5 pb-1.5 pt-4",
      default: "px-2.5 pb-2.5 pt-5"
    },
    outlined: {
      small: "px-2.5 pb-1.5 pt-3",
      default: "px-2.5 pb-2.5 pt-4"
    },
    standard: { small: "py-2 px-0", default: "py-2.5 px-0" }
  };
  const labelSizes = {
    filled: { small: "top-3", default: "top-4" },
    outlined: { small: "top-1", default: "top-2" },
    standard: { small: "top-3", default: "top-3" }
  };
  const inputClasses = {
    filled: "block rounded-t-lg w-full text-sm text-gray-900 bg-gray-50 dark:bg-gray-700 border-0 border-b-2 appearance-none dark:text-white focus:outline-none focus:ring-0 peer",
    outlined: "block w-full text-sm text-gray-900 bg-transparent rounded-lg border-1 appearance-none dark:text-white  focus:outline-none focus:ring-0 peer",
    standard: "block w-full text-sm text-gray-900 bg-transparent border-0 border-b-2 appearance-none dark:text-white  focus:outline-none focus:ring-0 peer"
  };
  const labelClasses = {
    filled: "absolute text-sm duration-300 transform -translate-y-4 scale-75 top-4 z-10 origin-left rtl:origin-right start-2.5  peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-4",
    outlined: "absolute text-sm duration-300 transform -translate-y-4 scale-75 top-2 z-10 origin-left rtl:origin-right bg-white dark:bg-gray-900 px-2 peer-focus:px-2  peer-placeholder-shown:scale-100 peer-placeholder-shown:-translate-y-1/2 peer-placeholder-shown:top-1/2 peer-focus:top-2 peer-focus:scale-75 peer-focus:-translate-y-4 start-1",
    standard: "absolute text-sm duration-300 transform -translate-y-6 scale-75 top-3 -z-10 origin-left rtl:origin-right peer-focus:start-0  peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
  };
  const inputColorClasses = {
    base: "border-gray-300 dark:border-gray-600 dark:focus:border-primary-500 focus:border-primary-600",
    green: "border-green-600 dark:border-green-500 dark:focus:border-green-500 focus:border-green-600",
    red: "border-red-600 dark:border-red-500 dark:focus:border-red-500  focus:border-red-600"
  };
  const labelColorClasses = {
    base: "text-gray-500 dark:text-gray-400 peer-focus:text-primary-600 peer-focus:dark:text-primary-500",
    green: "text-green-600 dark:text-green-500",
    red: "text-red-600 dark:text-red-500"
  };
  init();
  var div = root32();
  render_effect(() => set_class(div, twMerge(divClasses[style()], $$sanitized_props.classDiv)));
  var input = child(div);
  remove_input_attr_defaults(input);
  let attributes;
  var label = sibling(sibling(input, true));
  render_effect(() => set_class(label, twMerge(labelClasses[style()], labelColorClasses[color()], labelSizes[style()][size2()], $$sanitized_props.classLabel)));
  var node = child(label);
  slot(node, $$props.children, {}, null);
  render_effect(() => {
    attributes = set_attributes(
      input,
      attributes,
      {
        id: id(),
        ...$$restProps,
        ...{ type: type() },
        placeholder: " ",
        class: twMerge(inputClasses[style()], inputColorClasses[color()], inputSizes[style()][size2()], $$sanitized_props.classInput)
      },
      true,
      ""
    );
    set_attribute(label, "for", id());
  });
  bind_value(input, value, ($$value) => value($$value));
  event("blur", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("change", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("click", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("focus", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("input", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keydown", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keypress", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keyup", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("mouseenter", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("mouseleave", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("mouseover", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("paste", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  append($$anchor, div);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(FloatingLabelInput);
  FloatingLabelInput = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var FloatingLabelInput_default = FloatingLabelInput;
FloatingLabelInput.filename = ".../dist/forms/FloatingLabelInput.svelte";
mark_module_end(FloatingLabelInput);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/forms/Helper.svelte
mark_module_start();
var root33 = template(`<p><!></p>`);
function Helper($$anchor, $$props) {
  if (new.target === Helper)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["helperClass", "color"]);
  push($$props, false, Helper);
  let helperClass = prop($$props, "helperClass", 0, "text-xs font-normal text-gray-500 dark:text-gray-300");
  let color = prop($$props, "color", 0, "gray");
  const colorClasses2 = {
    gray: "text-gray-900 dark:text-gray-300",
    green: "text-green-700 dark:text-green-500",
    red: "text-red-700 dark:text-red-500",
    disabled: "text-gray-400 dark:text-gray-500"
  };
  init();
  var p = root33();
  let attributes;
  var node = child(p);
  slot(node, $$props.children, {}, null);
  render_effect(() => attributes = set_attributes(
    p,
    attributes,
    {
      ...$$restProps,
      class: twMerge(helperClass(), colorClasses2[color()], $$sanitized_props.class)
    },
    true,
    ""
  ));
  append($$anchor, p);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Helper);
  Helper = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Helper_default = Helper;
Helper.filename = ".../dist/forms/Helper.svelte";
mark_module_end(Helper);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/forms/InputAddon.svelte
mark_module_start();
var root34 = template(`<div><!></div>`);
function InputAddon($$anchor, $$props) {
  if (new.target === InputAddon)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["size"]);
  push($$props, false, InputAddon);
  const _size = mutable_source();
  const divClass = mutable_source();
  let size2 = prop($$props, "size", 0, void 0);
  let background = getContext("background");
  let group = getContext("group");
  const borderClasses = {
    base: "border-gray-300 dark:border-gray-600",
    tinted: "border-gray-300 dark:border-gray-500"
  };
  const darkBgClasses = {
    base: "dark:bg-gray-600 dark:text-gray-400",
    tinted: "dark:bg-gray-500 dark:text-gray-300"
  };
  const divider = {
    base: "dark:border-e-gray-700 dark:last:border-e-gray-600",
    tinted: "dark:border-e-gray-600 dark:last:border-e-gray-500"
  };
  const textSizes = {
    sm: "sm:text-xs",
    md: "text-sm",
    lg: "sm:text-base"
  };
  const prefixPadding = { sm: "px-2", md: "px-3", lg: "px-4" };
  console.log("borderClasses", borderClasses["base"]);
  legacy_pre_effect(() => deep_read_state(size2()), () => {
    set(_size, size2() || clampSize(group == null ? void 0 : group.size) || "md");
  });
  legacy_pre_effect(
    () => (get(_size), deep_read_state($$sanitized_props)),
    () => {
      set(divClass, twMerge(textSizes[get(_size)], prefixPadding[get(_size)], "text-gray-500 bg-gray-200", background ? darkBgClasses.tinted : darkBgClasses.base, background ? divider.tinted : divider.base, background ? borderClasses["tinted"] : borderClasses["base"], "inline-flex items-center border border-e-0", "first:rounded-s-lg last:rounded-e-lg", $$sanitized_props.class));
    }
  );
  legacy_pre_effect_reset();
  init();
  var div = root34();
  let attributes;
  var node = child(div);
  slot(node, $$props.children, {}, null);
  render_effect(() => attributes = set_attributes(div, attributes, { ...$$restProps, class: get(divClass) }, true, ""));
  append($$anchor, div);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(InputAddon);
  InputAddon = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var InputAddon_default = InputAddon;
InputAddon.filename = ".../dist/forms/InputAddon.svelte";
mark_module_end(InputAddon);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/forms/MultiSelect.svelte
mark_module_start();
var each_block4 = template(`<option> </option>`);
var root_117 = template(`<span class="text-gray-400"> </span>`);
var each_block_2 = template(`<div role="presentation"> </div>`);
var root_47 = template(`<div role="presentation"></div>`);
var root35 = template(`<select></select> <div tabindex="0" role="listbox"><!> <span class="flex gap-2 flex-wrap"><!></span> <div class="flex ms-auto gap-2 items-center"><!> <div class="w-[1px] bg-gray-300 dark:bg-gray-600"></div> <svg class="cursor-pointer h-3 w-3 ms-1 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"></path></svg></div> <!></div>`, 1);
function MultiSelect($$anchor, $$props) {
  if (new.target === MultiSelect)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "items",
    "value",
    "size",
    "dropdownClass",
    "placeholder"
  ]);
  push($$props, false, MultiSelect);
  const activeItem = mutable_source();
  let items = prop($$props, "items", 8, () => []);
  let value = prop($$props, "value", 12, () => []);
  let size2 = prop($$props, "size", 0, "md");
  let dropdownClass = prop($$props, "dropdownClass", 0, "");
  let placeholder = prop($$props, "placeholder", 0, "");
  let selectItems = mutable_source(items().filter((x) => value().includes(x.value)));
  let show = mutable_source(false);
  const sizes = {
    sm: "px-2 py-1 min-h-[2.4rem]",
    md: "px-3 py-1 min-h-[2.7rem]",
    lg: "px-4 py-2 min-h-[3.2rem]"
  };
  const multiSelectClass = "relative border border-gray-300 flex items-center rounded-lg gap-2 dark:border-gray-600 focus-within:ring-1 focus-within:border-primary-500 ring-primary-500 dark:focus-within:border-primary-500 dark:ring-primary-500 focus-visible:outline-none";
  let multiSelectDropdown = mutable_source();
  const itemsClass = "py-2 px-3 rounded-lg text-gray-600 hover:text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:text-gray-300 dark:hover:bg-gray-600";
  const itemsSelectClass = "bg-gray-100 text-black font-semibold hover:text-black dark:text-white dark:bg-gray-600 dark:hover:text-white";
  let activeIndex = mutable_source(null);
  const activeItemClass = "bg-primary-100 text-primary-500 dark:bg-primary-500 dark:text-primary-100 hover:bg-primary-100 dark:hover:bg-primary-500 hover:text-primary-600 dark:hover:text-primary-100";
  const selectOption = (select) => {
    if (value().includes(select.value)) {
      clearThisOption(select);
    } else {
      if (!value().includes(select.value))
        value([...value(), select.value]);
    }
  };
  const clearAll = (e) => {
    e.stopPropagation();
    value([]);
  };
  const clearThisOption = (select) => {
    if (value().includes(select.value)) {
      value(value().filter((o) => o !== select.value));
    }
  };
  function create_custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {
    return new CustomEvent(type, { detail, bubbles, cancelable });
  }
  function init2(node, value2) {
    const inital = value2;
    return {
      update: (value3) => {
        set(selectItems, items().filter((x) => value3.includes(x.value)));
        if (value3 !== inital) {
          node.dispatchEvent(create_custom_event("input", get(selectItems)));
          node.dispatchEvent(create_custom_event("change", get(selectItems)));
        }
      }
    };
  }
  function handleEscape() {
    if (get(show)) {
      set(show, false);
    }
  }
  function handleToggleActiveItem() {
    if (!get(show)) {
      set(show, true);
      set(activeIndex, 0);
    } else {
      if (get(activeItem) !== null)
        selectOption(get(activeItem));
    }
  }
  function handleArrowUpDown(offset3) {
    if (!get(show)) {
      set(show, true);
      set(activeIndex, 0);
    } else {
      if (get(activeIndex) !== null) {
        set(activeIndex, get(activeIndex) + offset3);
      } else {
        set(activeIndex, 0);
      }
    }
  }
  function handleKeyDown(event2) {
    switch (event2.key) {
      case "Escape":
        handleEscape();
        break;
      case "Enter":
      case " ":
        handleToggleActiveItem();
        break;
      case "ArrowDown":
        handleArrowUpDown(1);
        break;
      case "ArrowUp":
        handleArrowUpDown(-1);
        break;
      default:
        return;
    }
    event2.stopPropagation();
    event2.preventDefault();
  }
  legacy_pre_effect(() => deep_read_state(dropdownClass()), () => {
    set(multiSelectDropdown, twMerge("absolute z-50 p-3 flex flex-col gap-1 max-h-64 bg-white border border-gray-300 dark:bg-gray-700 dark:border-gray-600 start-0 top-[calc(100%+1rem)] rounded-lg cursor-pointer overflow-y-scroll w-full", dropdownClass()));
  });
  legacy_pre_effect(
    () => (get(activeIndex), deep_read_state(items())),
    () => {
      set(activeItem, get(activeIndex) !== null ? items()[(get(activeIndex) % items().length + items().length) % items().length] : null);
    }
  );
  legacy_pre_effect_reset();
  init();
  var fragment = root35();
  var select_1 = first_child(fragment);
  remove_input_attr_defaults(select_1);
  let attributes;
  init_select(select_1, () => attributes.value);
  const $$array = items;
  each(select_1, 9, $$array, index, ($$anchor2, $$item, $$index) => {
    let value2 = () => unwrap(unwrap($$item)).value;
    value2();
    let name = () => unwrap(unwrap($$item)).name;
    name();
    var option = each_block4();
    var option_value;
    var text2 = child(option);
    render_effect(() => {
      if (option_value !== (option_value = value2())) {
        option.value = null == (option.__value = value2()) ? "" : value2();
      }
      set_text(text2, name());
    });
    append($$anchor2, option);
  });
  var div = sibling(sibling(select_1, true));
  render_effect(() => set_class(div, twMerge(multiSelectClass, sizes[size2()], $$sanitized_props.class)));
  var node_1 = child(div);
  if_block(node_1, () => !get(selectItems).length, ($$anchor2) => {
    var span = root_117();
    var text_1 = child(span);
    render_effect(() => set_text(text_1, placeholder()));
    append($$anchor2, span);
  });
  var span_1 = sibling(sibling(node_1, true));
  var node_2 = child(span_1);
  if_block(node_2, () => get(selectItems).length, ($$anchor2) => {
    var fragment_1 = comment();
    var node_3 = first_child(fragment_1);
    validate_each_keys(() => get(selectItems), (item, $$index_1) => unwrap(item).name);
    each(node_3, 5, () => get(selectItems), (item, $$index_1) => unwrap(item).name, ($$anchor3, item, $$index_1) => {
      var fragment_2 = comment();
      var node_4 = first_child(fragment_2);
      slot(
        node_4,
        $$props.children,
        {
          get item() {
            return unwrap(item);
          },
          clear: () => clearThisOption(unwrap(item))
        },
        ($$anchor4) => {
          var fragment_3 = comment();
          var node_5 = first_child(fragment_3);
          var large = derived(() => size2() === "lg");
          validate_component(Badge_default)(node_5, {
            color: "dark",
            get large() {
              return get(large);
            },
            dismissable: true,
            params: { duration: 100 },
            $$events: {
              close: () => clearThisOption(unwrap(item))
            },
            children: wrap_snippet(($$anchor5, $$slotProps) => {
              var text_2 = text($$anchor5);
              render_effect(() => set_text(text_2, unwrap(item).name));
              append($$anchor5, text_2);
            })
          });
          append($$anchor4, fragment_3);
        }
      );
      append($$anchor3, fragment_2);
    });
    append($$anchor2, fragment_1);
  });
  var div_1 = sibling(sibling(span_1, true));
  var node_6 = child(div_1);
  if_block(node_6, () => get(selectItems).length, ($$anchor2) => {
    var fragment_5 = comment();
    var node_7 = first_child(fragment_5);
    validate_component(CloseButton_default)(node_7, {
      get size() {
        return size2();
      },
      color: "none",
      class: "p-0 focus:ring-gray-400 dark:text-white",
      $$events: { click: clearAll }
    });
    append($$anchor2, fragment_5);
  });
  var div_2 = sibling(sibling(node_6, true));
  var svg = sibling(sibling(div_2, true));
  var path = child(svg);
  var node_8 = sibling(sibling(div_1, true));
  if_block(node_8, () => get(show), ($$anchor2) => {
    var div_3 = root_47();
    validate_each_keys(items, (item, $$index_2) => unwrap(item).name);
    each(div_3, 13, items, (item, $$index_2) => unwrap(item).name, ($$anchor3, item, $$index_2) => {
      var div_4 = each_block_2();
      render_effect(() => set_class(div_4, twMerge(itemsClass, get(selectItems).includes(unwrap(item)) && itemsSelectClass, get(activeItem) === unwrap(item) && activeItemClass)));
      var text_3 = child(div_4);
      render_effect(() => set_text(text_3, unwrap(item).name));
      event("click", div_4, () => selectOption(unwrap(item)), false);
      append($$anchor3, div_4);
    });
    render_effect(() => set_class(div_3, get(multiSelectDropdown)));
    event("click", div_3, stopPropagation(function($$arg) {
      bubble_event.call(this, $$props, $$arg);
    }));
    append($$anchor2, div_3);
  });
  render_effect(() => {
    attributes = set_attributes(
      select_1,
      attributes,
      {
        ...$$restProps,
        value: value(),
        hidden: true,
        multiple: true
      },
      true,
      ""
    );
    if ("value" in attributes) {
      select_option(select_1, attributes.value);
    }
    set_attribute(path, "d", get(show) ? "m1 5 4-4 4 4" : "m9 1-4 4-4-4");
  });
  action(select_1, ($$node, $$action_arg) => init2($$node, $$action_arg), value);
  event("change", select_1, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("input", select_1, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("click", div, () => set(show, !get(show)), false);
  event("focusout", div, () => set(show, false), false);
  event("keydown", div, handleKeyDown, false);
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(MultiSelect);
  MultiSelect = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var MultiSelect_default = MultiSelect;
MultiSelect.filename = ".../dist/forms/MultiSelect.svelte";
mark_module_end(MultiSelect);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/forms/NumberInput.svelte
mark_module_start();
var Input_default3 = template(`<input>`);
function NumberInput($$anchor, $$props) {
  if (new.target === NumberInput)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["value"]);
  push($$props, false, NumberInput);
  let value = prop($$props, "value", 4, 0);
  var fragment = comment();
  var node = first_child(fragment);
  validate_component(Input_default)(node, spread_props(() => $$restProps, {
    children: wrap_snippet(($$anchor2, $$slotProps) => {
      const props = derived_safe_equal(() => $$slotProps.props);
      var input = Input_default3();
      remove_input_attr_defaults(input);
      let attributes;
      render_effect(() => attributes = set_attributes(input, attributes, { ...get(props), type: "number" }, true, ""));
      bind_value(input, value, ($$value) => value($$value));
      event("blur", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("change", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("click", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("contextmenu", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("focus", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("keydown", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("keypress", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("keyup", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("mouseover", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("mouseenter", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("mouseleave", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("paste", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("input", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      append($$anchor2, input);
    })
  }));
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(NumberInput);
  NumberInput = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var NumberInput_default = NumberInput;
NumberInput.filename = ".../dist/forms/NumberInput.svelte";
mark_module_end(NumberInput);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/forms/RadioButton.svelte
mark_module_start();
var Button_default3 = template(`<input> <!>`, 1);
function RadioButton($$anchor, $$props) {
  if (new.target === RadioButton)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "group",
    "value",
    "inline",
    "pill",
    "outline",
    "size",
    "color",
    "shadow"
  ]);
  push($$props, false, RadioButton);
  const binding_group = [];
  let group = prop($$props, "group", 4, "");
  let value = prop($$props, "value", 0, "");
  let inline2 = prop($$props, "inline", 0, true);
  let pill = prop($$props, "pill", 0, false);
  let outline = prop($$props, "outline", 0, false);
  let size2 = prop($$props, "size", 0, void 0);
  let color = prop($$props, "color", 0, void 0);
  let shadow = prop($$props, "shadow", 0, false);
  let buttonClass = mutable_source();
  legacy_pre_effect(
    () => (deep_read_state(inline2()), deep_read_state($$sanitized_props)),
    () => {
      set(buttonClass, twMerge(inline2() ? "inline-flex" : "flex", $$sanitized_props.class));
    }
  );
  legacy_pre_effect_reset();
  init();
  var fragment = comment();
  var node = first_child(fragment);
  var checked = derived(() => value() === group());
  validate_component(Button_default)(node, {
    tag: "label",
    get checked() {
      return get(checked);
    },
    get pill() {
      return pill();
    },
    get outline() {
      return outline();
    },
    get size() {
      return size2();
    },
    get color() {
      return color();
    },
    get shadow() {
      return shadow();
    },
    get class() {
      return get(buttonClass);
    },
    children: wrap_snippet(($$anchor2, $$slotProps) => {
      var fragment_1 = Button_default3();
      var input = first_child(fragment_1);
      remove_input_attr_defaults(input);
      let attributes;
      var node_1 = sibling(sibling(input, true));
      slot(node_1, $$props.children, {}, null);
      render_effect(() => attributes = set_attributes(
        input,
        attributes,
        {
          type: "radio",
          value: value(),
          ...$$restProps,
          class: "sr-only"
        },
        true,
        ""
      ));
      bind_group(
        binding_group,
        [],
        input,
        () => {
          value();
          return group();
        },
        ($$value) => group($$value)
      );
      event("keyup", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("keydown", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("keypress", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("focus", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("blur", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("click", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("mouseover", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("mouseenter", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("mouseleave", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("paste", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("change", input, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      append($$anchor2, fragment_1);
    })
  });
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(RadioButton);
  RadioButton = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var RadioButton_default = RadioButton;
RadioButton.filename = ".../dist/forms/RadioButton.svelte";
mark_module_end(RadioButton);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/forms/Range.svelte
mark_module_start();
var root36 = template(`<input>`);
function Range($$anchor, $$props) {
  if (new.target === Range)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["value", "size"]);
  push($$props, false, Range);
  let value = prop($$props, "value", 4);
  let size2 = prop($$props, "size", 0, "md");
  const sizes = {
    sm: "h-1 range-sm",
    md: "h-2",
    lg: "h-3 range-lg"
  };
  let inputClass2 = mutable_source();
  legacy_pre_effect(
    () => (deep_read_state(size2()), deep_read_state($$sanitized_props)),
    () => {
      set(inputClass2, twMerge("w-full bg-gray-200 rounded-lg appearance-none cursor-pointer dark:bg-gray-700", sizes[size2()] ?? sizes.md, $$sanitized_props.class));
    }
  );
  legacy_pre_effect_reset();
  init();
  var input = root36();
  remove_input_attr_defaults(input);
  let attributes;
  render_effect(() => attributes = set_attributes(
    input,
    attributes,
    {
      type: "range",
      ...$$restProps,
      class: get(inputClass2)
    },
    true,
    ""
  ));
  bind_value(input, value, ($$value) => value($$value));
  event("change", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("click", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keydown", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keypress", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keyup", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  append($$anchor, input);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Range);
  Range = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Range_default = Range;
Range.filename = ".../dist/forms/Range.svelte";
mark_module_end(Range);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/forms/Search.svelte
mark_module_start();
var Input_left = svg_template(`<svg slot="left" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd"></path></svg>`);
var root_118 = template(`<div class="flex absolute inset-y-0 end-0 items-center text-gray-500 dark:text-gray-400"><!></div>`);
var Wrapper_default3 = template(`<!> <!>`, 1);
function Search($$anchor, $$props) {
  if (new.target === Search)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["size", "placeholder", "value"]);
  push($$props, false, Search);
  let size2 = prop($$props, "size", 0, "lg");
  let placeholder = prop($$props, "placeholder", 0, "Search");
  let value = prop($$props, "value", 4, void 0);
  const sizes = {
    sm: "w-3.5 h-3.5",
    md: "w-5 h-5",
    lg: "w-6 h-6"
  };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  validate_component(Wrapper_default)(node, {
    class: "relative w-full",
    get show() {
      return $$slots.default;
    },
    children: wrap_snippet(($$anchor2, $$slotProps) => {
      var fragment_1 = Wrapper_default3();
      var node_1 = first_child(fragment_1);
      {
        add_owner_effect(value, Input_default);
        validate_component(Input_default)(node_1, spread_props(
          {
            get value() {
              return value();
            },
            set value($$value) {
              value($$value);
            },
            type: "search",
            get placeholder() {
              return placeholder();
            },
            get size() {
              return size2();
            }
          },
          () => $$restProps,
          {
            get class() {
              return $$sanitized_props.class;
            },
            $$events: {
              blur($$arg) {
                bubble_event.call(this, $$props, $$arg);
              },
              change($$arg) {
                bubble_event.call(this, $$props, $$arg);
              },
              input($$arg) {
                bubble_event.call(this, $$props, $$arg);
              },
              click($$arg) {
                bubble_event.call(this, $$props, $$arg);
              },
              focus($$arg) {
                bubble_event.call(this, $$props, $$arg);
              },
              keydown($$arg) {
                bubble_event.call(this, $$props, $$arg);
              },
              keypress($$arg) {
                bubble_event.call(this, $$props, $$arg);
              },
              keyup($$arg) {
                bubble_event.call(this, $$props, $$arg);
              },
              mouseenter($$arg) {
                bubble_event.call(this, $$props, $$arg);
              },
              mouseleave($$arg) {
                bubble_event.call(this, $$props, $$arg);
              },
              mouseover($$arg) {
                bubble_event.call(this, $$props, $$arg);
              },
              paste($$arg) {
                bubble_event.call(this, $$props, $$arg);
              }
            },
            $$slots: {
              left: ($$anchor3, $$slotProps2) => {
                var svg = Input_left();
                var path = child(svg);
                render_effect(() => set_svg_class(svg, sizes[size2()]));
                append($$anchor3, svg);
              }
            }
          }
        ));
      }
      var node_2 = sibling(sibling(node_1, true));
      if_block(node_2, () => $$slots.default, ($$anchor3) => {
        var div = root_118();
        var node_3 = child(div);
        slot(node_3, $$props.children, {}, null);
        append($$anchor3, div);
      });
      append($$anchor2, fragment_1);
    })
  });
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Search);
  Search = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Search_default = Search;
Search.filename = ".../dist/forms/Search.svelte";
mark_module_end(Search);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/forms/Select.svelte
mark_module_start();
var root_119 = template(`<option disabled selected> </option>`);
var each_block5 = template(`<option> </option>`);
var root37 = template(`<select><!><!></select>`);
function Select($$anchor, $$props) {
  if (new.target === Select)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "items",
    "value",
    "placeholder",
    "underline",
    "size",
    "defaultClass",
    "underlineClass"
  ]);
  push($$props, false, Select);
  let items = prop($$props, "items", 8, () => []);
  let value = prop($$props, "value", 4, void 0);
  let placeholder = prop($$props, "placeholder", 0, "Choose option ...");
  let underline = prop($$props, "underline", 0, false);
  let size2 = prop($$props, "size", 0, "md");
  let defaultClass = prop($$props, "defaultClass", 0, "text-gray-900 disabled:text-gray-400 bg-gray-50 border border-gray-300 rounded-lg focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:disabled:text-gray-500 dark:focus:ring-primary-500 dark:focus:border-primary-500");
  let underlineClass = prop($$props, "underlineClass", 0, "text-gray-500 disabled:text-gray-400 bg-transparent border-0 border-b-2 border-gray-200 appearance-none dark:text-gray-400 dark:disabled:text-gray-500 dark:border-gray-700 focus:outline-none focus:ring-0 focus:border-gray-200 peer");
  const common = "block w-full";
  const sizes = {
    sm: "text-sm p-2",
    md: "text-sm p-2.5",
    lg: "text-base py-3 px-4"
  };
  let selectClass = mutable_source();
  legacy_pre_effect(
    () => (deep_read_state(underline()), deep_read_state(underlineClass()), deep_read_state(defaultClass()), deep_read_state(size2()), deep_read_state($$sanitized_props)),
    () => {
      set(selectClass, twMerge(common, underline() ? underlineClass() : defaultClass(), sizes[size2()], underline() && "!px-0", $$sanitized_props.class));
    }
  );
  legacy_pre_effect_reset();
  init();
  var select = root37();
  remove_input_attr_defaults(select);
  render_effect(() => {
    value();
    invalidate_inner_signals(() => {
      $$restProps;
      get(selectClass);
      placeholder();
      items();
    });
  });
  let attributes;
  var node = child(select);
  if_block(node, placeholder, ($$anchor2) => {
    var option = root_119();
    option.value = null == (option.__value = "") ? "" : "";
    var text2 = child(option);
    render_effect(() => set_text(text2, placeholder()));
    append($$anchor2, option);
  });
  var node_1 = sibling(node);
  const $$array = items;
  each(
    node_1,
    1,
    $$array,
    index,
    ($$anchor2, $$item, $$index) => {
      let value2 = () => unwrap(unwrap($$item)).value;
      value2();
      let name = () => unwrap(unwrap($$item)).name;
      name();
      var option_1 = each_block5();
      var option_1_value;
      var text_1 = child(option_1);
      render_effect(() => {
        if (option_1_value !== (option_1_value = value2())) {
          option_1.value = null == (option_1.__value = value2()) ? "" : value2();
        }
        set_text(text_1, name());
      });
      append($$anchor2, option_1);
    },
    ($$anchor2) => {
      var fragment = comment();
      var node_2 = first_child(fragment);
      slot(node_2, $$props.children, {}, null);
      append($$anchor2, fragment);
    }
  );
  render_effect(() => attributes = set_attributes(select, attributes, { ...$$restProps, class: get(selectClass) }, true, ""));
  bind_select_value(select, value, ($$value) => value($$value));
  event("change", select, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("contextmenu", select, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("input", select, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  append($$anchor, select);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Select);
  Select = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Select_default = Select;
Select.filename = ".../dist/forms/Select.svelte";
mark_module_end(Select);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/forms/Textarea.svelte
mark_module_start();
var root_120 = template(`<div><!></div>`);
var Wrapper_default_1 = template(`<textarea></textarea>`);
var root_214 = template(`<div><!></div>`);
var Wrapper_default4 = template(`<!> <!> <!>`, 1);
function Textarea($$anchor, $$props) {
  if (new.target === Textarea)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "value",
    "wrappedClass",
    "unWrappedClass",
    "innerWrappedClass"
  ]);
  push($$props, false, Textarea);
  const background = getContext("background");
  let value = prop($$props, "value", 4, void 0);
  let wrappedClass = prop($$props, "wrappedClass", 0, "block w-full text-sm border-0 px-0 bg-inherit dark:bg-inherit focus:outline-none focus:ring-0");
  let unWrappedClass = prop($$props, "unWrappedClass", 0, "p-2.5 text-sm focus:ring-primary-500 focus:border-primary-500 dark:focus:ring-primary-500 dark:focus:border-primary-500");
  let innerWrappedClass = prop($$props, "innerWrappedClass", 0, "py-2 px-4 bg-white dark:bg-gray-800");
  let wrapped = mutable_source();
  let wrapperClass = mutable_source();
  let textareaClass = mutable_source();
  const headerClass = (header) => twMerge(header ? "border-b" : "border-t", "py-2 px-3 border-gray-200 dark:border-gray-600");
  let innerWrapperClass = mutable_source();
  legacy_pre_effect(() => {
  }, () => {
    set(wrapped, $$slots.header || $$slots.footer);
  });
  legacy_pre_effect(() => deep_read_state($$sanitized_props), () => {
    set(wrapperClass, twMerge("w-full rounded-lg bg-gray-50", background ? "dark:bg-gray-800" : "dark:bg-gray-700", "text-gray-900 dark:placeholder-gray-400 dark:text-white ", "border border-gray-200 dark:border-gray-600", $$sanitized_props.class));
  });
  legacy_pre_effect(
    () => (get(wrapped), deep_read_state(wrappedClass()), get(wrapperClass), deep_read_state(unWrappedClass())),
    () => {
      set(textareaClass, get(wrapped) ? wrappedClass() : twMerge(get(wrapperClass), unWrappedClass()));
    }
  );
  legacy_pre_effect(() => deep_read_state(innerWrappedClass()), () => {
    set(innerWrapperClass, twMerge(innerWrappedClass(), $$slots.footer ? "" : "rounded-b-lg", $$slots.header ? "" : "rounded-t-lg"));
  });
  legacy_pre_effect_reset();
  init();
  var fragment = comment();
  var node = first_child(fragment);
  validate_component(Wrapper_default)(node, {
    get show() {
      return get(wrapped);
    },
    get class() {
      return get(wrapperClass);
    },
    children: wrap_snippet(($$anchor2, $$slotProps) => {
      var fragment_1 = Wrapper_default4();
      var node_1 = first_child(fragment_1);
      if_block(node_1, () => $$slots.header, ($$anchor3) => {
        var _a;
        var div = root_120();
        render_effect(() => set_class(div, headerClass(true)));
        var node_2 = child(div);
        slot(node_2, (_a = $$props.$$slots) == null ? void 0 : _a["header"], {}, null);
        append($$anchor3, div);
      });
      var node_3 = sibling(sibling(node_1, true));
      validate_component(Wrapper_default)(node_3, {
        get show() {
          return get(wrapped);
        },
        get class() {
          return get(innerWrapperClass);
        },
        children: wrap_snippet(($$anchor3, $$slotProps2) => {
          var textarea = Wrapper_default_1();
          remove_textarea_child(textarea);
          let attributes;
          render_effect(() => attributes = set_attributes(
            textarea,
            attributes,
            {
              ...$$restProps,
              class: get(textareaClass)
            },
            true,
            ""
          ));
          bind_value(textarea, value, ($$value) => value($$value));
          event("blur", textarea, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("change", textarea, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("click", textarea, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("contextmenu", textarea, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("focus", textarea, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("input", textarea, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("keydown", textarea, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("keypress", textarea, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("keyup", textarea, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("mouseenter", textarea, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("mouseleave", textarea, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("mouseover", textarea, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("paste", textarea, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          append($$anchor3, textarea);
        })
      });
      var node_4 = sibling(sibling(node_3, true));
      if_block(node_4, () => $$slots.footer, ($$anchor3) => {
        var _a;
        var div_1 = root_214();
        render_effect(() => set_class(div_1, headerClass(false)));
        var node_5 = child(div_1);
        slot(node_5, (_a = $$props.$$slots) == null ? void 0 : _a["footer"], {}, null);
        append($$anchor3, div_1);
      });
      append($$anchor2, fragment_1);
    })
  });
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Textarea);
  Textarea = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Textarea_default = Textarea;
Textarea.filename = ".../dist/forms/Textarea.svelte";
mark_module_end(Textarea);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/forms/Toggle.svelte
mark_module_start();
var Checkbox_default2 = template(`<span></span> <!>`, 1);
function Toggle($$anchor, $$props) {
  if (new.target === Toggle)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "size",
    "group",
    "value",
    "checked",
    "customSize"
  ]);
  push($$props, false, Toggle);
  const binding_group = [];
  let size2 = prop($$props, "size", 0, "default");
  let group = prop($$props, "group", 12, () => []);
  let value = prop($$props, "value", 0, "");
  let checked = prop($$props, "checked", 4, void 0);
  let customSize = prop($$props, "customSize", 0, "");
  let background = getContext("background");
  const common = "me-3 shrink-0 bg-gray-200 rounded-full peer-focus:ring-4 peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:bg-white after:border-gray-300 after:border after:rounded-full after:transition-all";
  const colors = {
    primary: "peer-focus:ring-primary-300 dark:peer-focus:ring-primary-800 peer-checked:bg-primary-600",
    secondary: "peer-focus:ring-secondary-300 dark:peer-focus:ring-secondary-800 peer-checked:bg-secondary-600",
    red: "peer-focus:ring-red-300 dark:peer-focus:ring-red-800 peer-checked:bg-red-600",
    green: "peer-focus:ring-green-300 dark:peer-focus:ring-green-800 peer-checked:bg-green-600",
    purple: "peer-focus:ring-purple-300 dark:peer-focus:ring-purple-800 peer-checked:bg-purple-600",
    yellow: "peer-focus:ring-yellow-300 dark:peer-focus:ring-yellow-800 peer-checked:bg-yellow-400",
    teal: "peer-focus:ring-teal-300 dark:peer-focus:ring-teal-800 peer-checked:bg-teal-600",
    orange: "peer-focus:ring-orange-300 dark:peer-focus:ring-orange-800 peer-checked:bg-orange-500",
    blue: "peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 peer-checked:bg-blue-600"
  };
  const sizes = {
    small: "w-9 h-5 after:top-[2px] after:start-[2px] after:h-4 after:w-4",
    default: "w-11 h-6 after:top-0.5 after:start-[2px] after:h-5 after:w-5",
    large: "w-14 h-7 after:top-0.5 after:start-[4px]  after:h-6 after:w-6",
    custom: customSize()
  };
  let divClass = mutable_source();
  legacy_pre_effect(
    () => (deep_read_state($$restProps), deep_read_state(size2()), deep_read_state($$sanitized_props)),
    () => {
      set(divClass, twMerge(common, background ? "dark:bg-gray-600 dark:border-gray-500" : "dark:bg-gray-700 dark:border-gray-600", colors[$$restProps.color ?? "primary"], sizes[size2()], "relative", $$sanitized_props.classDiv));
    }
  );
  legacy_pre_effect_reset();
  init();
  var fragment = comment();
  var node = first_child(fragment);
  {
    add_owner_effect(checked, Checkbox_default);
    add_owner_effect(group, Checkbox_default);
    validate_component(Checkbox_default)(node, spread_props({ custom: true }, () => $$restProps, {
      get class() {
        return $$sanitized_props.class;
      },
      get value() {
        return value();
      },
      get checked() {
        return checked();
      },
      set checked($$value) {
        checked($$value);
      },
      get group() {
        return group();
      },
      set group($$value) {
        group($$value);
      },
      $$events: {
        click($$arg) {
          bubble_event.call(this, $$props, $$arg);
        },
        change($$arg) {
          bubble_event.call(this, $$props, $$arg);
        }
      },
      children: wrap_snippet(($$anchor2, $$slotProps) => {
        var fragment_1 = Checkbox_default2();
        var span = first_child(fragment_1);
        var node_1 = sibling(sibling(span, true));
        slot(node_1, $$props.children, {}, null);
        render_effect(() => set_class(span, get(divClass)));
        append($$anchor2, fragment_1);
      })
    }));
  }
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Toggle);
  Toggle = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Toggle_default = Toggle;
Toggle.filename = ".../dist/forms/Toggle.svelte";
mark_module_end(Toggle);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/gallery/Gallery.svelte
mark_module_start();
var fallback7 = template(`<div><img></div>`);
var root38 = template(`<div></div>`);
function Gallery($$anchor, $$props) {
  if (new.target === Gallery)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["items", "imgClass"]);
  push($$props, false, Gallery);
  const divClass = mutable_source();
  let items = prop($$props, "items", 8, () => []);
  let imgClass = prop($$props, "imgClass", 0, "h-auto max-w-full rounded-lg");
  function init2(node) {
    if (getComputedStyle(node).gap === "normal")
      node.style.gap = "inherit";
  }
  legacy_pre_effect(() => deep_read_state($$sanitized_props), () => {
    set(divClass, twMerge("grid", $$sanitized_props.class));
  });
  legacy_pre_effect_reset();
  init();
  var div = root38();
  let attributes;
  each(
    div,
    9,
    items,
    index,
    ($$anchor2, item, $$index) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      slot(
        node_1,
        $$props.children,
        {
          get item() {
            return unwrap(item);
          }
        },
        ($$anchor3) => {
          var div_1 = fallback7();
          var img = child(div_1);
          render_effect(() => set_class(img, twMerge(imgClass(), $$sanitized_props.classImg)));
          render_effect(() => {
            set_attribute(img, "src", unwrap(item).src);
            set_attribute(img, "alt", unwrap(item).alt);
          });
          append($$anchor3, div_1);
        }
      );
      append($$anchor2, fragment);
    },
    ($$anchor2) => {
      var fragment_1 = comment();
      var node_2 = first_child(fragment_1);
      slot(
        node_2,
        $$props.children,
        {
          get item() {
            return items()[0];
          }
        },
        null
      );
      append($$anchor2, fragment_1);
    }
  );
  render_effect(() => attributes = set_attributes(div, attributes, { ...$$restProps, class: get(divClass) }, true, ""));
  action(div, ($$node) => init2($$node));
  append($$anchor, div);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Gallery);
  Gallery = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Gallery_default = Gallery;
Gallery.filename = ".../dist/gallery/Gallery.svelte";
mark_module_end(Gallery);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/kbd/Kbd.svelte
mark_module_start();
var root39 = template(`<kbd><!></kbd>`);
function Kbd($$anchor, $$props) {
  if (new.target === Kbd)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  push($$props, false, Kbd);
  let kbdClass = prop($$props, "kbdClass", 0, "text-xs font-semibold text-gray-800 bg-gray-100 border border-gray-200 rounded-lg dark:bg-gray-600 dark:text-gray-100 dark:border-gray-500");
  init();
  var kbd = root39();
  render_effect(() => set_class(kbd, twMerge(kbdClass(), $$sanitized_props.class)));
  var node = child(kbd);
  slot(node, $$props.children, {}, null);
  append($$anchor, kbd);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Kbd);
  Kbd = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Kbd_default = Kbd;
Kbd.filename = ".../dist/kbd/Kbd.svelte";
mark_module_end(Kbd);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/kbd/ArrowKeyDown.svelte
mark_module_start();
var root40 = svg_template(`<svg><path d="M310.6 246.6l-127.1 128C176.4 380.9 168.2 384 160 384s-16.38-3.125-22.63-9.375l-127.1-128C.2244 237.5-2.516 223.7 2.438 211.8S19.07 192 32 192h255.1c12.94 0 24.62 7.781 29.58 19.75S319.8 237.5 310.6 246.6z"></path></svg>`);
function ArrowKeyDown($$anchor, $$props) {
  if (new.target === ArrowKeyDown)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["svgClass"]);
  push($$props, false, ArrowKeyDown);
  let svgClass = prop($$props, "svgClass", 0, "w-4 h-4");
  init();
  var svg = root40();
  let attributes;
  var path = child(svg);
  render_effect(() => attributes = set_attributes(
    svg,
    attributes,
    {
      ...$$restProps,
      class: twMerge(svgClass(), $$sanitized_props.class),
      "aria-hidden": "true",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 320 512"
    },
    false,
    ""
  ));
  append($$anchor, svg);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ArrowKeyDown);
  ArrowKeyDown = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ArrowKeyDown_default = ArrowKeyDown;
ArrowKeyDown.filename = ".../dist/kbd/ArrowKeyDown.svelte";
mark_module_end(ArrowKeyDown);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/kbd/ArrowKeyLeft.svelte
mark_module_start();
var root41 = svg_template(`<svg><path d="M137.4 406.6l-128-127.1C3.125 272.4 0 264.2 0 255.1s3.125-16.38 9.375-22.63l128-127.1c9.156-9.156 22.91-11.9 34.88-6.943S192 115.1 192 128v255.1c0 12.94-7.781 24.62-19.75 29.58S146.5 415.8 137.4 406.6z"></path></svg>`);
function ArrowKeyLeft($$anchor, $$props) {
  if (new.target === ArrowKeyLeft)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["svgClass"]);
  push($$props, false, ArrowKeyLeft);
  let svgClass = prop($$props, "svgClass", 0, "w-4 h-4");
  init();
  var svg = root41();
  let attributes;
  var path = child(svg);
  render_effect(() => attributes = set_attributes(
    svg,
    attributes,
    {
      ...$$restProps,
      class: twMerge(svgClass(), $$sanitized_props.class),
      "aria-hidden": "true",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 320 512"
    },
    false,
    ""
  ));
  append($$anchor, svg);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ArrowKeyLeft);
  ArrowKeyLeft = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ArrowKeyLeft_default = ArrowKeyLeft;
ArrowKeyLeft.filename = ".../dist/kbd/ArrowKeyLeft.svelte";
mark_module_end(ArrowKeyLeft);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/kbd/ArrowKeyRight.svelte
mark_module_start();
var root42 = svg_template(`<svg><path d="M118.6 105.4l128 127.1C252.9 239.6 256 247.8 256 255.1s-3.125 16.38-9.375 22.63l-128 127.1c-9.156 9.156-22.91 11.9-34.88 6.943S64 396.9 64 383.1V128c0-12.94 7.781-24.62 19.75-29.58S109.5 96.23 118.6 105.4z"></path></svg>`);
function ArrowKeyRight($$anchor, $$props) {
  if (new.target === ArrowKeyRight)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["svgClass"]);
  push($$props, false, ArrowKeyRight);
  let svgClass = prop($$props, "svgClass", 0, "w-4 h-4");
  init();
  var svg = root42();
  let attributes;
  var path = child(svg);
  render_effect(() => attributes = set_attributes(
    svg,
    attributes,
    {
      ...$$restProps,
      class: twMerge(svgClass(), $$sanitized_props.class),
      "aria-hidden": "true",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 320 512"
    },
    false,
    ""
  ));
  append($$anchor, svg);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ArrowKeyRight);
  ArrowKeyRight = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ArrowKeyRight_default = ArrowKeyRight;
ArrowKeyRight.filename = ".../dist/kbd/ArrowKeyRight.svelte";
mark_module_end(ArrowKeyRight);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/kbd/ArrowKeyUp.svelte
mark_module_start();
var root43 = svg_template(`<svg><path d="M9.39 265.4l127.1-128C143.6 131.1 151.8 128 160 128s16.38 3.125 22.63 9.375l127.1 128c9.156 9.156 11.9 22.91 6.943 34.88S300.9 320 287.1 320H32.01c-12.94 0-24.62-7.781-29.58-19.75S.2333 274.5 9.39 265.4z"></path></svg>`);
function ArrowKeyUp($$anchor, $$props) {
  if (new.target === ArrowKeyUp)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["svgClass"]);
  push($$props, false, ArrowKeyUp);
  let svgClass = prop($$props, "svgClass", 0, "w-4 h-4");
  init();
  var svg = root43();
  let attributes;
  var path = child(svg);
  render_effect(() => attributes = set_attributes(
    svg,
    attributes,
    {
      ...$$restProps,
      class: twMerge(svgClass(), $$sanitized_props.class),
      "aria-hidden": "true",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 320 512"
    },
    false,
    ""
  ));
  append($$anchor, svg);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ArrowKeyUp);
  ArrowKeyUp = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ArrowKeyUp_default = ArrowKeyUp;
ArrowKeyUp.filename = ".../dist/kbd/ArrowKeyUp.svelte";
mark_module_end(ArrowKeyUp);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/list-group/ListgroupItem.svelte
mark_module_start();
var root_121 = template(`<li><!></li>`);
var root_37 = template(`<a><!></a>`);
var root_48 = template(`<button><!></button>`);
function ListgroupItem($$anchor, $$props) {
  if (new.target === ListgroupItem)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  push($$props, false, ListgroupItem);
  let active = prop($$props, "active", 8, () => getContext("active"));
  let current = prop($$props, "current", 0, false);
  let disabled = prop($$props, "disabled", 0, false);
  let href = prop($$props, "href", 0, "");
  let currentClass = prop($$props, "currentClass", 0, "text-white bg-primary-700 dark:text-white dark:bg-gray-800");
  let normalClass = prop($$props, "normalClass", 0, "");
  let disabledClass = prop($$props, "disabledClass", 0, "text-gray-900 bg-gray-100 dark:bg-gray-600 dark:text-gray-400");
  let focusClass = prop($$props, "focusClass", 0, "focus:z-40 focus:outline-none focus:ring-2 focus:ring-primary-700 focus:text-primary-700 dark:focus:ring-gray-500 dark:focus:text-white");
  let hoverClass = prop($$props, "hoverClass", 0, "hover:bg-gray-100 hover:text-primary-700 dark:hover:bg-gray-600 dark:hover:text-white");
  let itemDefaultClass = prop($$props, "itemDefaultClass", 0, "py-2 px-4 w-full text-sm font-medium list-none first:rounded-t-lg last:rounded-b-lg");
  let attrs = prop($$props, "attrs", 0, void 0);
  const states = {
    current: currentClass(),
    normal: normalClass(),
    disabled: disabledClass()
  };
  let state = mutable_source();
  let itemClass = mutable_source();
  legacy_pre_effect(
    () => (deep_read_state(disabled()), deep_read_state(current())),
    () => {
      set(state, disabled() ? "disabled" : current() ? "current" : "normal");
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(itemDefaultClass()), get(state), deep_read_state(active()), deep_read_state(hoverClass()), deep_read_state(focusClass()), deep_read_state($$sanitized_props)),
    () => {
      set(itemClass, twMerge(itemDefaultClass(), states[get(state)], active() && get(state) === "disabled" && "cursor-not-allowed", active() && get(state) === "normal" && hoverClass(), active() && get(state) === "normal" && focusClass(), $$sanitized_props.class));
    }
  );
  legacy_pre_effect_reset();
  init();
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    () => !active(),
    ($$anchor2) => {
      var li = root_121();
      var node_1 = child(li);
      slot(
        node_1,
        $$props.children,
        {
          get item() {
            return $$sanitized_props;
          }
        },
        null
      );
      render_effect(() => set_class(li, get(itemClass)));
      append($$anchor2, li);
    },
    ($$anchor2) => {
      var fragment_1 = comment();
      var node_2 = first_child(fragment_1);
      if_block(
        node_2,
        href,
        ($$anchor3) => {
          var a = root_37();
          let attributes;
          var node_3 = child(a);
          slot(
            node_3,
            $$props.children,
            {
              get item() {
                return $$sanitized_props;
              }
            },
            null
          );
          render_effect(() => attributes = set_attributes(
            a,
            attributes,
            {
              ...attrs(),
              href: href(),
              class: `block ${stringify(get(itemClass))}`,
              "aria-current": current()
            },
            true,
            ""
          ));
          event("blur", a, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("change", a, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("click", a, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("focus", a, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("keydown", a, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("keypress", a, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("keyup", a, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("mouseenter", a, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("mouseleave", a, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("mouseover", a, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          append($$anchor3, a);
        },
        ($$anchor3) => {
          var button = root_48();
          let attributes_1;
          var node_4 = child(button);
          slot(
            node_4,
            $$props.children,
            {
              get item() {
                return $$sanitized_props;
              }
            },
            null
          );
          render_effect(() => attributes_1 = set_attributes(
            button,
            attributes_1,
            {
              type: "button",
              ...attrs(),
              class: `flex items-center text-left ${stringify(get(itemClass))}`,
              disabled: disabled(),
              "aria-current": current()
            },
            true,
            ""
          ));
          event("blur", button, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("change", button, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("click", button, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("focus", button, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("keydown", button, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("keypress", button, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("keyup", button, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("mouseenter", button, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("mouseleave", button, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("mouseover", button, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          append($$anchor3, button);
        },
        true
      );
      append($$anchor2, fragment_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ListgroupItem);
  ListgroupItem = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ListgroupItem_default = ListgroupItem;
ListgroupItem.filename = ".../dist/list-group/ListgroupItem.svelte";
mark_module_end(ListgroupItem);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/list-group/Listgroup.svelte
mark_module_start();
function Listgroup($$anchor, $$props) {
  if (new.target === Listgroup)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["items", "active", "defaultClass"]);
  push($$props, false, Listgroup);
  const dispatch = createEventDispatcher();
  let items = prop($$props, "items", 8, () => []);
  let active = prop($$props, "active", 0, false);
  let defaultClass = prop($$props, "defaultClass", 0, "divide-y divide-gray-200 dark:divide-gray-600");
  let groupClass = mutable_source();
  legacy_pre_effect(() => deep_read_state(active()), () => {
    setContext("active", active());
  });
  legacy_pre_effect(
    () => (deep_read_state(defaultClass()), deep_read_state($$sanitized_props)),
    () => {
      set(groupClass, twMerge(defaultClass(), $$sanitized_props.class));
    }
  );
  legacy_pre_effect_reset();
  init();
  var fragment = comment();
  var node = first_child(fragment);
  var tag = derived(() => active() ? "div" : "ul");
  validate_component(Frame_default)(node, spread_props(
    {
      get tag() {
        return get(tag);
      }
    },
    () => $$restProps,
    {
      rounded: true,
      border: true,
      get class() {
        return get(groupClass);
      },
      children: wrap_snippet(($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        each(
          node_1,
          1,
          items,
          index,
          ($$anchor3, item, index2) => {
            var fragment_2 = comment();
            var node_2 = first_child(fragment_2);
            if_block(
              node_2,
              () => typeof unwrap(item) === "string",
              ($$anchor4) => {
                var fragment_3 = comment();
                var node_3 = first_child(fragment_3);
                validate_component(ListgroupItem_default)(node_3, {
                  get active() {
                    return active();
                  },
                  index: unwrap(index2),
                  $$events: {
                    click: () => dispatch("click", unwrap(item))
                  },
                  children: wrap_snippet(($$anchor5, $$slotProps2) => {
                    var fragment_4 = comment();
                    var node_4 = first_child(fragment_4);
                    slot(
                      node_4,
                      $$props.children,
                      {
                        get item() {
                          return unwrap(item);
                        },
                        index: unwrap(index2)
                      },
                      null
                    );
                    append($$anchor5, fragment_4);
                  })
                });
                append($$anchor4, fragment_3);
              },
              ($$anchor4) => {
                var fragment_5 = comment();
                var node_5 = first_child(fragment_5);
                validate_component(ListgroupItem_default)(node_5, spread_props(
                  {
                    get active() {
                      return active();
                    }
                  },
                  () => unwrap(item),
                  {
                    index: unwrap(index2),
                    $$events: {
                      click: () => dispatch("click", unwrap(item))
                    },
                    children: wrap_snippet(($$anchor5, $$slotProps2) => {
                      var fragment_6 = comment();
                      var node_6 = first_child(fragment_6);
                      slot(
                        node_6,
                        $$props.children,
                        {
                          get item() {
                            return unwrap(item);
                          },
                          index: unwrap(index2)
                        },
                        null
                      );
                      append($$anchor5, fragment_6);
                    })
                  }
                ));
                append($$anchor4, fragment_5);
              }
            );
            append($$anchor3, fragment_2);
          },
          ($$anchor3) => {
            var fragment_7 = comment();
            const item = derived_safe_equal(() => items()[0]);
            get(item);
            var node_7 = first_child(fragment_7);
            slot(
              node_7,
              $$props.children,
              {
                get item() {
                  return get(item);
                },
                index: 0
              },
              null
            );
            append($$anchor3, fragment_7);
          }
        );
        append($$anchor2, fragment_1);
      })
    }
  ));
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Listgroup);
  Listgroup = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Listgroup_default = Listgroup;
Listgroup.filename = ".../dist/list-group/Listgroup.svelte";
mark_module_end(Listgroup);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/marquee/Marquee.svelte
mark_module_start();
var root44 = template(`<div role="banner"><div class="flex justify-around items-center min-w-full"><!></div> <div class="flex justify-around items-center min-w-full"><!></div></div>`);
function Marquee($$anchor, $$props) {
  if (new.target === Marquee)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  push($$props, false, Marquee);
  let speed = prop($$props, "speed", 0, 1);
  let hoverSpeed = prop($$props, "hoverSpeed", 0, 1);
  let shadow = prop($$props, "shadow", 0, false);
  let offset3 = mutable_source(0);
  let isHovering = mutable_source(false);
  let shadowClass = `after:content-[''] after:absolute after:block after:z-10 after:h-full before:content-[''] before:absolute 
    before:block before:z-10 before:h-full before:end-0 after:shadow-[10px_0_50px_65px_rgba(256,256,256,1)] 
    before:shadow-[-10px_0_50px_65px_rgba(256,256,256,1)] dark:after:shadow-[10px_0_50px_65px_rgba(16,24,39,1)]
    dark:before:shadow-[-10px_0_50px_65px_rgba(16,24,39,1)]`;
  let divCls = twMerge("relative flex overflow-hidden w-full", shadow() ? shadowClass : "", $$sanitized_props.class);
  function init2(marquee) {
    const intervalId = setInterval(
      () => {
        if (marquee && Math.abs(get(offset3)) >= marquee.offsetWidth) {
          set(offset3, 0);
        } else {
          if (get(isHovering))
            set(offset3, get(offset3) - hoverSpeed());
          else
            set(offset3, get(offset3) - speed());
        }
      },
      5
    );
    return {
      destroy() {
        clearInterval(intervalId);
      }
    };
  }
  init();
  var div = root44();
  set_class(div, divCls);
  var div_1 = child(div);
  var node = child(div_1);
  slot(node, $$props.children, {}, null);
  var div_2 = sibling(sibling(div_1, true));
  var node_1 = child(div_2);
  slot(node_1, $$props.children, {}, null);
  render_effect(() => {
    set_attribute(div_1, "style", `transform: ${stringify(`translateX(${get(offset3)}px)`)}`);
    set_attribute(div_2, "style", `transform: ${stringify(`translateX(${get(offset3)}px)`)}`);
  });
  event("mouseover", div, () => set(isHovering, true), false);
  event("mouseleave", div, () => set(isHovering, false), false);
  action(div_1, ($$node) => init2($$node));
  append($$anchor, div);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Marquee);
  Marquee = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Marquee_default = Marquee;
Marquee.filename = ".../dist/marquee/Marquee.svelte";
mark_module_end(Marquee);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/utils/focusTrap.js
var selectorTabbable = `
  a[href], area[href], input:not([disabled]):not([tabindex='-1']),
  button:not([disabled]):not([tabindex='-1']),select:not([disabled]):not([tabindex='-1']),
  textarea:not([disabled]):not([tabindex='-1']),
  iframe, object, embed, *[tabindex]:not([tabindex='-1']):not([disabled]), *[contenteditable=true]
`;
function focusTrap(node) {
  function handleFocusTrap(e) {
    let isTabPressed = e.key === "Tab" || e.keyCode === 9;
    if (!isTabPressed) {
      return;
    }
    const tabbable = Array.from(node.querySelectorAll(selectorTabbable)).filter((el) => el.hidden !== true);
    let index2 = tabbable.indexOf(document.activeElement ?? node);
    if (index2 === -1 && e.shiftKey)
      index2 = 0;
    index2 += tabbable.length + (e.shiftKey ? -1 : 1);
    index2 %= tabbable.length;
    tabbable[index2].focus();
    e.preventDefault();
  }
  document.addEventListener("keydown", handleFocusTrap, true);
  return {
    destroy() {
      document.removeEventListener("keydown", handleFocusTrap, true);
    }
  };
}

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/modal/Modal.svelte
mark_module_start();
var fallback8 = template(`<h3> </h3>`);
var Frame_default_1 = template(`<!> <!>`, 1);
var Frame_default3 = template(`<!> <div role="document"><!> <!></div> <!>`, 1);
var root_122 = template(`<div></div> <div tabindex="-1" aria-modal="true" role="dialog"><div><!></div></div>`, 1);
function Modal($$anchor, $$props) {
  if (new.target === Modal)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "open",
    "title",
    "size",
    "color",
    "placement",
    "autoclose",
    "outsideclose",
    "dismissable",
    "backdropClass",
    "classBackdrop",
    "dialogClass",
    "classDialog",
    "defaultClass",
    "headerClass",
    "classHeader",
    "bodyClass",
    "classBody",
    "footerClass",
    "classFooter"
  ]);
  push($$props, false, Modal);
  const backdropCls = mutable_source();
  const dialogCls = mutable_source();
  const frameCls = mutable_source();
  const headerCls = mutable_source();
  const bodyCls = mutable_source();
  const footerCls = mutable_source();
  let open = prop($$props, "open", 4, false);
  let title = prop($$props, "title", 0, "");
  let size2 = prop($$props, "size", 0, "md");
  let color = prop($$props, "color", 0, "default");
  let placement = prop($$props, "placement", 0, "center");
  let autoclose = prop($$props, "autoclose", 0, false);
  let outsideclose = prop($$props, "outsideclose", 0, false);
  let dismissable = prop($$props, "dismissable", 0, true);
  let backdropClass = prop($$props, "backdropClass", 0, "fixed inset-0 z-40 bg-gray-900 bg-opacity-50 dark:bg-opacity-80");
  let classBackdrop = prop($$props, "classBackdrop", 0, void 0);
  let dialogClass = prop($$props, "dialogClass", 0, "fixed top-0 start-0 end-0 h-modal md:inset-0 md:h-full z-50 w-full p-4 flex");
  let classDialog = prop($$props, "classDialog", 0, void 0);
  let defaultClass = prop($$props, "defaultClass", 0, "relative flex flex-col mx-auto");
  let headerClass = prop($$props, "headerClass", 0, "flex justify-between items-center p-4 md:p-5 rounded-t-lg");
  let classHeader = prop($$props, "classHeader", 0, void 0);
  let bodyClass = prop($$props, "bodyClass", 0, "p-4 md:p-5 space-y-4 flex-1 overflow-y-auto overscroll-contain");
  let classBody = prop($$props, "classBody", 0, void 0);
  let footerClass = prop($$props, "footerClass", 0, "flex items-center p-4 md:p-5 space-x-3 rtl:space-x-reverse rounded-b-lg");
  let classFooter = prop($$props, "classFooter", 0, void 0);
  const dispatch = createEventDispatcher();
  function prepareFocus(node) {
    const walker = document.createTreeWalker(node, NodeFilter.SHOW_ELEMENT);
    let n2;
    while (n2 = walker.nextNode()) {
      if (n2 instanceof HTMLElement) {
        const el = n2;
        const [x, y] = isScrollable(el);
        if (x || y)
          el.tabIndex = 0;
      }
    }
    node.focus();
  }
  const getPlacementClasses = (placement2) => {
    switch (placement2) {
      case "top-left":
        return ["justify-start", "items-start"];
      case "top-center":
        return ["justify-center", "items-start"];
      case "top-right":
        return ["justify-end", "items-start"];
      case "center-left":
        return ["justify-start", "items-center"];
      case "center":
        return ["justify-center", "items-center"];
      case "center-right":
        return ["justify-end", "items-center"];
      case "bottom-left":
        return ["justify-start", "items-end"];
      case "bottom-center":
        return ["justify-center", "items-end"];
      case "bottom-right":
        return ["justify-end", "items-end"];
      default:
        return ["justify-center", "items-center"];
    }
  };
  const sizes = {
    xs: "max-w-md",
    sm: "max-w-lg",
    md: "max-w-2xl",
    lg: "max-w-4xl",
    xl: "max-w-7xl"
  };
  const onAutoClose = (e) => {
    const target = e.target;
    if (autoclose() && (target == null ? void 0 : target.tagName) === "BUTTON")
      hide2(e);
  };
  const onOutsideClose = (e) => {
    const target = e.target;
    if (outsideclose() && target === e.currentTarget)
      hide2(e);
  };
  const hide2 = (e) => {
    e.preventDefault();
    open(false);
  };
  const isScrollable = (e) => [
    e.scrollWidth > e.clientWidth && ["scroll", "auto"].indexOf(getComputedStyle(e).overflowX) >= 0,
    e.scrollHeight > e.clientHeight && ["scroll", "auto"].indexOf(getComputedStyle(e).overflowY) >= 0
  ];
  function handleKeys(e) {
    if (e.key === "Escape" && dismissable())
      return hide2(e);
  }
  legacy_pre_effect(() => deep_read_state(open()), () => {
    dispatch(open() ? "open" : "close");
  });
  legacy_pre_effect(
    () => (deep_read_state(backdropClass()), deep_read_state(classBackdrop())),
    () => {
      set(backdropCls, twMerge(backdropClass(), classBackdrop()));
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(dialogClass()), deep_read_state(classDialog()), deep_read_state(placement())),
    () => {
      set(dialogCls, twMerge(dialogClass(), classDialog(), getPlacementClasses(placement())));
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(defaultClass()), deep_read_state($$sanitized_props)),
    () => {
      set(frameCls, twMerge(defaultClass(), "w-full divide-y", $$sanitized_props.class));
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(headerClass()), deep_read_state(classHeader())),
    () => {
      set(headerCls, twMerge(headerClass(), classHeader()));
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(bodyClass()), deep_read_state(classBody())),
    () => {
      set(bodyCls, twMerge(bodyClass(), classBody()));
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(footerClass()), deep_read_state(classFooter())),
    () => {
      set(footerCls, twMerge(footerClass(), classFooter()));
    }
  );
  legacy_pre_effect_reset();
  init();
  var fragment = comment();
  var node_1 = first_child(fragment);
  if_block(node_1, open, ($$anchor2) => {
    var fragment_1 = root_122();
    var div = first_child(fragment_1);
    var text2 = sibling(div, true);
    text2.nodeValue = `  `;
    var div_1 = sibling(text2);
    var div_2 = child(div_1);
    var node_2 = child(div_2);
    validate_component(Frame_default)(node_2, spread_props({ rounded: true, shadow: true }, () => $$restProps, {
      get class() {
        return get(frameCls);
      },
      get color() {
        return color();
      },
      children: wrap_snippet(($$anchor3, $$slotProps) => {
        var fragment_2 = Frame_default3();
        var node_3 = first_child(fragment_2);
        if_block(node_3, () => $$slots.header || title(), ($$anchor4) => {
          var fragment_3 = comment();
          var node_4 = first_child(fragment_3);
          validate_component(Frame_default)(node_4, {
            get class() {
              return get(headerCls);
            },
            get color() {
              return color();
            },
            children: wrap_snippet(($$anchor5, $$slotProps2) => {
              var _a;
              var fragment_4 = Frame_default_1();
              var node_5 = first_child(fragment_4);
              slot(node_5, (_a = $$props.$$slots) == null ? void 0 : _a["header"], {}, ($$anchor6) => {
                var h3 = fallback8();
                var text_1 = child(h3);
                render_effect(() => {
                  set_class(h3, `text-xl font-semibold ${stringify(color() === "default" ? "" : "text-gray-900 dark:text-white")} p-0`);
                  set_text(text_1, title());
                });
                append($$anchor6, h3);
              });
              var node_6 = sibling(sibling(node_5, true));
              if_block(node_6, dismissable, ($$anchor6) => {
                var fragment_5 = comment();
                var node_7 = first_child(fragment_5);
                validate_component(CloseButton_default)(node_7, {
                  name: "Close modal",
                  get color() {
                    return color();
                  },
                  $$events: { click: hide2 }
                });
                append($$anchor6, fragment_5);
              });
              append($$anchor5, fragment_4);
            })
          });
          append($$anchor4, fragment_3);
        });
        var div_3 = sibling(sibling(node_3, true));
        var node_8 = child(div_3);
        if_block(node_8, () => dismissable() && !$$slots.header && !title(), ($$anchor4) => {
          var fragment_6 = comment();
          var node_9 = first_child(fragment_6);
          validate_component(CloseButton_default)(node_9, {
            name: "Close modal",
            class: "absolute top-3 end-2.5",
            get color() {
              return color();
            },
            $$events: { click: hide2 }
          });
          append($$anchor4, fragment_6);
        });
        var node_10 = sibling(sibling(node_8, true));
        slot(node_10, $$props.children, {}, null);
        var node_11 = sibling(sibling(div_3, true));
        if_block(node_11, () => $$slots.footer, ($$anchor4) => {
          var fragment_7 = comment();
          var node_12 = first_child(fragment_7);
          validate_component(Frame_default)(node_12, {
            get class() {
              return get(footerCls);
            },
            get color() {
              return color();
            },
            children: wrap_snippet(($$anchor5, $$slotProps2) => {
              var _a;
              var fragment_8 = comment();
              var node_13 = first_child(fragment_8);
              slot(node_13, (_a = $$props.$$slots) == null ? void 0 : _a["footer"], {}, null);
              append($$anchor5, fragment_8);
            })
          });
          append($$anchor4, fragment_7);
        });
        render_effect(() => set_class(div_3, get(bodyCls)));
        event("keydown", div_3, stopPropagation(handleKeys), false);
        event("wheel", div_3, stopPropagation(function($$arg) {
          bubble_event.call(this, $$props, $$arg);
        }));
        append($$anchor3, fragment_2);
      })
    }));
    render_effect(() => {
      set_class(div, get(backdropCls));
      set_class(div_1, get(dialogCls));
      set_class(div_2, `flex relative ${stringify(sizes[size2()])} w-full max-h-full`);
    });
    event("keydown", div_1, handleKeys, false);
    event("wheel", div_1, preventDefault(function($$arg) {
      bubble_event.call(this, $$props, $$arg);
    }));
    action(div_1, ($$node) => prepareFocus($$node));
    action(div_1, ($$node) => focusTrap($$node));
    event("click", div_1, onAutoClose, false);
    event("mousedown", div_1, onOutsideClose, false);
    append($$anchor2, fragment_1);
  });
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Modal);
  Modal = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Modal_default = Modal;
Modal.filename = ".../dist/modal/Modal.svelte";
mark_module_end(Modal);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/mega-menu/MegaMenu.svelte
mark_module_start();
var each_block6 = template(`<li><!></li>`);
var root_215 = template(`<div class="md:w-1/3 mt-4 md:mt-0"><!></div>`);
var Popper_default3 = template(`<div class="flex flex-col md:flex-row p-4 max-w-screen-md justify-center mx-auto mt-2"><ul></ul> <!></div>`);
function MegaMenu($$anchor, $$props) {
  if (new.target === MegaMenu)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["items", "full", "open", "ulClass"]);
  push($$props, false, MegaMenu);
  let items = prop($$props, "items", 8, () => []);
  let full = prop($$props, "full", 0, false);
  let open = prop($$props, "open", 4, false);
  let ulClass = prop($$props, "ulClass", 0, "grid grid-flow-row gap-y-4 md:gap-x-0 auto-col-max auto-row-max");
  let wrapperClass = mutable_source();
  let ulCls = mutable_source();
  legacy_pre_effect(
    () => (deep_read_state(full()), deep_read_state($$sanitized_props)),
    () => {
      set(wrapperClass, twMerge(full() && "border-y w-full", $$sanitized_props.class));
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(ulClass()), deep_read_state(full()), deep_read_state($$sanitized_props)),
    () => {
      set(ulCls, twMerge(ulClass(), full() && $$slots.extra ? "grid-cols-2" : "grid-cols-2 md:grid-cols-3", "text-sm font-medium", full() && $$slots.extra && "md:w-2/3", $$sanitized_props.classUl));
    }
  );
  legacy_pre_effect_reset();
  init();
  var fragment = comment();
  var node = first_child(fragment);
  var color = derived(() => full() ? "default" : "dropdown");
  var border = derived(() => !full());
  var rounded = derived(() => !full());
  {
    add_owner_effect(open, Popper_default);
    validate_component(Popper_default)(node, spread_props(
      {
        get color() {
          return get(color);
        },
        get border() {
          return get(border);
        },
        get rounded() {
          return get(rounded);
        },
        activeContent: true,
        arrow: false,
        trigger: "click",
        placement: "bottom",
        get yOnly() {
          return full();
        }
      },
      () => $$restProps,
      {
        get class() {
          return get(wrapperClass);
        },
        get open() {
          return open();
        },
        set open($$value) {
          open($$value);
        },
        $$events: {
          show($$arg) {
            bubble_event.call(this, $$props, $$arg);
          }
        },
        children: wrap_snippet(($$anchor2, $$slotProps) => {
          var div = Popper_default3();
          var ul = child(div);
          each(
            ul,
            9,
            items,
            index,
            ($$anchor3, item, index2) => {
              var li = each_block6();
              var node_1 = child(li);
              slot(
                node_1,
                $$props.children,
                {
                  get item() {
                    return unwrap(item);
                  },
                  index: unwrap(index2)
                },
                null
              );
              append($$anchor3, li);
            },
            ($$anchor3) => {
              var fragment_1 = comment();
              var node_2 = first_child(fragment_1);
              slot(
                node_2,
                $$props.children,
                {
                  get item() {
                    return items()[0];
                  },
                  index: 0
                },
                null
              );
              append($$anchor3, fragment_1);
            }
          );
          var node_3 = sibling(sibling(ul, true));
          if_block(node_3, () => full() && $$slots.extra, ($$anchor3) => {
            var _a;
            var div_1 = root_215();
            var node_4 = child(div_1);
            slot(node_4, (_a = $$props.$$slots) == null ? void 0 : _a["extra"], {}, null);
            append($$anchor3, div_1);
          });
          render_effect(() => set_class(ul, get(ulCls)));
          append($$anchor2, div);
        })
      }
    ));
  }
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(MegaMenu);
  MegaMenu = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var MegaMenu_default = MegaMenu;
MegaMenu.filename = ".../dist/mega-menu/MegaMenu.svelte";
mark_module_end(MegaMenu);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/navbar/NavContainer.svelte
mark_module_start();
var root45 = template(`<div><!></div>`);
function NavContainer($$anchor, $$props) {
  if (new.target === NavContainer)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  push($$props, false, NavContainer);
  let fluid = prop($$props, "fluid", 0, false);
  init();
  var div = root45();
  render_effect(() => set_class(div, twMerge("mx-auto flex flex-wrap justify-between items-center ", fluid() ? "w-full" : "container", $$sanitized_props.class)));
  var node = child(div);
  slot(node, $$props.children, {}, null);
  append($$anchor, div);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(NavContainer);
  NavContainer = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var NavContainer_default = NavContainer;
NavContainer.filename = ".../dist/navbar/NavContainer.svelte";
mark_module_end(NavContainer);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/navbar/Navbar.svelte
mark_module_start();
function Navbar($$anchor, $$props) {
  if (new.target === Navbar)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["fluid"]);
  push($$props, false, Navbar);
  const $$subscriptions = {};
  unsubscribe_on_destroy($$subscriptions);
  const $hidden = () => (validate_store(hidden, "hidden"), store_get(hidden, "$hidden", $$subscriptions));
  let fluid = prop($$props, "fluid", 0, false);
  let hidden = writable(true);
  setContext("navHidden", hidden);
  let toggle = () => hidden.update((hidden2) => !hidden2);
  legacy_pre_effect(() => deep_read_state($$restProps), () => {
    $$restProps.color = $$restProps.color ?? "navbar";
  });
  legacy_pre_effect_reset();
  init();
  var fragment = comment();
  var node = first_child(fragment);
  var class_1 = derived(() => twMerge("px-2 sm:px-4 py-2.5 w-full", $$sanitized_props.class));
  validate_component(Frame_default)(node, spread_props({ tag: "nav" }, () => $$restProps, {
    get class() {
      return get(class_1);
    },
    children: wrap_snippet(($$anchor2, $$slotProps) => {
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      validate_component(NavContainer_default)(node_1, {
        get fluid() {
          return fluid();
        },
        children: wrap_snippet(($$anchor3, $$slotProps2) => {
          var fragment_2 = comment();
          var node_2 = first_child(fragment_2);
          slot(
            node_2,
            $$props.children,
            {
              get hidden() {
                return $hidden();
              },
              toggle,
              NavContainer: NavContainer_default
            },
            null
          );
          append($$anchor3, fragment_2);
        })
      });
      append($$anchor2, fragment_1);
    })
  }));
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Navbar);
  Navbar = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Navbar_default = Navbar;
Navbar.filename = ".../dist/navbar/Navbar.svelte";
mark_module_end(Navbar);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/navbar/NavBrand.svelte
mark_module_start();
var root46 = template(`<a><!></a>`);
function NavBrand($$anchor, $$props) {
  if (new.target === NavBrand)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["href"]);
  push($$props, false, NavBrand);
  let href = prop($$props, "href", 0, "");
  init();
  var a = root46();
  let attributes;
  var node = child(a);
  slot(node, $$props.children, {}, null);
  render_effect(() => attributes = set_attributes(
    a,
    attributes,
    {
      href: href(),
      ...$$restProps,
      class: twMerge("flex items-center", $$sanitized_props.class)
    },
    true,
    ""
  ));
  append($$anchor, a);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(NavBrand);
  NavBrand = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var NavBrand_default = NavBrand;
NavBrand.filename = ".../dist/navbar/NavBrand.svelte";
mark_module_end(NavBrand);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/navbar/Menu.svelte
mark_module_start();
var root47 = svg_template(`<svg><!></svg>`);
function Menu($$anchor, $$props) {
  if (new.target === Menu)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["size", "color", "variation", "ariaLabel"]);
  push($$props, false, Menu);
  let size2 = prop($$props, "size", 0, "24");
  let color = prop($$props, "color", 0, "currentColor");
  let variation = prop($$props, "variation", 0, "outline");
  let ariaLabel = prop($$props, "ariaLabel", 0, "bars 3");
  let viewBox = mutable_source();
  let svgpath = mutable_source();
  let svgoutline = `<path stroke="${color()}" stroke-linecap="round" stroke-linejoin="round" d="M4 6h16M4 12h16M4 18h16"></path> `;
  let svgsolid = `<path fill="${color()}" clip-rule="evenodd" fill-rule="evenodd" d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z"></path> `;
  legacy_pre_effect(() => deep_read_state(variation()), () => {
    switch (variation()) {
      case "outline":
        set(svgpath, svgoutline);
        set(viewBox, "0 0 24 24");
        break;
      case "solid":
        set(svgpath, svgsolid);
        set(viewBox, "0 0 24 24");
        break;
      default:
        set(svgpath, svgoutline);
        set(viewBox, "0 0 24 24");
    }
  });
  legacy_pre_effect_reset();
  init();
  var svg = root47();
  let attributes;
  var node = child(svg);
  html(node, () => get(svgpath), true, false);
  render_effect(() => attributes = set_attributes(
    svg,
    attributes,
    {
      xmlns: "http://www.w3.org/2000/svg",
      role: "button",
      tabindex: "0",
      width: size2(),
      height: size2(),
      class: $$sanitized_props.class,
      ...$$restProps,
      "aria-label": ariaLabel(),
      fill: "none",
      viewBox: get(viewBox),
      "stroke-width": "2"
    },
    false,
    ""
  ));
  event("click", svg, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  append($$anchor, svg);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Menu);
  Menu = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Menu_default = Menu;
Menu.filename = ".../dist/navbar/Menu.svelte";
mark_module_end(Menu);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/navbar/NavHamburger.svelte
mark_module_start();
function NavHamburger($$anchor, $$props) {
  if (new.target === NavHamburger)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["menuClass", "onClick"]);
  push($$props, false, NavHamburger);
  let menuClass = prop($$props, "menuClass", 0, "h-6 w-6 shrink-0");
  let onClick = prop($$props, "onClick", 0, void 0);
  let btnClass = "ms-3 md:hidden";
  let hiddenStore = getContext("navHidden") ?? writable(true);
  const toggle = (ev) => hiddenStore.update((h) => !h);
  init();
  var fragment = comment();
  var node = first_child(fragment);
  var class_1 = derived(() => twMerge(btnClass, $$sanitized_props.class));
  validate_component(ToolbarButton_default)(node, spread_props({ name: "Open main menu" }, () => $$restProps, {
    get class() {
      return get(class_1);
    },
    $$events: {
      click(...$$args) {
        const $$callback = onClick() || toggle;
        return $$callback == null ? void 0 : $$callback.apply(this, $$args);
      }
    },
    children: wrap_snippet(($$anchor2, $$slotProps) => {
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      var class_2 = derived(() => twMerge(menuClass(), $$sanitized_props.classMenu));
      validate_component(Menu_default)(node_1, {
        get class() {
          return get(class_2);
        }
      });
      append($$anchor2, fragment_1);
    })
  }));
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(NavHamburger);
  NavHamburger = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var NavHamburger_default = NavHamburger;
NavHamburger.filename = ".../dist/navbar/NavHamburger.svelte";
mark_module_end(NavHamburger);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/navbar/NavLi.svelte
mark_module_start();
var root48 = template(`<li><!></li>`);
function NavLi($$anchor, $$props) {
  if (new.target === NavLi)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["href", "activeClass", "nonActiveClass"]);
  push($$props, false, NavLi);
  const active = mutable_source();
  const liClass = mutable_source();
  let href = prop($$props, "href", 0, "");
  let activeClass = prop($$props, "activeClass", 0, void 0);
  let nonActiveClass = prop($$props, "nonActiveClass", 0, void 0);
  const context = getContext("navbarContext") ?? {};
  const activeUrlStore = getContext("activeUrl");
  let navUrl = mutable_source("");
  activeUrlStore.subscribe((value) => {
    set(navUrl, value);
  });
  legacy_pre_effect(
    () => (get(navUrl), deep_read_state(href())),
    () => {
      set(active, get(navUrl) ? href() === get(navUrl) : false);
    }
  );
  legacy_pre_effect(
    () => (get(active), deep_read_state(activeClass()), deep_read_state(nonActiveClass()), deep_read_state($$sanitized_props)),
    () => {
      set(liClass, twMerge("block py-2 pe-4 ps-3 md:p-0 rounded md:border-0", get(active) ? activeClass() ?? context.activeClass : nonActiveClass() ?? context.nonActiveClass, $$sanitized_props.class));
    }
  );
  legacy_pre_effect_reset();
  init();
  var li = root48();
  var node = child(li);
  validate_void_dynamic_element(() => href() ? "a" : "div");
  validate_dynamic_element_tag(() => href() ? "a" : "div");
  element(node, () => href() ? "a" : "div", false, ($$element, $$anchor2) => {
    let attributes;
    render_effect(() => attributes = set_dynamic_element_attributes(
      $$element,
      attributes,
      {
        role: href() ? void 0 : "link",
        href: href(),
        ...$$restProps,
        class: get(liClass)
      },
      ""
    ));
    event("blur", $$element, function($$arg) {
      bubble_event.call(this, $$props, $$arg);
    });
    event("change", $$element, function($$arg) {
      bubble_event.call(this, $$props, $$arg);
    });
    event("click", $$element, function($$arg) {
      bubble_event.call(this, $$props, $$arg);
    });
    event("focus", $$element, function($$arg) {
      bubble_event.call(this, $$props, $$arg);
    });
    event("keydown", $$element, function($$arg) {
      bubble_event.call(this, $$props, $$arg);
    });
    event("keypress", $$element, function($$arg) {
      bubble_event.call(this, $$props, $$arg);
    });
    event("keyup", $$element, function($$arg) {
      bubble_event.call(this, $$props, $$arg);
    });
    event("mouseenter", $$element, function($$arg) {
      bubble_event.call(this, $$props, $$arg);
    });
    event("mouseleave", $$element, function($$arg) {
      bubble_event.call(this, $$props, $$arg);
    });
    event("mouseover", $$element, function($$arg) {
      bubble_event.call(this, $$props, $$arg);
    });
    var fragment = comment();
    var node_1 = first_child(fragment);
    slot(node_1, $$props.children, {}, null);
    append($$anchor2, fragment);
  });
  append($$anchor, li);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(NavLi);
  NavLi = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var NavLi_default = NavLi;
NavLi.filename = ".../dist/navbar/NavLi.svelte";
mark_module_end(NavLi);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/navbar/NavUl.svelte
mark_module_start();
var root_123 = template(`<div><!></div>`);
var root_216 = template(`<div><ul><!></ul></div>`);
function NavUl($$anchor, $$props) {
  if (new.target === NavUl)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "activeUrl",
    "divClass",
    "ulClass",
    "hidden",
    "slideParams",
    "activeClass",
    "nonActiveClass"
  ]);
  push($$props, false, NavUl);
  const $$subscriptions = {};
  unsubscribe_on_destroy($$subscriptions);
  const $hiddenStore = () => (validate_store(hiddenStore, "hiddenStore"), store_get(hiddenStore, "$hiddenStore", $$subscriptions));
  const activeUrlStore = writable("");
  let activeUrl = prop($$props, "activeUrl", 0, "");
  let divClass = prop($$props, "divClass", 0, "w-full md:block md:w-auto");
  let ulClass = prop($$props, "ulClass", 0, "flex flex-col p-4 mt-4 md:flex-row md:space-x-8 rtl:space-x-reverse md:mt-0 md:text-sm md:font-medium");
  let hidden = prop($$props, "hidden", 0, void 0);
  let slideParams = prop($$props, "slideParams", 8, () => ({ delay: 250, duration: 500, easing: quintOut }));
  let activeClass = prop($$props, "activeClass", 0, "text-white bg-primary-700 md:bg-transparent md:text-primary-700 md:dark:text-white dark:bg-primary-600 md:dark:bg-transparent");
  let nonActiveClass = prop($$props, "nonActiveClass", 0, "text-gray-700 hover:bg-gray-100 md:hover:bg-transparent md:border-0 md:hover:text-primary-700 dark:text-gray-400 md:dark:hover:text-white dark:hover:bg-gray-700 dark:hover:text-white md:dark:hover:bg-transparent");
  setContext("navbarContext", {
    activeClass: activeClass(),
    nonActiveClass: nonActiveClass()
  });
  setContext("activeUrl", activeUrlStore);
  let hiddenStore = getContext("navHidden");
  let _hidden = mutable_source();
  let _divClass = mutable_source();
  let _ulClass = mutable_source();
  legacy_pre_effect(() => deep_read_state(activeUrl()), () => {
    activeUrlStore.set(activeUrl());
  });
  legacy_pre_effect(
    () => (deep_read_state(hidden()), $hiddenStore()),
    () => {
      set(_hidden, hidden() ?? $hiddenStore() ?? true);
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(divClass()), deep_read_state($$sanitized_props)),
    () => {
      set(_divClass, twMerge(divClass(), $$sanitized_props.class));
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(ulClass()), deep_read_state($$sanitized_props)),
    () => {
      set(_ulClass, twMerge(
        ulClass(),
        // 'divide-y md:divide-y-0 divide-gray-100 dark:divide-gray-700',
        $$sanitized_props.classUl
      ));
    }
  );
  legacy_pre_effect_reset();
  init();
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    () => !get(_hidden),
    ($$anchor2) => {
      var div = root_123();
      transition(3, div, () => slide, slideParams);
      let attributes;
      var node_1 = child(div);
      validate_component(Frame_default)(node_1, {
        tag: "ul",
        border: true,
        rounded: true,
        color: "navbarUl",
        get class() {
          return get(_ulClass);
        },
        children: wrap_snippet(($$anchor3, $$slotProps) => {
          var fragment_1 = comment();
          var node_2 = first_child(fragment_1);
          slot(node_2, $$props.children, {}, null);
          append($$anchor3, fragment_1);
        })
      });
      render_effect(() => attributes = set_attributes(
        div,
        attributes,
        {
          ...$$restProps,
          class: get(_divClass),
          role: "button",
          tabindex: "0"
        },
        true,
        ""
      ));
      event("click", div, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      append($$anchor2, div);
    },
    ($$anchor2) => {
      var div_1 = root_216();
      let attributes_1;
      var ul = child(div_1);
      var node_3 = child(ul);
      slot(node_3, $$props.children, {}, null);
      render_effect(() => {
        attributes_1 = set_attributes(
          div_1,
          attributes_1,
          {
            ...$$restProps,
            class: get(_divClass),
            hidden: get(_hidden)
          },
          true,
          ""
        );
        set_class(ul, get(_ulClass));
      });
      append($$anchor2, div_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(NavUl);
  NavUl = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var NavUl_default = NavUl;
NavUl.filename = ".../dist/navbar/NavUl.svelte";
mark_module_end(NavUl);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/pagination/PaginationItem.svelte
mark_module_start();
function PaginationItem($$anchor, $$props) {
  if (new.target === PaginationItem)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  push($$props, false, PaginationItem);
  let href = prop($$props, "href", 0, void 0);
  let active = prop($$props, "active", 0, false);
  let activeClass = prop($$props, "activeClass", 0, "text-blue-600 border border-gray-300 bg-blue-50 hover:bg-blue-100 hover:text-blue-700 dark:border-gray-700 dark:bg-gray-700 dark:text-white");
  let normalClass = prop($$props, "normalClass", 0, "text-gray-500 bg-white hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white");
  let large = prop($$props, "large", 0, false);
  const group = getContext("group");
  const table = getContext("table");
  let defaultClass = mutable_source();
  legacy_pre_effect(
    () => (deep_read_state(large()), deep_read_state(active()), deep_read_state(activeClass()), deep_read_state(normalClass()), deep_read_state($$sanitized_props)),
    () => {
      set(defaultClass, twMerge(
        "flex items-center font-medium",
        large() ? "h-10 px-4 text-base" : "h-8 px-3 text-sm",
        group ? "" : table ? "rounded" : "rounded-lg",
        // table || 'border border-gray-300 dark:border-gray-700 dark:bg-gray-800',
        table ? "" : "border",
        active() ? activeClass() : normalClass(),
        $$sanitized_props.class
      ));
    }
  );
  legacy_pre_effect_reset();
  init();
  var fragment = comment();
  var node = first_child(fragment);
  validate_void_dynamic_element(() => href() ? "a" : "button");
  validate_dynamic_element_tag(() => href() ? "a" : "button");
  element(node, () => href() ? "a" : "button", false, ($$element, $$anchor2) => {
    let attributes;
    render_effect(() => attributes = set_dynamic_element_attributes(
      $$element,
      attributes,
      {
        href: href(),
        class: get(defaultClass),
        role: href() ? "button" : void 0
      },
      ""
    ));
    event("blur", $$element, function($$arg) {
      bubble_event.call(this, $$props, $$arg);
    });
    event("change", $$element, function($$arg) {
      bubble_event.call(this, $$props, $$arg);
    });
    event("click", $$element, function($$arg) {
      bubble_event.call(this, $$props, $$arg);
    });
    event("focus", $$element, function($$arg) {
      bubble_event.call(this, $$props, $$arg);
    });
    event("keydown", $$element, function($$arg) {
      bubble_event.call(this, $$props, $$arg);
    });
    event("keypress", $$element, function($$arg) {
      bubble_event.call(this, $$props, $$arg);
    });
    event("keyup", $$element, function($$arg) {
      bubble_event.call(this, $$props, $$arg);
    });
    event("mouseenter", $$element, function($$arg) {
      bubble_event.call(this, $$props, $$arg);
    });
    event("mouseleave", $$element, function($$arg) {
      bubble_event.call(this, $$props, $$arg);
    });
    event("mouseover", $$element, function($$arg) {
      bubble_event.call(this, $$props, $$arg);
    });
    var fragment_1 = comment();
    var node_1 = first_child(fragment_1);
    slot(node_1, $$props.children, {}, null);
    append($$anchor2, fragment_1);
  });
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(PaginationItem);
  PaginationItem = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var PaginationItem_default = PaginationItem;
PaginationItem.filename = ".../dist/pagination/PaginationItem.svelte";
mark_module_end(PaginationItem);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/pagination/Pagination.svelte
mark_module_start();
var fallback9 = template(`Previous`, 1);
var each_block7 = template(`<li><!></li>`);
var fallback_13 = template(`Next`, 1);
var root49 = template(`<nav><ul><li><!></li> <!> <li><!></li></ul></nav>`);
function Pagination($$anchor, $$props) {
  if (new.target === Pagination)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  push($$props, false, Pagination);
  let pages = prop($$props, "pages", 8, () => []);
  let activeClass = prop($$props, "activeClass", 0, "text-blue-600 border border-gray-300 bg-blue-50 hover:bg-blue-100 hover:text-blue-700 dark:border-gray-700 dark:bg-gray-700 dark:text-white");
  let normalClass = prop($$props, "normalClass", 0, "text-gray-500 bg-white hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white");
  let ulClass = prop($$props, "ulClass", 0, "inline-flex -space-x-px rtl:space-x-reverse items-center");
  let table = prop($$props, "table", 0, false);
  let large = prop($$props, "large", 0, false);
  let ariaLabel = prop($$props, "ariaLabel", 0, "Page navigation");
  const dispatch = createEventDispatcher();
  setContext("group", true);
  setContext("table", table());
  const previous = () => {
    dispatch("previous");
  };
  const next = () => {
    dispatch("next");
  };
  init();
  var nav = root49();
  var ul = child(nav);
  render_effect(() => set_class(ul, twMerge(ulClass(), table() && "divide-x rtl:divide-x-reverse dark divide-gray-700 dark:divide-gray-700", $$sanitized_props.class)));
  var li = child(ul);
  var node = child(li);
  var class_1 = derived(() => table() ? "rounded-l" : "rounded-s-lg");
  validate_component(PaginationItem_default)(node, {
    get large() {
      return large();
    },
    get normalClass() {
      return normalClass();
    },
    get class() {
      return get(class_1);
    },
    $$events: { click: previous },
    children: wrap_snippet(($$anchor2, $$slotProps) => {
      var _a;
      var fragment = comment();
      var node_1 = first_child(fragment);
      slot(node_1, (_a = $$props.$$slots) == null ? void 0 : _a["prev"], {}, ($$anchor3) => {
        var fragment_1 = fallback9();
        append($$anchor3, fragment_1);
      });
      append($$anchor2, fragment);
    })
  });
  var node_2 = sibling(sibling(li, true));
  each(node_2, 1, pages, index, ($$anchor2, $$item, $$index) => {
    let name = () => unwrap(unwrap($$item)).name;
    name();
    let href = () => unwrap(unwrap($$item)).href;
    href();
    let active = () => unwrap(unwrap($$item)).active;
    active();
    var li_1 = each_block7();
    var node_3 = child(li_1);
    validate_component(PaginationItem_default)(node_3, {
      get large() {
        return large();
      },
      get active() {
        return active();
      },
      get activeClass() {
        return activeClass();
      },
      get normalClass() {
        return normalClass();
      },
      get href() {
        return href();
      },
      $$events: {
        blur($$arg) {
          bubble_event.call(this, $$props, $$arg);
        },
        change($$arg) {
          bubble_event.call(this, $$props, $$arg);
        },
        click($$arg) {
          bubble_event.call(this, $$props, $$arg);
        },
        focus($$arg) {
          bubble_event.call(this, $$props, $$arg);
        },
        keydown($$arg) {
          bubble_event.call(this, $$props, $$arg);
        },
        keypress($$arg) {
          bubble_event.call(this, $$props, $$arg);
        },
        keyup($$arg) {
          bubble_event.call(this, $$props, $$arg);
        },
        mouseenter($$arg) {
          bubble_event.call(this, $$props, $$arg);
        },
        mouseleave($$arg) {
          bubble_event.call(this, $$props, $$arg);
        },
        mouseover($$arg) {
          bubble_event.call(this, $$props, $$arg);
        }
      },
      children: wrap_snippet(($$anchor3, $$slotProps) => {
        var text2 = text($$anchor3);
        render_effect(() => set_text(text2, name()));
        append($$anchor3, text2);
      })
    });
    append($$anchor2, li_1);
  });
  var li_2 = sibling(sibling(node_2, true));
  var node_4 = child(li_2);
  var class_2 = derived(() => table() ? "rounded-r" : "rounded-e-lg");
  validate_component(PaginationItem_default)(node_4, {
    get large() {
      return large();
    },
    get normalClass() {
      return normalClass();
    },
    get class() {
      return get(class_2);
    },
    $$events: { click: next },
    children: wrap_snippet(($$anchor2, $$slotProps) => {
      var _a;
      var fragment_3 = comment();
      var node_5 = first_child(fragment_3);
      slot(node_5, (_a = $$props.$$slots) == null ? void 0 : _a["next"], {}, ($$anchor3) => {
        var fragment_4 = fallback_13();
        append($$anchor3, fragment_4);
      });
      append($$anchor2, fragment_3);
    })
  });
  render_effect(() => set_attribute(nav, "aria-label", ariaLabel()));
  append($$anchor, nav);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Pagination);
  Pagination = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Pagination_default = Pagination;
Pagination.filename = ".../dist/pagination/Pagination.svelte";
mark_module_end(Pagination);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/popover/Popover.svelte
mark_module_start();
var fallback10 = template(`<h3 class="font-semibold text-gray-900 dark:text-white"> </h3>`);
var root_124 = template(`<div class="py-2 px-3 bg-gray-100 rounded-t-md border-b border-gray-200 dark:border-gray-600 dark:bg-gray-700"><!></div>`);
var Popper_default4 = template(`<!> <div><!></div>`, 1);
function Popover($$anchor, $$props) {
  if (new.target === Popover)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["title", "defaultClass"]);
  push($$props, false, Popover);
  let title = prop($$props, "title", 0, "");
  let defaultClass = prop($$props, "defaultClass", 0, "py-2 px-3");
  init();
  var fragment = comment();
  var node = first_child(fragment);
  validate_component(Popper_default)(node, spread_props(
    {
      activeContent: true,
      border: true,
      shadow: true,
      rounded: true
    },
    () => $$restProps,
    {
      get class() {
        return `dark:!border-gray-600 ${stringify($$sanitized_props.class)}`;
      },
      $$events: {
        show($$arg) {
          bubble_event.call(this, $$props, $$arg);
        }
      },
      children: wrap_snippet(($$anchor2, $$slotProps) => {
        var fragment_1 = Popper_default4();
        var node_1 = first_child(fragment_1);
        if_block(node_1, () => $$slots.title || title(), ($$anchor3) => {
          var _a;
          var div = root_124();
          var node_2 = child(div);
          slot(node_2, (_a = $$props.$$slots) == null ? void 0 : _a["title"], {}, ($$anchor4) => {
            var h3 = fallback10();
            var text2 = child(h3);
            render_effect(() => set_text(text2, title()));
            append($$anchor4, h3);
          });
          append($$anchor3, div);
        });
        var div_1 = sibling(sibling(node_1, true));
        var node_3 = child(div_1);
        slot(node_3, $$props.children, {}, null);
        render_effect(() => set_class(div_1, defaultClass()));
        append($$anchor2, fragment_1);
      })
    }
  ));
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Popover);
  Popover = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Popover_default = Popover;
Popover.filename = ".../dist/popover/Popover.svelte";
mark_module_end(Popover);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/progress/Progressbar.svelte
mark_module_start();
var root_125 = template(`<div><span class="text-base font-medium text-blue-700 dark:text-white"> </span> <span class="text-sm font-medium text-blue-700 dark:text-white"> </span></div>`);
var root_217 = template(`<div> </div>`);
var root_38 = template(`<div></div>`);
var root50 = template(`<!> <div><!></div>`, 1);
function Progressbar($$anchor, $$props) {
  if (new.target === Progressbar)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "progress",
    "precision",
    "tweenDuration",
    "animate",
    "size",
    "labelInside",
    "labelOutside",
    "easing",
    "color",
    "labelInsideClass",
    "divClass"
  ]);
  push($$props, false, Progressbar);
  const $$subscriptions = {};
  unsubscribe_on_destroy($$subscriptions);
  const $_progress = () => (validate_store(_progress, "_progress"), store_get(_progress, "$_progress", $$subscriptions));
  let progress = prop($$props, "progress", 0, "45");
  let precision = prop($$props, "precision", 0, 0);
  let tweenDuration = prop($$props, "tweenDuration", 0, 400);
  let animate = prop($$props, "animate", 0, false);
  let size2 = prop($$props, "size", 0, "h-2.5");
  let labelInside = prop($$props, "labelInside", 0, false);
  let labelOutside = prop($$props, "labelOutside", 0, "");
  let easing = prop($$props, "easing", 0, cubicOut);
  let color = prop($$props, "color", 0, "primary");
  let labelInsideClass = prop($$props, "labelInsideClass", 0, "text-primary-100 text-xs font-medium text-center p-0.5 leading-none rounded-full");
  let divClass = prop($$props, "divClass", 0, "w-full bg-gray-200 rounded-full dark:bg-gray-700");
  const _progress = tweened(0, {
    duration: animate() ? tweenDuration() : 0,
    easing: easing()
  });
  const barColors = {
    primary: "bg-primary-600",
    blue: "bg-blue-600",
    gray: "bg-gray-600 dark:bg-gray-300",
    red: "bg-red-600 dark:bg-red-500",
    green: "bg-green-600 dark:bg-green-500",
    yellow: "bg-yellow-400",
    purple: "bg-purple-600 dark:bg-purple-500",
    indigo: "bg-indigo-600 dark:bg-indigo-500"
  };
  legacy_pre_effect(() => deep_read_state(progress()), () => {
    _progress.set(Number(progress()));
  });
  legacy_pre_effect_reset();
  init();
  var fragment = root50();
  var node = first_child(fragment);
  if_block(node, labelOutside, ($$anchor2) => {
    var div = root_125();
    let attributes;
    var span = child(div);
    var text2 = child(span);
    var span_1 = sibling(sibling(span, true));
    var text_1 = child(span_1);
    render_effect(() => {
      attributes = set_attributes(
        div,
        attributes,
        {
          ...$$restProps,
          class: twMerge("flex justify-between mb-1", $$sanitized_props.classLabelOutside)
        },
        true,
        ""
      );
      set_text(text2, labelOutside());
      set_text(text_1, `${stringify(progress())}%`);
    });
    append($$anchor2, div);
  });
  var div_1 = sibling(sibling(node, true));
  render_effect(() => set_class(div_1, twMerge(divClass(), size2(), $$sanitized_props.class)));
  var node_1 = child(div_1);
  if_block(
    node_1,
    labelInside,
    ($$anchor2) => {
      var div_2 = root_217();
      render_effect(() => set_class(div_2, twJoin(labelInsideClass(), barColors[color()])));
      var text_2 = child(div_2);
      render_effect(() => set_text(text_2, `${stringify($_progress().toFixed(precision()))}%`));
      render_effect(() => set_attribute(div_2, "style", `width: ${stringify($_progress())}%`));
      append($$anchor2, div_2);
    },
    ($$anchor2) => {
      var div_3 = root_38();
      render_effect(() => set_class(div_3, twJoin(barColors[color()], size2(), "rounded-full")));
      render_effect(() => set_attribute(div_3, "style", `width: ${stringify($_progress())}%`));
      append($$anchor2, div_3);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Progressbar);
  Progressbar = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Progressbar_default = Progressbar;
Progressbar.filename = ".../dist/progress/Progressbar.svelte";
mark_module_end(Progressbar);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/rating/Star.svelte
mark_module_start();
var root_126 = svg_template(`<stop offset="0%"></stop><stop></stop><stop stop-color="transparent"></stop><stop offset="100%" stop-color="transparent"></stop>`, 1);
var root_218 = svg_template(`<stop offset="0%"></stop><stop offset="100%"></stop>`, 1);
var root51 = svg_template(`<svg><defs><linearGradient><!></linearGradient></defs><g stroke-width="2"><polygon points="165.000, 185.000, 188.511, 197.361, 184.021, 171.180, 
    203.042, 152.639, 176.756, 148.820, 165.000, 125.000, 
    153.244, 148.820, 126.958, 152.639, 145.979, 171.180,
    141.489, 197.361, 165.000, 185.000"></polygon></g></svg>`);
function Star($$anchor, $$props) {
  if (new.target === Star)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "fillPercent",
    "fillColor",
    "strokeColor",
    "size",
    "ariaLabel",
    "id",
    "role"
  ]);
  push($$props, false, Star);
  let fillPercent = prop($$props, "fillPercent", 0, 100);
  let fillColor = prop($$props, "fillColor", 0, "#F5CA14");
  let strokeColor = prop($$props, "strokeColor", 0, "#F5CA14");
  let size2 = prop($$props, "size", 0, 24);
  let ariaLabel = prop($$props, "ariaLabel", 0, "star");
  let id = prop($$props, "id", 8, generateId_default);
  let role = prop($$props, "role", 0, "img");
  init();
  var svg = root51();
  let attributes;
  var defs = child(svg);
  var linearGradient = child(defs);
  var node = child(linearGradient);
  if_block(
    node,
    () => fillPercent() !== 100,
    ($$anchor2) => {
      var fragment = root_126();
      var stop = first_child(fragment);
      var stop_1 = sibling(stop);
      var stop_2 = sibling(stop_1);
      var stop_3 = sibling(stop_2);
      render_effect(() => {
        set_attribute(stop, "stop-color", fillColor());
        set_attribute(stop_1, "offset", `${stringify(fillPercent())}%`);
        set_attribute(stop_1, "stop-color", fillColor());
        set_attribute(stop_2, "offset", `${stringify(fillPercent())}%`);
      });
      append($$anchor2, fragment);
    },
    ($$anchor2) => {
      var fragment_1 = root_218();
      var stop_4 = first_child(fragment_1);
      var stop_5 = sibling(stop_4);
      render_effect(() => {
        set_attribute(stop_4, "stop-color", fillColor());
        set_attribute(stop_5, "stop-color", fillColor());
      });
      append($$anchor2, fragment_1);
    }
  );
  var g = sibling(defs);
  var polygon = child(g);
  render_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        width: size2(),
        height: size2(),
        ...$$restProps,
        class: $$sanitized_props.class,
        "aria-label": ariaLabel(),
        viewBox: "100 100 120 120",
        role: role()
      },
      false,
      ""
    );
    set_attribute(linearGradient, "id", id());
    set_attribute(g, "fill", `url(#${stringify(id())})`);
    set_attribute(g, "stroke", strokeColor());
  });
  event("click", svg, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  append($$anchor, svg);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Star);
  Star = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Star_default = Star;
Star.filename = ".../dist/rating/Star.svelte";
mark_module_end(Star);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/rating/Rating.svelte
mark_module_start();
var root_127 = template(`<!> <p class="ms-2 text-sm font-bold text-gray-900 dark:text-white"> </p> <!>`, 1);
var root_219 = template(`<!> <!> <!> <!>`, 1);
var root52 = template(`<div><!></div>`);
function Rating($$anchor, $$props) {
  if (new.target === Rating)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  push($$props, false, Rating);
  let divClass = prop($$props, "divClass", 0, "flex items-center");
  let size2 = prop($$props, "size", 0, 24);
  let total = prop($$props, "total", 0, 5);
  let rating = prop($$props, "rating", 0, 4);
  let partialId = prop($$props, "partialId", 8, () => "partialStar" + generateId_default());
  let icon = prop($$props, "icon", 0, Star_default);
  let count = prop($$props, "count", 0, false);
  const fullStarId = generateId_default();
  const grayStarId = generateId_default();
  let fullStars = mutable_source(Math.floor(rating()));
  let rateDiffence = rating() - get(fullStars);
  let percentRating = Math.round(rateDiffence * 100);
  let grayStars = mutable_source(total() - (get(fullStars) + Math.ceil(rateDiffence)));
  init();
  var div = root52();
  render_effect(() => set_class(div, twMerge(divClass(), $$sanitized_props.class)));
  var node = child(div);
  if_block(
    node,
    count,
    ($$anchor2) => {
      var fragment = root_127();
      var node_1 = first_child(fragment);
      component(node_1, icon, ($$component) => {
        validate_dynamic_component(() => {
          validate_component($$component)(node_1, {
            fillPercent: 100,
            get size() {
              return size2();
            }
          });
        });
      });
      var p = sibling(sibling(node_1, true));
      var text2 = child(p);
      var node_2 = sibling(sibling(p, true));
      slot(node_2, $$props.children, {}, null);
      render_effect(() => set_text(text2, rating()));
      append($$anchor2, fragment);
    },
    ($$anchor2) => {
      var fragment_1 = root_219();
      var node_3 = first_child(fragment_1);
      each(node_3, 1, () => Array(get(fullStars)), index, ($$anchor3, star, $$index) => {
        var fragment_2 = comment();
        var node_4 = first_child(fragment_2);
        component(node_4, icon, ($$component) => {
          validate_dynamic_component(() => {
            validate_component($$component)(node_4, {
              get size() {
                return size2();
              },
              fillPercent: 100,
              id: fullStarId
            });
          });
        });
        append($$anchor3, fragment_2);
      });
      var node_5 = sibling(sibling(node_3, true));
      if_block(node_5, () => percentRating, ($$anchor3) => {
        var fragment_3 = comment();
        var node_6 = first_child(fragment_3);
        component(node_6, icon, ($$component) => {
          validate_dynamic_component(() => {
            validate_component($$component)(node_6, {
              get size() {
                return size2();
              },
              fillPercent: percentRating,
              get id() {
                return partialId();
              }
            });
          });
        });
        append($$anchor3, fragment_3);
      });
      var node_7 = sibling(sibling(node_5, true));
      each(node_7, 1, () => Array(get(grayStars)), index, ($$anchor3, star, $$index_1) => {
        var fragment_4 = comment();
        var node_8 = first_child(fragment_4);
        component(node_8, icon, ($$component) => {
          validate_dynamic_component(() => {
            validate_component($$component)(node_8, {
              get size() {
                return size2();
              },
              fillPercent: 0,
              id: grayStarId
            });
          });
        });
        append($$anchor3, fragment_4);
      });
      var node_9 = sibling(sibling(node_7, true));
      if_block(node_9, () => $$slots.text, ($$anchor3) => {
        var _a;
        var fragment_5 = comment();
        var node_10 = first_child(fragment_5);
        slot(node_10, (_a = $$props.$$slots) == null ? void 0 : _a["text"], {}, null);
        append($$anchor3, fragment_5);
      });
      append($$anchor2, fragment_1);
    }
  );
  append($$anchor, div);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Rating);
  Rating = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Rating_default = Rating;
Rating.filename = ".../dist/rating/Rating.svelte";
mark_module_end(Rating);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/rating/AdvancedRating.svelte
mark_module_start();
var each_block8 = template(`<div><span> </span> <div><div></div></div> <span> </span></div>`);
var root53 = template(`<!> <!> <!>`, 1);
function AdvancedRating($$anchor, $$props) {
  if (new.target === AdvancedRating)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  push($$props, false, AdvancedRating);
  let ratings = prop($$props, "ratings", 8, () => []);
  let divClass = prop($$props, "divClass", 0, "flex items-center mt-4");
  let labelClass2 = prop($$props, "labelClass", 0, "text-sm font-medium text-gray-600 dark:text-gray-500");
  let ratingDivClass = prop($$props, "ratingDivClass", 0, "mx-4 w-2/4 h-5 bg-gray-200 rounded dark:bg-gray-700");
  let ratingClass = prop($$props, "ratingClass", 0, "h-5 bg-yellow-400 rounded");
  let rightLabelClass = prop($$props, "rightLabelClass", 0, "text-sm font-medium text-gray-600 dark:text-gray-500");
  let unit = prop($$props, "unit", 0, "%");
  let divCls = twMerge(divClass(), $$sanitized_props.classDiv);
  let labelCls = twMerge(labelClass2(), $$sanitized_props.classLabel);
  let ratingDivCls = twMerge(ratingDivClass(), $$sanitized_props.classRatingDiv);
  let ratingCls = twMerge(ratingClass(), $$sanitized_props.classRating);
  let rightLabelCls = twMerge(rightLabelClass(), $$sanitized_props.classRightLabel);
  init();
  var fragment = root53();
  var node = first_child(fragment);
  if_block(node, () => $$slots.rating, ($$anchor2) => {
    var _a;
    var fragment_1 = comment();
    var node_1 = first_child(fragment_1);
    slot(node_1, (_a = $$props.$$slots) == null ? void 0 : _a["rating"], {}, null);
    append($$anchor2, fragment_1);
  });
  var node_2 = sibling(sibling(node, true));
  if_block(node_2, () => $$slots.globalText, ($$anchor2) => {
    var _a;
    var fragment_2 = comment();
    var node_3 = first_child(fragment_2);
    slot(node_3, (_a = $$props.$$slots) == null ? void 0 : _a["globalText"], {}, null);
    append($$anchor2, fragment_2);
  });
  var node_4 = sibling(sibling(node_2, true));
  each(node_4, 1, ratings, index, ($$anchor2, $$item, $$index) => {
    let label = () => unwrap(unwrap($$item)).label;
    label();
    let rating = () => unwrap(unwrap($$item)).rating;
    rating();
    var div = each_block8();
    set_class(div, divCls);
    var span = child(div);
    set_class(span, labelCls);
    var text2 = child(span);
    var div_1 = sibling(sibling(span, true));
    set_class(div_1, ratingDivCls);
    var div_2 = child(div_1);
    set_class(div_2, ratingCls);
    var span_1 = sibling(sibling(div_1, true));
    set_class(span_1, rightLabelCls);
    var text_1 = child(span_1);
    render_effect(() => {
      set_text(text2, label());
      set_attribute(div_2, "style", `width: ${stringify(rating())}%`);
      set_text(text_1, `${stringify(rating())}${stringify(unit())}`);
    });
    append($$anchor2, div);
  });
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(AdvancedRating);
  AdvancedRating = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var AdvancedRating_default = AdvancedRating;
AdvancedRating.filename = ".../dist/rating/AdvancedRating.svelte";
mark_module_end(AdvancedRating);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/rating/ScoreRating.svelte
mark_module_start();
var root_128 = template(`<p> </p>`);
var root_220 = template(`<p> </p>`);
var root_39 = template(`<span></span> <p> </p>`, 1);
var root_49 = template(`<a> </a>`);
var each_block9 = template(`<dl><dt class="text-sm font-medium text-gray-500 dark:text-gray-400"> </dt> <dd class="flex items-center mb-3"><div class="w-full bg-gray-200 rounded h-2.5 dark:bg-gray-700 me-2"><div></div></div> <span class="text-sm font-medium text-gray-500 dark:text-gray-400"> </span></dd></dl>`);
var each_block_1 = template(`<dl><dt class="text-sm font-medium text-gray-500 dark:text-gray-400"> </dt> <dd class="flex items-center mb-3"><div class="w-full bg-gray-200 rounded h-2.5 dark:bg-gray-700 me-2"><div></div></div> <span class="text-sm font-medium text-gray-500 dark:text-gray-400"> </span></dd></dl>`);
var root54 = template(`<div class="flex items-center mb-5"><!> <!> <!> <!></div> <div class="gap-8 sm:grid sm:grid-cols-2"><div></div> <div></div></div>`, 1);
function ScoreRating($$anchor, $$props) {
  if (new.target === ScoreRating)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, false, ScoreRating);
  let ratings = prop($$props, "ratings", 8, () => []);
  let ratings2 = prop($$props, "ratings2", 8, () => []);
  let desc1Class = prop($$props, "desc1Class", 0, "bg-primary-100 w-8 text-primary-800 text-sm font-semibold inline-flex items-center p-1.5 rounded dark:bg-primary-200 dark:text-primary-800");
  let desc2Class = prop($$props, "desc2Class", 0, "ms-2 w-24 font-medium text-gray-900 dark:text-white");
  let desc3spanClass = prop($$props, "desc3spanClass", 0, "mx-2 w-1 h-1 bg-gray-900 rounded-full dark:bg-gray-500");
  let desc3pClass = prop($$props, "desc3pClass", 0, "text-sm  w-24 font-medium text-gray-500 dark:text-gray-400");
  let linkClass = prop($$props, "linkClass", 0, "ms-auto w-32 text-sm font-medium text-primary-600 hover:underline dark:text-primary-500");
  let barColor = prop($$props, "barColor", 0, "bg-primary-600 h-2.5 rounded dark:bg-primary-500");
  init();
  var fragment = root54();
  var div = first_child(fragment);
  var node = child(div);
  if_block(node, () => $$props.headerLabel.desc1, ($$anchor2) => {
    var p = root_128();
    var text2 = child(p);
    render_effect(() => {
      set_class(p, desc1Class());
      set_text(text2, $$props.headerLabel.desc1);
    });
    append($$anchor2, p);
  });
  var node_1 = sibling(sibling(node, true));
  if_block(node_1, () => $$props.headerLabel.desc2, ($$anchor2) => {
    var p_1 = root_220();
    var text_1 = child(p_1);
    render_effect(() => {
      set_class(p_1, desc2Class());
      set_text(text_1, $$props.headerLabel.desc2);
    });
    append($$anchor2, p_1);
  });
  var node_2 = sibling(sibling(node_1, true));
  if_block(node_2, () => $$props.headerLabel.desc3, ($$anchor2) => {
    var fragment_1 = root_39();
    var span = first_child(fragment_1);
    var p_2 = sibling(sibling(span, true));
    var text_2 = child(p_2);
    render_effect(() => {
      set_class(span, desc3spanClass());
      set_class(p_2, desc3pClass());
      set_text(text_2, $$props.headerLabel.desc3);
    });
    append($$anchor2, fragment_1);
  });
  var node_3 = sibling(sibling(node_2, true));
  if_block(node_3, () => $$props.headerLabel.link, ($$anchor2) => {
    var a = root_49();
    var text_3 = child(a);
    render_effect(() => {
      set_attribute(a, "href", $$props.headerLabel.link.url);
      set_class(a, linkClass());
      set_text(text_3, $$props.headerLabel.link.label);
    });
    append($$anchor2, a);
  });
  var div_1 = sibling(sibling(div, true));
  var div_2 = child(div_1);
  each(div_2, 9, ratings, index, ($$anchor2, $$item, $$index) => {
    let label = () => unwrap(unwrap($$item)).label;
    label();
    let rating = () => unwrap(unwrap($$item)).rating;
    rating();
    var dl = each_block9();
    var dt = child(dl);
    var text_4 = child(dt);
    var dd = sibling(sibling(dt, true));
    var div_3 = child(dd);
    var div_4 = child(div_3);
    var span_1 = sibling(sibling(div_3, true));
    var text_5 = child(span_1);
    render_effect(() => {
      set_text(text_4, label());
      set_class(div_4, barColor());
      set_attribute(div_4, "style", `width: ${stringify(rating() * 10)}%`);
      set_text(text_5, rating());
    });
    append($$anchor2, dl);
  });
  var div_5 = sibling(sibling(div_2, true));
  each(div_5, 9, ratings2, index, ($$anchor2, $$item, $$index_1) => {
    let label = () => unwrap(unwrap($$item)).label;
    label();
    let rating = () => unwrap(unwrap($$item)).rating;
    rating();
    var dl_1 = each_block_1();
    var dt_1 = child(dl_1);
    var text_6 = child(dt_1);
    var dd_1 = sibling(sibling(dt_1, true));
    var div_6 = child(dd_1);
    var div_7 = child(div_6);
    var span_2 = sibling(sibling(div_6, true));
    var text_7 = child(span_2);
    render_effect(() => {
      set_text(text_6, label());
      set_class(div_7, barColor());
      set_attribute(div_7, "style", `width: ${stringify(rating() * 10)}%`);
      set_text(text_7, rating());
    });
    append($$anchor2, dl_1);
  });
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ScoreRating);
  ScoreRating = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ScoreRating_default = ScoreRating;
ScoreRating.filename = ".../dist/rating/ScoreRating.svelte";
mark_module_end(ScoreRating);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/rating/RatingComment.svelte
mark_module_start();
var Rating_text = template(`<p slot="text" class="ms-2 text-sm font-medium text-gray-500 dark:text-gray-400"> </p>`);
var root_129 = template(`<h3 class="ms-2 text-sm font-semibold text-gray-900 dark:text-white"> </h3>`);
var root_221 = template(`<footer class="mb-5 text-sm text-gray-500 dark:text-gray-400"><p> </p></footer>`);
var Button_default4 = template(`Helpful`, 1);
var root_52 = template(`<a class="ps-4 text-sm font-medium text-primary-600 hover:underline dark:text-primary-500">Report abuse</a>`);
var root_310 = template(`<div class="flex items-center mt-3 space-x-3 rtl:space-x-reverse divide-x rtl:divide-x-reverse divide-gray-200 dark:divide-gray-600"><!> <!></div>`);
var root55 = template(`<article><div class="flex items-center mb-4 space-x-4 rtl:space-x-reverse"><img class="w-10 h-10 rounded-full"> <div class="space-y-1 font-medium dark:text-white"><p> <time datetime="2014-08-16 19:00" class="block text-sm text-gray-500 dark:text-gray-400"> </time></p></div></div> <div class="flex items-center mb-1"><!> <!></div> <!> <!> <aside><p class="mt-1 text-xs text-gray-500 dark:text-gray-400"><!></p> <!></aside></article>`);
function RatingComment($$anchor, $$props) {
  var _a;
  if (new.target === RatingComment)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, false, RatingComment);
  let ceil = prop($$props, "ceil", 0, false);
  let helpfullink = prop($$props, "helpfullink", 0, "");
  let abuselink = prop($$props, "abuselink", 0, "");
  let roundedRating = ceil() ? Math.ceil($$props.comment.rating) : Math.floor($$props.comment.rating);
  let grayStars = $$props.comment.total - roundedRating;
  init();
  var article = root55();
  var div = child(article);
  var img = child(div);
  var div_1 = sibling(sibling(img, true));
  var p = child(div_1);
  var text2 = child(p);
  var time = sibling(text2);
  var text_1 = child(time);
  var div_2 = sibling(sibling(div, true));
  var node = child(div_2);
  validate_component(Rating_default)(node, {
    get total() {
      return $$props.comment.total;
    },
    get rating() {
      return $$props.comment.rating;
    },
    $$slots: {
      text: ($$anchor2, $$slotProps) => {
        var p_1 = Rating_text();
        var text_2 = child(p_1);
        render_effect(() => set_text(text_2, `${stringify($$props.comment.rating)} out of ${stringify($$props.comment.total)}`));
        append($$anchor2, p_1);
      }
    }
  });
  var node_1 = sibling(sibling(node, true));
  if_block(node_1, () => $$props.comment.heading, ($$anchor2) => {
    var h3 = root_129();
    var text_3 = child(h3);
    render_effect(() => set_text(text_3, $$props.comment.heading));
    append($$anchor2, h3);
  });
  var node_2 = sibling(sibling(div_2, true));
  if_block(node_2, () => $$props.comment.address || $$props.comment.datetime, ($$anchor2) => {
    var footer = root_221();
    var p_2 = child(footer);
    var text_4 = child(p_2);
    render_effect(() => set_text(text_4, `Reviewed in ${stringify($$props.comment.address)} on ${stringify($$props.comment.datetime)}`));
    append($$anchor2, footer);
  });
  var node_3 = sibling(sibling(node_2, true));
  slot(node_3, $$props.children, {}, null);
  var aside = sibling(sibling(node_3, true));
  var p_3 = child(aside);
  var node_4 = child(p_3);
  slot(node_4, (_a = $$props.$$slots) == null ? void 0 : _a["evaluation"], {}, null);
  var node_5 = sibling(sibling(p_3, true));
  if_block(node_5, () => helpfullink() || abuselink(), ($$anchor2) => {
    var div_3 = root_310();
    var node_6 = child(div_3);
    if_block(node_6, helpfullink, ($$anchor3) => {
      var fragment = comment();
      var node_7 = first_child(fragment);
      validate_component(Button_default)(node_7, {
        size: "xs",
        get href() {
          return helpfullink();
        },
        color: "dark",
        children: wrap_snippet(($$anchor4, $$slotProps) => {
          var fragment_1 = Button_default4();
          append($$anchor4, fragment_1);
        })
      });
      append($$anchor3, fragment);
    });
    var node_8 = sibling(sibling(node_6, true));
    if_block(node_8, abuselink, ($$anchor3) => {
      var a = root_52();
      render_effect(() => set_attribute(a, "href", abuselink()));
      append($$anchor3, a);
    });
    append($$anchor2, div_3);
  });
  render_effect(() => {
    set_attribute(img, "src", $$props.comment.user.img.src);
    set_attribute(img, "alt", $$props.comment.user.img.alt);
    set_text(text2, `${stringify($$props.comment.user.name)} `);
    set_text(text_1, $$props.comment.user.joined);
  });
  append($$anchor, article);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(RatingComment);
  RatingComment = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var RatingComment_default = RatingComment;
RatingComment.filename = ".../dist/rating/RatingComment.svelte";
mark_module_end(RatingComment);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/rating/Review.svelte
mark_module_start();
var root_130 = template(`<div class="flex items-center text-sm text-gray-500 dark:text-gray-400"><!></div>`);
var root_311 = template(`<li><!></li>`);
var root_410 = template(`<li><!></li>`);
var root_53 = template(`<li><!></li>`);
var root_222 = template(`<ul><!> <!> <!></ul>`);
var root_62 = template(`<footer><p class="mb-2 text-sm text-gray-500 dark:text-gray-400"> </p></footer>`);
var root56 = template(`<article><div><div><img> <div class="space-y-1 font-medium dark:text-white"><p> </p> <!></div></div> <!></div> <div class="col-span-2 mt-6 md:mt-0"><div class="flex items-start mb-5"><div class="pe-4"><!> <h4 class="text-xl font-bold text-gray-900 dark:text-white"> </h4></div> <p class="bg-primary-700 text-white text-sm font-semibold inline-flex items-center p-1.5 rounded"> </p></div> <!></div></article>`);
function Review($$anchor, $$props) {
  if (new.target === Review)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  push($$props, false, Review);
  let articleClass = prop($$props, "articleClass", 0, "md:gap-8 md:grid md:grid-cols-3");
  let divClass = prop($$props, "divClass", 0, "flex items-center mb-6 space-x-4 rtl:space-x-reverse");
  let imgClass = prop($$props, "imgClass", 0, "w-10 h-10 rounded-full");
  let ulClass = prop($$props, "ulClass", 0, "space-y-4 text-sm text-gray-500 dark:text-gray-400");
  let liClass = prop($$props, "liClass", 0, "flex items-center");
  init();
  var article = root56();
  render_effect(() => set_class(article, twMerge(articleClass(), $$sanitized_props.classArticle)));
  var div = child(article);
  var div_1 = child(div);
  render_effect(() => set_class(div_1, twMerge(divClass(), $$sanitized_props.classDiv)));
  var img = child(div_1);
  render_effect(() => set_class(img, twMerge(imgClass(), $$sanitized_props.classImg)));
  var div_2 = sibling(sibling(img, true));
  var p = child(div_2);
  var text2 = child(p);
  var node = sibling(sibling(p, true));
  if_block(node, () => $$props.review.address, ($$anchor2) => {
    var _a;
    var div_3 = root_130();
    var node_1 = child(div_3);
    slot(node_1, (_a = $$props.$$slots) == null ? void 0 : _a["address"], {}, null);
    append($$anchor2, div_3);
  });
  var node_2 = sibling(sibling(div_1, true));
  if_block(node_2, () => $$slots.item1 || $$slots.item2 || $$slots.item3, ($$anchor2) => {
    var ul = root_222();
    render_effect(() => set_class(ul, twMerge(ulClass(), $$sanitized_props.classUl)));
    var node_3 = child(ul);
    if_block(node_3, () => $$slots.item1, ($$anchor3) => {
      var _a;
      var li = root_311();
      render_effect(() => set_class(li, twMerge(liClass(), $$sanitized_props.classLi)));
      var node_4 = child(li);
      slot(node_4, (_a = $$props.$$slots) == null ? void 0 : _a["item1"], {}, null);
      append($$anchor3, li);
    });
    var node_5 = sibling(sibling(node_3, true));
    if_block(node_5, () => $$slots.item2, ($$anchor3) => {
      var _a;
      var li_1 = root_410();
      render_effect(() => set_class(li_1, twMerge(liClass(), $$sanitized_props.classLi)));
      var node_6 = child(li_1);
      slot(node_6, (_a = $$props.$$slots) == null ? void 0 : _a["item2"], {}, null);
      append($$anchor3, li_1);
    });
    var node_7 = sibling(sibling(node_5, true));
    if_block(node_7, () => $$slots.item3, ($$anchor3) => {
      var _a;
      var li_2 = root_53();
      render_effect(() => set_class(li_2, twMerge(liClass(), $$sanitized_props.classLi)));
      var node_8 = child(li_2);
      slot(node_8, (_a = $$props.$$slots) == null ? void 0 : _a["item3"], {}, null);
      append($$anchor3, li_2);
    });
    append($$anchor2, ul);
  });
  var div_4 = sibling(sibling(div, true));
  var div_5 = child(div_4);
  var div_6 = child(div_5);
  var node_9 = child(div_6);
  if_block(node_9, () => $$props.review.reviewDate, ($$anchor2) => {
    var footer = root_62();
    var p_1 = child(footer);
    var text_1 = child(p_1);
    render_effect(() => set_text(text_1, `Reviewed: ${stringify($$props.review.reviewDate)}`));
    append($$anchor2, footer);
  });
  var h4 = sibling(sibling(node_9, true));
  var text_2 = child(h4);
  var p_2 = sibling(sibling(div_6, true));
  var text_3 = child(p_2);
  var node_10 = sibling(sibling(div_5, true));
  slot(node_10, $$props.children, {}, null);
  render_effect(() => {
    set_attribute(img, "src", $$props.review.imgSrc);
    set_attribute(img, "alt", $$props.review.imgAlt);
    set_text(text2, $$props.review.name);
    set_text(text_2, $$props.review.title);
    set_text(text_3, $$props.review.rating);
  });
  append($$anchor, article);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Review);
  Review = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Review_default = Review;
Review.filename = ".../dist/rating/Review.svelte";
mark_module_end(Review);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/rating/Heart.svelte
mark_module_start();
var root_131 = svg_template(`<stop offset="0%"></stop><stop></stop><stop stop-color="transparent"></stop><stop offset="100%" stop-color="transparent"></stop>`, 1);
var root_223 = svg_template(`<stop offset="0%"></stop><stop offset="100%"></stop>`, 1);
var root57 = svg_template(`<svg><defs><linearGradient><!></linearGradient></defs><path stroke-linecap="round" stroke-linejoin="round" d="M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12z"></path></svg>`);
function Heart($$anchor, $$props) {
  if (new.target === Heart)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "fillPercent",
    "fillColor",
    "strokeColor",
    "size",
    "ariaLabel",
    "id",
    "role"
  ]);
  push($$props, false, Heart);
  let fillPercent = prop($$props, "fillPercent", 0, 100);
  let fillColor = prop($$props, "fillColor", 0, "#ff0000");
  let strokeColor = prop($$props, "strokeColor", 0, "#ff0000");
  let size2 = prop($$props, "size", 0, 24);
  let ariaLabel = prop($$props, "ariaLabel", 0, "heart");
  let id = prop($$props, "id", 0, "heart");
  let role = prop($$props, "role", 0, "img");
  init();
  var svg = root57();
  let attributes;
  var defs = child(svg);
  var linearGradient = child(defs);
  var node = child(linearGradient);
  if_block(
    node,
    () => fillPercent() !== 100,
    ($$anchor2) => {
      var fragment = root_131();
      var stop = first_child(fragment);
      var stop_1 = sibling(stop);
      var stop_2 = sibling(stop_1);
      var stop_3 = sibling(stop_2);
      render_effect(() => {
        set_attribute(stop, "stop-color", fillColor());
        set_attribute(stop_1, "offset", `${stringify(fillPercent())}%`);
        set_attribute(stop_1, "stop-color", fillColor());
        set_attribute(stop_2, "offset", `${stringify(fillPercent())}%`);
      });
      append($$anchor2, fragment);
    },
    ($$anchor2) => {
      var fragment_1 = root_223();
      var stop_4 = first_child(fragment_1);
      var stop_5 = sibling(stop_4);
      render_effect(() => {
        set_attribute(stop_4, "stop-color", fillColor());
        set_attribute(stop_5, "stop-color", fillColor());
      });
      append($$anchor2, fragment_1);
    }
  );
  var path = sibling(defs);
  render_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        width: size2(),
        height: size2(),
        class: $$sanitized_props.class,
        ...$$restProps,
        "aria-label": ariaLabel(),
        viewBox: "0 0 24 24",
        role: role(),
        "stroke-width": "1.5",
        stroke: "currentColor",
        fill: "none"
      },
      false,
      ""
    );
    set_attribute(linearGradient, "id", id());
    set_attribute(path, "fill", `url(#${stringify(id())})`);
    set_attribute(path, "stroke", strokeColor());
  });
  event("click", svg, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  append($$anchor, svg);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Heart);
  Heart = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Heart_default = Heart;
Heart.filename = ".../dist/rating/Heart.svelte";
mark_module_end(Heart);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/rating/Thumbup.svelte
mark_module_start();
var root_132 = svg_template(`<stop offset="0%"></stop><stop></stop><stop stop-color="transparent"></stop><stop offset="100%" stop-color="transparent"></stop>`, 1);
var root_224 = svg_template(`<stop offset="0%"></stop><stop offset="100%"></stop>`, 1);
var root58 = svg_template(`<svg><defs><linearGradient><!></linearGradient></defs><path stroke-linecap="round" stroke-linejoin="round" d="M6.633 10.5c.806 0 1.533-.446 2.031-1.08a9.041 9.041 0 012.861-2.4c.723-.384 1.35-.956 1.653-1.715a4.498 4.498 0 00.322-1.672V3a.75.75 0 01.75-.75A2.25 2.25 0 0116.5 4.5c0 1.152-.26 2.243-.723 3.218-.266.558.107 1.282.725 1.282h3.126c1.026 0 1.945.694 2.054 1.715.045.422.068.85.068 1.285a11.95 11.95 0 01-2.649 7.521c-.388.482-.987.729-1.605.729H13.48c-.483 0-.964-.078-1.423-.23l-3.114-1.04a4.501 4.501 0 00-1.423-.23H5.904M14.25 9h2.25M5.904 18.75c.083.205.173.405.27.602.197.4-.078.898-.523.898h-.908c-.889 0-1.713-.518-1.972-1.368a12 12 0 01-.521-3.507c0-1.553.295-3.036.831-4.398C3.387 10.203 4.167 9.75 5 9.75h1.053c.472 0 .745.556.5.96a8.958 8.958 0 00-1.302 4.665c0 1.194.232 2.333.654 3.375z"></path></svg>`);
function Thumbup($$anchor, $$props) {
  if (new.target === Thumbup)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "fillPercent",
    "fillColor",
    "strokeColor",
    "size",
    "ariaLabel",
    "id",
    "role"
  ]);
  push($$props, false, Thumbup);
  let fillPercent = prop($$props, "fillPercent", 0, 100);
  let fillColor = prop($$props, "fillColor", 0, "#00b500");
  let strokeColor = prop($$props, "strokeColor", 0, "#00b500");
  let size2 = prop($$props, "size", 0, 24);
  let ariaLabel = prop($$props, "ariaLabel", 0, "thumbup");
  let id = prop($$props, "id", 0, "thumbup");
  let role = prop($$props, "role", 0, "img");
  init();
  var svg = root58();
  let attributes;
  var defs = child(svg);
  var linearGradient = child(defs);
  var node = child(linearGradient);
  if_block(
    node,
    () => fillPercent() !== 100,
    ($$anchor2) => {
      var fragment = root_132();
      var stop = first_child(fragment);
      var stop_1 = sibling(stop);
      var stop_2 = sibling(stop_1);
      var stop_3 = sibling(stop_2);
      render_effect(() => {
        set_attribute(stop, "stop-color", fillColor());
        set_attribute(stop_1, "offset", `${stringify(fillPercent())}%`);
        set_attribute(stop_1, "stop-color", fillColor());
        set_attribute(stop_2, "offset", `${stringify(fillPercent())}%`);
      });
      append($$anchor2, fragment);
    },
    ($$anchor2) => {
      var fragment_1 = root_224();
      var stop_4 = first_child(fragment_1);
      var stop_5 = sibling(stop_4);
      render_effect(() => {
        set_attribute(stop_4, "stop-color", fillColor());
        set_attribute(stop_5, "stop-color", fillColor());
      });
      append($$anchor2, fragment_1);
    }
  );
  var path = sibling(defs);
  render_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        width: size2(),
        height: size2(),
        ...$$restProps,
        class: $$sanitized_props.class,
        "aria-label": ariaLabel(),
        viewBox: "0 0 24 24",
        role: role(),
        "stroke-width": "1.5",
        stroke: "currentColor",
        fill: "none"
      },
      false,
      ""
    );
    set_attribute(linearGradient, "id", id());
    set_attribute(path, "fill", `url(#${stringify(id())})`);
    set_attribute(path, "stroke", strokeColor());
  });
  event("click", svg, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  append($$anchor, svg);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Thumbup);
  Thumbup = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Thumbup_default = Thumbup;
Thumbup.filename = ".../dist/rating/Thumbup.svelte";
mark_module_end(Thumbup);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/sidebar/Sidebar.svelte
mark_module_start();
var root59 = template(`<aside><!></aside>`);
function Sidebar($$anchor, $$props) {
  if (new.target === Sidebar)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "activeUrl",
    "asideClass",
    "nonActiveClass",
    "activeClass",
    "ariaLabel"
  ]);
  push($$props, false, Sidebar);
  const activeUrlStore = writable("");
  let activeUrl = prop($$props, "activeUrl", 0, "");
  let asideClass = prop($$props, "asideClass", 0, "w-64");
  let nonActiveClass = prop($$props, "nonActiveClass", 0, "flex items-center p-2 text-base font-normal text-gray-900 rounded-lg dark:text-white hover:bg-gray-100 dark:hover:bg-gray-700");
  let activeClass = prop($$props, "activeClass", 0, "flex items-center p-2 text-base font-normal text-gray-900 bg-gray-200 dark:bg-gray-700 rounded-lg dark:text-white hover:bg-gray-100 dark:hover:bg-gray-700");
  let ariaLabel = prop($$props, "ariaLabel", 0, "Sidebar");
  setContext("sidebarContext", {
    activeClass: activeClass(),
    nonActiveClass: nonActiveClass()
  });
  setContext("activeUrl", activeUrlStore);
  legacy_pre_effect(() => deep_read_state(activeUrl()), () => {
    activeUrlStore.set(activeUrl());
  });
  legacy_pre_effect_reset();
  init();
  var aside = root59();
  let attributes;
  var node = child(aside);
  slot(node, $$props.children, {}, null);
  render_effect(() => attributes = set_attributes(
    aside,
    attributes,
    {
      ...$$restProps,
      class: twMerge(asideClass(), $$sanitized_props.class),
      "aria-label": ariaLabel()
    },
    true,
    ""
  ));
  append($$anchor, aside);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Sidebar);
  Sidebar = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Sidebar_default = Sidebar;
Sidebar.filename = ".../dist/sidebar/Sidebar.svelte";
mark_module_end(Sidebar);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/sidebar/SidebarItem.svelte
mark_module_start();
var root60 = template(`<li><a><!> <span> </span> <!></a></li>`);
function SidebarItem($$anchor, $$props) {
  var _a;
  if (new.target === SidebarItem)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "href",
    "label",
    "spanClass",
    "activeClass",
    "nonActiveClass"
  ]);
  push($$props, false, SidebarItem);
  const active = mutable_source();
  const aClass = mutable_source();
  let href = prop($$props, "href", 0, "");
  let label = prop($$props, "label", 0, "");
  let spanClass = prop($$props, "spanClass", 0, "ms-3");
  let activeClass = prop($$props, "activeClass", 0, void 0);
  let nonActiveClass = prop($$props, "nonActiveClass", 0, void 0);
  const context = getContext("sidebarContext") ?? {};
  const activeUrlStore = getContext("activeUrl");
  let sidebarUrl = mutable_source("");
  activeUrlStore.subscribe((value) => {
    set(sidebarUrl, value);
  });
  legacy_pre_effect(
    () => (get(sidebarUrl), deep_read_state(href())),
    () => {
      set(active, get(sidebarUrl) ? href() === get(sidebarUrl) : false);
    }
  );
  legacy_pre_effect(
    () => (get(active), deep_read_state(activeClass()), deep_read_state(nonActiveClass()), deep_read_state($$sanitized_props)),
    () => {
      set(aClass, twMerge(get(active) ? activeClass() ?? context.activeClass : nonActiveClass() ?? context.nonActiveClass, $$sanitized_props.class));
    }
  );
  legacy_pre_effect_reset();
  init();
  var li = root60();
  var a = child(li);
  let attributes;
  var node = child(a);
  slot(node, (_a = $$props.$$slots) == null ? void 0 : _a["icon"], {}, null);
  var span = sibling(sibling(node, true));
  var text2 = child(span);
  var node_1 = sibling(sibling(span, true));
  if_block(node_1, () => $$slots.subtext, ($$anchor2) => {
    var _a2;
    var fragment = comment();
    var node_2 = first_child(fragment);
    slot(node_2, (_a2 = $$props.$$slots) == null ? void 0 : _a2["subtext"], {}, null);
    append($$anchor2, fragment);
  });
  render_effect(() => {
    attributes = set_attributes(
      a,
      attributes,
      {
        ...$$restProps,
        href: href(),
        class: get(aClass)
      },
      true,
      ""
    );
    set_class(span, spanClass());
    set_text(text2, label());
  });
  event("blur", a, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("click", a, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("focus", a, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keydown", a, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keypress", a, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keyup", a, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("mouseenter", a, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("mouseleave", a, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("mouseover", a, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  append($$anchor, li);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(SidebarItem);
  SidebarItem = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var SidebarItem_default = SidebarItem;
SidebarItem.filename = ".../dist/sidebar/SidebarItem.svelte";
mark_module_end(SidebarItem);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/sidebar/SidebarBrand.svelte
mark_module_start();
var root61 = template(`<a><img> <span> </span></a>`);
function SidebarBrand($$anchor, $$props) {
  if (new.target === SidebarBrand)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["site", "aClass", "imgClass", "spanClass"]);
  push($$props, false, SidebarBrand);
  let aClass = prop($$props, "aClass", 0, "flex items-center ps-2.5 mb-5");
  let imgClass = prop($$props, "imgClass", 0, "h-6 me-3 sm:h-7");
  let spanClass = prop($$props, "spanClass", 0, "self-center text-xl font-semibold whitespace-nowrap dark:text-white");
  init();
  var a = root61();
  let attributes;
  var img = child(a);
  var span = sibling(sibling(img, true));
  var text2 = child(span);
  render_effect(() => {
    attributes = set_attributes(
      a,
      attributes,
      {
        ...$$restProps,
        href: $$props.site.href,
        class: twMerge(aClass(), $$sanitized_props.class)
      },
      true,
      ""
    );
    set_attribute(img, "src", $$props.site.img);
    set_class(img, imgClass());
    set_attribute(img, "alt", $$props.site.name);
    set_class(span, spanClass());
    set_text(text2, $$props.site.name);
  });
  append($$anchor, a);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(SidebarBrand);
  SidebarBrand = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var SidebarBrand_default = SidebarBrand;
SidebarBrand.filename = ".../dist/sidebar/SidebarBrand.svelte";
mark_module_end(SidebarBrand);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/sidebar/SidebarCta.svelte
mark_module_start();
var root62 = template(`<div><div><span> </span> <!></div> <!></div>`);
function SidebarCta($$anchor, $$props) {
  if (new.target === SidebarCta)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "divWrapperClass",
    "divClass",
    "spanClass",
    "label"
  ]);
  push($$props, false, SidebarCta);
  let divWrapperClass = prop($$props, "divWrapperClass", 0, "p-4 mt-6 bg-primary-50 rounded-lg dark:bg-primary-900");
  let divClass = prop($$props, "divClass", 0, "flex items-center mb-3");
  let spanClass = prop($$props, "spanClass", 0, "bg-primary-100 text-primary-800 text-sm font-semibold me-2 px-2.5 py-0.5 rounded dark:bg-primary-200 dark:text-primary-900");
  let label = prop($$props, "label", 0, "");
  init();
  var div = root62();
  let attributes;
  var div_1 = child(div);
  var span = child(div_1);
  var text2 = child(span);
  var node = sibling(sibling(span, true));
  if_block(node, () => $$slots.icon, ($$anchor2) => {
    var _a;
    var fragment = comment();
    var node_1 = first_child(fragment);
    slot(node_1, (_a = $$props.$$slots) == null ? void 0 : _a["icon"], {}, null);
    append($$anchor2, fragment);
  });
  var node_2 = sibling(sibling(div_1, true));
  slot(node_2, $$props.children, {}, null);
  render_effect(() => {
    attributes = set_attributes(
      div,
      attributes,
      {
        ...$$restProps,
        id: "dropdown-cta",
        class: twMerge(divWrapperClass(), $$sanitized_props.class),
        role: "alert"
      },
      true,
      ""
    );
    set_class(div_1, divClass());
    set_class(span, spanClass());
    set_text(text2, label());
  });
  append($$anchor, div);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(SidebarCta);
  SidebarCta = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var SidebarCta_default = SidebarCta;
SidebarCta.filename = ".../dist/sidebar/SidebarCta.svelte";
mark_module_end(SidebarCta);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/sidebar/SidebarDropdownItem.svelte
mark_module_start();
var root63 = template(`<li><a> </a></li>`);
function SidebarDropdownItem($$anchor, $$props) {
  if (new.target === SidebarDropdownItem)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "aClass",
    "href",
    "label",
    "activeClass",
    "active"
  ]);
  push($$props, false, SidebarDropdownItem);
  let aClass = prop($$props, "aClass", 0, "flex items-center p-2 ps-11 w-full text-base font-normal text-gray-900 rounded-lg transition duration-75 group hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700");
  let href = prop($$props, "href", 0, "");
  let label = prop($$props, "label", 0, "");
  let activeClass = prop($$props, "activeClass", 0, "flex items-center p-2 ps-11 text-base font-normal text-gray-900 bg-gray-200 dark:bg-gray-700 rounded-lg dark:text-white hover:bg-gray-100 dark:hover:bg-gray-700");
  let active = prop($$props, "active", 0, false);
  init();
  var li = root63();
  var a = child(li);
  let attributes;
  var text2 = child(a);
  render_effect(() => {
    attributes = set_attributes(
      a,
      attributes,
      {
        ...$$restProps,
        href: href(),
        class: twMerge(active() ? activeClass() : aClass(), $$sanitized_props.class)
      },
      true,
      ""
    );
    set_text(text2, label());
  });
  event("blur", a, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("click", a, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("focus", a, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keydown", a, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keypress", a, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keyup", a, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("mouseenter", a, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("mouseleave", a, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("mouseover", a, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  append($$anchor, li);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(SidebarDropdownItem);
  SidebarDropdownItem = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var SidebarDropdownItem_default = SidebarDropdownItem;
SidebarDropdownItem.filename = ".../dist/sidebar/SidebarDropdownItem.svelte";
mark_module_end(SidebarDropdownItem);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/sidebar/SidebarDropdownWrapper.svelte
mark_module_start();
var root_312 = template(`<svg class="w-3 h-3 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5 5 1 1 5"></path></svg>`);
var root_63 = template(`<svg class="w-3 h-3 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 4 4 4-4"></path></svg>`);
var root_72 = template(`<ul><!></ul>`);
var root64 = template(`<li><button><!> <span> </span> <!></button> <!></li>`);
function SidebarDropdownWrapper($$anchor, $$props) {
  var _a;
  if (new.target === SidebarDropdownWrapper)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "btnClass",
    "label",
    "spanClass",
    "ulClass",
    "transitionType",
    "transitionParams",
    "isOpen"
  ]);
  push($$props, false, SidebarDropdownWrapper);
  let btnClass = prop($$props, "btnClass", 0, "flex items-center p-2 w-full text-base font-normal text-gray-900 rounded-lg transition duration-75 group hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700");
  let label = prop($$props, "label", 0, "");
  let spanClass = prop($$props, "spanClass", 0, "flex-1 ms-3 text-left whitespace-nowrap");
  let ulClass = prop($$props, "ulClass", 0, "py-2 space-y-2");
  let transitionType = prop($$props, "transitionType", 0, "slide");
  let transitionParams = prop($$props, "transitionParams", 8, () => ({}));
  const multiple = (node, params) => {
    switch (transitionType()) {
      case "blur":
        return blur(node, params);
      case "fly":
        return fly(node, params);
      case "fade":
        return fade(node, params);
      default:
        return slide(node, params);
    }
  };
  let isOpen = prop($$props, "isOpen", 4, false);
  const handleDropdown = () => {
    isOpen(!isOpen());
  };
  init();
  var li = root64();
  var button = child(li);
  let attributes;
  var node_1 = child(button);
  slot(node_1, (_a = $$props.$$slots) == null ? void 0 : _a["icon"], {}, null);
  var span = sibling(sibling(node_1, true));
  var text2 = child(span);
  var node_2 = sibling(sibling(span, true));
  if_block(
    node_2,
    isOpen,
    ($$anchor2) => {
      var fragment = comment();
      var node_3 = first_child(fragment);
      if_block(
        node_3,
        () => $$slots.arrowup,
        ($$anchor3) => {
          var _a2;
          var fragment_1 = comment();
          var node_4 = first_child(fragment_1);
          slot(node_4, (_a2 = $$props.$$slots) == null ? void 0 : _a2["arrowup"], {}, null);
          append($$anchor3, fragment_1);
        },
        ($$anchor3) => {
          var svg = root_312();
          var path = child(svg);
          append($$anchor3, svg);
        }
      );
      append($$anchor2, fragment);
    },
    ($$anchor2) => {
      var fragment_2 = comment();
      var node_5 = first_child(fragment_2);
      if_block(
        node_5,
        () => $$slots.arrowdown,
        ($$anchor3) => {
          var _a2;
          var fragment_3 = comment();
          var node_6 = first_child(fragment_3);
          slot(node_6, (_a2 = $$props.$$slots) == null ? void 0 : _a2["arrowdown"], {}, null);
          append($$anchor3, fragment_3);
        },
        ($$anchor3) => {
          var svg_1 = root_63();
          var path_1 = child(svg_1);
          append($$anchor3, svg_1);
        },
        true
      );
      append($$anchor2, fragment_2);
    }
  );
  var node_7 = sibling(sibling(button, true));
  if_block(node_7, isOpen, ($$anchor2) => {
    var ul = root_72();
    transition(3, ul, () => multiple, transitionParams);
    var node_8 = child(ul);
    slot(node_8, $$props.children, {}, null);
    render_effect(() => set_class(ul, ulClass()));
    append($$anchor2, ul);
  });
  render_effect(() => {
    attributes = set_attributes(
      button,
      attributes,
      {
        ...$$restProps,
        type: "button",
        class: twMerge(btnClass(), $$sanitized_props.class),
        "aria-controls": "sidebar-dropdown"
      },
      true,
      ""
    );
    set_class(span, spanClass());
    set_text(text2, label());
  });
  event("click", button, () => handleDropdown(), false);
  append($$anchor, li);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(SidebarDropdownWrapper);
  SidebarDropdownWrapper = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var SidebarDropdownWrapper_default = SidebarDropdownWrapper;
SidebarDropdownWrapper.filename = ".../dist/sidebar/SidebarDropdownWrapper.svelte";
mark_module_end(SidebarDropdownWrapper);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/sidebar/SidebarGroup.svelte
mark_module_start();
var root65 = template(`<ul><!></ul>`);
function SidebarGroup($$anchor, $$props) {
  if (new.target === SidebarGroup)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["ulClass", "borderClass", "border"]);
  push($$props, false, SidebarGroup);
  let ulClass = prop($$props, "ulClass", 4, "space-y-2");
  let borderClass = prop($$props, "borderClass", 0, "pt-4 mt-4 border-t border-gray-200 dark:border-gray-700");
  let border = prop($$props, "border", 0, false);
  if (border()) {
    ulClass(ulClass() + (" " + borderClass()));
  }
  init();
  var ul = root65();
  let attributes;
  var node = child(ul);
  slot(node, $$props.children, {}, null);
  render_effect(() => attributes = set_attributes(
    ul,
    attributes,
    {
      ...$$restProps,
      class: twMerge(ulClass(), $$sanitized_props.class)
    },
    true,
    ""
  ));
  append($$anchor, ul);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(SidebarGroup);
  SidebarGroup = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var SidebarGroup_default = SidebarGroup;
SidebarGroup.filename = ".../dist/sidebar/SidebarGroup.svelte";
mark_module_end(SidebarGroup);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/sidebar/SidebarWrapper.svelte
mark_module_start();
var root66 = template(`<div><!></div>`);
function SidebarWrapper($$anchor, $$props) {
  if (new.target === SidebarWrapper)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["divClass"]);
  push($$props, false, SidebarWrapper);
  let divClass = prop($$props, "divClass", 0, "overflow-y-auto py-4 px-3 bg-gray-50 rounded dark:bg-gray-800");
  init();
  var div = root66();
  let attributes;
  var node = child(div);
  slot(node, $$props.children, {}, null);
  render_effect(() => attributes = set_attributes(
    div,
    attributes,
    {
      ...$$restProps,
      class: twMerge(divClass(), $$sanitized_props.class)
    },
    true,
    ""
  ));
  append($$anchor, div);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(SidebarWrapper);
  SidebarWrapper = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var SidebarWrapper_default = SidebarWrapper;
SidebarWrapper.filename = ".../dist/sidebar/SidebarWrapper.svelte";
mark_module_end(SidebarWrapper);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/skeleton/CardPlaceholder.svelte
mark_module_start();
var root67 = template(`<div role="status"><div class="flex justify-center items-center mb-4 h-48 bg-gray-300 rounded dark:bg-gray-700"><svg width="48" height="48" class="text-gray-200 dark:text-gray-600" xmlns="http://www.w3.org/2000/svg" aria-hidden="true" fill="currentColor" viewBox="0 0 640 512"><path d="M480 80C480 35.82 515.8 0 560 0C604.2 0 640 35.82 640 80C640 124.2 604.2 160 560 160C515.8 160 480 124.2 480 80zM0 456.1C0 445.6 2.964 435.3 8.551 426.4L225.3 81.01C231.9 70.42 243.5 64 256 64C268.5 64 280.1 70.42 286.8 81.01L412.7 281.7L460.9 202.7C464.1 196.1 472.2 192 480 192C487.8 192 495 196.1 499.1 202.7L631.1 419.1C636.9 428.6 640 439.7 640 450.9C640 484.6 612.6 512 578.9 512H55.91C25.03 512 .0006 486.1 .0006 456.1L0 456.1z"></path></svg></div> <div class="h-2.5 bg-gray-200 rounded-full dark:bg-gray-700 w-1/2 mb-4"></div> <div class="h-2 bg-gray-200 rounded-full dark:bg-gray-700 mb-2.5"></div> <div class="h-2 bg-gray-200 rounded-full dark:bg-gray-700 mb-2.5"></div> <div class="h-2 bg-gray-200 rounded-full dark:bg-gray-700"></div> <div class="flex items-center mt-4 space-x-3 rtl:space-x-reverse"><svg class="w-14 h-14 text-gray-200 dark:text-gray-700" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-6-3a2 2 0 11-4 0 2 2 0 014 0zm-2 4a5 5 0 00-4.546 2.916A5.986 5.986 0 0010 16a5.986 5.986 0 004.546-2.084A5 5 0 0010 11z" clip-rule="evenodd"></path></svg> <div><div class="h-2.5 bg-gray-200 rounded-full dark:bg-gray-700 w-32 mb-2"></div> <div class="w-48 h-2 bg-gray-200 rounded-full dark:bg-gray-700"></div></div></div> <span class="sr-only">Loading...</span></div>`);
function CardPlaceholder($$anchor, $$props) {
  if (new.target === CardPlaceholder)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  push($$props, false, CardPlaceholder);
  const outDivclass = mutable_source();
  const sizes = {
    sm: "max-w-sm",
    md: "max-w-md",
    lg: "max-w-lg",
    xl: "max-w-xl",
    xxl: "max-w-2xl"
  };
  let divClass = prop($$props, "divClass", 0, "p-4 rounded border border-gray-200 shadow animate-pulse md:p-6 dark:border-gray-700");
  let size2 = prop($$props, "size", 0, "sm");
  legacy_pre_effect(
    () => (deep_read_state(size2()), deep_read_state(divClass()), deep_read_state($$sanitized_props)),
    () => {
      set(outDivclass, twMerge(sizes[size2()], divClass(), $$sanitized_props.class));
    }
  );
  legacy_pre_effect_reset();
  init();
  var div = root67();
  var div_1 = child(div);
  var svg = child(div_1);
  var path = child(svg);
  var div_2 = sibling(sibling(div_1, true));
  var div_3 = sibling(sibling(div_2, true));
  var div_4 = sibling(sibling(div_3, true));
  var div_5 = sibling(sibling(div_4, true));
  var div_6 = sibling(sibling(div_5, true));
  var svg_1 = child(div_6);
  var path_1 = child(svg_1);
  var div_7 = sibling(sibling(svg_1, true));
  var div_8 = child(div_7);
  var div_9 = sibling(sibling(div_8, true));
  var span = sibling(sibling(div_6, true));
  render_effect(() => set_class(div, get(outDivclass)));
  append($$anchor, div);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(CardPlaceholder);
  CardPlaceholder = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var CardPlaceholder_default = CardPlaceholder;
CardPlaceholder.filename = ".../dist/skeleton/CardPlaceholder.svelte";
mark_module_end(CardPlaceholder);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/skeleton/ImagePlaceholder.svelte
mark_module_start();
var root_133 = template(`<div class="w-full"><div class="h-2.5 bg-gray-200 rounded-full dark:bg-gray-700 w-1/2 mb-4"></div> <div class="h-2 bg-gray-200 rounded-full dark:bg-gray-700 w-9/12 mb-2.5"></div> <div class="h-2 bg-gray-200 rounded-full dark:bg-gray-700 mb-2.5"></div> <div class="h-2 bg-gray-200 rounded-full dark:bg-gray-700 mb-2.5"></div> <div class="h-2 bg-gray-200 rounded-full dark:bg-gray-700 w-10/12 mb-2.5"></div> <div class="h-2 bg-gray-200 rounded-full dark:bg-gray-700 w-11/12 mb-2.5"></div> <div class="h-2 bg-gray-200 rounded-full dark:bg-gray-700 w-9/12"></div></div>`);
var root68 = template(`<div role="status"><div><svg width="48" height="48" class="text-gray-200" xmlns="http://www.w3.org/2000/svg" aria-hidden="true" fill="currentColor" viewBox="0 0 640 512"><path d="M480 80C480 35.82 515.8 0 560 0C604.2 0 640 35.82 640 80C640 124.2 604.2 160 560 160C515.8 160 480 124.2 480 80zM0 456.1C0 445.6 2.964 435.3 8.551 426.4L225.3 81.01C231.9 70.42 243.5 64 256 64C268.5 64 280.1 70.42 286.8 81.01L412.7 281.7L460.9 202.7C464.1 196.1 472.2 192 480 192C487.8 192 495 196.1 499.1 202.7L631.1 419.1C636.9 428.6 640 439.7 640 450.9C640 484.6 612.6 512 578.9 512H55.91C25.03 512 .0006 486.1 .0006 456.1L0 456.1z"></path></svg></div> <!> <span class="sr-only">Loading...</span></div>`);
function ImagePlaceholder($$anchor, $$props) {
  if (new.target === ImagePlaceholder)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  push($$props, false, ImagePlaceholder);
  const imgOnlyClass = mutable_source();
  let divClass = prop($$props, "divClass", 0, "space-y-8 animate-pulse md:space-y-0 md:space-x-8 rtl:space-x-reverse md:flex md:items-center");
  let imgHeight = prop($$props, "imgHeight", 0, "48");
  let imgOnly = prop($$props, "imgOnly", 0, false);
  legacy_pre_effect(() => deep_read_state(imgOnly()), () => {
    set(imgOnlyClass, imgOnly() ? "max-w-60" : "");
  });
  legacy_pre_effect_reset();
  init();
  var div = root68();
  render_effect(() => set_class(div, twMerge(divClass(), $$sanitized_props.class, get(imgOnlyClass))));
  var div_1 = child(div);
  var svg = child(div_1);
  var path = child(svg);
  var node = sibling(sibling(div_1, true));
  if_block(node, () => !imgOnly(), ($$anchor2) => {
    var div_2 = root_133();
    var div_3 = child(div_2);
    var div_4 = sibling(sibling(div_3, true));
    var div_5 = sibling(sibling(div_4, true));
    var div_6 = sibling(sibling(div_5, true));
    var div_7 = sibling(sibling(div_6, true));
    var div_8 = sibling(sibling(div_7, true));
    var div_9 = sibling(sibling(div_8, true));
    append($$anchor2, div_2);
  });
  var span = sibling(sibling(node, true));
  render_effect(() => set_class(div_1, `flex justify-center items-center w-full h-${stringify(imgHeight())} bg-gray-300 rounded sm:w-96 ${stringify(get(imgOnlyClass))} dark:bg-gray-700`));
  append($$anchor, div);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ImagePlaceholder);
  ImagePlaceholder = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ImagePlaceholder_default = ImagePlaceholder;
ImagePlaceholder.filename = ".../dist/skeleton/ImagePlaceholder.svelte";
mark_module_end(ImagePlaceholder);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/skeleton/ListPlaceholder.svelte
mark_module_start();
var root69 = template(`<div role="status"><div class="flex justify-between items-center"><div><div class="h-2.5 bg-gray-300 rounded-full dark:bg-gray-600 w-24 mb-2.5"></div> <div class="w-32 h-2 bg-gray-200 rounded-full dark:bg-gray-700"></div></div> <div class="h-2.5 bg-gray-300 rounded-full dark:bg-gray-700 w-12"></div></div> <div class="flex justify-between items-center pt-4"><div><div class="h-2.5 bg-gray-300 rounded-full dark:bg-gray-600 w-24 mb-2.5"></div> <div class="w-32 h-2 bg-gray-200 rounded-full dark:bg-gray-700"></div></div> <div class="h-2.5 bg-gray-300 rounded-full dark:bg-gray-700 w-12"></div></div> <div class="flex justify-between items-center pt-4"><div><div class="h-2.5 bg-gray-300 rounded-full dark:bg-gray-600 w-24 mb-2.5"></div> <div class="w-32 h-2 bg-gray-200 rounded-full dark:bg-gray-700"></div></div> <div class="h-2.5 bg-gray-300 rounded-full dark:bg-gray-700 w-12"></div></div> <div class="flex justify-between items-center pt-4"><div><div class="h-2.5 bg-gray-300 rounded-full dark:bg-gray-600 w-24 mb-2.5"></div> <div class="w-32 h-2 bg-gray-200 rounded-full dark:bg-gray-700"></div></div> <div class="h-2.5 bg-gray-300 rounded-full dark:bg-gray-700 w-12"></div></div> <div class="flex justify-between items-center pt-4"><div><div class="h-2.5 bg-gray-300 rounded-full dark:bg-gray-600 w-24 mb-2.5"></div> <div class="w-32 h-2 bg-gray-200 rounded-full dark:bg-gray-700"></div></div> <div class="h-2.5 bg-gray-300 rounded-full dark:bg-gray-700 w-12"></div></div> <span class="sr-only">Loading...</span></div>`);
function ListPlaceholder($$anchor, $$props) {
  if (new.target === ListPlaceholder)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  push($$props, false, ListPlaceholder);
  let divClass = prop($$props, "divClass", 0, "p-4 space-y-4 max-w-md rounded border border-gray-200 divide-y divide-gray-200 shadow animate-pulse dark:divide-gray-700 md:p-6 dark:border-gray-700");
  init();
  var div = root69();
  render_effect(() => set_class(div, twMerge(divClass(), $$sanitized_props.class)));
  var div_1 = child(div);
  var div_2 = child(div_1);
  var div_3 = child(div_2);
  var div_4 = sibling(sibling(div_3, true));
  var div_5 = sibling(sibling(div_2, true));
  var div_6 = sibling(sibling(div_1, true));
  var div_7 = child(div_6);
  var div_8 = child(div_7);
  var div_9 = sibling(sibling(div_8, true));
  var div_10 = sibling(sibling(div_7, true));
  var div_11 = sibling(sibling(div_6, true));
  var div_12 = child(div_11);
  var div_13 = child(div_12);
  var div_14 = sibling(sibling(div_13, true));
  var div_15 = sibling(sibling(div_12, true));
  var div_16 = sibling(sibling(div_11, true));
  var div_17 = child(div_16);
  var div_18 = child(div_17);
  var div_19 = sibling(sibling(div_18, true));
  var div_20 = sibling(sibling(div_17, true));
  var div_21 = sibling(sibling(div_16, true));
  var div_22 = child(div_21);
  var div_23 = child(div_22);
  var div_24 = sibling(sibling(div_23, true));
  var div_25 = sibling(sibling(div_22, true));
  var span = sibling(sibling(div_21, true));
  append($$anchor, div);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ListPlaceholder);
  ListPlaceholder = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ListPlaceholder_default = ListPlaceholder;
ListPlaceholder.filename = ".../dist/skeleton/ListPlaceholder.svelte";
mark_module_end(ListPlaceholder);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/skeleton/Skeleton.svelte
mark_module_start();
var root70 = template(`<div role="status"><div class="h-2.5 bg-gray-200 rounded-full dark:bg-gray-700 w-1/2 mb-4"></div> <div class="h-2 bg-gray-200 rounded-full dark:bg-gray-700 w-9/12 mb-2.5"></div> <div class="h-2 bg-gray-200 rounded-full dark:bg-gray-700 mb-2.5"></div> <div class="h-2 bg-gray-200 rounded-full dark:bg-gray-700 mb-2.5"></div> <div class="h-2 bg-gray-200 rounded-full dark:bg-gray-700 w-10/12 mb-2.5"></div> <div class="h-2 bg-gray-200 rounded-full dark:bg-gray-700 w-11/12 mb-2.5"></div> <div class="h-2 bg-gray-200 rounded-full dark:bg-gray-700 w-9/12"></div> <span class="sr-only">Loading...</span></div>`);
function Skeleton($$anchor, $$props) {
  if (new.target === Skeleton)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  push($$props, false, Skeleton);
  const outDivclass = mutable_source();
  const sizes = {
    sm: "max-w-sm",
    md: "max-w-md",
    lg: "max-w-lg",
    xl: "max-w-xl",
    xxl: "max-w-2xl"
  };
  let divClass = prop($$props, "divClass", 0, "animate-pulse");
  let size2 = prop($$props, "size", 0, "sm");
  legacy_pre_effect(
    () => (deep_read_state(size2()), deep_read_state(divClass()), deep_read_state($$sanitized_props)),
    () => {
      set(outDivclass, twMerge(sizes[size2()], divClass(), $$sanitized_props.class));
    }
  );
  legacy_pre_effect_reset();
  init();
  var div = root70();
  var div_1 = child(div);
  var div_2 = sibling(sibling(div_1, true));
  var div_3 = sibling(sibling(div_2, true));
  var div_4 = sibling(sibling(div_3, true));
  var div_5 = sibling(sibling(div_4, true));
  var div_6 = sibling(sibling(div_5, true));
  var div_7 = sibling(sibling(div_6, true));
  var span = sibling(sibling(div_7, true));
  render_effect(() => set_class(div, get(outDivclass)));
  append($$anchor, div);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Skeleton);
  Skeleton = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Skeleton_default = Skeleton;
Skeleton.filename = ".../dist/skeleton/Skeleton.svelte";
mark_module_end(Skeleton);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/skeleton/TestimonialPlaceholder.svelte
mark_module_start();
var root71 = template(`<div role="status"><div class="h-2.5 bg-gray-300 rounded-full dark:bg-gray-700 max-w-[640px] mb-2.5 mx-auto"></div> <div class="h-2.5 mx-auto bg-gray-300 rounded-full dark:bg-gray-700 max-w-[540px]"></div> <div class="flex justify-center items-center mt-4"><svg class="me-2 w-10 h-10 text-gray-200 dark:text-gray-700" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-6-3a2 2 0 11-4 0 2 2 0 014 0zm-2 4a5 5 0 00-4.546 2.916A5.986 5.986 0 0010 16a5.986 5.986 0 004.546-2.084A5 5 0 0010 11z" clip-rule="evenodd"></path></svg> <div class="w-20 h-2.5 bg-gray-200 rounded-full dark:bg-gray-700 me-3"></div> <div class="w-24 h-2 bg-gray-200 rounded-full dark:bg-gray-700"></div></div> <span class="sr-only">Loading...</span></div>`);
function TestimonialPlaceholder($$anchor, $$props) {
  if (new.target === TestimonialPlaceholder)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  push($$props, false, TestimonialPlaceholder);
  let divClass = prop($$props, "divClass", 0, "animate-pulse");
  init();
  var div = root71();
  render_effect(() => set_class(div, twMerge(divClass(), $$sanitized_props.class)));
  var div_1 = child(div);
  var div_2 = sibling(sibling(div_1, true));
  var div_3 = sibling(sibling(div_2, true));
  var svg = child(div_3);
  var path = child(svg);
  var div_4 = sibling(sibling(svg, true));
  var div_5 = sibling(sibling(div_4, true));
  var span = sibling(sibling(div_3, true));
  append($$anchor, div);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(TestimonialPlaceholder);
  TestimonialPlaceholder = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var TestimonialPlaceholder_default = TestimonialPlaceholder;
TestimonialPlaceholder.filename = ".../dist/skeleton/TestimonialPlaceholder.svelte";
mark_module_end(TestimonialPlaceholder);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/skeleton/TextPlaceholder.svelte
mark_module_start();
var root72 = template(`<div role="status"><div class="flex items-center space-x-2 rtl:space-x-reverse w-full"><div class="h-2.5 bg-gray-200 rounded-full dark:bg-gray-700 w-32"></div> <div class="h-2.5 bg-gray-300 rounded-full dark:bg-gray-600 w-24"></div> <div class="h-2.5 bg-gray-300 rounded-full dark:bg-gray-600 w-full"></div></div> <div class="flex items-center space-x-2 rtl:space-x-reverse w-11/12"><div class="h-2.5 bg-gray-200 rounded-full dark:bg-gray-700 w-full"></div> <div class="h-2.5 bg-gray-300 rounded-full dark:bg-gray-600 w-full"></div> <div class="h-2.5 bg-gray-300 rounded-full dark:bg-gray-600 w-24"></div></div> <div class="flex items-center space-x-2 rtl:space-x-reverse w-9/12"><div class="h-2.5 bg-gray-300 rounded-full dark:bg-gray-600 w-full"></div> <div class="h-2.5 bg-gray-200 rounded-full dark:bg-gray-700 w-80"></div> <div class="h-2.5 bg-gray-300 rounded-full dark:bg-gray-600 w-full"></div></div> <div class="flex items-center space-x-2 rtl:space-x-reverse w-11/12"><div class="h-2.5 bg-gray-200 rounded-full dark:bg-gray-700 w-full"></div> <div class="h-2.5 bg-gray-300 rounded-full dark:bg-gray-600 w-full"></div> <div class="h-2.5 bg-gray-300 rounded-full dark:bg-gray-600 w-24"></div></div> <div class="flex items-center space-x-2 rtl:space-x-reverse w-10/12"><div class="h-2.5 bg-gray-300 rounded-full dark:bg-gray-600 w-32"></div> <div class="h-2.5 bg-gray-300 rounded-full dark:bg-gray-600 w-24"></div> <div class="h-2.5 bg-gray-200 rounded-full dark:bg-gray-700 w-full"></div></div> <div class="flex items-center space-x-2 rtl:space-x-reverse w-8/12"><div class="h-2.5 bg-gray-300 rounded-full dark:bg-gray-600 w-full"></div> <div class="h-2.5 bg-gray-200 rounded-full dark:bg-gray-700 w-80"></div> <div class="h-2.5 bg-gray-300 rounded-full dark:bg-gray-600 w-full"></div></div> <span class="sr-only">Loading...</span></div>`);
function TextPlaceholder($$anchor, $$props) {
  if (new.target === TextPlaceholder)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  push($$props, false, TextPlaceholder);
  const outDivclass = mutable_source();
  const sizes = {
    sm: "max-w-sm",
    md: "max-w-md",
    lg: "max-w-lg",
    xl: "max-w-xl",
    xxl: "max-w-2xl"
  };
  let divClass = prop($$props, "divClass", 0, "space-y-2.5 animate-pulse");
  let size2 = prop($$props, "size", 0, "sm");
  legacy_pre_effect(
    () => (deep_read_state(size2()), deep_read_state(divClass()), deep_read_state($$sanitized_props)),
    () => {
      set(outDivclass, twMerge(sizes[size2()], divClass(), $$sanitized_props.class));
    }
  );
  legacy_pre_effect_reset();
  init();
  var div = root72();
  var div_1 = child(div);
  var div_2 = child(div_1);
  var div_3 = sibling(sibling(div_2, true));
  var div_4 = sibling(sibling(div_3, true));
  var div_5 = sibling(sibling(div_1, true));
  var div_6 = child(div_5);
  var div_7 = sibling(sibling(div_6, true));
  var div_8 = sibling(sibling(div_7, true));
  var div_9 = sibling(sibling(div_5, true));
  var div_10 = child(div_9);
  var div_11 = sibling(sibling(div_10, true));
  var div_12 = sibling(sibling(div_11, true));
  var div_13 = sibling(sibling(div_9, true));
  var div_14 = child(div_13);
  var div_15 = sibling(sibling(div_14, true));
  var div_16 = sibling(sibling(div_15, true));
  var div_17 = sibling(sibling(div_13, true));
  var div_18 = child(div_17);
  var div_19 = sibling(sibling(div_18, true));
  var div_20 = sibling(sibling(div_19, true));
  var div_21 = sibling(sibling(div_17, true));
  var div_22 = child(div_21);
  var div_23 = sibling(sibling(div_22, true));
  var div_24 = sibling(sibling(div_23, true));
  var span = sibling(sibling(div_21, true));
  render_effect(() => set_class(div, get(outDivclass)));
  append($$anchor, div);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(TextPlaceholder);
  TextPlaceholder = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var TextPlaceholder_default = TextPlaceholder;
TextPlaceholder.filename = ".../dist/skeleton/TextPlaceholder.svelte";
mark_module_end(TextPlaceholder);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/skeleton/VideoPlaceholder.svelte
mark_module_start();
var root73 = template(`<div role="status"><svg width="48" height="48" class="text-gray-200 dark:text-gray-600" xmlns="http://www.w3.org/2000/svg" aria-hidden="true" fill="currentColor" viewBox="0 0 384 512"><path d="M361 215C375.3 223.8 384 239.3 384 256C384 272.7 375.3 288.2 361 296.1L73.03 472.1C58.21 482 39.66 482.4 24.52 473.9C9.377 465.4 0 449.4 0 432V80C0 62.64 9.377 46.63 24.52 38.13C39.66 29.64 58.21 29.99 73.03 39.04L361 215z"></path></svg> <span class="sr-only">Loading...</span></div>`);
function VideoPlaceholder($$anchor, $$props) {
  if (new.target === VideoPlaceholder)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  push($$props, false, VideoPlaceholder);
  const outDivclass = mutable_source();
  const sizes = {
    sm: "max-w-sm",
    md: "max-w-md",
    lg: "max-w-lg",
    xl: "max-w-xl",
    xxl: "max-w-2xl"
  };
  let divClass = prop($$props, "divClass", 0, "flex justify-center items-center h-56 bg-gray-300 rounded-lg animate-pulse dark:bg-gray-700");
  let size2 = prop($$props, "size", 0, "sm");
  legacy_pre_effect(
    () => (deep_read_state(size2()), deep_read_state(divClass()), deep_read_state($$sanitized_props)),
    () => {
      set(outDivclass, twMerge(sizes[size2()], divClass(), $$sanitized_props.class));
    }
  );
  legacy_pre_effect_reset();
  init();
  var div = root73();
  var svg = child(div);
  var path = child(svg);
  var span = sibling(sibling(svg, true));
  render_effect(() => set_class(div, get(outDivclass)));
  append($$anchor, div);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(VideoPlaceholder);
  VideoPlaceholder = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var VideoPlaceholder_default = VideoPlaceholder;
VideoPlaceholder.filename = ".../dist/skeleton/VideoPlaceholder.svelte";
mark_module_end(VideoPlaceholder);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/skeleton/WidgetPlaceholder.svelte
mark_module_start();
var root74 = template(`<div role="status"><div class="h-2.5 bg-gray-200 rounded-full dark:bg-gray-700 w-32 mb-2.5"></div> <div class="mb-10 w-48 h-2 bg-gray-200 rounded-full dark:bg-gray-700"></div> <div class="flex items-baseline mt-4 space-x-6 rtl:space-x-reverse"><div class="w-full h-72 bg-gray-200 rounded-t-lg dark:bg-gray-700"></div> <div class="w-full h-56 bg-gray-200 rounded-t-lg dark:bg-gray-700"></div> <div class="w-full h-72 bg-gray-200 rounded-t-lg dark:bg-gray-700"></div> <div class="w-full h-64 bg-gray-200 rounded-t-lg dark:bg-gray-700"></div> <div class="w-full h-80 bg-gray-200 rounded-t-lg dark:bg-gray-700"></div> <div class="w-full h-72 bg-gray-200 rounded-t-lg dark:bg-gray-700"></div> <div class="w-full h-80 bg-gray-200 rounded-t-lg dark:bg-gray-700"></div></div> <span class="sr-only">Loading...</span></div>`);
function WidgetPlaceholder($$anchor, $$props) {
  if (new.target === WidgetPlaceholder)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  push($$props, false, WidgetPlaceholder);
  let divClass = prop($$props, "divClass", 0, "p-4 max-w-sm rounded border border-gray-200 shadow animate-pulse md:p-6 dark:border-gray-700");
  init();
  var div = root74();
  render_effect(() => set_class(div, twMerge(divClass(), $$sanitized_props.class)));
  var div_1 = child(div);
  var div_2 = sibling(sibling(div_1, true));
  var div_3 = sibling(sibling(div_2, true));
  var div_4 = child(div_3);
  var div_5 = sibling(sibling(div_4, true));
  var div_6 = sibling(sibling(div_5, true));
  var div_7 = sibling(sibling(div_6, true));
  var div_8 = sibling(sibling(div_7, true));
  var div_9 = sibling(sibling(div_8, true));
  var div_10 = sibling(sibling(div_9, true));
  var span = sibling(sibling(div_3, true));
  append($$anchor, div);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(WidgetPlaceholder);
  WidgetPlaceholder = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var WidgetPlaceholder_default = WidgetPlaceholder;
WidgetPlaceholder.filename = ".../dist/skeleton/WidgetPlaceholder.svelte";
mark_module_end(WidgetPlaceholder);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/speed-dial/SpeedDial.svelte
mark_module_start();
var fallback_14 = template(`<svg aria-hidden="true" class="w-8 h-8 transition-transform group-hover:rotate-45" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path></svg>`);
var GradientButton_default2 = template(`<!> <span class="sr-only"> </span>`, 1);
var fallback_2 = template(`<svg aria-hidden="true" class="w-8 h-8 transition-transform group-hover:rotate-45" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path></svg>`);
var Button_default5 = template(`<!> <span class="sr-only"> </span>`, 1);
var root75 = template(`<div><!> <!></div>`);
function SpeedDial($$anchor, $$props) {
  var _a;
  if (new.target === SpeedDial)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "defaultClass",
    "popperDefaultClass",
    "placement",
    "pill",
    "tooltip",
    "trigger",
    "textOutside",
    "id",
    "name",
    "gradient",
    "open"
  ]);
  push($$props, false, SpeedDial);
  let defaultClass = prop($$props, "defaultClass", 0, "fixed end-6 bottom-6");
  let popperDefaultClass = prop($$props, "popperDefaultClass", 0, "flex items-center mb-4 gap-2");
  let placement = prop($$props, "placement", 0, "top");
  let pill = prop($$props, "pill", 0, true);
  let tooltip = prop($$props, "tooltip", 0, "left");
  let trigger = prop($$props, "trigger", 0, "hover");
  let textOutside = prop($$props, "textOutside", 0, false);
  let id = prop($$props, "id", 8, generateId_default);
  let name = prop($$props, "name", 0, "Open actions menu");
  let gradient = prop($$props, "gradient", 0, false);
  let open = prop($$props, "open", 4, false);
  setContext("speed-dial", {
    pill: pill(),
    tooltip: tooltip(),
    textOutside: textOutside()
  });
  let divClass = mutable_source();
  let poperClass = mutable_source();
  legacy_pre_effect(
    () => (deep_read_state(defaultClass()), deep_read_state($$sanitized_props)),
    () => {
      set(divClass, twMerge(defaultClass(), "group", $$sanitized_props.class));
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(popperDefaultClass()), deep_read_state(placement())),
    () => {
      set(poperClass, twMerge(popperDefaultClass(), ["top", "bottom"].includes(placement().split("-")[0]) && "flex-col"));
    }
  );
  legacy_pre_effect_reset();
  init();
  var div = root75();
  var node = child(div);
  slot(node, (_a = $$props.$$slots) == null ? void 0 : _a["button"], {}, ($$anchor2) => {
    var fragment = comment();
    var node_1 = first_child(fragment);
    if_block(
      node_1,
      gradient,
      ($$anchor3) => {
        var fragment_1 = comment();
        var node_2 = first_child(fragment_1);
        validate_component(GradientButton_default)(node_2, spread_props(
          {
            get pill() {
              return pill();
            },
            get name() {
              return name();
            },
            get "aria-controls"() {
              return id();
            },
            get "aria-expanded"() {
              return open();
            }
          },
          () => $$restProps,
          {
            class: "!p-3",
            children: wrap_snippet(($$anchor4, $$slotProps) => {
              var _a2;
              var fragment_2 = GradientButton_default2();
              var node_3 = first_child(fragment_2);
              slot(node_3, (_a2 = $$props.$$slots) == null ? void 0 : _a2["icon"], {}, ($$anchor5) => {
                var svg = fallback_14();
                var path = child(svg);
                append($$anchor5, svg);
              });
              var span = sibling(sibling(node_3, true));
              var text2 = child(span);
              render_effect(() => set_text(text2, name()));
              append($$anchor4, fragment_2);
            })
          }
        ));
        append($$anchor3, fragment_1);
      },
      ($$anchor3) => {
        var fragment_3 = comment();
        var node_4 = first_child(fragment_3);
        validate_component(Button_default)(node_4, spread_props(
          {
            get pill() {
              return pill();
            },
            get name() {
              return name();
            },
            get "aria-controls"() {
              return id();
            },
            get "aria-expanded"() {
              return open();
            }
          },
          () => $$restProps,
          {
            class: "!p-3",
            children: wrap_snippet(($$anchor4, $$slotProps) => {
              var _a2;
              var fragment_4 = Button_default5();
              var node_5 = first_child(fragment_4);
              slot(node_5, (_a2 = $$props.$$slots) == null ? void 0 : _a2["icon"], {}, ($$anchor5) => {
                var svg_1 = fallback_2();
                var path_1 = child(svg_1);
                append($$anchor5, svg_1);
              });
              var span_1 = sibling(sibling(node_5, true));
              var text_1 = child(span_1);
              render_effect(() => set_text(text_1, name()));
              append($$anchor4, fragment_4);
            })
          }
        ));
        append($$anchor3, fragment_3);
      }
    );
    append($$anchor2, fragment);
  });
  var node_6 = sibling(sibling(node, true));
  {
    add_owner_effect(open, Popper_default);
    validate_component(Popper_default)(node_6, {
      get id() {
        return id();
      },
      get trigger() {
        return trigger();
      },
      arrow: false,
      color: "none",
      activeContent: true,
      get placement() {
        return placement();
      },
      get class() {
        return get(poperClass);
      },
      get open() {
        return open();
      },
      set open($$value) {
        open($$value);
      },
      children: wrap_snippet(($$anchor2, $$slotProps) => {
        var fragment_5 = comment();
        var node_7 = first_child(fragment_5);
        slot(node_7, $$props.children, {}, null);
        append($$anchor2, fragment_5);
      })
    });
  }
  render_effect(() => set_class(div, get(divClass)));
  append($$anchor, div);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(SpeedDial);
  SpeedDial = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var SpeedDial_default = SpeedDial;
SpeedDial.filename = ".../dist/speed-dial/SpeedDial.svelte";
mark_module_end(SpeedDial);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/tooltip/Tooltip.svelte
mark_module_start();
function Tooltip($$anchor, $$props) {
  if (new.target === Tooltip)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["type", "defaultClass"]);
  push($$props, false, Tooltip);
  let type = prop($$props, "type", 4, "dark");
  let defaultClass = prop($$props, "defaultClass", 0, "py-2 px-3 text-sm font-medium");
  const types = {
    dark: "bg-gray-900 text-white dark:bg-gray-700",
    light: "border-gray-200 bg-white text-gray-900",
    auto: " bg-white text-gray-900 dark:bg-gray-700 dark:text-white border-gray-200 dark:border-gray-700",
    custom: ""
  };
  let toolTipClass = mutable_source();
  legacy_pre_effect(
    () => (deep_read_state($$restProps), deep_read_state(type()), deep_read_state(defaultClass()), deep_read_state($$sanitized_props)),
    () => {
      if ($$restProps.color)
        type("custom");
      else
        $$restProps.color = "none";
      if (["light", "auto"].includes(type()))
        $$restProps.border = true;
      set(toolTipClass, twMerge("tooltip", defaultClass(), types[type()], $$sanitized_props.class));
    }
  );
  legacy_pre_effect_reset();
  init();
  var fragment = comment();
  var node = first_child(fragment);
  validate_component(Popper_default)(node, spread_props({ rounded: true, shadow: true }, () => $$restProps, {
    get class() {
      return get(toolTipClass);
    },
    $$events: {
      show($$arg) {
        bubble_event.call(this, $$props, $$arg);
      }
    },
    children: wrap_snippet(($$anchor2, $$slotProps) => {
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      slot(node_1, $$props.children, {}, null);
      append($$anchor2, fragment_1);
    })
  }));
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Tooltip);
  Tooltip = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Tooltip_default = Tooltip;
Tooltip.filename = ".../dist/tooltip/Tooltip.svelte";
mark_module_end(Tooltip);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/speed-dial/SpeedDialButton.svelte
mark_module_start();
var root_134 = template(`<span class="sr-only"> </span>`);
var root_313 = template(`<span> </span>`);
var root_411 = template(`<span> </span>`);
var Button_default6 = template(`<!> <!>`, 1);
var root76 = template(`<!> <!>`, 1);
function SpeedDialButton($$anchor, $$props) {
  if (new.target === SpeedDialButton)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "btnDefaultClass",
    "name",
    "tooltip",
    "pill",
    "textOutside",
    "textOutsideClass",
    "textDefaultClass"
  ]);
  push($$props, false, SpeedDialButton);
  const context = getContext("speed-dial");
  let btnDefaultClass = prop($$props, "btnDefaultClass", 0, "w-[52px] h-[52px] shadow-sm !p-2");
  let name = prop($$props, "name", 0, "");
  let tooltip = prop($$props, "tooltip", 8, () => context.tooltip);
  let pill = prop($$props, "pill", 8, () => context.pill);
  let textOutside = prop($$props, "textOutside", 8, () => context.textOutside);
  let textOutsideClass = prop($$props, "textOutsideClass", 0, "block absolute -start-14 top-1/2 mb-px text-sm font-medium -translate-y-1/2");
  let textDefaultClass = prop($$props, "textDefaultClass", 0, "block mb-px text-xs font-medium");
  let btnClass = mutable_source();
  legacy_pre_effect(
    () => (deep_read_state(btnDefaultClass()), deep_read_state(tooltip()), deep_read_state(textOutside()), deep_read_state($$sanitized_props)),
    () => {
      set(btnClass, twMerge(btnDefaultClass(), tooltip() === "none" && "flex-col", textOutside() && "relative", $$sanitized_props.class));
    }
  );
  legacy_pre_effect_reset();
  init();
  var fragment = root76();
  var node = first_child(fragment);
  validate_component(Button_default)(node, spread_props(
    {
      get pill() {
        return pill();
      },
      outline: true,
      color: "light"
    },
    () => $$restProps,
    {
      get class() {
        return get(btnClass);
      },
      $$events: {
        click($$arg) {
          bubble_event.call(this, $$props, $$arg);
        }
      },
      children: wrap_snippet(($$anchor2, $$slotProps) => {
        var fragment_1 = Button_default6();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props.children, {}, null);
        var node_2 = sibling(sibling(node_1, true));
        if_block(
          node_2,
          () => tooltip() !== "none",
          ($$anchor3) => {
            var span = root_134();
            var text2 = child(span);
            render_effect(() => set_text(text2, name()));
            append($$anchor3, span);
          },
          ($$anchor3) => {
            var fragment_2 = comment();
            var node_3 = first_child(fragment_2);
            if_block(
              node_3,
              textOutside,
              ($$anchor4) => {
                var span_1 = root_313();
                var text_1 = child(span_1);
                render_effect(() => {
                  set_class(span_1, textOutsideClass());
                  set_text(text_1, name());
                });
                append($$anchor4, span_1);
              },
              ($$anchor4) => {
                var span_2 = root_411();
                var text_2 = child(span_2);
                render_effect(() => {
                  set_class(span_2, textDefaultClass());
                  set_text(text_2, name());
                });
                append($$anchor4, span_2);
              },
              true
            );
            append($$anchor3, fragment_2);
          }
        );
        append($$anchor2, fragment_1);
      })
    }
  ));
  var node_4 = sibling(sibling(node, true));
  if_block(node_4, () => tooltip() !== "none", ($$anchor2) => {
    var fragment_3 = comment();
    var node_5 = first_child(fragment_3);
    validate_component(Tooltip_default)(node_5, {
      get placement() {
        return tooltip();
      },
      style: "dark",
      children: wrap_snippet(($$anchor3, $$slotProps) => {
        var text_3 = text($$anchor3);
        render_effect(() => set_text(text_3, name()));
        append($$anchor3, text_3);
      })
    });
    append($$anchor2, fragment_3);
  });
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(SpeedDialButton);
  SpeedDialButton = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var SpeedDialButton_default = SpeedDialButton;
SpeedDialButton.filename = ".../dist/speed-dial/SpeedDialButton.svelte";
mark_module_end(SpeedDialButton);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/spinner/Spinner.svelte
mark_module_start();
var root77 = svg_template(`<svg><path d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z"></path><path d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z"></path></svg>`);
function Spinner($$anchor, $$props) {
  if (new.target === Spinner)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "color",
    "bg",
    "customColor",
    "size",
    "currentFill",
    "currentColor"
  ]);
  push($$props, false, Spinner);
  let color = prop($$props, "color", 4, "primary");
  let bg = prop($$props, "bg", 0, "text-gray-300");
  let customColor = prop($$props, "customColor", 0, "");
  let size2 = prop($$props, "size", 0, "8");
  let currentFill = prop($$props, "currentFill", 0, "currentFill");
  let currentColor = prop($$props, "currentColor", 0, "currentColor");
  let iconsize = `w-${size2()} h-${size2()}`;
  if (currentFill() !== "currentFill") {
    color(void 0);
  }
  const fillColorClasses = {
    primary: "fill-primary-600",
    blue: "fill-blue-600",
    gray: "fill-gray-600 dark:fill-gray-300",
    green: "fill-green-500",
    red: "fill-red-600",
    yellow: "fill-yellow-400",
    pink: "fill-pink-600",
    purple: "fill-purple-600",
    white: "fill-white",
    custom: customColor()
  };
  let fillColorClass = color() === void 0 ? "" : fillColorClasses[color()] ?? fillColorClasses.blue;
  init();
  var svg = root77();
  let attributes;
  var path = child(svg);
  var path_1 = sibling(path);
  render_effect(() => {
    attributes = set_attributes(
      svg,
      attributes,
      {
        ...$$restProps,
        role: "status",
        class: twMerge("inline -mt-px animate-spin dark:text-gray-600", iconsize, bg(), fillColorClass, $$sanitized_props.class),
        viewBox: "0 0 100 101",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      },
      false,
      ""
    );
    set_attribute(path, "fill", currentColor());
    set_attribute(path_1, "fill", currentFill());
  });
  append($$anchor, svg);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Spinner);
  Spinner = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Spinner_default = Spinner;
Spinner.filename = ".../dist/spinner/Spinner.svelte";
mark_module_end(Spinner);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/steps/StepIndicator.svelte
mark_module_start();
var root_135 = template(`<h3 class="text-base font-semibold"> </h3>`);
var root_314 = template(`<div></div>`);
var root_225 = template(`<div class="relative w-full h-full"><div></div> <!></div>`);
var root_54 = template(`<div></div>`);
var root_64 = template(`<div class="w-full h-full rounded-sm bg-gray-200 dark:bg-gray-700"></div>`);
var root78 = template(`<div><!> <div></div></div>`);
function StepIndicator($$anchor, $$props) {
  if (new.target === StepIndicator)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "steps",
    "currentStep",
    "size",
    "color",
    "glow",
    "hideLabel",
    "completedCustom",
    "currentCustom"
  ]);
  push($$props, false, StepIndicator);
  let steps = prop($$props, "steps", 8, () => [
    "Step 1",
    "Step 2",
    "Step 3",
    "Step 4",
    "Step 5"
  ]);
  let currentStep = prop($$props, "currentStep", 0, 1);
  let size2 = prop($$props, "size", 0, "h-2.5");
  let color = prop($$props, "color", 0, "primary");
  let glow = prop($$props, "glow", 0, false);
  let hideLabel = prop($$props, "hideLabel", 0, false);
  let completedCustom = prop($$props, "completedCustom", 0, "");
  let currentCustom = prop($$props, "currentCustom", 0, "");
  const completedStepColors = {
    primary: "bg-primary-500 dark:bg-primary-900",
    secondary: "bg-secondary-500 dark:bg-secondary-900",
    gray: "bg-gray-400 dark:bg-gray-500",
    red: "bg-red-600 dark:bg-red-900",
    yellow: "bg-yellow-400 dark:bg-yellow-600",
    green: "bg-green-500 dark:bg-green-900",
    indigo: "bg-indigo-500 dark:bg-indigo-900",
    purple: "bg-purple-500 dark:bg-purple-900",
    pink: "bg-pink-500 dark:bg-pink-900",
    blue: "bg-blue-500 dark:bg-blue-900",
    custom: completedCustom()
  };
  const currentStepColors = {
    primary: "bg-primary-800 dark:bg-primary-400",
    secondary: "bg-secondary-800 dark:bg-secondary-400",
    gray: "bg-gray-700 dark:bg-gray-200",
    red: "bg-red-900 dark:bg-red-500",
    yellow: "bg-yellow-600 dark:bg-yellow-400",
    green: "bg-green-800 dark:bg-green-400",
    indigo: "bg-indigo-800 dark:bg-indigo-400",
    purple: "bg-purple-800 dark:bg-purple-400",
    pink: "bg-pink-800 dark:bg-pink-400",
    blue: "bg-blue-800 dark:bg-blue-400",
    custom: currentCustom()
  };
  init();
  var div = root78();
  let attributes;
  var node = child(div);
  if_block(node, () => !hideLabel(), ($$anchor2) => {
    var h3 = root_135();
    var text2 = child(h3);
    render_effect(() => set_text(text2, steps()[currentStep() - 1]));
    append($$anchor2, h3);
  });
  var div_1 = sibling(sibling(node, true));
  render_effect(() => set_class(div_1, twJoin("flex justify-between gap-2 w-full", size2())));
  each(div_1, 9, steps, index, ($$anchor2, step, i) => {
    var fragment = comment();
    var node_1 = first_child(fragment);
    if_block(
      node_1,
      () => unwrap(i) === currentStep() - 1,
      ($$anchor3) => {
        var div_2 = root_225();
        var div_3 = child(div_2);
        render_effect(() => set_class(div_3, twJoin("relative w-full h-full rounded-sm", currentStepColors[color()])));
        var node_2 = sibling(sibling(div_3, true));
        if_block(node_2, glow, ($$anchor4) => {
          var div_4 = root_314();
          render_effect(() => set_class(div_4, twJoin("absolute -inset-1 rounded-sm blur opacity-30 dark:opacity-25", currentStepColors[color()])));
          append($$anchor4, div_4);
        });
        append($$anchor3, div_2);
      },
      ($$anchor3) => {
        var fragment_1 = comment();
        var node_3 = first_child(fragment_1);
        if_block(
          node_3,
          () => unwrap(i) < currentStep() - 1,
          ($$anchor4) => {
            var div_5 = root_54();
            render_effect(() => set_class(div_5, twJoin("w-full h-full rounded-sm", completedStepColors[color()])));
            append($$anchor4, div_5);
          },
          ($$anchor4) => {
            var div_6 = root_64();
            append($$anchor4, div_6);
          },
          true
        );
        append($$anchor3, fragment_1);
      }
    );
    append($$anchor2, fragment);
  });
  render_effect(() => attributes = set_attributes(
    div,
    attributes,
    {
      ...$$restProps,
      class: twMerge("space-y-2 dark:text-white", $$sanitized_props.class)
    },
    true,
    ""
  ));
  append($$anchor, div);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(StepIndicator);
  StepIndicator = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var StepIndicator_default = StepIndicator;
StepIndicator.filename = ".../dist/steps/StepIndicator.svelte";
mark_module_end(StepIndicator);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/table/Table.svelte
mark_module_start();
var root79 = template(`<div><table><!></table></div>`);
function Table($$anchor, $$props) {
  if (new.target === Table)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "divClass",
    "striped",
    "hoverable",
    "noborder",
    "shadow",
    "color",
    "customeColor"
  ]);
  push($$props, false, Table);
  let divClass = prop($$props, "divClass", 0, "relative overflow-x-auto");
  let striped = prop($$props, "striped", 0, false);
  let hoverable = prop($$props, "hoverable", 0, false);
  let noborder = prop($$props, "noborder", 0, false);
  let shadow = prop($$props, "shadow", 0, false);
  let color = prop($$props, "color", 0, "default");
  let customeColor = prop($$props, "customeColor", 0, "");
  const colors = {
    default: "text-gray-500 dark:text-gray-400",
    blue: "text-blue-100 dark:text-blue-100",
    green: "text-green-100 dark:text-green-100",
    red: "text-red-100 dark:text-red-100",
    yellow: "text-yellow-100 dark:text-yellow-100",
    purple: "text-purple-100 dark:text-purple-100",
    indigo: "text-indigo-100 dark:text-indigo-100",
    pink: "text-pink-100 dark:text-pink-100",
    custom: customeColor()
  };
  legacy_pre_effect(() => deep_read_state(striped()), () => {
    setContext("striped", striped());
  });
  legacy_pre_effect(() => deep_read_state(hoverable()), () => {
    setContext("hoverable", hoverable());
  });
  legacy_pre_effect(() => deep_read_state(noborder()), () => {
    setContext("noborder", noborder());
  });
  legacy_pre_effect(() => deep_read_state(color()), () => {
    setContext("color", color());
  });
  legacy_pre_effect_reset();
  init();
  var div = root79();
  render_effect(() => set_class(div, twJoin(divClass(), shadow() && "shadow-md sm:rounded-lg")));
  var table = child(div);
  let attributes;
  var node = child(table);
  slot(node, $$props.children, {}, null);
  render_effect(() => attributes = set_attributes(
    table,
    attributes,
    {
      ...$$restProps,
      class: twMerge("w-full text-left text-sm", colors[color()], $$sanitized_props.class)
    },
    true,
    ""
  ));
  append($$anchor, div);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Table);
  Table = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Table_default = Table;
Table.filename = ".../dist/table/Table.svelte";
mark_module_end(Table);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/table/TableBody.svelte
mark_module_start();
var root80 = template(`<tbody><!></tbody>`);
function TableBody($$anchor, $$props) {
  if (new.target === TableBody)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, false, TableBody);
  let tableBodyClass = prop($$props, "tableBodyClass", 0, void 0);
  var tbody = root80();
  var node = child(tbody);
  slot(node, $$props.children, {}, null);
  render_effect(() => set_class(tbody, tableBodyClass()));
  append($$anchor, tbody);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(TableBody);
  TableBody = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var TableBody_default = TableBody;
TableBody.filename = ".../dist/table/TableBody.svelte";
mark_module_end(TableBody);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/table/TableBodyCell.svelte
mark_module_start();
function TableBodyCell($$anchor, $$props) {
  if (new.target === TableBodyCell)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["tdClass"]);
  push($$props, false, TableBodyCell);
  let tdClass = prop($$props, "tdClass", 0, "px-6 py-4 whitespace-nowrap font-medium ");
  let color = mutable_source("default");
  set(color, getContext("color"));
  let tdClassfinal = mutable_source();
  legacy_pre_effect(
    () => (deep_read_state(tdClass()), get(color), deep_read_state($$sanitized_props)),
    () => {
      set(tdClassfinal, twMerge(tdClass(), get(color) === "default" ? "text-gray-900 dark:text-white" : "text-blue-50 whitespace-nowrap dark:text-blue-100", $$sanitized_props.class));
    }
  );
  legacy_pre_effect_reset();
  init();
  var fragment = comment();
  var node = first_child(fragment);
  validate_void_dynamic_element(() => $$sanitized_props.onclick ? "button" : "td");
  validate_dynamic_element_tag(() => $$sanitized_props.onclick ? "button" : "td");
  element(node, () => $$sanitized_props.onclick ? "button" : "td", false, ($$element, $$anchor2) => {
    let attributes;
    render_effect(() => attributes = set_dynamic_element_attributes(
      $$element,
      attributes,
      {
        ...$$restProps,
        class: get(tdClassfinal),
        role: $$sanitized_props.onclick ? "button" : void 0
      },
      ""
    ));
    event("click", $$element, function($$arg) {
      bubble_event.call(this, $$props, $$arg);
    });
    var fragment_1 = comment();
    var node_1 = first_child(fragment_1);
    slot(node_1, $$props.children, {}, null);
    append($$anchor2, fragment_1);
  });
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(TableBodyCell);
  TableBodyCell = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var TableBodyCell_default = TableBodyCell;
TableBodyCell.filename = ".../dist/table/TableBodyCell.svelte";
mark_module_end(TableBodyCell);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/table/TableBodyRow.svelte
mark_module_start();
var root81 = template(`<tr><!></tr>`);
function TableBodyRow($$anchor, $$props) {
  if (new.target === TableBodyRow)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["color"]);
  push($$props, false, TableBodyRow);
  let color = prop($$props, "color", 8, () => getContext("color"));
  const colors = {
    default: "bg-white dark:bg-gray-800 dark:border-gray-700",
    blue: "bg-blue-500 border-blue-400",
    green: "bg-green-500 border-green-400",
    red: "bg-red-500 border-red-400",
    yellow: "bg-yellow-500 border-yellow-400",
    purple: "bg-purple-500 border-purple-400",
    custom: ""
  };
  const hoverColors = {
    default: "hover:bg-gray-50 dark:hover:bg-gray-600",
    blue: "hover:bg-blue-400",
    green: "hover:bg-green-400",
    red: "hover:bg-red-400",
    yellow: "hover:bg-yellow-400",
    purple: "hover:bg-purple-400",
    custom: ""
  };
  const stripColors = {
    default: "odd:bg-white even:bg-gray-50 odd:dark:bg-gray-800 even:dark:bg-gray-700",
    blue: "odd:bg-blue-800 even:bg-blue-700 odd:dark:bg-blue-800 even:dark:bg-blue-700",
    green: "odd:bg-green-800 even:bg-green-700 odd:dark:bg-green-800 even:dark:bg-green-700",
    red: "odd:bg-red-800 even:bg-red-700 odd:dark:bg-red-800 even:dark:bg-red-700",
    yellow: "odd:bg-yellow-800 even:bg-yellow-700 odd:dark:bg-yellow-800 even:dark:bg-yellow-700",
    purple: "odd:bg-purple-800 even:bg-purple-700 odd:dark:bg-purple-800 even:dark:bg-purple-700",
    custom: ""
  };
  let trClass = mutable_source();
  legacy_pre_effect(
    () => (deep_read_state(color()), deep_read_state($$sanitized_props)),
    () => {
      set(trClass, twMerge([
        !getContext("noborder") && "border-b last:border-b-0",
        colors[color()],
        getContext("hoverable") && hoverColors[color()],
        getContext("striped") && stripColors[color()],
        $$sanitized_props.class
      ]));
    }
  );
  legacy_pre_effect_reset();
  init();
  var tr = root81();
  let attributes;
  var node = child(tr);
  slot(node, $$props.children, {}, null);
  render_effect(() => attributes = set_attributes(tr, attributes, { ...$$restProps, class: get(trClass) }, true, ""));
  event("click", tr, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("contextmenu", tr, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("dblclick", tr, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  append($$anchor, tr);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(TableBodyRow);
  TableBodyRow = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var TableBodyRow_default = TableBodyRow;
TableBodyRow.filename = ".../dist/table/TableBodyRow.svelte";
mark_module_end(TableBodyRow);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/table/TableHead.svelte
mark_module_start();
var root_136 = template(`<tr><!></tr>`);
var root82 = template(`<thead><!></thead>`);
function TableHead($$anchor, $$props) {
  if (new.target === TableHead)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["theadClass", "defaultRow"]);
  push($$props, false, TableHead);
  const theadClassfinal = mutable_source();
  let theadClass = prop($$props, "theadClass", 0, "text-xs uppercase");
  let defaultRow = prop($$props, "defaultRow", 0, true);
  let color = mutable_source();
  set(color, getContext("color"));
  let noborder = getContext("noborder");
  let striped = getContext("striped");
  let defaultBgColor = noborder || striped ? "" : "bg-gray-50 dark:bg-gray-700";
  const bgColors = {
    default: defaultBgColor,
    blue: "bg-blue-600",
    green: "bg-green-600",
    red: "bg-red-600",
    yellow: "bg-yellow-600",
    purple: "bg-purple-600",
    custom: ""
  };
  let textColor = get(color) === "default" ? "text-gray-700 dark:text-gray-400" : get(color) === "custom" ? "" : "text-white  dark:text-white";
  let borderColors = striped ? "" : get(color) === "default" ? "border-gray-700" : get(color) === "custom" ? "" : `border-${get(color)}-400`;
  legacy_pre_effect(
    () => (deep_read_state(theadClass()), get(color), deep_read_state($$sanitized_props)),
    () => {
      set(theadClassfinal, twMerge(theadClass(), textColor, striped && borderColors, bgColors[get(color)], $$sanitized_props.class));
    }
  );
  legacy_pre_effect_reset();
  init();
  var thead = root82();
  let attributes;
  var node = child(thead);
  if_block(
    node,
    defaultRow,
    ($$anchor2) => {
      var tr = root_136();
      var node_1 = child(tr);
      slot(node_1, $$props.children, {}, null);
      append($$anchor2, tr);
    },
    ($$anchor2) => {
      var fragment = comment();
      var node_2 = first_child(fragment);
      slot(node_2, $$props.children, {}, null);
      append($$anchor2, fragment);
    }
  );
  render_effect(() => attributes = set_attributes(
    thead,
    attributes,
    {
      ...$$restProps,
      class: get(theadClassfinal)
    },
    true,
    ""
  ));
  append($$anchor, thead);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(TableHead);
  TableHead = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var TableHead_default = TableHead;
TableHead.filename = ".../dist/table/TableHead.svelte";
mark_module_end(TableHead);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/table/TableHeadCell.svelte
mark_module_start();
var root83 = template(`<th><!></th>`);
function TableHeadCell($$anchor, $$props) {
  if (new.target === TableHeadCell)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["padding"]);
  push($$props, false, TableHeadCell);
  let padding = prop($$props, "padding", 0, "px-6 py-3");
  init();
  var th = root83();
  let attributes;
  var node = child(th);
  slot(node, $$props.children, {}, null);
  render_effect(() => attributes = set_attributes(
    th,
    attributes,
    {
      ...$$restProps,
      class: twMerge(padding(), $$sanitized_props.class)
    },
    true,
    ""
  ));
  event("click", th, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("focus", th, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keydown", th, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keypress", th, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keyup", th, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("mouseenter", th, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("mouseleave", th, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("mouseover", th, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  append($$anchor, th);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(TableHeadCell);
  TableHeadCell = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var TableHeadCell_default = TableHeadCell;
TableHeadCell.filename = ".../dist/table/TableHeadCell.svelte";
mark_module_end(TableHeadCell);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/table/TableSearch.svelte
mark_module_start();
var fallback11 = template(`<svg fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd"></path></svg>`);
var root84 = template(`<div><div><label for="table-search" class="sr-only">Search</label> <div><div><!></div> <input type="text" id="table-search"></div> <!></div> <table><!></table> <!></div>`);
function TableSearch($$anchor, $$props) {
  var _a, _b, _c;
  if (new.target === TableSearch)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "divClass",
    "inputValue",
    "striped",
    "hoverable",
    "placeholder",
    "customColor",
    "color",
    "innerDivClass",
    "searchClass",
    "svgDivClass",
    "svgClass",
    "inputClass"
  ]);
  push($$props, false, TableSearch);
  let divClass = prop($$props, "divClass", 0, "relative overflow-x-auto shadow-md sm:rounded-lg");
  let inputValue = prop($$props, "inputValue", 4, "");
  let striped = prop($$props, "striped", 0, false);
  let hoverable = prop($$props, "hoverable", 0, false);
  let placeholder = prop($$props, "placeholder", 0, "Search");
  let customColor = prop($$props, "customColor", 0, "");
  let color = prop($$props, "color", 0, "default");
  let innerDivClass = prop($$props, "innerDivClass", 0, "p-4");
  let searchClass = prop($$props, "searchClass", 0, "relative mt-1");
  let svgDivClass = prop($$props, "svgDivClass", 0, "absolute inset-y-0 start-0 flex items-center ps-3 pointer-events-none");
  let svgClass = prop($$props, "svgClass", 0, "w-5 h-5 text-gray-500 dark:text-gray-400");
  let inputClass2 = prop($$props, "inputClass", 0, "bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-80 p-2.5 ps-10 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500");
  let inputCls = twMerge(inputClass2(), $$sanitized_props.classInput);
  let svgDivCls = twMerge(svgDivClass(), $$sanitized_props.classSvgDiv);
  const colors = {
    default: "text-gray-500 dark:text-gray-400",
    blue: "text-blue-100 dark:text-blue-100",
    green: "text-green-100 dark:text-green-100",
    red: "text-red-100 dark:text-red-100",
    yellow: "text-yellow-100 dark:text-yellow-100",
    purple: "text-purple-100 dark:text-purple-100",
    custom: customColor()
  };
  legacy_pre_effect(() => deep_read_state(striped()), () => {
    setContext("striped", striped());
  });
  legacy_pre_effect(() => deep_read_state(hoverable()), () => {
    setContext("hoverable", hoverable());
  });
  legacy_pre_effect(() => deep_read_state(color()), () => {
    setContext("color", color());
  });
  legacy_pre_effect_reset();
  init();
  var div = root84();
  var div_1 = child(div);
  var label = child(div_1);
  var div_2 = sibling(sibling(label, true));
  var div_3 = child(div_2);
  set_class(div_3, svgDivCls);
  var node = child(div_3);
  slot(node, (_a = $$props.$$slots) == null ? void 0 : _a["svgSearch"], {}, ($$anchor2) => {
    var svg = fallback11();
    var path = child(svg);
    render_effect(() => set_class(svg, svgClass()));
    append($$anchor2, svg);
  });
  var input = sibling(sibling(div_3, true));
  remove_input_attr_defaults(input);
  set_class(input, inputCls);
  var node_1 = sibling(sibling(div_2, true));
  slot(node_1, (_b = $$props.$$slots) == null ? void 0 : _b["header"], {}, null);
  var table = sibling(sibling(div_1, true));
  let attributes;
  var node_2 = child(table);
  slot(node_2, $$props.children, {}, null);
  var node_3 = sibling(sibling(table, true));
  slot(node_3, (_c = $$props.$$slots) == null ? void 0 : _c["footer"], {}, null);
  render_effect(() => {
    set_class(div, divClass());
    set_class(div_1, innerDivClass());
    set_class(div_2, searchClass());
    set_attribute(input, "placeholder", placeholder());
    attributes = set_attributes(
      table,
      attributes,
      {
        ...$$restProps,
        class: twMerge("w-full text-left text-sm", colors[color()], $$sanitized_props.class)
      },
      true,
      ""
    );
  });
  bind_value(input, inputValue, ($$value) => inputValue($$value));
  append($$anchor, div);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(TableSearch);
  TableSearch = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var TableSearch_default = TableSearch;
TableSearch.filename = ".../dist/table/TableSearch.svelte";
mark_module_end(TableSearch);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/tabs/TabItem.svelte
mark_module_start();
var root_137 = template(`<div class="hidden tab_content_placeholder"><div><!></div></div>`);
var root85 = template(`<li role="presentation"><button><!></button> <!></li>`);
function TabItem($$anchor, $$props) {
  var _a;
  if (new.target === TabItem)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "open",
    "title",
    "activeClasses",
    "inactiveClasses",
    "defaultClass"
  ]);
  push($$props, false, TabItem);
  let open = prop($$props, "open", 4, false);
  let title = prop($$props, "title", 0, "Tab title");
  let activeClasses = prop($$props, "activeClasses", 0, void 0);
  let inactiveClasses = prop($$props, "inactiveClasses", 0, void 0);
  let defaultClass = prop($$props, "defaultClass", 0, "inline-block text-sm font-medium text-center disabled:cursor-not-allowed");
  const ctx = getContext("ctx") ?? {};
  const selected = ctx.selected ?? writable();
  function init2(node) {
    selected.set(node);
    const destroy = selected.subscribe((x) => {
      if (x !== node) {
        open(false);
      }
    });
    return { destroy };
  }
  let buttonClass = mutable_source();
  legacy_pre_effect(
    () => (deep_read_state(defaultClass()), deep_read_state(open()), deep_read_state(activeClasses()), deep_read_state(inactiveClasses())),
    () => {
      set(buttonClass, twMerge(defaultClass(), open() ? activeClasses() ?? ctx.activeClasses : inactiveClasses() ?? ctx.inactiveClasses, open() && "active"));
    }
  );
  legacy_pre_effect_reset();
  init();
  var li = root85();
  render_effect(() => set_class(li, twMerge("group", $$sanitized_props.class)));
  var button = child(li);
  let attributes;
  var node_1 = child(button);
  slot(node_1, (_a = $$props.$$slots) == null ? void 0 : _a["title"], {}, ($$anchor2) => {
    var text2 = text($$anchor2);
    render_effect(() => set_text(text2, title()));
    append($$anchor2, text2);
  });
  var node_2 = sibling(sibling(button, true));
  if_block(node_2, open, ($$anchor2) => {
    var div = root_137();
    var div_1 = child(div);
    var node_3 = child(div_1);
    slot(node_3, $$props.children, {}, null);
    action(div_1, ($$node) => init2($$node));
    append($$anchor2, div);
  });
  render_effect(() => attributes = set_attributes(
    button,
    attributes,
    {
      type: "button",
      role: "tab",
      ...$$restProps,
      class: get(buttonClass)
    },
    true,
    ""
  ));
  event("click", button, () => open(true), false);
  event("blur", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("click", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("contextmenu", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("focus", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keydown", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keypress", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keyup", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("mouseenter", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("mouseleave", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("mouseover", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  append($$anchor, li);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(TabItem);
  TabItem = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var TabItem_default = TabItem;
TabItem.filename = ".../dist/tabs/TabItem.svelte";
mark_module_end(TabItem);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/tabs/Tabs.svelte
mark_module_start();
var fallback12 = template(`<div class="h-px bg-gray-200 dark:bg-gray-700"></div>`);
var root86 = template(`<ul><!></ul> <!> <div role="tabpanel" aria-labelledby="id-tab"></div>`, 1);
function Tabs($$anchor, $$props) {
  if (new.target === Tabs)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  push($$props, false, Tabs);
  const ulClass = mutable_source();
  let tabStyle = prop($$props, "tabStyle", 0, "none");
  let defaultClass = prop($$props, "defaultClass", 0, "flex flex-wrap space-x-2 rtl:space-x-reverse");
  let contentClass = prop($$props, "contentClass", 0, "p-4 bg-gray-50 rounded-lg dark:bg-gray-800 mt-4");
  let divider = prop($$props, "divider", 4, true);
  let activeClasses = prop($$props, "activeClasses", 0, "p-4 text-primary-600 bg-gray-100 rounded-t-lg dark:bg-gray-800 dark:text-primary-500");
  let inactiveClasses = prop($$props, "inactiveClasses", 0, "p-4 text-gray-500 rounded-t-lg hover:text-gray-600 hover:bg-gray-50 dark:text-gray-400 dark:hover:bg-gray-800 dark:hover:text-gray-300");
  const styledActiveClasses = {
    full: "p-4 w-full group-first:rounded-s-lg group-last:rounded-e-lg text-gray-900 bg-gray-100 focus:ring-4 focus:ring-primary-300 focus:outline-none dark:bg-gray-700 dark:text-white",
    pill: "py-3 px-4 text-white bg-primary-600 rounded-lg",
    underline: "p-4 text-primary-600 border-b-2 border-primary-600 dark:text-primary-500 dark:border-primary-500",
    none: ""
  };
  const styledInactiveClasses = {
    full: "p-4 w-full group-first:rounded-s-lg group-last:rounded-e-lg text-gray-500 dark:text-gray-400 bg-white hover:text-gray-700 hover:bg-gray-50 focus:ring-4 focus:ring-primary-300 focus:outline-none dark:hover:text-white dark:bg-gray-800 dark:hover:bg-gray-700",
    pill: "py-3 px-4 text-gray-500 rounded-lg hover:text-gray-900 hover:bg-gray-100 dark:text-gray-400 dark:hover:bg-gray-800 dark:hover:text-white",
    underline: "p-4 border-b-2 border-transparent hover:text-gray-600 hover:border-gray-300 dark:hover:text-gray-300 text-gray-500 dark:text-gray-400",
    none: ""
  };
  const ctx = {
    activeClasses: styledActiveClasses[tabStyle()] || activeClasses(),
    inactiveClasses: styledInactiveClasses[tabStyle()] || inactiveClasses(),
    selected: writable()
  };
  setContext("ctx", ctx);
  function init2(node) {
    const destroy = ctx.selected.subscribe((x) => {
      if (x)
        node.replaceChildren(x);
    });
    return { destroy };
  }
  legacy_pre_effect(
    () => (deep_read_state(divider()), deep_read_state(tabStyle())),
    () => {
      divider(["full", "pill"].includes(tabStyle()) ? false : divider());
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(defaultClass()), deep_read_state(tabStyle()), deep_read_state($$sanitized_props)),
    () => {
      set(ulClass, twMerge(defaultClass(), tabStyle() === "underline" && "-mb-px", $$sanitized_props.class));
    }
  );
  legacy_pre_effect_reset();
  init();
  var fragment = root86();
  var ul = first_child(fragment);
  var node_1 = child(ul);
  slot(
    node_1,
    $$props.children,
    {
      get tabStyle() {
        return tabStyle();
      }
    },
    null
  );
  var node_2 = sibling(sibling(ul, true));
  if_block(node_2, divider, ($$anchor2) => {
    var _a;
    var fragment_1 = comment();
    var node_3 = first_child(fragment_1);
    slot(node_3, (_a = $$props.$$slots) == null ? void 0 : _a["divider"], {}, ($$anchor3) => {
      var div = fallback12();
      append($$anchor3, div);
    });
    append($$anchor2, fragment_1);
  });
  var div_1 = sibling(sibling(node_2, true));
  render_effect(() => {
    set_class(ul, get(ulClass));
    set_class(div_1, contentClass());
  });
  action(div_1, ($$node) => init2($$node));
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Tabs);
  Tabs = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Tabs_default = Tabs;
Tabs.filename = ".../dist/tabs/Tabs.svelte";
mark_module_end(Tabs);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/timeline/Group.svelte
mark_module_start();
var root87 = template(`<div><time> </time> <ol><!></ol></div>`);
function Group($$anchor, $$props) {
  if (new.target === Group)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  push($$props, false, Group);
  let divClass = prop($$props, "divClass", 0, "p-5 mb-4 bg-gray-50 rounded-lg border border-gray-100 dark:bg-gray-800 dark:border-gray-700");
  let timeClass = prop($$props, "timeClass", 0, "text-lg font-semibold text-gray-900 dark:text-white");
  let olClass = prop($$props, "olClass", 0, "mt-3 divide-y divider-gray-200 dark:divide-gray-700");
  let divCls = twMerge(divClass(), $$sanitized_props.classDiv);
  let timeCls = twMerge(timeClass(), $$sanitized_props.classTime);
  let olCls = twMerge(olClass(), $$sanitized_props.classOl);
  init();
  var div = root87();
  set_class(div, divCls);
  var time = child(div);
  set_class(time, timeCls);
  var text2 = child(time);
  var ol = sibling(sibling(time, true));
  set_class(ol, olCls);
  var node = child(ol);
  slot(node, $$props.children, {}, null);
  render_effect(() => set_text(text2, $$props.date));
  append($$anchor, div);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Group);
  Group = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Group_default = Group;
Group.filename = ".../dist/timeline/Group.svelte";
mark_module_end(Group);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/timeline/GroupItem.svelte
mark_module_start();
var root_138 = template(`<div class="text-sm font-normal"> </div>`);
var root_226 = template(`<svg class="me-1 w-3 h-3" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M3.707 2.293a1 1 0 00-1.414 1.414l14 14a1 1 0 001.414-1.414l-1.473-1.473A10.014 10.014 0 0019.542 10C18.268 5.943 14.478 3 10 3a9.958 9.958 0 00-4.512 1.074l-1.78-1.781zm4.261 4.26l1.514 1.515a2.003 2.003 0 012.45 2.45l1.514 1.514a4 4 0 00-5.478-5.478z" clip-rule="evenodd"></path><path d="M12.454 16.697L9.75 13.992a4 4 0 01-3.742-3.741L2.335 6.578A9.98 9.98 0 00.458 10c1.274 4.057 5.065 7 9.542 7 .847 0 1.669-.105 2.454-.303z"></path></svg> Private`, 1);
var root_315 = template(`<svg class="me-1 w-3 h-3" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M4.083 9h1.946c.089-1.546.383-2.97.837-4.118A6.004 6.004 0 004.083 9zM10 2a8 8 0 100 16 8 8 0 000-16zm0 2c-.076 0-.232.032-.465.262-.238.234-.497.623-.737 1.182-.389.907-.673 2.142-.766 3.556h3.936c-.093-1.414-.377-2.649-.766-3.556-.24-.56-.5-.948-.737-1.182C10.232 4.032 10.076 4 10 4zm3.971 5c-.089-1.546-.383-2.97-.837-4.118A6.004 6.004 0 0115.917 9h-1.946zm-2.003 2H8.032c.093 1.414.377 2.649.766 3.556.24.56.5.948.737 1.182.233.23.389.262.465.262.076 0 .232-.032.465-.262.238-.234.498-.623.737-1.182.389-.907.673-2.142.766-3.556zm1.166 4.118c.454-1.147.748-2.572.837-4.118h1.946a6.004 6.004 0 01-2.783 4.118zm-6.268 0C6.412 13.97 6.118 12.546 6.03 11H4.083a6.004 6.004 0 002.783 4.118z" clip-rule="evenodd"></path></svg> Public`, 1);
var each_block10 = template(`<li><a><img> <div><div><!></div> <!> <span><!></span></div></a></li>`);
function GroupItem($$anchor, $$props) {
  if (new.target === GroupItem)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  push($$props, false, GroupItem);
  let aClass = prop($$props, "aClass", 0, "block items-center p-3 sm:flex hover:bg-gray-100 dark:hover:bg-gray-700");
  let imgClass = prop($$props, "imgClass", 0, "me-3 mb-3 w-12 h-12 rounded-full sm:mb-0");
  let divClass = prop($$props, "divClass", 0, "text-gray-600 dark:text-gray-400");
  let titleClass = prop($$props, "titleClass", 0, "text-base font-normal");
  let spanClass = prop($$props, "spanClass", 0, "inline-flex items-center text-xs font-normal text-gray-500 dark:text-gray-400");
  let aCls = twMerge(aClass(), $$sanitized_props.classA);
  let imgCls = twMerge(imgClass(), $$sanitized_props.classImg);
  let divCls = twMerge(divClass(), $$sanitized_props.classDiv);
  let titleCls = twMerge(titleClass(), $$sanitized_props.classTitle);
  let spanCls = twMerge(spanClass(), $$sanitized_props.classSpan);
  init();
  var fragment = comment();
  var node = first_child(fragment);
  each(node, 1, () => $$props.timelines, index, ($$anchor2, $$item, $$index) => {
    let title = () => unwrap(unwrap($$item)).title;
    title();
    let src = () => unwrap(unwrap($$item)).src;
    src();
    let alt = () => unwrap(unwrap($$item)).alt;
    alt();
    let isPrivate = () => unwrap(unwrap($$item)).isPrivate;
    isPrivate();
    let href = () => unwrap(unwrap($$item)).href;
    href();
    let comment2 = () => unwrap(unwrap($$item)).comment;
    comment2();
    var li = each_block10();
    var a = child(li);
    set_class(a, aCls);
    var img = child(a);
    set_class(img, imgCls);
    var div = sibling(sibling(img, true));
    set_class(div, divCls);
    var div_1 = child(div);
    set_class(div_1, titleCls);
    var node_1 = child(div_1);
    html(node_1, title, false, false);
    var node_2 = sibling(sibling(div_1, true));
    if_block(node_2, comment2, ($$anchor3) => {
      var div_2 = root_138();
      var text2 = child(div_2);
      render_effect(() => set_text(text2, comment2()));
      append($$anchor3, div_2);
    });
    var span = sibling(sibling(node_2, true));
    set_class(span, spanCls);
    var node_3 = child(span);
    if_block(
      node_3,
      isPrivate,
      ($$anchor3) => {
        var fragment_1 = root_226();
        var svg = first_child(fragment_1);
        var path = child(svg);
        var path_1 = sibling(path);
        append($$anchor3, fragment_1);
      },
      ($$anchor3) => {
        var fragment_2 = root_315();
        var svg_1 = first_child(fragment_2);
        var path_2 = child(svg_1);
        append($$anchor3, fragment_2);
      }
    );
    render_effect(() => {
      set_attribute(a, "href", href());
      set_attribute(img, "src", src());
      set_attribute(img, "alt", alt());
    });
    append($$anchor2, li);
  });
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(GroupItem);
  GroupItem = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var GroupItem_default = GroupItem;
GroupItem.filename = ".../dist/timeline/GroupItem.svelte";
mark_module_end(GroupItem);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/timeline/Activity.svelte
mark_module_start();
var root88 = template(`<ol><!></ol>`);
function Activity($$anchor, $$props) {
  if (new.target === Activity)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  push($$props, false, Activity);
  let olClass = prop($$props, "olClass", 0, "relative border-s border-gray-200 dark:border-gray-700");
  let olCls = twMerge(olClass(), $$sanitized_props.class);
  init();
  var ol = root88();
  set_class(ol, olCls);
  var node = child(ol);
  slot(node, $$props.children, {}, null);
  append($$anchor, ol);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Activity);
  Activity = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Activity_default = Activity;
Activity.filename = ".../dist/timeline/Activity.svelte";
mark_module_end(Activity);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/timeline/ActivityItem.svelte
mark_module_start();
var root_139 = template(`<div><!></div>`);
var each_block11 = template(`<li><span><img></span> <div><div><time> </time> <div><!></div></div> <!></div></li>`);
function ActivityItem($$anchor, $$props) {
  if (new.target === ActivityItem)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  push($$props, false, ActivityItem);
  let liClass = prop($$props, "liClass", 0, "mb-10 ms-6");
  let spanClass = prop($$props, "spanClass", 0, "flex absolute -start-3 justify-center items-center w-6 h-6 bg-blue-200 rounded-full ring-8 ring-white dark:ring-gray-900 dark:bg-blue-900");
  let imgClass = prop($$props, "imgClass", 0, "rounded-full shadow-lg");
  let outerDivClass = prop($$props, "outerDivClass", 0, "p-4 bg-white rounded-lg border border-gray-200 shadow-sm dark:bg-gray-700 dark:border-gray-600");
  let innerDivClass = prop($$props, "innerDivClass", 0, "justify-between items-center mb-3 sm:flex");
  let timeClass = prop($$props, "timeClass", 0, "mb-1 text-xs font-normal text-gray-400 sm:order-last sm:mb-0");
  let titleClass = prop($$props, "titleClass", 0, "text-sm font-normal text-gray-500 lex dark:text-gray-300");
  let textClass = prop($$props, "textClass", 0, "p-3 text-xs italic font-normal text-gray-500 bg-gray-50 rounded-lg border border-gray-200 dark:bg-gray-600 dark:border-gray-500 dark:text-gray-300");
  let liCls = twMerge(liClass(), $$sanitized_props.classLi);
  let spanCls = twMerge(spanClass(), $$sanitized_props.classSpan);
  let imgCls = twMerge(imgClass(), $$sanitized_props.classImg);
  let outerDivCls = twMerge(outerDivClass(), $$sanitized_props.classOuterDiv);
  let innerDivCls = twMerge(innerDivClass(), $$sanitized_props.classInnerDiv);
  let timeCls = twMerge(timeClass(), $$sanitized_props.classTime);
  let titleCls = twMerge(titleClass(), $$sanitized_props.classTitle);
  let textCls = twMerge(textClass(), $$sanitized_props.classText);
  init();
  var fragment = comment();
  var node = first_child(fragment);
  each(node, 1, () => $$props.activities, index, ($$anchor2, $$item, $$index) => {
    let title = () => unwrap(unwrap($$item)).title;
    title();
    let date = () => unwrap(unwrap($$item)).date;
    date();
    let src = () => unwrap(unwrap($$item)).src;
    src();
    let alt = () => unwrap(unwrap($$item)).alt;
    alt();
    let text2 = () => unwrap(unwrap($$item)).text;
    text2();
    var li = each_block11();
    set_class(li, liCls);
    var span = child(li);
    set_class(span, spanCls);
    var img = child(span);
    set_class(img, imgCls);
    var div = sibling(sibling(span, true));
    set_class(div, outerDivCls);
    var div_1 = child(div);
    set_class(div_1, innerDivCls);
    var time = child(div_1);
    set_class(time, timeCls);
    var text_1 = child(time);
    var div_2 = sibling(sibling(time, true));
    set_class(div_2, titleCls);
    var node_1 = child(div_2);
    html(node_1, title, false, false);
    var node_2 = sibling(sibling(div_1, true));
    if_block(node_2, text2, ($$anchor3) => {
      var div_3 = root_139();
      set_class(div_3, textCls);
      var node_3 = child(div_3);
      html(node_3, text2, false, false);
      append($$anchor3, div_3);
    });
    render_effect(() => {
      set_attribute(img, "src", src());
      set_attribute(img, "alt", alt());
      set_text(text_1, date());
    });
    append($$anchor2, li);
  });
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ActivityItem);
  ActivityItem = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ActivityItem_default = ActivityItem;
ActivityItem.filename = ".../dist/timeline/ActivityItem.svelte";
mark_module_end(ActivityItem);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/timeline/Timeline.svelte
mark_module_start();
var root89 = template(`<ol><!></ol>`);
function Timeline($$anchor, $$props) {
  if (new.target === Timeline)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  push($$props, false, Timeline);
  let order = prop($$props, "order", 0, "default");
  setContext("order", order());
  let olClasses = {
    group: "p-5 mb-4 bg-gray-50 rounded-lg border border-gray-100 dark:bg-gray-800 dark:border-gray-700",
    horizontal: "sm:flex",
    activity: "relative border-s border-gray-200 dark:border-gray-700",
    vertical: "relative border-s border-gray-200 dark:border-gray-700",
    default: "relative border-s border-gray-200 dark:border-gray-700"
  };
  init();
  var ol = root89();
  render_effect(() => set_class(ol, twMerge(olClasses[order()], $$sanitized_props.class)));
  var node = child(ol);
  slot(node, $$props.children, {}, null);
  append($$anchor, ol);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Timeline);
  Timeline = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Timeline_default = Timeline;
Timeline.filename = ".../dist/timeline/Timeline.svelte";
mark_module_end(Timeline);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/timeline/TimelineItem.svelte
mark_module_start();
var fallback13 = template(`<svg aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd"></path></svg>`);
var root_316 = template(`<time> </time>`);
var root_412 = template(`<h3> </h3>`);
var root_65 = template(`<time> </time>`);
var root90 = template(`<li><div></div> <!> <!> <!> <!></li>`);
function TimelineItem($$anchor, $$props) {
  if (new.target === TimelineItem)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  push($$props, false, TimelineItem);
  let title = prop($$props, "title", 0, "");
  let date = prop($$props, "date", 0, "");
  let svgClass = prop($$props, "svgClass", 0, "w-3 h-3 text-primary-600 dark:text-primary-400");
  let order = mutable_source("default");
  set(order, getContext("order"));
  const liClasses = {
    default: "mb-10 ms-4",
    vertical: "mb-10 ms-6",
    horizontal: "relative mb-6 sm:mb-0",
    activity: "mb-10 ms-6",
    group: ""
  };
  const divClasses = {
    default: "absolute w-3 h-3 bg-gray-200 rounded-full mt-1.5 -start-1.5 border border-white dark:border-gray-900 dark:bg-gray-700",
    vertical: "flex absolute -start-3 justify-center items-center w-6 h-6 bg-primary-200 rounded-full ring-8 ring-white dark:ring-gray-900 dark:bg-primary-900",
    horizontal: "flex items-center",
    activity: "flex absolute -start-3 justify-center items-center w-6 h-6 bg-primary-200 rounded-full ring-8 ring-white dark:ring-gray-900 dark:bg-primary-900",
    group: "p-5 mb-4 bg-gray-50 rounded-lg border border-gray-100 dark:bg-gray-800 dark:border-gray-700"
  };
  const timeClasses = {
    default: "mb-1 text-sm font-normal leading-none text-gray-400 dark:text-gray-500",
    vertical: "block mb-2 text-sm font-normal leading-none text-gray-400 dark:text-gray-500",
    horizontal: "block mb-2 text-sm font-normal leading-none text-gray-400 dark:text-gray-500",
    activity: "mb-1 text-xs font-normal text-gray-400 sm:order-last sm:mb-0",
    group: "text-lg font-semibold text-gray-900 dark:text-white"
  };
  let liCls = twMerge(liClasses[get(order)], $$sanitized_props.classLi);
  let divCls = twMerge(divClasses[get(order)], $$sanitized_props.classDiv);
  let timeCls = twMerge(timeClasses[get(order)], $$sanitized_props.classTime);
  const h3Cls = twMerge(get(order) === "vertical" ? "flex items-center mb-1 text-lg font-semibold text-gray-900 dark:text-white" : "text-lg font-semibold text-gray-900 dark:text-white", $$sanitized_props.classH3);
  init();
  var li = root90();
  set_class(li, liCls);
  var div = child(li);
  set_class(div, divCls);
  var node = sibling(sibling(div, true));
  if_block(
    node,
    () => get(order) !== "default",
    ($$anchor2) => {
      var _a;
      var fragment = comment();
      var node_1 = first_child(fragment);
      slot(node_1, (_a = $$props.$$slots) == null ? void 0 : _a["icon"], {}, ($$anchor3) => {
        var svg = fallback13();
        var path = child(svg);
        render_effect(() => set_class(svg, svgClass()));
        append($$anchor3, svg);
      });
      append($$anchor2, fragment);
    },
    ($$anchor2) => {
      var fragment_1 = comment();
      var node_2 = first_child(fragment_1);
      if_block(
        node_2,
        date,
        ($$anchor3) => {
          var time = root_316();
          set_class(time, timeCls);
          var text2 = child(time);
          render_effect(() => set_text(text2, date()));
          append($$anchor3, time);
        },
        null,
        true
      );
      append($$anchor2, fragment_1);
    }
  );
  var node_3 = sibling(sibling(node, true));
  if_block(node_3, title, ($$anchor2) => {
    var h3 = root_412();
    set_class(h3, h3Cls);
    var text_1 = child(h3);
    render_effect(() => set_text(text_1, title()));
    append($$anchor2, h3);
  });
  var node_4 = sibling(sibling(node_3, true));
  if_block(node_4, () => get(order) !== "default", ($$anchor2) => {
    var fragment_2 = comment();
    var node_5 = first_child(fragment_2);
    if_block(node_5, date, ($$anchor3) => {
      var time_1 = root_65();
      set_class(time_1, timeCls);
      var text_2 = child(time_1);
      render_effect(() => set_text(text_2, date()));
      append($$anchor3, time_1);
    });
    append($$anchor2, fragment_2);
  });
  var node_6 = sibling(sibling(node_4, true));
  slot(node_6, $$props.children, {}, null);
  append($$anchor, li);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(TimelineItem);
  TimelineItem = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var TimelineItem_default = TimelineItem;
TimelineItem.filename = ".../dist/timeline/TimelineItem.svelte";
mark_module_end(TimelineItem);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/toast/Toast.svelte
mark_module_start();
var TransitionFrame_default4 = template(`<!> <div><!></div> <!>`, 1);
function Toast($$anchor, $$props) {
  if (new.target === Toast)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "dismissable",
    "color",
    "position",
    "divClass",
    "defaultIconClass",
    "contentClass",
    "align"
  ]);
  push($$props, false, Toast);
  let dismissable = prop($$props, "dismissable", 0, true);
  let color = prop($$props, "color", 0, "primary");
  let position = prop($$props, "position", 0, "none");
  let divClass = prop($$props, "divClass", 0, "w-full max-w-xs p-4 text-gray-500 bg-white shadow dark:text-gray-400 dark:bg-gray-800 gap-3");
  let defaultIconClass = prop($$props, "defaultIconClass", 0, "w-8 h-8");
  let contentClass = prop($$props, "contentClass", 0, "w-full text-sm font-normal");
  let align = prop($$props, "align", 0, true);
  const positions = {
    "top-left": "absolute top-5 start-5",
    "top-right": "absolute top-5 end-5",
    "bottom-left": "absolute bottom-5 start-5",
    "bottom-right": "absolute bottom-5 end-5",
    none: ""
  };
  let finalDivClass = mutable_source();
  const colors = {
    primary: "text-primary-500 bg-primary-100 dark:bg-primary-800 dark:text-primary-200",
    gray: "text-gray-500 bg-gray-100 dark:bg-gray-700 dark:text-gray-200",
    red: "text-red-500 bg-red-100 dark:bg-red-800 dark:text-red-200",
    yellow: "text-yellow-500 bg-yellow-100 dark:bg-yellow-800 dark:text-yellow-200",
    green: "text-green-500 bg-green-100 dark:bg-green-800 dark:text-green-200",
    blue: "text-blue-500 bg-blue-100 dark:bg-blue-800 dark:text-blue-200",
    indigo: "text-indigo-500 bg-indigo-100 dark:bg-indigo-800 dark:text-indigo-200",
    purple: "text-purple-500 bg-purple-100 dark:bg-purple-800 dark:text-purple-200",
    orange: "text-orange-500 bg-orange-100 dark:bg-orange-700 dark:text-orange-200",
    none: ""
  };
  let iconClass = mutable_source();
  const clsBtnExtraClass = "-mx-1.5 -my-1.5 text-gray-400 hover:text-gray-900 focus:!ring-gray-300 hover:bg-gray-100 dark:text-gray-500 dark:hover:text-white dark:hover:bg-gray-700";
  legacy_pre_effect(
    () => (deep_read_state(align()), deep_read_state(divClass()), deep_read_state(position()), deep_read_state($$sanitized_props)),
    () => {
      set(finalDivClass, twMerge("flex", align() ? "items-center" : "items-start", divClass(), positions[position()], $$sanitized_props.class));
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(color()), deep_read_state(defaultIconClass())),
    () => {
      set(iconClass, twMerge("inline-flex items-center justify-center shrink-0", colors[color()], defaultIconClass()));
    }
  );
  legacy_pre_effect_reset();
  init();
  var fragment = comment();
  var node = first_child(fragment);
  validate_component(TransitionFrame_default)(node, spread_props({ rounded: true, color: "none", role: "alert" }, () => $$restProps, {
    get class() {
      return get(finalDivClass);
    },
    $$events: {
      close($$arg) {
        bubble_event.call(this, $$props, $$arg);
      }
    },
    children: wrap_snippet(($$anchor2, $$slotProps) => {
      const close = derived_safe_equal(() => $$slotProps.close);
      var fragment_1 = TransitionFrame_default4();
      var node_1 = first_child(fragment_1);
      if_block(node_1, () => $$slots.icon, ($$anchor3) => {
        var fragment_2 = comment();
        var node_2 = first_child(fragment_2);
        validate_component(Frame_default)(node_2, {
          rounded: true,
          color: "none",
          get class() {
            return get(iconClass);
          },
          children: wrap_snippet(($$anchor4, $$slotProps2) => {
            var _a;
            var fragment_3 = comment();
            var node_3 = first_child(fragment_3);
            slot(node_3, (_a = $$props.$$slots) == null ? void 0 : _a["icon"], {}, null);
            append($$anchor4, fragment_3);
          })
        });
        append($$anchor3, fragment_2);
      });
      var div = sibling(sibling(node_1, true));
      var node_4 = child(div);
      slot(node_4, $$props.children, {}, null);
      var node_5 = sibling(sibling(div, true));
      if_block(node_5, dismissable, ($$anchor3) => {
        var _a;
        var fragment_4 = comment();
        var node_6 = first_child(fragment_4);
        slot(
          node_6,
          (_a = $$props.$$slots) == null ? void 0 : _a["close-button"],
          {
            get close() {
              return get(close);
            }
          },
          ($$anchor4) => {
            var fragment_5 = comment();
            var node_7 = first_child(fragment_5);
            validate_component(CloseButton_default)(node_7, {
              class: clsBtnExtraClass,
              $$events: {
                click(...$$args) {
                  const $$callback = get(close);
                  return $$callback == null ? void 0 : $$callback.apply(this, $$args);
                }
              }
            });
            append($$anchor4, fragment_5);
          }
        );
        append($$anchor3, fragment_4);
      });
      render_effect(() => set_class(div, contentClass()));
      append($$anchor2, fragment_1);
    })
  }));
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Toast);
  Toast = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Toast_default = Toast;
Toast.filename = ".../dist/toast/Toast.svelte";
mark_module_end(Toast);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/toolbar/Toolbar.svelte
mark_module_start();
var Frame_default4 = template(`<!> <!>`, 1);
function Toolbar($$anchor, $$props) {
  if (new.target === Toolbar)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["embedded"]);
  push($$props, false, Toolbar);
  const $$subscriptions = {};
  unsubscribe_on_destroy($$subscriptions);
  const $separators = () => (validate_store(separators, "separators"), store_get(separators, "$separators", $$subscriptions));
  let embedded = prop($$props, "embedded", 0, false);
  const separators = writable(false);
  setContext("toolbar", separators);
  let color = mutable_source();
  let separatorsClass = mutable_source();
  let divClass = mutable_source();
  legacy_pre_effect(
    () => (deep_read_state(embedded()), deep_read_state($$sanitized_props)),
    () => {
      set(color, embedded() ? "none" : $$sanitized_props.color);
    }
  );
  legacy_pre_effect(() => $separators(), () => {
    set(separatorsClass, twJoin($separators() && "sm:divide-x rtl:divide-x-reverse"));
  });
  legacy_pre_effect(
    () => (deep_read_state(embedded()), deep_read_state($$sanitized_props)),
    () => {
      set(divClass, twMerge("flex justify-between items-center", !embedded() && "py-2 px-3", $$sanitized_props.class));
    }
  );
  legacy_pre_effect_reset();
  init();
  var fragment = comment();
  var node = first_child(fragment);
  var rounded = derived(() => !embedded());
  validate_component(Frame_default)(node, spread_props(() => $$restProps, {
    get class() {
      return get(divClass);
    },
    get color() {
      return get(color);
    },
    get rounded() {
      return get(rounded);
    },
    children: wrap_snippet(($$anchor2, $$slotProps) => {
      var _a;
      var fragment_1 = Frame_default4();
      var node_1 = first_child(fragment_1);
      var rounded_1 = derived(() => !embedded());
      validate_component(Frame_default)(node_1, {
        get class() {
          return `flex flex-wrap items-center ${stringify(get(separatorsClass))}`;
        },
        get color() {
          return get(color);
        },
        get rounded() {
          return get(rounded_1);
        },
        children: wrap_snippet(($$anchor3, $$slotProps2) => {
          var fragment_2 = comment();
          var node_2 = first_child(fragment_2);
          slot(node_2, $$props.children, {}, null);
          append($$anchor3, fragment_2);
        })
      });
      var node_3 = sibling(sibling(node_1, true));
      slot(node_3, (_a = $$props.$$slots) == null ? void 0 : _a["end"], {}, null);
      append($$anchor2, fragment_1);
    })
  }));
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Toolbar);
  Toolbar = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Toolbar_default = Toolbar;
Toolbar.filename = ".../dist/toolbar/Toolbar.svelte";
mark_module_end(Toolbar);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/toolbar/ToolbarGroup.svelte
mark_module_start();
var root91 = template(`<div><!></div>`);
function ToolbarGroup($$anchor, $$props) {
  if (new.target === ToolbarGroup)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  push($$props, false, ToolbarGroup);
  const $$subscriptions = {};
  unsubscribe_on_destroy($$subscriptions);
  const $options = () => (validate_store(options, "options"), store_get(options, "$options", $$subscriptions));
  let divClass = prop($$props, "divClass", 0, "flex items-center space-x-1 rtl:space-x-reverse sm:pe-4 sm:ps-4 first:sm:ps-0 last:sm:pe-0");
  const options = getContext("toolbar");
  if (options)
    store_set(options, true);
  init();
  var div = root91();
  render_effect(() => set_class(div, twMerge(divClass(), $$sanitized_props.class)));
  var node = child(div);
  slot(node, $$props.children, {}, null);
  append($$anchor, div);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(ToolbarGroup);
  ToolbarGroup = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var ToolbarGroup_default = ToolbarGroup;
ToolbarGroup.filename = ".../dist/toolbar/ToolbarGroup.svelte";
mark_module_end(ToolbarGroup);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/typography/A.svelte
mark_module_start();
var root92 = template(`<a><!></a>`);
function A($$anchor, $$props) {
  if (new.target === A)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["href", "color", "aClass"]);
  push($$props, false, A);
  let href = prop($$props, "href", 0, "#");
  let color = prop($$props, "color", 0, "text-primary-600 dark:text-primary-500");
  let aClass = prop($$props, "aClass", 0, "inline-flex items-center hover:underline");
  init();
  var a = root92();
  let attributes;
  var node = child(a);
  slot(node, $$props.children, {}, null);
  render_effect(() => attributes = set_attributes(
    a,
    attributes,
    {
      ...$$restProps,
      href: href(),
      class: twMerge(aClass(), color(), $$sanitized_props.class)
    },
    true,
    ""
  ));
  event("click", a, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  append($$anchor, a);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(A);
  A = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var A_default = A;
A.filename = ".../dist/typography/A.svelte";
mark_module_end(A);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/typography/Blockquote.svelte
mark_module_start();
var root93 = template(`<blockquote><!></blockquote>`);
function Blockquote($$anchor, $$props) {
  if (new.target === Blockquote)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "border",
    "italic",
    "borderClass",
    "bgClass",
    "bg",
    "baseClass",
    "alignment",
    "size"
  ]);
  push($$props, false, Blockquote);
  let border = prop($$props, "border", 0, false);
  let italic = prop($$props, "italic", 0, true);
  let borderClass = prop($$props, "borderClass", 0, "border-s-4 border-gray-300 dark:border-gray-500");
  let bgClass = prop($$props, "bgClass", 0, "bg-gray-50 dark:bg-gray-800");
  let bg = prop($$props, "bg", 0, false);
  let baseClass = prop($$props, "baseClass", 0, "font-semibold text-gray-900 dark:text-white");
  let alignment = prop($$props, "alignment", 0, "left");
  let size2 = prop($$props, "size", 0, "lg");
  let alignmentClasses = {
    left: "text-left",
    center: "text-center",
    right: "text-right"
  };
  const sizes = {
    xs: "text-xs",
    sm: "text-sm",
    base: "text-base",
    lg: "text-lg",
    xl: "text-xl",
    "2xl": "text-2xl",
    "3xl": "text-3xl",
    "4xl": "text-4xl",
    "5xl": "text-5xl",
    "6xl": "text-6xl",
    "7xl": "text-7xl",
    "8xl": "text-8xl",
    "9xl": "text-9xl"
  };
  init();
  var blockquote = root93();
  let attributes;
  var node = child(blockquote);
  slot(node, $$props.children, {}, null);
  render_effect(() => attributes = set_attributes(
    blockquote,
    attributes,
    {
      ...$$restProps,
      class: twMerge(baseClass(), alignmentClasses[alignment()], sizes[size2()], bg() && bgClass(), border() && borderClass(), italic() && "italic", $$sanitized_props.class)
    },
    true,
    ""
  ));
  append($$anchor, blockquote);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Blockquote);
  Blockquote = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Blockquote_default = Blockquote;
Blockquote.filename = ".../dist/typography/Blockquote.svelte";
mark_module_end(Blockquote);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/typography/DescriptionList.svelte
mark_module_start();
function DescriptionList($$anchor, $$props) {
  if (new.target === DescriptionList)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["tag", "dtClass", "ddClass"]);
  push($$props, false, DescriptionList);
  let dtClass = prop($$props, "dtClass", 0, "text-gray-500 md:text-lg dark:text-gray-400");
  let ddClass = prop($$props, "ddClass", 0, "text-lg font-semibold");
  let classDesc = twMerge($$props.tag === "dt" ? dtClass() : ddClass(), $$sanitized_props.class);
  init();
  var fragment = comment();
  var node = first_child(fragment);
  validate_void_dynamic_element(() => $$props.tag);
  validate_dynamic_element_tag(() => $$props.tag);
  element(node, () => $$props.tag, false, ($$element, $$anchor2) => {
    let attributes;
    render_effect(() => attributes = set_dynamic_element_attributes($$element, attributes, { ...$$restProps, class: classDesc }, ""));
    var fragment_1 = comment();
    var node_1 = first_child(fragment_1);
    slot(node_1, $$props.children, {}, null);
    append($$anchor2, fragment_1);
  });
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(DescriptionList);
  DescriptionList = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var DescriptionList_default = DescriptionList;
DescriptionList.filename = ".../dist/typography/DescriptionList.svelte";
mark_module_end(DescriptionList);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/typography/Heading.svelte
mark_module_start();
function Heading($$anchor, $$props) {
  if (new.target === Heading)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["tag", "color", "customSize"]);
  push($$props, false, Heading);
  let tag = prop($$props, "tag", 0, "h1");
  let color = prop($$props, "color", 0, "text-gray-900 dark:text-white");
  let customSize = prop($$props, "customSize", 0, "");
  const textSizes = {
    h1: "text-5xl font-extrabold",
    h2: "text-4xl font-bold",
    h3: "text-3xl font-bold",
    h4: "text-2xl font-bold",
    h5: "text-xl font-bold",
    h6: "text-lg font-bold"
  };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  validate_void_dynamic_element(tag);
  validate_dynamic_element_tag(tag);
  element(node, tag, false, ($$element, $$anchor2) => {
    let attributes;
    render_effect(() => attributes = set_dynamic_element_attributes(
      $$element,
      attributes,
      {
        ...$$restProps,
        class: twMerge(customSize() ? customSize() : textSizes[tag()], color(), "w-full", $$sanitized_props.class)
      },
      ""
    ));
    var fragment_1 = comment();
    var node_1 = first_child(fragment_1);
    slot(node_1, $$props.children, {}, null);
    append($$anchor2, fragment_1);
  });
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Heading);
  Heading = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Heading_default = Heading;
Heading.filename = ".../dist/typography/Heading.svelte";
mark_module_end(Heading);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/typography/Hr.svelte
mark_module_start();
var root_140 = template(`<div><hr> <div><!></div></div>`);
var root_227 = template(`<hr>`);
function Hr($$anchor, $$props) {
  if (new.target === Hr)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "icon",
    "divClass",
    "hrClass",
    "iconDivClass",
    "textSpanClass",
    "innerDivClass"
  ]);
  push($$props, false, Hr);
  let icon = prop($$props, "icon", 0, false);
  let divClass = prop($$props, "divClass", 0, "inline-flex items-center justify-center w-full");
  let hrClass = prop($$props, "hrClass", 0, "h-px my-8 bg-gray-200 border-0 dark:bg-gray-700");
  let iconDivClass = prop($$props, "iconDivClass", 0, "absolute start-1/2 px-4 bg-white -translate-x-1/2 rtl:translate-x-1/2 ");
  let textSpanClass = prop($$props, "textSpanClass", 0, "absolute px-3 font-medium text-gray-900 -translate-x-1/2 rtl:translate-x-1/2 bg-white start-1/2 dark:text-white dark:bg-gray-900 ");
  let innerDivClass = prop($$props, "innerDivClass", 0, "absolute px-4 -translate-x-1/2 rtl:translate-x-1/2 bg-white start-1/2 dark:bg-gray-900");
  let horizontalCls = twMerge(hrClass(), $$sanitized_props.classHr);
  let divCls = twMerge(divClass(), $$slots && "relative", $$sanitized_props.classDiv);
  let innerDivCls = twMerge(innerDivClass(), icon() ? iconDivClass() : textSpanClass(), $$sanitized_props.classInnerDiv);
  init();
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    () => $$slots.default,
    ($$anchor2) => {
      var div = root_140();
      let attributes;
      var hr = child(div);
      set_class(hr, horizontalCls);
      var div_1 = sibling(sibling(hr, true));
      set_class(div_1, innerDivCls);
      var node_1 = child(div_1);
      slot(node_1, $$props.children, {}, null);
      render_effect(() => attributes = set_attributes(div, attributes, { ...$$restProps, class: divCls }, true, ""));
      append($$anchor2, div);
    },
    ($$anchor2) => {
      var hr_1 = root_227();
      set_class(hr_1, horizontalCls);
      append($$anchor2, hr_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Hr);
  Hr = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Hr_default = Hr;
Hr.filename = ".../dist/typography/Hr.svelte";
mark_module_end(Hr);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/typography/Img.svelte
mark_module_start();
var root_141 = template(`<figure><img> <figcaption><!></figcaption></figure>`);
var root_228 = template(`<img>`);
function Img($$anchor, $$props) {
  if (new.target === Img)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "caption",
    "src",
    "srcset",
    "size",
    "alignment",
    "imgClass",
    "figClass",
    "alt",
    "effect",
    "captionClass"
  ]);
  push($$props, false, Img);
  let caption = prop($$props, "caption", 0, void 0);
  let src = prop($$props, "src", 0, void 0);
  let srcset = prop($$props, "srcset", 0, void 0);
  let size2 = prop($$props, "size", 0, "max-w-full");
  let alignment = prop($$props, "alignment", 0, "");
  let imgClass = prop($$props, "imgClass", 0, "h-auto");
  let figClass = prop($$props, "figClass", 0, "max-w-lg");
  let alt = prop($$props, "alt", 0, "");
  let effect = prop($$props, "effect", 0, "");
  let captionClass = prop($$props, "captionClass", 0, "mt-2 text-sm text-center text-gray-500 dark:text-gray-400");
  init();
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    caption,
    ($$anchor2) => {
      var figure = root_141();
      var img = child(figure);
      render_effect(() => set_class(img, twMerge(imgClass(), size2(), alignment(), effect(), $$sanitized_props.class)));
      var figcaption = sibling(sibling(img, true));
      var node_1 = child(figcaption);
      html(node_1, caption, false, false);
      render_effect(() => {
        set_class(figure, figClass());
        set_attribute(img, "src", src());
        set_attribute(img, "srcset", srcset());
        set_attribute(img, "alt", alt());
        set_class(figcaption, captionClass());
      });
      append($$anchor2, figure);
    },
    ($$anchor2) => {
      var img_1 = root_228();
      let attributes;
      render_effect(() => attributes = set_attributes(
        img_1,
        attributes,
        {
          ...$$restProps,
          class: twMerge(imgClass(), size2(), alignment(), effect(), $$sanitized_props.class),
          src: src(),
          srcset: srcset(),
          alt: alt()
        },
        true,
        ""
      ));
      append($$anchor2, img_1);
    }
  );
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Img);
  Img = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Img_default = Img;
Img.filename = ".../dist/typography/Img.svelte";
mark_module_end(Img);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/typography/Layout.svelte
mark_module_start();
var root94 = template(`<div><!></div>`);
function Layout($$anchor, $$props) {
  if (new.target === Layout)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["divClass", "cols", "gap"]);
  push($$props, false, Layout);
  let divClass = prop($$props, "divClass", 0, "grid");
  let cols = prop($$props, "cols", 0, "grid-cols-1 sm:grid-cols-2");
  let classDiv = twMerge(divClass(), "gap-" + String($$props.gap), cols());
  init();
  var div = root94();
  let attributes;
  var node = child(div);
  slot(node, $$props.children, {}, null);
  render_effect(() => attributes = set_attributes(div, attributes, { ...$$restProps, class: classDiv }, true, ""));
  append($$anchor, div);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Layout);
  Layout = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Layout_default = Layout;
Layout.filename = ".../dist/typography/Layout.svelte";
mark_module_end(Layout);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/typography/Li.svelte
mark_module_start();
var root95 = template(`<li><!></li>`);
function Li($$anchor, $$props) {
  if (new.target === Li)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["icon", "liClass"]);
  push($$props, false, Li);
  let icon = prop($$props, "icon", 0, false);
  let liClass = prop($$props, "liClass", 0, "");
  let classLi = twMerge(liClass(), icon() && "flex items-center", $$sanitized_props.class);
  init();
  var li = root95();
  let attributes;
  var node = child(li);
  slot(node, $$props.children, {}, null);
  render_effect(() => attributes = set_attributes(li, attributes, { ...$$restProps, class: classLi }, true, ""));
  append($$anchor, li);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Li);
  Li = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Li_default = Li;
Li.filename = ".../dist/typography/Li.svelte";
mark_module_end(Li);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/typography/Mark.svelte
mark_module_start();
var root96 = template(`<mark><!></mark>`);
function Mark($$anchor, $$props) {
  if (new.target === Mark)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["color", "bgColor", "markClass"]);
  push($$props, false, Mark);
  let color = prop($$props, "color", 0, "text-white dark:bg-blue-500");
  let bgColor = prop($$props, "bgColor", 0, "bg-blue-600");
  let markClass = prop($$props, "markClass", 0, "px-2 rounded");
  init();
  var mark = root96();
  let attributes;
  var node = child(mark);
  slot(node, $$props.children, {}, null);
  render_effect(() => attributes = set_attributes(
    mark,
    attributes,
    {
      ...$$restProps,
      class: twMerge(markClass(), bgColor(), color(), $$sanitized_props.class)
    },
    true,
    ""
  ));
  append($$anchor, mark);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Mark);
  Mark = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Mark_default = Mark;
Mark.filename = ".../dist/typography/Mark.svelte";
mark_module_end(Mark);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/typography/List.svelte
mark_module_start();
function List($$anchor, $$props) {
  if (new.target === List)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["tag", "list", "position"]);
  push($$props, false, List);
  let tag = prop($$props, "tag", 0, "ul");
  let list = prop($$props, "list", 0, void 0);
  let position = prop($$props, "position", 0, "inside");
  let lists = {
    disc: "list-disc",
    none: "list-none",
    decimal: "list-decimal"
  };
  let positions = {
    inside: "list-inside",
    outside: "list-outside"
  };
  let classList = twMerge(lists[list() ?? (tag() === "ul" ? "disc" : "ol" ? "decimal" : "none")], positions[position()], $$sanitized_props.class);
  init();
  var fragment = comment();
  var node = first_child(fragment);
  validate_void_dynamic_element(tag);
  validate_dynamic_element_tag(tag);
  element(node, tag, false, ($$element, $$anchor2) => {
    let attributes;
    render_effect(() => attributes = set_dynamic_element_attributes($$element, attributes, { ...$$restProps, class: classList }, ""));
    var fragment_1 = comment();
    var node_1 = first_child(fragment_1);
    slot(node_1, $$props.children, {}, null);
    append($$anchor2, fragment_1);
  });
  append($$anchor, fragment);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(List);
  List = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var List_default = List;
List.filename = ".../dist/typography/List.svelte";
mark_module_end(List);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/typography/P.svelte
mark_module_start();
var root97 = template(`<p><!></p>`);
function P($$anchor, $$props) {
  if (new.target === P)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "color",
    "height",
    "align",
    "justify",
    "italic",
    "firstupper",
    "upperClass",
    "opacity",
    "whitespace",
    "size",
    "space",
    "weight"
  ]);
  push($$props, false, P);
  const colorAndopacity = mutable_source();
  const classP = mutable_source();
  let color = prop($$props, "color", 0, "text-gray-900 dark:text-white");
  let height = prop($$props, "height", 0, "normal");
  let align = prop($$props, "align", 0, "left");
  let justify = prop($$props, "justify", 0, false);
  let italic = prop($$props, "italic", 0, false);
  let firstupper = prop($$props, "firstupper", 0, false);
  let upperClass = prop($$props, "upperClass", 0, "first-line:uppercase first-line:tracking-widest first-letter:text-7xl first-letter:font-bold first-letter:text-gray-900 dark:first-letter:text-gray-100 first-letter:me-3 first-letter:float-left");
  let opacity = prop($$props, "opacity", 0, void 0);
  let whitespace = prop($$props, "whitespace", 0, "normal");
  let size2 = prop($$props, "size", 0, "base");
  let space = prop($$props, "space", 0, void 0);
  let weight = prop($$props, "weight", 0, "normal");
  const sizes = {
    xs: "text-xs",
    sm: "text-sm",
    base: "text-base",
    lg: "text-lg",
    xl: "text-xl",
    "2xl": "text-2xl",
    "3xl": "text-3xl",
    "4xl": "text-4xl",
    "5xl": "text-5xl",
    "6xl": "text-6xl",
    "7xl": "text-7xl",
    "8xl": "text-8xl",
    "9xl": "text-9xl"
  };
  const weights = {
    thin: "font-thin",
    extralight: "font-extralight",
    light: "font-light",
    normal: "font-normal",
    medium: "font-medium",
    semibold: "font-semibold",
    bold: "font-bold",
    extrabold: "font-extrabold",
    black: "font-black"
  };
  const spaces = {
    tighter: "tracking-tighter",
    tight: "tracking-tight",
    normal: "tracking-normal",
    wide: "tracking-wide",
    wider: "tracking-wider",
    widest: "tracking-widest"
  };
  const heights = {
    normal: "leading-normal",
    relaxed: "leading-relaxed",
    loose: "leading-loose"
  };
  const aligns = {
    left: "text-left",
    center: "text-center",
    right: "text-right"
  };
  const whitespaces = {
    normal: "whitespace-normal",
    nowrap: "whitespace-nowrap",
    pre: "whitespace-pre",
    preline: "whitespace-pre-line",
    prewrap: "whitespace-pre-wrap"
  };
  legacy_pre_effect(
    () => (deep_read_state(color()), deep_read_state(opacity())),
    () => {
      set(colorAndopacity, color().split(" ").map((element2) => element2.trim()).map((element2) => element2 + "/" + String(opacity())).join(" "));
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(size2()), deep_read_state(opacity()), get(colorAndopacity), deep_read_state(color()), deep_read_state(height()), deep_read_state(weight()), deep_read_state(space()), deep_read_state(align()), deep_read_state(justify()), deep_read_state(italic()), deep_read_state(firstupper()), deep_read_state(upperClass()), deep_read_state(whitespace()), deep_read_state($$sanitized_props)),
    () => {
      set(classP, twMerge(size2() && sizes[size2()], opacity() && get(colorAndopacity) || color() && color(), height() && heights[height()], weight() && weights[weight()], space() && spaces[space()], align() && aligns[align()], justify() && "text-justify", italic() && "italic", firstupper() && upperClass(), whitespace() && whitespaces[whitespace()], $$sanitized_props.class));
    }
  );
  legacy_pre_effect_reset();
  init();
  var p = root97();
  let attributes;
  var node = child(p);
  slot(node, $$props.children, {}, null);
  render_effect(() => attributes = set_attributes(p, attributes, { ...$$restProps, class: get(classP) }, true, ""));
  append($$anchor, p);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(P);
  P = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var P_default = P;
P.filename = ".../dist/typography/P.svelte";
mark_module_end(P);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/typography/Secondary.svelte
mark_module_start();
var root98 = template(`<small><!></small>`);
function Secondary($$anchor, $$props) {
  if (new.target === Secondary)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["color", "secondaryClass"]);
  push($$props, false, Secondary);
  let color = prop($$props, "color", 0, "text-gray-500 dark:text-gray-400");
  let secondaryClass = prop($$props, "secondaryClass", 0, "font-semibold");
  init();
  var small = root98();
  let attributes;
  var node = child(small);
  slot(node, $$props.children, {}, null);
  render_effect(() => attributes = set_attributes(
    small,
    attributes,
    {
      ...$$restProps,
      class: twMerge(color(), secondaryClass(), $$sanitized_props.class)
    },
    true,
    ""
  ));
  append($$anchor, small);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Secondary);
  Secondary = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Secondary_default = Secondary;
Secondary.filename = ".../dist/typography/Secondary.svelte";
mark_module_end(Secondary);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/typography/Span.svelte
mark_module_start();
var root99 = template(`<span><!></span>`);
function Span($$anchor, $$props) {
  if (new.target === Span)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "italic",
    "underline",
    "linethrough",
    "uppercase",
    "gradient",
    "highlight",
    "highlightClass",
    "decorationClass",
    "gradientClass"
  ]);
  push($$props, false, Span);
  let italic = prop($$props, "italic", 0, false);
  let underline = prop($$props, "underline", 0, false);
  let linethrough = prop($$props, "linethrough", 0, false);
  let uppercase = prop($$props, "uppercase", 0, false);
  let gradient = prop($$props, "gradient", 0, false);
  let highlight = prop($$props, "highlight", 0, false);
  let highlightClass = prop($$props, "highlightClass", 0, "text-blue-600 dark:text-blue-500");
  let decorationClass = prop($$props, "decorationClass", 0, "decoration-2 decoration-blue-400 dark:decoration-blue-600");
  let gradientClass = prop($$props, "gradientClass", 0, "text-transparent bg-clip-text bg-gradient-to-r to-emerald-600 from-sky-400");
  let underlineClass = twMerge("underline", decorationClass());
  let classSpan = twMerge(italic() && "italic", underline() && underlineClass, linethrough() && "line-through", uppercase() && "uppercase", gradient() ? gradientClass() : "font-semibold text-gray-900 dark:text-white", highlight() && highlightClass(), $$sanitized_props.class);
  init();
  var span = root99();
  let attributes;
  var node = child(span);
  slot(node, $$props.children, {}, null);
  render_effect(() => attributes = set_attributes(span, attributes, { ...$$restProps, class: classSpan }, true, ""));
  append($$anchor, span);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Span);
  Span = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Span_default = Span;
Span.filename = ".../dist/typography/Span.svelte";
mark_module_end(Span);

// node_modules/.pnpm/flowbite-svelte@0.46.1_svelte@5.0.0-next.123/node_modules/flowbite-svelte/dist/video/Video.svelte
mark_module_start();
var root100 = template(`<video><source> <!> <track kind="captions"> Your browser does not support the video tag.</video>`);
function Video($$anchor, $$props) {
  if (new.target === Video)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "src",
    "type",
    "trackSrc",
    "srclang",
    "label"
  ]);
  push($$props, false, Video);
  let type = prop($$props, "type", 0, "video/mp4");
  let trackSrc = prop($$props, "trackSrc", 0, "");
  let srclang = prop($$props, "srclang", 0, "en");
  let label = prop($$props, "label", 0, "english_captions");
  let videoClass = twMerge($$sanitized_props.class);
  init();
  var video = root100();
  let attributes;
  var source2 = child(video);
  var node = sibling(sibling(source2, true));
  slot(node, $$props.children, {}, null);
  var track = sibling(sibling(node, true));
  render_effect(() => {
    attributes = set_attributes(video, attributes, { ...$$restProps, class: videoClass }, true, "");
    set_attribute(source2, "src", $$props.src);
    set_attribute(source2, "type", type());
    set_attribute(track, "src", trackSrc());
    set_attribute(track, "srclang", srclang());
    set_attribute(track, "label", label());
  });
  append($$anchor, video);
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
if (import.meta.hot) {
  const s = source(Video);
  Video = hmr(s);
  import.meta.hot.accept((module) => {
    set(s, module.default);
  });
}
var Video_default = Video;
Video.filename = ".../dist/video/Video.svelte";
mark_module_end(Video);
export {
  A_default as A,
  Accordion_default as Accordion,
  AccordionItem_default as AccordionItem,
  Activity_default as Activity,
  ActivityItem_default as ActivityItem,
  AdvancedRating_default as AdvancedRating,
  Alert_default as Alert,
  ArrowKeyDown_default as ArrowKeyDown,
  ArrowKeyLeft_default as ArrowKeyLeft,
  ArrowKeyRight_default as ArrowKeyRight,
  ArrowKeyUp_default as ArrowKeyUp,
  Avatar_default as Avatar,
  Badge_default as Badge,
  Banner_default as Banner,
  Blockquote_default as Blockquote,
  BottomNav_default as BottomNav,
  BottomNavHeader_default as BottomNavHeader,
  BottomNavHeaderItem_default as BottomNavHeaderItem,
  BottomNavItem_default as BottomNavItem,
  Breadcrumb_default as Breadcrumb,
  BreadcrumbItem_default as BreadcrumbItem,
  Button_default as Button,
  ButtonGroup_default as ButtonGroup,
  Card_default as Card,
  CardPlaceholder_default as CardPlaceholder,
  Carousel_default as Carousel,
  Chart_default as Chart,
  Checkbox_default as Checkbox,
  CheckboxButton_default as CheckboxButton,
  CloseButton_default as CloseButton,
  DarkMode_default as DarkMode,
  Datepicker_default as Datepicker,
  DescriptionList_default as DescriptionList,
  DeviceMockup_default as DeviceMockup,
  Drawer_default as Drawer,
  Dropdown_default as Dropdown,
  DropdownDivider_default as DropdownDivider,
  DropdownHeader_default as DropdownHeader,
  DropdownItem_default as DropdownItem,
  Dropzone_default as Dropzone,
  Fileupload_default as Fileupload,
  FloatingLabelInput_default as FloatingLabelInput,
  Footer_default as Footer,
  FooterBrand_default as FooterBrand,
  FooterCopyright_default as FooterCopyright,
  FooterIcon_default as FooterIcon,
  FooterLink_default as FooterLink,
  FooterLinkGroup_default as FooterLinkGroup,
  Frame_default as Frame,
  Gallery_default as Gallery,
  GradientButton_default as GradientButton,
  Group_default as Group,
  GroupItem_default as GroupItem,
  Heading_default as Heading,
  Heart_default as Heart,
  Helper_default as Helper,
  Hr_default as Hr,
  ImagePlaceholder_default as ImagePlaceholder,
  Img_default as Img,
  Indicator_default as Indicator,
  Input_default as Input,
  InputAddon_default as InputAddon,
  Kbd_default as Kbd,
  Label_default as Label,
  Layout_default as Layout,
  Li_default as Li,
  List_default as List,
  ListPlaceholder_default as ListPlaceholder,
  Listgroup_default as Listgroup,
  ListgroupItem_default as ListgroupItem,
  Mark_default as Mark,
  Marquee_default as Marquee,
  MegaMenu_default as MegaMenu,
  Modal_default as Modal,
  MultiSelect_default as MultiSelect,
  NavBrand_default as NavBrand,
  NavHamburger_default as NavHamburger,
  NavLi_default as NavLi,
  NavUl_default as NavUl,
  Navbar_default as Navbar,
  NumberInput_default as NumberInput,
  P_default as P,
  Pagination_default as Pagination,
  PaginationItem_default as PaginationItem,
  Popover_default as Popover,
  Progressbar_default as Progressbar,
  Radio_default as Radio,
  RadioButton_default as RadioButton,
  Range_default as Range,
  Rating_default as Rating,
  RatingComment_default as RatingComment,
  Review_default as Review,
  ScoreRating_default as ScoreRating,
  Search_default as Search,
  Secondary_default as Secondary,
  Select_default as Select,
  Sidebar_default as Sidebar,
  SidebarBrand_default as SidebarBrand,
  SidebarCta_default as SidebarCta,
  SidebarDropdownItem_default as SidebarDropdownItem,
  SidebarDropdownWrapper_default as SidebarDropdownWrapper,
  SidebarGroup_default as SidebarGroup,
  SidebarItem_default as SidebarItem,
  SidebarWrapper_default as SidebarWrapper,
  Skeleton_default as Skeleton,
  Span_default as Span,
  SpeedDial_default as SpeedDial,
  SpeedDialButton_default as SpeedDialButton,
  Spinner_default as Spinner,
  Star_default as Star,
  StepIndicator_default as StepIndicator,
  TabItem_default as TabItem,
  Table_default as Table,
  TableBody_default as TableBody,
  TableBodyCell_default as TableBodyCell,
  TableBodyRow_default as TableBodyRow,
  TableHead_default as TableHead,
  TableHeadCell_default as TableHeadCell,
  TableSearch_default as TableSearch,
  Tabs_default as Tabs,
  TestimonialPlaceholder_default as TestimonialPlaceholder,
  TextPlaceholder_default as TextPlaceholder,
  Textarea_default as Textarea,
  Thumbnails_default as Thumbnails,
  Thumbup_default as Thumbup,
  Timeline_default as Timeline,
  TimelineItem_default as TimelineItem,
  Toast_default as Toast,
  Toggle_default as Toggle,
  Toolbar_default as Toolbar,
  ToolbarButton_default as ToolbarButton,
  ToolbarGroup_default as ToolbarGroup,
  Tooltip_default as Tooltip,
  TransitionFrame_default as TransitionFrame,
  Video_default as Video,
  VideoPlaceholder_default as VideoPlaceholder,
  WidgetPlaceholder_default as WidgetPlaceholder
};
//# sourceMappingURL=flowbite-svelte.js.map
