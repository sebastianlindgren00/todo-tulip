import {
  DEV
} from "./chunk-PLGELRID.js";

// node_modules/.pnpm/svelte@5.0.0-next.123/node_modules/svelte/src/constants.js
var EACH_ITEM_REACTIVE = 1;
var EACH_INDEX_REACTIVE = 1 << 1;
var EACH_KEYED = 1 << 2;
var EACH_IS_CONTROLLED = 1 << 3;
var EACH_IS_ANIMATED = 1 << 4;
var EACH_IS_STRICT_EQUALS = 1 << 6;
var PROPS_IS_IMMUTABLE = 1;
var PROPS_IS_RUNES = 1 << 1;
var PROPS_IS_UPDATED = 1 << 2;
var PROPS_IS_LAZY_INITIAL = 1 << 3;
var TRANSITION_IN = 1;
var TRANSITION_OUT = 1 << 1;
var TRANSITION_GLOBAL = 1 << 2;
var TEMPLATE_FRAGMENT = 1;
var TEMPLATE_USE_IMPORT_NODE = 1 << 1;
var HYDRATION_START = "[";
var HYDRATION_END = "]";
var HYDRATION_END_ELSE = `${HYDRATION_END}!`;
var UNINITIALIZED = Symbol();
var RawTextElements = ["textarea", "script", "style", "title"];
var DelegatedEvents = [
  "beforeinput",
  "click",
  "dblclick",
  "contextmenu",
  "focusin",
  "focusout",
  // 'input', This conflicts with bind:input
  "keydown",
  "keyup",
  "mousedown",
  "mousemove",
  "mouseout",
  "mouseover",
  "mouseup",
  "pointerdown",
  "pointermove",
  "pointerout",
  "pointerover",
  "pointerup",
  "touchend",
  "touchmove",
  "touchstart"
];
var PassiveDelegatedEvents = ["touchstart", "touchmove", "touchend"];
var AttributeAliases = {
  // no `class: 'className'` because we handle that separately
  formnovalidate: "formNoValidate",
  ismap: "isMap",
  nomodule: "noModule",
  playsinline: "playsInline",
  readonly: "readOnly"
};
var DOMBooleanAttributes = [
  "allowfullscreen",
  "async",
  "autofocus",
  "autoplay",
  "checked",
  "controls",
  "default",
  "disabled",
  "formnovalidate",
  "hidden",
  "indeterminate",
  "ismap",
  "loop",
  "multiple",
  "muted",
  "nomodule",
  "novalidate",
  "open",
  "playsinline",
  "readonly",
  "required",
  "reversed",
  "seamless",
  "selected",
  "webkitdirectory"
];
var namespace_svg = "http://www.w3.org/2000/svg";
var interactive_elements = /* @__PURE__ */ new Set([
  "a",
  "button",
  "iframe",
  "embed",
  "select",
  "textarea"
]);
var disallowed_paragraph_contents = [
  "address",
  "article",
  "aside",
  "blockquote",
  "details",
  "div",
  "dl",
  "fieldset",
  "figcapture",
  "figure",
  "footer",
  "form",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "header",
  "hr",
  "menu",
  "nav",
  "ol",
  "pre",
  "section",
  "table",
  "ul"
];
var implied_end_tags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
function is_tag_valid_with_parent(tag, parent_tag) {
  switch (parent_tag) {
    case "select":
      return tag === "option" || tag === "optgroup" || tag === "#text" || tag === "hr" || tag === "script" || tag === "template";
    case "optgroup":
      return tag === "option" || tag === "#text";
    case "option":
      return tag === "#text";
    case "tr":
      return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
    case "tbody":
    case "thead":
    case "tfoot":
      return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
    case "colgroup":
      return tag === "col" || tag === "template";
    case "table":
      return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
    case "head":
      return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
    case "html":
      return tag === "head" || tag === "body" || tag === "frameset";
    case "frameset":
      return tag === "frame";
    case "#document":
      return tag === "html";
  }
  switch (tag) {
    case "h1":
    case "h2":
    case "h3":
    case "h4":
    case "h5":
    case "h6":
      return parent_tag !== "h1" && parent_tag !== "h2" && parent_tag !== "h3" && parent_tag !== "h4" && parent_tag !== "h5" && parent_tag !== "h6";
    case "rp":
    case "rt":
      return implied_end_tags.indexOf(parent_tag) === -1;
    case "body":
    case "caption":
    case "col":
    case "colgroup":
    case "frameset":
    case "frame":
    case "head":
    case "html":
    case "tbody":
    case "td":
    case "tfoot":
    case "th":
    case "thead":
    case "tr":
      return parent_tag == null;
  }
  return true;
}

// node_modules/.pnpm/svelte@5.0.0-next.123/node_modules/svelte/src/internal/shared/errors.js
function lifecycle_outside_component(name) {
  if (DEV) {
    const error = new Error(`${"lifecycle_outside_component"}
${`\`${name}(...)\` can only be used during component initialisation`}`);
    error.name = "Svelte error";
    throw error;
  } else {
    throw new Error("lifecycle_outside_component");
  }
}
function render_tag_invalid_argument() {
  if (DEV) {
    const error = new Error(`${"render_tag_invalid_argument"}
${"The argument to `{@render ...}` must be a snippet function, not a component or some other kind of function. If you want to dynamically render one snippet or another, use `$derived` and pass its result to `{@render ...}`"}`);
    error.name = "Svelte error";
    throw error;
  } else {
    throw new Error("render_tag_invalid_argument");
  }
}
function snippet_used_as_component() {
  if (DEV) {
    const error = new Error(`${"snippet_used_as_component"}
${"A snippet must be rendered with `{@render ...}`"}`);
    error.name = "Svelte error";
    throw error;
  } else {
    throw new Error("snippet_used_as_component");
  }
}
function store_invalid_shape(name) {
  if (DEV) {
    const error = new Error(`${"store_invalid_shape"}
${`\`${name}\` is not a store with a \`subscribe\` method`}`);
    error.name = "Svelte error";
    throw error;
  } else {
    throw new Error("store_invalid_shape");
  }
}
function svelte_element_invalid_this_value() {
  if (DEV) {
    const error = new Error(`${"svelte_element_invalid_this_value"}
${"The `this` prop on `<svelte:element>` must be a string, if defined"}`);
    error.name = "Svelte error";
    throw error;
  } else {
    throw new Error("svelte_element_invalid_this_value");
  }
}

// node_modules/.pnpm/svelte@5.0.0-next.123/node_modules/svelte/src/compiler/phases/1-parse/utils/names.js
var void_element_names = [
  "area",
  "base",
  "br",
  "col",
  "command",
  "embed",
  "hr",
  "img",
  "input",
  "keygen",
  "link",
  "meta",
  "param",
  "source",
  "track",
  "wbr"
];
function is_void(name) {
  return void_element_names.includes(name) || name.toLowerCase() === "!doctype";
}

// node_modules/.pnpm/svelte@5.0.0-next.123/node_modules/svelte/src/internal/shared/warnings.js
var bold = "font-weight: bold";
var normal = "font-weight: normal";
function dynamic_void_element_content(trace, tag) {
  if (DEV) {
    console.warn(`%c[svelte] ${"dynamic_void_element_content"}
%c${`\`<svelte:element this="${tag}">\` is a void element â€” it cannot have content`}`, bold, normal);
    if (trace)
      console.trace("stack trace");
  } else {
    console.warn("dynamic_void_element_content");
  }
}

// node_modules/.pnpm/svelte@5.0.0-next.123/node_modules/svelte/src/internal/shared/validate.js
var snippet_symbol = Symbol.for("svelte.snippet");
function add_snippet_symbol(fn) {
  fn[snippet_symbol] = true;
  return fn;
}
function validate_snippet(snippet_fn) {
  if (snippet_fn && snippet_fn[snippet_symbol] !== true) {
    render_tag_invalid_argument();
  }
  return snippet_fn;
}
function validate_component(component_fn) {
  if ((component_fn == null ? void 0 : component_fn[snippet_symbol]) === true) {
    snippet_used_as_component();
  }
  return component_fn;
}
function validate_void_dynamic_element(tag_fn) {
  const tag = tag_fn();
  if (tag && is_void(tag)) {
    dynamic_void_element_content(false, tag);
  }
}
function validate_dynamic_element_tag(tag_fn) {
  const tag = tag_fn();
  const is_string = typeof tag === "string";
  if (tag && !is_string) {
    svelte_element_invalid_this_value();
  }
}
function validate_store(store, name) {
  if (store != null && typeof store.subscribe !== "function") {
    store_invalid_shape(name);
  }
}

export {
  EACH_ITEM_REACTIVE,
  EACH_INDEX_REACTIVE,
  EACH_KEYED,
  EACH_IS_CONTROLLED,
  EACH_IS_ANIMATED,
  EACH_IS_STRICT_EQUALS,
  PROPS_IS_IMMUTABLE,
  PROPS_IS_RUNES,
  PROPS_IS_UPDATED,
  PROPS_IS_LAZY_INITIAL,
  TRANSITION_IN,
  TRANSITION_OUT,
  TRANSITION_GLOBAL,
  TEMPLATE_FRAGMENT,
  TEMPLATE_USE_IMPORT_NODE,
  HYDRATION_START,
  HYDRATION_END,
  HYDRATION_END_ELSE,
  UNINITIALIZED,
  RawTextElements,
  DelegatedEvents,
  PassiveDelegatedEvents,
  AttributeAliases,
  DOMBooleanAttributes,
  namespace_svg,
  interactive_elements,
  disallowed_paragraph_contents,
  is_tag_valid_with_parent,
  lifecycle_outside_component,
  add_snippet_symbol,
  validate_snippet,
  validate_component,
  validate_void_dynamic_element,
  validate_dynamic_element_tag,
  validate_store
};
//# sourceMappingURL=chunk-76O4YZNF.js.map
